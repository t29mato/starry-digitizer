var EE = Object.defineProperty;
var xE = (s, e, t) => e in s ? EE(s, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : s[e] = t;
var De = (s, e, t) => (xE(s, typeof e != "symbol" ? e + "" : e, t), t), Lh = (s, e, t) => {
  if (!e.has(s))
    throw TypeError("Cannot " + t);
};
var st = (s, e, t) => (Lh(s, e, "read from private field"), t ? t.call(s) : e.get(s)), go = (s, e, t) => {
  if (e.has(s))
    throw TypeError("Cannot add the same private member more than once");
  e instanceof WeakSet ? e.add(s) : e.set(s, t);
}, vr = (s, e, t, n) => (Lh(s, e, "write to private field"), n ? n.call(s, t) : e.set(s, t), t);
var ow = (s, e, t) => (Lh(s, e, "access private method"), t);
import { hasInjectionContext as TE, inject as ME, getCurrentInstance as _E, ref as Py, watch as IE, reactive as OE, markRaw as Bo, effectScope as AE, isRef as oa, isReactive as Of, toRef as $h, toRaw as PE, nextTick as rw, computed as Dy, getCurrentScope as DE, onScopeDispose as HE, toRefs as aw, defineComponent as Je, openBlock as we, createElementBlock as ke, normalizeStyle as Et, createElementVNode as Re, toDisplayString as ns, resolveComponent as ce, createVNode as te, createCommentVNode as Ot, createBlock as bs, withCtx as ye, createTextVNode as xt, Fragment as Fc, renderList as Vc, pushScopeId as Hy, popScopeId as ky, normalizeClass as lw, renderSlot as kE } from "vue";
var NE = !1;
function ja(s, e, t) {
  return Array.isArray(s) ? (s.length = Math.max(s.length, e), s.splice(e, 1, t), t) : (s[e] = t, t);
}
function Fh(s, e) {
  if (Array.isArray(s)) {
    s.splice(e, 1);
    return;
  }
  delete s[e];
}
/*!
 * pinia v2.1.6
 * (c) 2023 Eduardo San Martin Morote
 * @license MIT
 */
let Br;
const ic = (s) => Br = s, LE = process.env.NODE_ENV !== "production" ? Symbol("pinia") : (
  /* istanbul ignore next */
  Symbol()
);
function Xi(s) {
  return s && typeof s == "object" && Object.prototype.toString.call(s) === "[object Object]" && typeof s.toJSON != "function";
}
var Gr;
(function(s) {
  s.direct = "direct", s.patchObject = "patch object", s.patchFunction = "patch function";
})(Gr || (Gr = {}));
const Af = typeof window < "u", Vh = (process.env.NODE_ENV !== "production" || !1) && process.env.NODE_ENV !== "test" && Af;
function Ny(s, e) {
  for (const t in e) {
    const n = e[t];
    if (!(t in s))
      continue;
    const o = s[t];
    Xi(o) && Xi(n) && !oa(n) && !Of(n) ? s[t] = Ny(o, n) : s[t] = n;
  }
  return s;
}
const Ly = () => {
};
function cw(s, e, t, n = Ly) {
  s.push(e);
  const o = () => {
    const r = s.indexOf(e);
    r > -1 && (s.splice(r, 1), n());
  };
  return !t && DE() && HE(o), o;
}
function mo(s, ...e) {
  s.slice().forEach((t) => {
    t(...e);
  });
}
const $E = (s) => s();
function Ad(s, e) {
  s instanceof Map && e instanceof Map && e.forEach((t, n) => s.set(n, t)), s instanceof Set && e instanceof Set && e.forEach(s.add, s);
  for (const t in e) {
    if (!e.hasOwnProperty(t))
      continue;
    const n = e[t], o = s[t];
    Xi(o) && Xi(n) && s.hasOwnProperty(t) && !oa(n) && !Of(n) ? s[t] = Ad(o, n) : s[t] = n;
  }
  return s;
}
const FE = process.env.NODE_ENV !== "production" ? Symbol("pinia:skipHydration") : (
  /* istanbul ignore next */
  Symbol()
);
function VE(s) {
  return !Xi(s) || !s.hasOwnProperty(FE);
}
const { assign: Ls } = Object;
function hw(s) {
  return !!(oa(s) && s.effect);
}
function uw(s, e, t, n) {
  const { state: o, actions: r, getters: a } = e, l = t.state.value[s];
  let c;
  function h() {
    !l && (process.env.NODE_ENV === "production" || !n) && (t.state.value[s] = o ? o() : {});
    const u = process.env.NODE_ENV !== "production" && n ? (
      // use ref() to unwrap refs inside state TODO: check if this is still necessary
      aw(Py(o ? o() : {}).value)
    ) : aw(t.state.value[s]);
    return Ls(u, r, Object.keys(a || {}).reduce((f, g) => (process.env.NODE_ENV !== "production" && g in u && console.warn(`[🍍]: A getter cannot have the same name as another state property. Rename one of them. Found with "${g}" in store "${s}".`), f[g] = Bo(Dy(() => {
      ic(t);
      const m = t._s.get(s);
      return a[g].call(m, m);
    })), f), {}));
  }
  return c = Pd(s, h, e, t, n, !0), c;
}
function Pd(s, e, t = {}, n, o, r) {
  let a;
  const l = Ls({ actions: {} }, t);
  if (process.env.NODE_ENV !== "production" && !n._e.active)
    throw new Error("Pinia destroyed");
  const c = {
    deep: !0
    // flush: 'post',
  };
  process.env.NODE_ENV !== "production" && !NE && (c.onTrigger = (F) => {
    h ? m = F : h == !1 && !H._hotUpdating && (Array.isArray(m) ? m.push(F) : console.error("🍍 debuggerEvents should be an array. This is most likely an internal Pinia bug."));
  });
  let h, u, f = [], g = [], m;
  const w = n.state.value[s];
  !r && !w && (process.env.NODE_ENV === "production" || !o) && (n.state.value[s] = {});
  const C = Py({});
  let S;
  function x(F) {
    let z;
    h = u = !1, process.env.NODE_ENV !== "production" && (m = []), typeof F == "function" ? (F(n.state.value[s]), z = {
      type: Gr.patchFunction,
      storeId: s,
      events: m
    }) : (Ad(n.state.value[s], F), z = {
      type: Gr.patchObject,
      payload: F,
      storeId: s,
      events: m
    });
    const ee = S = Symbol();
    rw().then(() => {
      S === ee && (h = !0);
    }), u = !0, mo(f, z, n.state.value[s]);
  }
  const T = r ? function() {
    const { state: z } = t, ee = z ? z() : {};
    this.$patch((oe) => {
      Ls(oe, ee);
    });
  } : (
    /* istanbul ignore next */
    process.env.NODE_ENV !== "production" ? () => {
      throw new Error(`🍍: Store "${s}" is built using the setup syntax and does not implement $reset().`);
    } : Ly
  );
  function M() {
    a.stop(), f = [], g = [], n._s.delete(s);
  }
  function _(F, z) {
    return function() {
      ic(n);
      const ee = Array.from(arguments), oe = [], fe = [];
      function Ae(R) {
        oe.push(R);
      }
      function Ze(R) {
        fe.push(R);
      }
      mo(g, {
        args: ee,
        name: F,
        store: H,
        after: Ae,
        onError: Ze
      });
      let He;
      try {
        He = z.apply(this && this.$id === s ? this : H, ee);
      } catch (R) {
        throw mo(fe, R), R;
      }
      return He instanceof Promise ? He.then((R) => (mo(oe, R), R)).catch((R) => (mo(fe, R), Promise.reject(R))) : (mo(oe, He), He);
    };
  }
  const P = /* @__PURE__ */ Bo({
    actions: {},
    getters: {},
    state: [],
    hotState: C
  }), j = {
    _p: n,
    // _s: scope,
    $id: s,
    $onAction: cw.bind(null, g),
    $patch: x,
    $reset: T,
    $subscribe(F, z = {}) {
      const ee = cw(f, F, z.detached, () => oe()), oe = a.run(() => IE(() => n.state.value[s], (fe) => {
        (z.flush === "sync" ? u : h) && F({
          storeId: s,
          type: Gr.direct,
          events: m
        }, fe);
      }, Ls({}, c, z)));
      return ee;
    },
    $dispose: M
  }, H = OE(process.env.NODE_ENV !== "production" || Vh ? Ls(
    {
      _hmrPayload: P,
      _customProperties: Bo(/* @__PURE__ */ new Set())
      // devtools custom properties
    },
    j
    // must be added later
    // setupStore
  ) : j);
  n._s.set(s, H);
  const Z = n._a && n._a.runWithContext || $E, X = n._e.run(() => (a = AE(), Z(() => a.run(e))));
  for (const F in X) {
    const z = X[F];
    if (oa(z) && !hw(z) || Of(z))
      process.env.NODE_ENV !== "production" && o ? ja(C.value, F, $h(X, F)) : r || (w && VE(z) && (oa(z) ? z.value = w[F] : Ad(z, w[F])), n.state.value[s][F] = z), process.env.NODE_ENV !== "production" && P.state.push(F);
    else if (typeof z == "function") {
      const ee = process.env.NODE_ENV !== "production" && o ? z : _(F, z);
      X[F] = ee, process.env.NODE_ENV !== "production" && (P.actions[F] = z), l.actions[F] = z;
    } else
      process.env.NODE_ENV !== "production" && hw(z) && (P.getters[F] = r ? (
        // @ts-expect-error
        t.getters[F]
      ) : z, Af && (X._getters || // @ts-expect-error: same
      (X._getters = Bo([]))).push(F));
  }
  if (Ls(H, X), Ls(PE(H), X), Object.defineProperty(H, "$state", {
    get: () => process.env.NODE_ENV !== "production" && o ? C.value : n.state.value[s],
    set: (F) => {
      if (process.env.NODE_ENV !== "production" && o)
        throw new Error("cannot set hotState");
      x((z) => {
        Ls(z, F);
      });
    }
  }), process.env.NODE_ENV !== "production" && (H._hotUpdate = Bo((F) => {
    H._hotUpdating = !0, F._hmrPayload.state.forEach((z) => {
      if (z in H.$state) {
        const ee = F.$state[z], oe = H.$state[z];
        typeof ee == "object" && Xi(ee) && Xi(oe) ? Ny(ee, oe) : F.$state[z] = oe;
      }
      ja(H, z, $h(F.$state, z));
    }), Object.keys(H.$state).forEach((z) => {
      z in F.$state || Fh(H, z);
    }), h = !1, u = !1, n.state.value[s] = $h(F._hmrPayload, "hotState"), u = !0, rw().then(() => {
      h = !0;
    });
    for (const z in F._hmrPayload.actions) {
      const ee = F[z];
      ja(H, z, _(z, ee));
    }
    for (const z in F._hmrPayload.getters) {
      const ee = F._hmrPayload.getters[z], oe = r ? (
        // special handling of options api
        Dy(() => (ic(n), ee.call(H, H)))
      ) : ee;
      ja(H, z, oe);
    }
    Object.keys(H._hmrPayload.getters).forEach((z) => {
      z in F._hmrPayload.getters || Fh(H, z);
    }), Object.keys(H._hmrPayload.actions).forEach((z) => {
      z in F._hmrPayload.actions || Fh(H, z);
    }), H._hmrPayload = F._hmrPayload, H._getters = F._getters, H._hotUpdating = !1;
  })), Vh) {
    const F = {
      writable: !0,
      configurable: !0,
      // avoid warning on devtools trying to display this property
      enumerable: !1
    };
    ["_p", "_hmrPayload", "_getters", "_customProperties"].forEach((z) => {
      Object.defineProperty(H, z, Ls({ value: H[z] }, F));
    });
  }
  return n._p.forEach((F) => {
    if (Vh) {
      const z = a.run(() => F({
        store: H,
        app: n._a,
        pinia: n,
        options: l
      }));
      Object.keys(z || {}).forEach((ee) => H._customProperties.add(ee)), Ls(H, z);
    } else
      Ls(H, a.run(() => F({
        store: H,
        app: n._a,
        pinia: n,
        options: l
      })));
  }), process.env.NODE_ENV !== "production" && H.$state && typeof H.$state == "object" && typeof H.$state.constructor == "function" && !H.$state.constructor.toString().includes("[native code]") && console.warn(`[🍍]: The "state" must be a plain object. It cannot be
	state: () => new MyClass()
Found in store "${H.$id}".`), w && r && t.hydrate && t.hydrate(H.$state, w), h = !0, u = !0, H;
}
function yi(s, e, t) {
  let n, o;
  const r = typeof e == "function";
  if (typeof s == "string")
    n = s, o = r ? t : e;
  else if (o = s, n = s.id, process.env.NODE_ENV !== "production" && typeof n != "string")
    throw new Error('[🍍]: "defineStore()" must be passed a store id as its first argument.');
  function a(l, c) {
    const h = TE();
    if (l = // in test mode, ignore the argument provided as we can always retrieve a
    // pinia instance with getActivePinia()
    (process.env.NODE_ENV === "test" && Br && Br._testing ? null : l) || (h ? ME(LE, null) : null), l && ic(l), process.env.NODE_ENV !== "production" && !Br)
      throw new Error(`[🍍]: "getActivePinia()" was called but there was no active Pinia. Did you forget to install pinia?
	const pinia = createPinia()
	app.use(pinia)
This will fail in production.`);
    l = Br, l._s.has(n) || (r ? Pd(n, e, o, l) : uw(n, o, l), process.env.NODE_ENV !== "production" && (a._pinia = l));
    const u = l._s.get(n);
    if (process.env.NODE_ENV !== "production" && c) {
      const f = "__hot:" + n, g = r ? Pd(f, e, o, l, !0) : uw(f, Ls({}, o), l, !0);
      c._hotUpdate(g), delete l.state.value[f], l._s.delete(f);
    }
    if (process.env.NODE_ENV !== "production" && Af) {
      const f = _E();
      if (f && f.proxy && // avoid adding stores that are just built for hot module replacement
      !c) {
        const g = f.proxy, m = "_pStores" in g ? g._pStores : g._pStores = {};
        m[n] = u;
      }
    }
    return u;
  }
  return a.$id = n, a;
}
function Me(s, e) {
  return Array.isArray(e) ? e.reduce((t, n) => (t[n] = function() {
    return s(this.$pinia)[n];
  }, t), {}) : Object.keys(e).reduce((t, n) => (t[n] = function() {
    const o = s(this.$pinia), r = e[n];
    return typeof r == "function" ? r.call(this, o) : o[r];
  }, t), {});
}
function Tt(s, e) {
  return Array.isArray(e) ? e.reduce((t, n) => (t[n] = function(...o) {
    return s(this.$pinia)[n](...o);
  }, t), {}) : Object.keys(e).reduce((t, n) => (t[n] = function(...o) {
    return s(this.$pinia)[e[n]](...o);
  }, t), {});
}
class BE {
  constructor() {
    De(this, "scale", 5);
    De(this, "magnifierSettingError", "");
    De(this, "crosshairSizePx", 1);
    De(this, "sizePx", 200);
  }
  setScale(e) {
    this.scale = e;
  }
}
const jn = yi("magnifier", {
  state: () => ({
    magnifier: new BE()
  }),
  getters: {
    //MEMO: Piniaでこの書き方だと循環参照してしまう。そもそも不要？
    // magnifier() {
    //   return this.magnifier
    // },
  },
  actions: {
    setScale(s) {
      this.magnifier.setScale(s);
    }
  }
}), WE = Je({
  computed: {
    ...Me(jn, ["magnifier"]),
    // INFO: 十字線を作成する箱の横幅
    width() {
      return (this.magnifier.sizePx - this.magnifier.crosshairSizePx) / 2;
    }
  }
}), it = (s, e) => {
  const t = s.__vccOpts || s;
  for (const [n, o] of e)
    t[n] = o;
  return t;
};
function UE(s, e, t, n, o, r) {
  return we(), ke("div", {
    style: Et({
      position: "absolute",
      top: "0px",
      left: "0px",
      width: `${s.width}px`,
      height: `${s.magnifier.sizePx}px`,
      outline: "1px solid grey"
    })
  }, null, 4);
}
const zE = /* @__PURE__ */ it(WE, [["render", UE]]), YE = Je({
  computed: {
    ...Me(jn, ["magnifier"]),
    // INFO: 十字線を作成する箱の横幅
    height() {
      return (this.magnifier.sizePx - this.magnifier.crosshairSizePx) / 2;
    }
  }
});
function GE(s, e, t, n, o, r) {
  return we(), ke("div", {
    style: Et({
      position: "absolute",
      top: "0px",
      left: "0px",
      width: `${s.magnifier.sizePx}px`,
      height: `${s.height}px`,
      outline: "1px solid grey"
    })
  }, null, 4);
}
const jE = /* @__PURE__ */ it(YE, [["render", GE]]);
if (!Fn)
  var Fn = { map: function(s, e) {
    var t = {};
    return e ? s.map(function(n, o) {
      return t.index = o, e.call(t, n);
    }) : s.slice();
  }, naturalOrder: function(s, e) {
    return s < e ? -1 : s > e ? 1 : 0;
  }, sum: function(s, e) {
    var t = {};
    return s.reduce(e ? function(n, o, r) {
      return t.index = r, n + e.call(t, o);
    } : function(n, o) {
      return n + o;
    }, 0);
  }, max: function(s, e) {
    return Math.max.apply(null, e ? Fn.map(s, e) : s);
  } };
var KE = function() {
  var s = 5, e = 8 - s, t = 1e3;
  function n(c, h, u) {
    return (c << 2 * s) + (h << s) + u;
  }
  function o(c) {
    var h = [], u = !1;
    function f() {
      h.sort(c), u = !0;
    }
    return { push: function(g) {
      h.push(g), u = !1;
    }, peek: function(g) {
      return u || f(), g === void 0 && (g = h.length - 1), h[g];
    }, pop: function() {
      return u || f(), h.pop();
    }, size: function() {
      return h.length;
    }, map: function(g) {
      return h.map(g);
    }, debug: function() {
      return u || f(), h;
    } };
  }
  function r(c, h, u, f, g, m, w) {
    var C = this;
    C.r1 = c, C.r2 = h, C.g1 = u, C.g2 = f, C.b1 = g, C.b2 = m, C.histo = w;
  }
  function a() {
    this.vboxes = new o(function(c, h) {
      return Fn.naturalOrder(c.vbox.count() * c.vbox.volume(), h.vbox.count() * h.vbox.volume());
    });
  }
  function l(c, h) {
    if (h.count()) {
      var u = h.r2 - h.r1 + 1, f = h.g2 - h.g1 + 1, g = Fn.max([u, f, h.b2 - h.b1 + 1]);
      if (h.count() == 1)
        return [h.copy()];
      var m, w, C, S, x = 0, T = [], M = [];
      if (g == u)
        for (m = h.r1; m <= h.r2; m++) {
          for (S = 0, w = h.g1; w <= h.g2; w++)
            for (C = h.b1; C <= h.b2; C++)
              S += c[n(m, w, C)] || 0;
          T[m] = x += S;
        }
      else if (g == f)
        for (m = h.g1; m <= h.g2; m++) {
          for (S = 0, w = h.r1; w <= h.r2; w++)
            for (C = h.b1; C <= h.b2; C++)
              S += c[n(w, m, C)] || 0;
          T[m] = x += S;
        }
      else
        for (m = h.b1; m <= h.b2; m++) {
          for (S = 0, w = h.r1; w <= h.r2; w++)
            for (C = h.g1; C <= h.g2; C++)
              S += c[n(w, C, m)] || 0;
          T[m] = x += S;
        }
      return T.forEach(function(_, P) {
        M[P] = x - _;
      }), function(_) {
        var P, j, H, Z, X, F = _ + "1", z = _ + "2", ee = 0;
        for (m = h[F]; m <= h[z]; m++)
          if (T[m] > x / 2) {
            for (H = h.copy(), Z = h.copy(), X = (P = m - h[F]) <= (j = h[z] - m) ? Math.min(h[z] - 1, ~~(m + j / 2)) : Math.max(h[F], ~~(m - 1 - P / 2)); !T[X]; )
              X++;
            for (ee = M[X]; !ee && T[X - 1]; )
              ee = M[--X];
            return H[z] = X, Z[F] = H[z] + 1, [H, Z];
          }
      }(g == u ? "r" : g == f ? "g" : "b");
    }
  }
  return r.prototype = { volume: function(c) {
    var h = this;
    return h._volume && !c || (h._volume = (h.r2 - h.r1 + 1) * (h.g2 - h.g1 + 1) * (h.b2 - h.b1 + 1)), h._volume;
  }, count: function(c) {
    var h = this, u = h.histo;
    if (!h._count_set || c) {
      var f, g, m, w = 0;
      for (f = h.r1; f <= h.r2; f++)
        for (g = h.g1; g <= h.g2; g++)
          for (m = h.b1; m <= h.b2; m++)
            w += u[n(f, g, m)] || 0;
      h._count = w, h._count_set = !0;
    }
    return h._count;
  }, copy: function() {
    var c = this;
    return new r(c.r1, c.r2, c.g1, c.g2, c.b1, c.b2, c.histo);
  }, avg: function(c) {
    var h = this, u = h.histo;
    if (!h._avg || c) {
      var f, g, m, w, C = 0, S = 1 << 8 - s, x = 0, T = 0, M = 0;
      for (g = h.r1; g <= h.r2; g++)
        for (m = h.g1; m <= h.g2; m++)
          for (w = h.b1; w <= h.b2; w++)
            C += f = u[n(g, m, w)] || 0, x += f * (g + 0.5) * S, T += f * (m + 0.5) * S, M += f * (w + 0.5) * S;
      h._avg = C ? [~~(x / C), ~~(T / C), ~~(M / C)] : [~~(S * (h.r1 + h.r2 + 1) / 2), ~~(S * (h.g1 + h.g2 + 1) / 2), ~~(S * (h.b1 + h.b2 + 1) / 2)];
    }
    return h._avg;
  }, contains: function(c) {
    var h = this, u = c[0] >> e;
    return gval = c[1] >> e, bval = c[2] >> e, u >= h.r1 && u <= h.r2 && gval >= h.g1 && gval <= h.g2 && bval >= h.b1 && bval <= h.b2;
  } }, a.prototype = { push: function(c) {
    this.vboxes.push({ vbox: c, color: c.avg() });
  }, palette: function() {
    return this.vboxes.map(function(c) {
      return c.color;
    });
  }, size: function() {
    return this.vboxes.size();
  }, map: function(c) {
    for (var h = this.vboxes, u = 0; u < h.size(); u++)
      if (h.peek(u).vbox.contains(c))
        return h.peek(u).color;
    return this.nearest(c);
  }, nearest: function(c) {
    for (var h, u, f, g = this.vboxes, m = 0; m < g.size(); m++)
      ((u = Math.sqrt(Math.pow(c[0] - g.peek(m).color[0], 2) + Math.pow(c[1] - g.peek(m).color[1], 2) + Math.pow(c[2] - g.peek(m).color[2], 2))) < h || h === void 0) && (h = u, f = g.peek(m).color);
    return f;
  }, forcebw: function() {
    var c = this.vboxes;
    c.sort(function(g, m) {
      return Fn.naturalOrder(Fn.sum(g.color), Fn.sum(m.color));
    });
    var h = c[0].color;
    h[0] < 5 && h[1] < 5 && h[2] < 5 && (c[0].color = [0, 0, 0]);
    var u = c.length - 1, f = c[u].color;
    f[0] > 251 && f[1] > 251 && f[2] > 251 && (c[u].color = [255, 255, 255]);
  } }, { quantize: function(c, h) {
    if (!c.length || h < 2 || h > 256)
      return !1;
    var u = function(S) {
      var x, T = new Array(1 << 3 * s);
      return S.forEach(function(M) {
        x = n(M[0] >> e, M[1] >> e, M[2] >> e), T[x] = (T[x] || 0) + 1;
      }), T;
    }(c);
    u.forEach(function() {
    });
    var f = function(S, x) {
      var T, M, _, P = 1e6, j = 0, H = 1e6, Z = 0, X = 1e6, F = 0;
      return S.forEach(function(z) {
        (T = z[0] >> e) < P ? P = T : T > j && (j = T), (M = z[1] >> e) < H ? H = M : M > Z && (Z = M), (_ = z[2] >> e) < X ? X = _ : _ > F && (F = _);
      }), new r(P, j, H, Z, X, F, x);
    }(c, u), g = new o(function(S, x) {
      return Fn.naturalOrder(S.count(), x.count());
    });
    function m(S, x) {
      for (var T, M = S.size(), _ = 0; _ < t; ) {
        if (M >= x || _++ > t)
          return;
        if ((T = S.pop()).count()) {
          var P = l(u, T), j = P[0], H = P[1];
          if (!j)
            return;
          S.push(j), H && (S.push(H), M++);
        } else
          S.push(T), _++;
      }
    }
    g.push(f), m(g, 0.75 * h);
    for (var w = new o(function(S, x) {
      return Fn.naturalOrder(S.count() * S.volume(), x.count() * x.volume());
    }); g.size(); )
      w.push(g.pop());
    m(w, h);
    for (var C = new a(); w.size(); )
      C.push(w.pop());
    return C;
  } };
}().quantize, $y = function(s) {
  this.canvas = document.createElement("canvas"), this.context = this.canvas.getContext("2d"), this.width = this.canvas.width = s.naturalWidth, this.height = this.canvas.height = s.naturalHeight, this.context.drawImage(s, 0, 0, this.width, this.height);
};
$y.prototype.getImageData = function() {
  return this.context.getImageData(0, 0, this.width, this.height);
};
var $o = function() {
};
$o.prototype.getColor = function(s, e) {
  return e === void 0 && (e = 10), this.getPalette(s, 5, e)[0];
}, $o.prototype.getPalette = function(s, e, t) {
  var n = function(l) {
    var c = l.colorCount, h = l.quality;
    if (c !== void 0 && Number.isInteger(c)) {
      if (c === 1)
        throw new Error("colorCount should be between 2 and 20. To get one color, call getColor() instead of getPalette()");
      c = Math.max(c, 2), c = Math.min(c, 20);
    } else
      c = 10;
    return (h === void 0 || !Number.isInteger(h) || h < 1) && (h = 10), { colorCount: c, quality: h };
  }({ colorCount: e, quality: t }), o = new $y(s), r = function(l, c, h) {
    for (var u, f, g, m, w, C = l, S = [], x = 0; x < c; x += h)
      f = C[0 + (u = 4 * x)], g = C[u + 1], m = C[u + 2], ((w = C[u + 3]) === void 0 || w >= 125) && (f > 250 && g > 250 && m > 250 || S.push([f, g, m]));
    return S;
  }(o.getImageData().data, o.width * o.height, n.quality), a = KE(r, n.colorCount);
  return a ? a.palette() : null;
}, $o.prototype.getColorFromUrl = function(s, e, t) {
  var n = this, o = document.createElement("img");
  o.addEventListener("load", function() {
    var r = n.getPalette(o, 5, t);
    e(r[0], s);
  }), o.src = s;
}, $o.prototype.getImageData = function(s, e) {
  var t = new XMLHttpRequest();
  t.open("GET", s, !0), t.responseType = "arraybuffer", t.onload = function() {
    if (this.status == 200) {
      var n = new Uint8Array(this.response);
      i = n.length;
      for (var o = new Array(i), r = 0; r < n.length; r++)
        o[r] = String.fromCharCode(n[r]);
      var a = o.join(""), l = window.btoa(a);
      e("data:image/png;base64," + l);
    }
  }, t.send();
}, $o.prototype.getColorAsync = function(s, e, t) {
  var n = this;
  this.getImageData(s, function(o) {
    var r = document.createElement("img");
    r.addEventListener("load", function() {
      var a = n.getPalette(r, 5, t);
      e(a[0], this);
    }), r.src = o;
  });
};
var Nc, Fy;
class Ka {
  constructor(e) {
    go(this, Nc);
    De(this, "element");
    this.element = ow(this, Nc, Fy).call(this, e);
  }
  get context() {
    const e = this.element.getContext("2d");
    if (e instanceof CanvasRenderingContext2D)
      return e;
    throw new Error("context is not instance of CanvasRenderingContext2D");
  }
  get colors() {
    return this.context.getImageData(
      0,
      0,
      this.element.width,
      this.element.height
    ).data;
  }
}
Nc = new WeakSet(), Fy = function(e) {
  const t = document.getElementById(e);
  if (t instanceof HTMLCanvasElement)
    return t;
  throw new Error(`element ID ${e} is not instance of a HTMLCanvasElement`);
};
const XE = new $o();
class qE {
  constructor() {
    De(this, "isDrawnMask", !1);
    De(this, "imageElement");
    De(this, "scale", 1);
    De(this, "cursor", { xPx: 0, yPx: 0 });
    De(this, "rectangle", {
      startX: 0,
      startY: 0,
      endX: 0,
      endY: 0
    });
    De(this, "maskMode", -1);
    De(this, "manualMode", -1);
    // INFO: {0: add, 1: Edit, 2: Delete}
    De(this, "penToolSizePx", 50);
    De(this, "eraserSizePx", 30);
    De(this, "uploadImageUrl", "");
    this.imageElement = new Image();
  }
  async initializeImageElement() {
    return new Promise((e, t) => {
      this.imageElement.onload = e, this.imageElement.onerror = (n) => {
        t(n);
      }, this.imageElement.src = "/sample_graph_curve.png";
    });
  }
  getDivElementById(e) {
    const t = document.getElementById(e);
    if (t instanceof HTMLDivElement)
      return t;
    throw new Error(`element ID ${e} is not instance of a HTMLDivElement`);
  }
  get scaledCursor() {
    return {
      xPx: this.cursor.xPx * this.scale,
      yPx: this.cursor.yPx * this.scale
    };
  }
  get scaledPenToolSizePx() {
    return this.penToolSizePx * this.scale;
  }
  get isDrawingMask() {
    switch (this.maskMode) {
      case 0:
      case 1:
      case 2:
        return !0;
      default:
        return !1;
    }
  }
  mouseMove(e, t) {
    switch (this.maskMode) {
      case 0:
        this.mouseMoveForPen(e, t, this.penToolSizePx);
        break;
      case 1:
        this.mouseMoveForBox(e, t);
        break;
      case 2:
        this.mouseMoveForEraser(e, t, this.eraserSizePx);
        break;
    }
  }
  mouseMoveForPen(e, t, n) {
    const o = this.maskCanvas.context;
    o.strokeStyle = "#ffff00ff", o.beginPath(), this.cursor.xPx === 0 ? o.moveTo(e, t) : o.moveTo(this.scaledCursor.xPx + 1e-4, this.scaledCursor.yPx + 1e-4), o.lineTo(e, t), o.lineCap = "round", o.lineWidth = n, o.stroke(), this.isDrawnMask = !0, this.magnifierMaskCanvas.context.drawImage(this.maskCanvas.element, 0, 0);
  }
  mouseMoveForEraser(e, t, n) {
    const o = this.maskCanvas.context;
    o.globalCompositeOperation = "destination-out", o.strokeStyle = "#000000", o.beginPath(), this.scaledCursor.xPx === 0 ? o.moveTo(e, t) : o.moveTo(this.scaledCursor.xPx, this.scaledCursor.yPx), o.lineTo(e, t), o.lineCap = "round", o.lineWidth = n, o.stroke(), this.isDrawnMask = !0, o.globalCompositeOperation = "source-over", this.magnifierMaskCanvas.context.clearRect(
      0,
      0,
      this.maskCanvas.element.width,
      this.maskCanvas.element.height
    ), this.magnifierMaskCanvas.context.drawImage(this.maskCanvas.element, 0, 0);
  }
  mouseDownForBox(e, t) {
    this.rectangle.startY = t, this.rectangle.startX = e;
  }
  mouseMoveForBox(e, t) {
    this.tempMaskCanvas.context.strokeStyle = "#000000ff", this.tempMaskCanvas.context.clearRect(
      0,
      0,
      this.maskCanvas.element.width,
      this.maskCanvas.element.height
    ), this.rectangle.endY = t - this.rectangle.startY, this.rectangle.endX = e - this.rectangle.startX, this.tempMaskCanvas.context.strokeRect(
      this.rectangle.startX,
      this.rectangle.startY,
      this.rectangle.endX,
      this.rectangle.endY
    );
  }
  mouseUpForBox() {
    this.maskCanvas.context.fillStyle = "#ffff00ff", this.maskCanvas.context.fillRect(
      this.rectangle.startX,
      this.rectangle.startY,
      this.rectangle.endX,
      this.rectangle.endY
    ), this.magnifierMaskCanvas.context.drawImage(this.maskCanvas.element, 0, 0), this.isDrawnMask = !0, this.clearRectangle(), this.tempMaskCanvas.context.clearRect(
      0,
      0,
      this.maskCanvas.element.width,
      this.maskCanvas.element.height
    );
  }
  clearRectangle() {
    this.rectangle = {
      startX: 0,
      startY: 0,
      endX: 0,
      endY: 0
    };
  }
  get originalImageCanvasColors() {
    const e = document.createElement("canvas");
    e.setAttribute("width", String(this.originalWidth)), e.setAttribute("height", String(this.originalHeight));
    const t = e.getContext("2d");
    return t.drawImage(
      this.imageElement,
      0,
      0,
      this.originalWidth,
      this.originalHeight
    ), t.getImageData(0, 0, this.originalWidth, this.originalHeight).data;
  }
  get originalSizeMaskCanvasColors() {
    const e = document.createElement("canvas");
    e.setAttribute("width", String(this.originalWidth)), e.setAttribute("height", String(this.originalHeight));
    const t = e.getContext("2d");
    return t.drawImage(
      this.maskCanvas.element,
      0,
      0,
      this.originalWidth,
      this.originalHeight
    ), t.getImageData(0, 0, this.originalWidth, this.originalHeight).data;
  }
  get colorSwatches() {
    if (!this.imageElement)
      throw new Error("imageElement is undefined.");
    return XE.getPalette(this.imageElement).map((e) => e.reduce((t, n) => n.toString(16).length === 1 ? t + "0" + n.toString(16) : t + n.toString(16), "#"));
  }
  changeImage(e) {
    this.imageElement = e, this.drawFitSizeImage();
  }
  clearMask() {
    this.maskCanvas.context.clearRect(
      0,
      0,
      this.maskCanvas.element.width,
      this.maskCanvas.element.height
    ), this.magnifierMaskCanvas.context.clearRect(
      0,
      0,
      this.maskCanvas.element.width,
      this.maskCanvas.element.height
    ), this.isDrawnMask = !1;
  }
  get originalWidth() {
    return this.imageElement.width;
  }
  get originalHeight() {
    return this.imageElement.height;
  }
  get canvasWrapper() {
    return this.getDivElementById("canvasWrapper");
  }
  get imageCanvas() {
    return new Ka("imageCanvas");
  }
  get maskCanvas() {
    return new Ka("maskCanvas");
  }
  get tempMaskCanvas() {
    return new Ka("tempMaskCanvas");
  }
  get magnifierMaskCanvas() {
    return new Ka("magnifierMaskCanvas");
  }
  drawFitSizeImage() {
    const e = this.canvasWrapper.offsetWidth, t = e / this.originalWidth, n = this.originalHeight * t;
    this.resize(e, n), this.scale = t;
  }
  scaleDown() {
    if (this.scale <= 0.1)
      throw new Error("The scale doesn't allow it to be a minus.");
    this.scale = this.scale - 0.1;
    const e = this.originalWidth * this.scale, t = this.originalHeight * this.scale;
    this.resize(e, t);
  }
  scaleUp() {
    this.scale = this.scale + 0.1;
    const e = this.originalWidth * this.scale, t = this.originalHeight * this.scale;
    this.resize(e, t);
  }
  drawOriginalSizeImage() {
    this.resize(this.originalWidth, this.originalHeight), this.scale = 1;
  }
  resize(e, t) {
    const n = document.createElement("canvas"), o = n.getContext(
      "2d"
    );
    n.width = this.maskCanvas.element.width, n.height = this.maskCanvas.element.height, o.drawImage(this.maskCanvas.element, 0, 0), this.maskCanvas.element.width = e, this.maskCanvas.element.height = t, this.maskCanvas.context.drawImage(n, 0, 0, e, t), this.tempMaskCanvas.element.width = e, this.tempMaskCanvas.element.height = t, this.imageCanvas.element.width = e, this.imageCanvas.element.height = t, this.imageCanvas.context.drawImage(this.imageElement, 0, 0, e, t), this.magnifierMaskCanvas.element.width = e, this.magnifierMaskCanvas.element.height = t, this.magnifierMaskCanvas.context.drawImage(
      this.maskCanvas.element,
      0,
      0,
      e,
      t
    );
  }
}
const Pt = yi("canvas", {
  state: () => ({
    canvas: new qE()
  }),
  getters: {
    //MEMO: Piniaでこの書き方だと循環参照してしまう。そもそも不要？
    // canvas() {
    //   return this.canvas
    // },
  },
  actions: {
    scaleUp() {
      this.canvas.scaleUp();
    },
    scaleDown() {
      this.canvas.scaleDown();
    },
    resizeCanvasToOriginal() {
      this.canvas.drawOriginalSizeImage();
    },
    drawFitSizeImage() {
      this.canvas.drawFitSizeImage();
    },
    mouseMoveForPen(s) {
      this.canvas.mouseMoveForPen(s.xPx, s.yPx, s.penSize);
    },
    setCanvasCursor(s) {
      this.canvas.cursor = s;
    },
    setPenToolSizePx(s) {
      this.canvas.penToolSizePx = s;
    },
    setMaskMode(s) {
      this.canvas.maskMode = s, this.canvas.manualMode = -1;
    },
    setManualMode(s) {
      this.canvas.manualMode = s, this.canvas.maskMode = -1;
    },
    setEraserSizePx(s) {
      this.canvas.eraserSizePx = s;
    },
    setUploadImageUrl(s) {
      this.canvas.uploadImageUrl = s;
    },
    mouseMoveOnCanvas(s) {
      this.canvas.mouseMove(s.xPx, s.yPx);
    }
  }
}), ZE = Je({
  computed: {
    ...Me(jn, ["magnifier"]),
    ...Me(Pt, ["canvas"]),
    halfSize() {
      return this.magnifier.sizePx / 2;
    }
  }
}), QE = ["src"];
function JE(s, e, t, n, o, r) {
  return we(), ke("div", null, [
    Re("img", {
      src: s.canvas.uploadImageUrl,
      alt: "the image you uploaded",
      style: Et({
        position: "absolute",
        top: 0,
        left: 0,
        transform: `scale(${s.magnifier.scale}) translate(-${s.canvas.cursor.xPx - s.halfSize / s.magnifier.scale}px, -${s.canvas.cursor.yPx - s.halfSize / s.magnifier.scale}px)`,
        "transform-origin": "top left"
      })
    }, null, 12, QE),
    Re("canvas", {
      id: "magnifierMaskCanvas",
      style: Et({
        position: "absolute",
        top: 0,
        left: 0,
        opacity: 0.5,
        transform: `scale(${s.magnifier.scale / s.canvas.scale}) translate(-${(s.canvas.cursor.xPx - s.halfSize / s.magnifier.scale) * s.canvas.scale}px, -${(s.canvas.cursor.yPx - s.halfSize / s.magnifier.scale) * s.canvas.scale}px)`,
        "transform-origin": "top left"
      })
    }, null, 4)
  ]);
}
const ex = /* @__PURE__ */ it(ZE, [["render", JE]]), tx = Je({
  props: {
    label: String
  }
}), sx = { style: {
  position: "absolute",
  left: "4px",
  top: "8px"
} };
function nx(s, e, t, n, o, r) {
  return we(), ke("div", sx, ns(s.label), 1);
}
const ix = /* @__PURE__ */ it(tx, [["render", nx]]), ox = Je({
  props: {
    label: String
  }
}), rx = { style: {
  position: "absolute",
  left: "-18px",
  top: "-10px"
} };
function ax(s, e, t, n, o, r) {
  return we(), ke("div", rx, ns(s.label), 1);
}
const lx = /* @__PURE__ */ it(ox, [["render", ax]]);
class cx {
  constructor(e, t, n, o, r) {
    De(this, "x1");
    De(this, "x2");
    De(this, "y1");
    De(this, "y2");
    De(this, "x2y2");
    //x2, y2を同時調整するために使う仮想軸
    De(this, "xIsLog", !1);
    De(this, "yIsLog", !1);
    De(this, "activeAxisName", "");
    De(this, "pointMode", 0);
    // INFO: {0: '2Points', 1: '4Points'}
    De(this, "considerGraphTilt", !1);
    De(this, "isAdjusting", !1);
    this.x1 = e, this.x2 = t, this.y1 = n, this.y2 = o, this.x2y2 = r;
  }
  get hasAtLeastOneAxis() {
    return !!(this.x1.coordIsFilled || this.x2.coordIsFilled || this.y1.coordIsFilled || this.y2.coordIsFilled);
  }
  get hasXAxis() {
    return this.x1.coordIsFilled || this.x2.coordIsFilled;
  }
  get hasYAxis() {
    return this.y1.coordIsFilled || this.y2.coordIsFilled;
  }
  get hasOnlyX1Y1Axes() {
    return this.x1.coordIsFilled && this.y1.coordIsFilled && !this.x2.coordIsFilled && !this.y2.coordIsFilled;
  }
  get activeAxis() {
    switch (this.activeAxisName) {
      case "x1":
        return this.x1;
      case "x2":
        return this.x2;
      case "y1":
        return this.y1;
      case "y2":
        return this.y2;
      case "x2y2":
        return this.x2y2;
      default:
        return null;
    }
  }
  get nextAxis() {
    return this.pointMode === 0 && this.hasOnlyX1Y1Axes ? this.x2y2 : this.x1.coordIsFilled ? this.x2.coordIsFilled ? this.y1.coordIsFilled ? this.y2.coordIsFilled ? null : this.y2 : this.y1 : this.x2 : this.x1;
  }
  moveActiveAxis(e) {
    if (!this.activeAxis || !this.activeAxis.coord)
      throw new Error("active axis's coord is undefined");
    switch (this.isAdjusting = !0, e.direction) {
      case "up":
        this.activeAxis.coord.yPx -= e.distancePx, this.activeAxis.name === "x2y2" && (this.y2.coord.yPx -= e.distancePx);
        break;
      case "right":
        this.activeAxis.coord.xPx += e.distancePx, this.activeAxis.name === "x2y2" && (this.x2.coord.xPx += e.distancePx);
        break;
      case "down":
        this.activeAxis.coord.yPx += e.distancePx, this.activeAxis.name === "x2y2" && (this.y2.coord.yPx += e.distancePx);
        break;
      case "left":
        this.activeAxis.coord.xPx -= e.distancePx, this.activeAxis.name === "x2y2" && (this.x2.coord.xPx -= e.distancePx);
        break;
      default:
        throw new Error(`undefined direction: ${e.direction}`);
    }
  }
  clearAxesCoords() {
    this.x1.clearCoord(), this.x2.clearCoord(), this.y1.clearCoord(), this.y2.clearCoord(), this.x2y2.clearCoord(), this.activeAxisName = "";
  }
  clearXAxisCoords() {
    this.x1.clearCoord(), this.x2.clearCoord(), this.x2y2.clearCoord(), this.activeAxisName = "";
  }
  clearYAxisCoords() {
    this.y1.clearCoord(), this.y2.clearCoord(), this.x2y2.clearCoord(), this.activeAxisName = "";
  }
  addAxisCoord(e) {
    if (!this.nextAxis)
      throw new Error("The axes already filled.");
    if (this.activeAxisName = this.nextAxis.name, this.activeAxisName === "x1" && this.pointMode === 0) {
      this.x1.coord = Object.assign(e), this.y1.coord = Object.assign(e);
      return;
    }
    if (this.activeAxisName === "x2y2") {
      this.x2y2.coord = Object.assign(e), this.x2.coord = { xPx: e.xPx, yPx: this.x1.coord.yPx }, this.y2.coord = { xPx: this.y1.coord.xPx, yPx: e.yPx };
      return;
    }
    this.nextAxis.coord = e;
  }
  inactivateAxis() {
    this.activeAxisName = "";
  }
}
class yr {
  constructor(e, t, n) {
    De(this, "name");
    De(this, "value");
    De(this, "coord");
    De(this, "initialCoord", {
      xPx: -999,
      yPx: -999
    });
    this.name = e, this.value = t, this.coord = n || this.initialCoord;
  }
  clearCoord() {
    this.coord = this.initialCoord;
  }
  get coordIsFilled() {
    return this.coord.xPx + this.coord.yPx > 0;
  }
}
const os = yi("axes", {
  state: () => ({
    axes: new cx(
      new yr("x1", 0),
      new yr("x2", 1),
      new yr("y1", 0),
      new yr("y2", 1),
      new yr("x2y2", -1)
    )
  }),
  //MEMO: Piniaでこの書き方だと循環参照してしまう。そもそも不要？
  // getters: {
  //   axes() {
  //     return this.axes
  //   },
  // },
  actions: {
    setX1Value(s) {
      this.axes.x1.value = s;
    },
    setX2Value(s) {
      this.axes.x2.value = s;
    },
    setY1Value(s) {
      this.axes.y1.value = s;
    },
    setY2Value(s) {
      this.axes.y2.value = s;
    },
    setXIsLog(s) {
      this.axes.xIsLog = s;
    },
    setYIsLog(s) {
      this.axes.yIsLog = s;
    },
    clearAxesCoords() {
      this.axes.clearAxesCoords();
    },
    clearXAxisCoords() {
      this.axes.clearXAxisCoords();
    },
    clearYAxisCoords() {
      this.axes.clearYAxisCoords();
    },
    addAxisCoord(s) {
      this.axes.addAxisCoord(s);
    },
    moveActiveAxis(s) {
      this.axes.moveActiveAxis(s);
    },
    inactivateAxis() {
      this.axes.inactivateAxis();
    }
  }
}), Ra = yi("style", {
  state: () => ({
    plotSizePx: 10,
    axisSizePx: 20
  }),
  getters: {
    //MEMO: Piniaでこの書き方だと循環参照してしまう。そもそも不要？
    // plotSizePx(): number {
    //   return this.plotSizePx
    // },
    // axisSizePx(): number {
    //   return this.axisSizePx
    // },
    axisHalfSizePx() {
      return this.axisSizePx / 2;
    },
    axisCrossBorderPx() {
      return this.axisSizePx * 0.1;
    },
    axisCrossBorderHalfPx() {
      return this.axisCrossBorderPx * 0.5;
    },
    axisCrossTopPx() {
      return (this.axisSizePx - this.axisCrossBorderPx) / 2;
    },
    axisCrossCursorPx() {
      return this.axisSizePx * 0.7;
    }
  },
  actions: {
    //moved from mutations
    updatePlotSizePx(s) {
      this.plotSizePx = s;
    },
    //moved from mutations
    updateAxisSizePx(s) {
      this.axisSizePx = s;
    },
    setPlotSizePx(s) {
      this.updatePlotSizePx(s);
    },
    setAxisSizePx(s) {
      this.updateAxisSizePx(s);
    }
  }
}), hx = Je({
  components: {
    MagnifierAxisLabelX: ix,
    MagnifierAxisLabelY: lx
  },
  data() {
    return {};
  },
  computed: {
    ...Me(os, ["axes"]),
    ...Me(Pt, ["canvas"]),
    ...Me(Ra, [
      "axisSizePx",
      "axisHalfSizePx",
      "axisCrossBorderHalfPx",
      "axisCrossBorderPx",
      "axisCrossTopPx",
      "axisCrossCursorPx"
    ]),
    ...Me(jn, ["magnifier"]),
    xPx() {
      return this.axis.coord.xPx;
    },
    yPx() {
      return this.axis.coord.yPx;
    },
    magnifierHalfSizePx() {
      return this.magnifier.sizePx / 2;
    }
  },
  props: {
    axis: {
      type: Object,
      required: !0
    },
    isActive: {
      type: Boolean,
      required: !0
    }
  },
  methods: {}
}), ux = { style: { border: "'1px solid red'" } }, dx = { key: 0 }, fx = { key: 1 };
function gx(s, e, t, n, o, r) {
  const a = ce("magnifier-axis-label-x"), l = ce("magnifier-axis-label-y");
  return we(), ke("div", ux, [
    Re("div", {
      style: Et({
        position: "absolute",
        top: `${(s.yPx - s.axisHalfSizePx) * s.magnifier.scale}px`,
        left: `${(s.xPx - s.axisCrossBorderHalfPx) * s.magnifier.scale}px`,
        "pointer-events": "none",
        transform: `scale(${s.magnifier.scale}) translate(-${s.canvas.cursor.xPx - s.magnifierHalfSizePx / s.magnifier.scale}px, -${s.canvas.cursor.yPx - s.magnifierHalfSizePx / s.magnifier.scale}px)`,
        "transform-origin": "top left",
        width: `${s.axisCrossBorderPx}px`,
        height: `${s.axisSizePx}px`,
        background: s.isActive ? "red" : "dodgerblue"
      })
    }, [
      Re("div", {
        style: Et({
          content: "",
          position: "absolute",
          top: `${s.axisCrossTopPx}px`,
          left: `${-s.axisCrossTopPx}px`,
          width: `${s.axisSizePx}px`,
          height: `${s.axisCrossBorderPx}px`,
          background: s.isActive ? "red" : "dodgerblue"
        })
      }, [
        s.axis.name.includes("x") && s.axis.name !== "x2y2" ? (we(), ke("div", dx, [
          te(a, {
            label: s.axis.name
          }, null, 8, ["label"])
        ])) : Ot("", !0),
        s.axis.name.includes("y") && s.axis.name !== "x2y2" ? (we(), ke("div", fx, [
          te(l, {
            label: s.axis.name
          }, null, 8, ["label"])
        ])) : Ot("", !0)
      ], 4)
    ], 4)
  ]);
}
const mx = /* @__PURE__ */ it(hx, [["render", gx]]), px = Je({
  components: {
    MagnifierAxis: mx
  },
  computed: {
    ...Me(os, ["axes"]),
    ...Me(Pt, ["canvas"])
  }
});
function wx(s, e, t, n, o, r) {
  const a = ce("magnifier-axis");
  return we(), ke("div", null, [
    te(a, {
      axis: s.axes.x1,
      isActive: s.axes.activeAxisName === "x1"
    }, null, 8, ["axis", "isActive"]),
    te(a, {
      axis: s.axes.x2,
      isActive: s.axes.activeAxisName === "x2"
    }, null, 8, ["axis", "isActive"]),
    te(a, {
      axis: s.axes.y1,
      isActive: s.axes.activeAxisName === "y1"
    }, null, 8, ["axis", "isActive"]),
    te(a, {
      axis: s.axes.y2,
      isActive: s.axes.activeAxisName === "y2"
    }, null, 8, ["axis", "isActive"]),
    te(a, {
      axis: s.axes.x2y2,
      isActive: s.axes.activeAxisName === "x2y2"
    }, null, 8, ["axis", "isActive"])
  ]);
}
const Cx = /* @__PURE__ */ it(px, [["render", wx]]), vx = Je({
  computed: {
    ...Me(jn, ["magnifier"]),
    ...Me(Pt, ["canvas"]),
    ...Me(Ra, ["plotSizePx"]),
    plotHalfSize() {
      return this.plotSizePx / 2;
    },
    magnifierHalfSize() {
      return this.magnifierSize / 2;
    },
    xPx() {
      return this.plot.xPx;
    },
    yPx() {
      return this.plot.yPx;
    }
  },
  props: {
    plot: {
      type: Object,
      required: !0
    },
    magnifierSize: {
      type: Number,
      required: !0
    },
    isActive: {
      type: Boolean
    }
  }
});
function yx(s, e, t, n, o, r) {
  return we(), ke("div", {
    class: "magnifier-plots",
    style: Et({
      position: "absolute",
      top: `${(s.yPx - s.plotHalfSize) * s.magnifier.scale}px`,
      left: `${(s.xPx - s.plotHalfSize) * s.magnifier.scale}px`,
      transform: `scale(${s.magnifier.scale}) translate(-${s.canvas.cursor.xPx - s.magnifierHalfSize / s.magnifier.scale}px, -${s.canvas.cursor.yPx - s.magnifierHalfSize / s.magnifier.scale}px)`,
      "transform-origin": "top left",
      "pointer-events": "none",
      width: `${s.plotSizePx}px`,
      height: `${s.plotSizePx}px`,
      "background-color": s.isActive ? "red" : "dodgerblue",
      border: "1px solid white",
      "border-radius": "50%"
    })
  }, null, 4);
}
const Sx = /* @__PURE__ */ it(vx, [["render", yx]]), bx = Je({
  data() {
    return {};
  },
  computed: {
    ...Me(jn, ["magnifier"])
  },
  props: {
    shouldShowSettingsDialog: {
      type: Boolean,
      required: !0
    },
    toggleSettingsDialog: {
      type: Function,
      required: !0
    },
    magnifierSettingError: {
      type: String,
      required: !0
    },
    setMagnifierScale: {
      type: Function,
      required: !0
    }
  },
  methods: {
    onChangeMagnifierScale(s) {
      this.setMagnifierScale(Number(s.target.value));
    }
  }
}), Rx = /* @__PURE__ */ Re("span", { class: "text-h5" }, "Magnifier Settings", -1);
function Ex(s, e, t, n, o, r) {
  const a = ce("v-card-title"), l = ce("v-text-field"), c = ce("v-col"), h = ce("v-row"), u = ce("v-container"), f = ce("v-card-text"), g = ce("v-btn"), m = ce("v-card-actions"), w = ce("v-card"), C = ce("v-dialog");
  return we(), bs(C, {
    "model-value": s.shouldShowSettingsDialog,
    "max-width": "300px"
  }, {
    default: ye(() => [
      te(w, null, {
        default: ye(() => [
          te(a, null, {
            default: ye(() => [
              Rx
            ]),
            _: 1
          }),
          te(f, null, {
            default: ye(() => [
              te(u, null, {
                default: ye(() => [
                  te(h, null, {
                    default: ye(() => [
                      te(c, null, {
                        default: ye(() => [
                          te(l, {
                            "model-value": s.magnifier.scale,
                            type: "number",
                            label: "Magnifier (times)",
                            onChange: s.onChangeMagnifierScale,
                            error: s.magnifierSettingError.length > 0,
                            "error-messages": s.magnifierSettingError
                          }, null, 8, ["model-value", "onChange", "error", "error-messages"])
                        ]),
                        _: 1
                      })
                    ]),
                    _: 1
                  })
                ]),
                _: 1
              })
            ]),
            _: 1
          }),
          te(m, null, {
            default: ye(() => [
              te(g, { onClick: s.toggleSettingsDialog }, {
                default: ye(() => [
                  xt(" Close ")
                ]),
                _: 1
              }, 8, ["onClick"])
            ]),
            _: 1
          })
        ]),
        _: 1
      })
    ]),
    _: 1
  }, 8, ["model-value"]);
}
const xx = /* @__PURE__ */ it(bx, [["render", Ex]]), Tx = Je({
  computed: {},
  props: {
    toggleSettingsDialog: {
      type: Function,
      required: !0
    }
  }
});
function Mx(s, e, t, n, o, r) {
  const a = ce("v-icon"), l = ce("v-btn");
  return we(), bs(l, {
    size: "small",
    onClick: s.toggleSettingsDialog,
    style: {
      position: "absolute",
      top: "-4px",
      right: "-4px",
      "z-index": 100
    },
    icon: "",
    elevation: "0"
  }, {
    default: ye(() => [
      te(a, { size: "small" }, {
        default: ye(() => [
          xt("mdi-cog")
        ]),
        _: 1
      })
    ]),
    _: 1
  }, 8, ["onClick"]);
}
const _x = /* @__PURE__ */ it(Tx, [["render", Mx]]);
class Vy {
  matchColor(e, t, n) {
    return e.reduce((r, a, l) => r + Math.pow(e[l] - t[l], 2), 0) / (Math.pow(255, 2) * 3) * 100 < n;
  }
  // TODO: 背景色をスキップするか選択できるようにする
  isOnMask(e, t, n, o) {
    return e === 255 && t === 255 && n === 0 && o > 0;
  }
}
var Zo;
const Lc = class Lc extends Vy {
  constructor() {
    super();
    De(this, "name", "Line Extract");
    De(this, "dxPx", 10);
    De(this, "dyPx", 10);
  }
  static get instance() {
    return st(this, Zo) || vr(this, Zo, new Lc()), st(this, Zo);
  }
  execute(t, n, o, r, a, l, c) {
    const h = [], u = [...Array(t)].map(
      () => Array(n).fill(!1)
    );
    if (a)
      for (let f = 0; f < t; f++)
        for (let g = 0; g < n; g++) {
          const [m, w, C, S] = r.slice(
            (f * n + g) * 4,
            (f * n + g + 1) * 4
          );
          this.isOnMask(m, w, C, S) || (u[f][g] = !0);
        }
    for (let f = 0; f < n; f++)
      for (let g = 0; g < t; g++) {
        if (u[g][f])
          continue;
        const [m, w, C] = o.slice(
          (g * n + f) * 4,
          (g * n + f + 1) * 4
        ), S = this.matchColor(
          [m, w, C],
          l,
          c
        );
        if (u[g][f] = !0, S) {
          const x = [
            {
              id: 0,
              xPx: f,
              yPx: g
            }
          ];
          let T = 0;
          for (; T < x.length; ) {
            for (let j = x[T].yPx - 1; j <= x[T].yPx + 1; j++)
              for (let H = x[T].xPx - 1; H <= x[T].xPx + 1; H++) {
                if (j < 0 || H < 0 || j >= t || H >= n || Math.abs(H - f) > this.dxPx || Math.abs(j - g) > this.dyPx || u[j][H])
                  continue;
                const [Z, X, F] = o.slice(
                  (j * n + H) * 4,
                  (j * n + H + 1) * 4
                );
                this.matchColor([Z, X, F], l, c) && (x.push({
                  id: x.length,
                  xPx: H,
                  yPx: j
                }), u[j][H] = !0);
              }
            T++;
          }
          const M = x.reduce((j, H) => j + H.xPx, 0), _ = x.reduce((j, H) => j + H.yPx, 0), P = 0.5;
          h.push({
            id: h.length,
            xPx: parseFloat((M / x.length + P).toFixed(1)),
            yPx: parseFloat((_ / x.length + P).toFixed(1))
          });
        }
      }
    return h;
  }
};
Zo = new WeakMap(), go(Lc, Zo, void 0);
let er = Lc;
const Dd = yi("lineExtract", {
  state: () => ({
    lineExtract: er.instance
  }),
  getters: {
    //MEMO: Piniaでこの書き方だと循環参照してしまう。そもそも不要？
    // lineExtract() {
    //   return this.lineExtract
    // },
  },
  actions: {
    setDyPx(s) {
      this.lineExtract.dyPx = s;
    },
    setDxPx(s) {
      this.lineExtract.dxPx = s;
    }
  }
});
class Ix {
  constructor(e) {
    De(this, "strategy");
    De(this, "strategies", ["Symbol Extract", "Line Extract"]);
    De(this, "colorPicker", "#000000ff");
    De(this, "colors", []);
    De(this, "colorDistancePct", 5);
    De(this, "swatches", [...Array(5)].map(() => []));
    this.strategy = e;
  }
  execute(e) {
    return this.strategy.execute(
      e.imageElement.height,
      e.imageElement.width,
      e.originalImageCanvasColors,
      e.originalSizeMaskCanvasColors,
      e.isDrawnMask,
      [this.targetColor.R, this.targetColor.G, this.targetColor.B],
      this.colorDistancePct
    );
  }
  get targetColor() {
    return {
      R: parseInt(this.colorPicker.slice(1, 3), 16),
      G: parseInt(this.colorPicker.slice(3, 5), 16),
      B: parseInt(this.colorPicker.slice(5, 7), 16)
    };
  }
  get targetColorHex() {
    return "#" + this.targetColor.R.toString(16) + this.targetColor.G.toString(16) + this.targetColor.B.toString(16);
  }
  updateSwatches(e) {
    this.swatches = [...Array(5)].map(() => []), e.forEach((t, n) => {
      this.swatches[n % this.swatches.length].push(t);
    }), this.colorPicker = e[0];
  }
}
const qi = yi("extractor", {
  state: () => ({
    extractor: new Ix(er.instance)
  }),
  getters: {
    //MEMO: Piniaでこの書き方だと循環参照してしまう。そもそも不要？
    // extractor() {
    //   return this.extractor
    // },
  },
  actions: {
    setColorDistancePct(s) {
      this.extractor.colorDistancePct = s;
    },
    setStrategy(s) {
      this.extractor.strategy = s;
    },
    setColorPicker(s) {
      this.extractor.colorPicker = s;
    },
    setSwatches(s) {
      this.extractor.updateSwatches(s);
    }
  }
});
var Qo;
const $c = class $c extends Vy {
  constructor() {
    super();
    De(this, "name", "Symbol Extract");
    De(this, "minDiameterPx", 5);
    De(this, "maxDiameterPx", 100);
  }
  static get instance() {
    return st(this, Qo) || vr(this, Qo, new $c()), st(this, Qo);
  }
  execute(t, n, o, r, a, l, c) {
    const h = [], u = [...Array(t)].map(
      () => Array(n).fill(!1)
    );
    if (a)
      for (let f = 0; f < t; f++)
        for (let g = 0; g < n; g++) {
          const [m, w, C, S] = r.slice(
            (f * n + g) * 4,
            (f * n + g + 1) * 4
          );
          this.isOnMask(m, w, C, S) || (u[f][g] = !0);
        }
    for (let f = 0; f < t; f++)
      for (let g = 0; g < n; g++) {
        if (u[f][g])
          continue;
        const [m, w, C] = o.slice(
          (f * n + g) * 4,
          (f * n + g + 1) * 4
        ), S = this.matchColor(
          [m, w, C],
          l,
          c
        );
        if (u[f][g] = !0, S) {
          const x = [
            {
              id: 0,
              xPx: g,
              yPx: f
            }
          ];
          let T = 0;
          for (; T < x.length; ) {
            for (let H = x[T].yPx - 1; H <= x[T].yPx + 1; H++)
              for (let Z = x[T].xPx - 1; Z <= x[T].xPx + 1; Z++) {
                if (H < 0 || Z < 0 || H >= t || Z >= n || u[H][Z])
                  continue;
                const [X, F, z] = o.slice(
                  (H * n + Z) * 4,
                  (H * n + Z + 1) * 4
                );
                this.matchColor([X, F, z], l, c) && (x.push({
                  id: x.length,
                  xPx: Z,
                  yPx: H
                }), u[H][Z] = !0);
              }
            T++;
          }
          const M = x.reduce((H, Z) => H + Z.xPx, 0), _ = x.reduce((H, Z) => H + Z.yPx, 0), P = x.length, j = Math.sqrt(P / Math.PI) * 2;
          this.minDiameterPx <= j && j <= this.maxDiameterPx && h.push({
            id: h.length,
            xPx: parseFloat((M / x.length + 0.5).toFixed(1)),
            yPx: parseFloat((_ / x.length + 0.5).toFixed(1))
          });
        }
      }
    return h;
  }
};
Qo = new WeakMap(), go($c, Qo, void 0);
let ra = $c;
const Hd = yi("symbolExtractByArea", {
  state: () => ({
    symbolExtractByArea: ra.instance
  }),
  getters: {
    //MEMO: Piniaでこの書き方だと循環参照してしまう。そもそも不要？
    // symbolExtractByArea() {
    //   return this.symbolExtractByArea
    // },
  },
  actions: {
    setMinDiameterPx(s) {
      this.symbolExtractByArea.minDiameterPx = s;
    },
    setMaxDiameterPx(s) {
      this.symbolExtractByArea.maxDiameterPx = s;
    }
  }
}), Ox = Je({
  computed: {
    ...Me(jn, ["magnifier"]),
    ...Me(Dd, ["lineExtract"]),
    ...Me(qi, ["extractor"]),
    ...Me(Hd, ["symbolExtractByArea"]),
    symbolMinDiameter() {
      return this.symbolExtractByArea.minDiameterPx * this.magnifier.scale;
    },
    symbolMaxDiameter() {
      return this.symbolExtractByArea.maxDiameterPx * this.magnifier.scale;
    }
  }
}), Ax = { key: 1 };
function Px(s, e, t, n, o, r) {
  return we(), ke("div", null, [
    s.extractor.strategy.name === "Line Extract" ? (we(), ke("div", {
      key: 0,
      style: Et({
        position: "absolute",
        left: `${(s.magnifier.sizePx - s.lineExtract.dxPx * s.magnifier.scale) / 2}px`,
        top: `${(s.magnifier.sizePx - s.lineExtract.dxPx * s.magnifier.scale) / 2}px`,
        width: `${s.lineExtract.dxPx * s.magnifier.scale}px`,
        height: `${s.lineExtract.dxPx * s.magnifier.scale}px`,
        border: "1px dotted grey"
      })
    }, null, 4)) : Ot("", !0),
    s.extractor.strategy.name === "Symbol Extract" ? (we(), ke("div", Ax, [
      Re("div", {
        style: Et({
          position: "absolute",
          left: `${(s.magnifier.sizePx - s.symbolMinDiameter) / 2}px`,
          top: `${(s.magnifier.sizePx - s.symbolMinDiameter) / 2}px`,
          width: `${s.symbolMinDiameter}px`,
          height: `${s.symbolMinDiameter}px`,
          border: "1px dotted grey"
        })
      }, null, 4),
      Re("div", {
        style: Et({
          position: "absolute",
          left: `${(s.magnifier.sizePx - s.symbolMaxDiameter) / 2}px`,
          top: `${(s.magnifier.sizePx - s.symbolMaxDiameter) / 2}px`,
          width: `${s.symbolMaxDiameter}px`,
          height: `${s.symbolMaxDiameter}px`,
          border: "1px dotted grey"
        })
      }, null, 4)
    ])) : Ot("", !0)
  ]);
}
const Dx = /* @__PURE__ */ it(Ox, [["render", Px]]);
var ct, Jo;
class By {
  constructor(e, t) {
    // INFO: 画像のサイズが1,000pxで1px未満の細かい調整はできず分解能4桁と考えたため
    De(this, "effectiveDigits", 4);
    go(this, ct, void 0);
    go(this, Jo, void 0);
    vr(this, ct, e), vr(this, Jo, t);
  }
  calculateXYValues(e, t) {
    if (!(st(this, ct).x1.coord && st(this, ct).x2.coord && st(this, ct).y1.coord && st(this, ct).y2.coord))
      return { xV: "NaN", yV: "NaN" };
    if (st(this, ct).x1.value === st(this, ct).x2.value || st(this, ct).y1.value === st(this, ct).y2.value)
      return { xV: "NaN", yV: "NaN" };
    const [n, o, r, a, l, c, h, u, f, g, m, w] = [
      st(this, ct).x1.coord.xPx,
      st(this, ct).x1.coord.yPx,
      st(this, ct).x2.coord.xPx,
      st(this, ct).x2.coord.yPx,
      st(this, ct).x1.value,
      st(this, ct).x2.value,
      st(this, ct).y1.coord.xPx,
      st(this, ct).y1.coord.yPx,
      st(this, ct).y2.coord.xPx,
      st(this, ct).y2.coord.yPx,
      st(this, ct).y1.value,
      st(this, ct).y2.value
    ];
    let C = e, S = t;
    if (st(this, ct).considerGraphTilt) {
      const X = r - n, F = a - o, z = f - h, ee = g - u, oe = ((t - o) * z - (e - n) * ee) / (F * z - X * ee), fe = ((t - u) * X - (e - h) * F) / (ee * X - z * F);
      C = n + oe * X, S = u + fe * ee;
    }
    const x = st(this, Jo).x ? Math.pow(
      10,
      (C - n) / (r - n) * (Math.log10(c) - Math.log10(l)) + Math.log10(l)
    ) : (C - n) / (r - n) * (c - l) + l, T = st(this, Jo).y ? Math.pow(
      10,
      (S - u) / (g - u) * (Math.log10(w) - Math.log10(m)) + Math.log10(m)
    ) : (S - u) / (g - u) * (w - m) + m, M = this.calculateEffectiveDigits(
      st(this, ct).x2.value,
      st(this, ct).x1.value
    ), _ = this.calculateEffectiveDigits(
      st(this, ct).y2.value,
      st(this, ct).y1.value
    ), P = parseFloat(x.toPrecision(M)), j = parseFloat(T.toPrecision(_)), H = P.toExponential(), Z = j.toExponential();
    return {
      xV: H,
      yV: Z
    };
  }
  numDigit(e) {
    return e === 0 ? 0 : Math.floor(Math.log10(Math.abs(e)));
  }
  // 88.81 - 88.71 = 0.10
  calculateEffectiveDigits(e, t) {
    return Math.abs(this.numDigit(e) - this.numDigit(e - t)) + this.effectiveDigits;
  }
}
ct = new WeakMap(), Jo = new WeakMap();
class Hx {
  constructor(e) {
    De(this, "datasets");
    De(this, "activeDatasetId", 1);
    this.datasets = [e];
  }
  get activeDataset() {
    const e = this.datasets.find((t) => t.id === this.activeDatasetId);
    if (!e)
      throw new Error("There are no active datasets.");
    return e;
  }
  get nextPlotId() {
    return this.activeDataset.nextPlotId;
  }
  get nextDatasetId() {
    return this.datasets.length === 0 ? 1 : this.datasets[this.datasets.length - 1].id + 1;
  }
  setPlots(e) {
    this.activeDataset.plots = e;
  }
  sortPlots() {
    this.activeDataset.plots.sort((e, t) => e.xPx - t.xPx);
  }
  setActiveDataset(e) {
    this.activeDatasetId = e;
  }
  editDatasetName(e, t) {
    const n = this.datasets.find((o) => o.id === e);
    if (!n)
      throw new Error(e + "doesn't exist.");
    n.name = t;
  }
  addDataset(e) {
    this.datasets.push(e);
  }
  popDataset() {
    this.datasets.length !== 1 && (this.datasets[this.datasets.length - 1].id === this.activeDatasetId && this.setActiveDataset(this.datasets[this.datasets.length - 2].id), this.datasets.pop());
  }
}
class dw {
  constructor(e, t, n) {
    De(this, "name");
    De(this, "plots");
    De(this, "id");
    De(this, "activePlotIds", []);
    De(this, "plotsAreAdjusting", !1);
    this.name = e, this.plots = t, this.id = n;
  }
  scaledPlots(e) {
    return this.plots.map((t) => ({
      id: t.id,
      xPx: t.xPx * e,
      yPx: t.yPx * e
    }));
  }
  get plotsAreActive() {
    return this.activePlotIds.length > 0;
  }
  addPlot(e, t) {
    this.activePlotIds.length = 0, this.activePlotIds.push(this.nextPlotId), this.plots.push({
      id: this.nextPlotId,
      xPx: e,
      yPx: t
    });
  }
  get nextPlotId() {
    return this.plots.length === 0 ? 1 : Math.max(...this.plots.map((t) => t.id)) + 1;
  }
  activatePlot(e) {
    this.activePlotIds.length = 0, this.activePlotIds.push(e);
  }
  toggleActivatedPlot(e) {
    if (this.activePlotIds.includes(e)) {
      const t = this.activePlotIds.filter((n) => n !== e);
      this.activePlotIds.length = 0, this.activePlotIds.push(...t);
      return;
    }
    this.activePlotIds.push(e);
  }
  clearPlot(e) {
    this.plots = this.plots.filter((t) => e !== t.id), this.activePlotIds.length = 0;
  }
  clearPlots() {
    this.plots = [], this.activePlotIds.length = 0;
  }
  inactivatePlots() {
    this.activePlotIds = [];
  }
  clearActivePlots() {
    this.plots = this.plots.filter((e) => !this.activePlotIds.includes(e.id)), this.activePlotIds.length = 0;
  }
  hasActive() {
    return this.activePlotIds.length > 0;
  }
  moveActivePlot(e) {
    const t = this.activePlotIds;
    switch (this.plotsAreAdjusting = !0, e.direction) {
      case "up":
        this.plots.filter((n) => t.includes(n.id)).map((n) => n.yPx -= e.distancePx);
        break;
      case "right":
        this.plots.filter((n) => t.includes(n.id)).map((n) => n.xPx += e.distancePx);
        break;
      case "down":
        this.plots.filter((n) => t.includes(n.id)).map((n) => n.yPx += e.distancePx);
        break;
      case "left":
        this.plots.filter((n) => t.includes(n.id)).map((n) => n.xPx -= e.distancePx);
        break;
    }
  }
  plotsSortedByXAscending() {
    return this.plots.sort((e, t) => e.xPx - t.xPx);
  }
  plotsSortedByXDescending() {
    return this.plots.sort((e, t) => t.xPx - e.xPx);
  }
  plotsSortedByYAscending() {
    return this.plots.sort((e, t) => e.yPx - t.yPx);
  }
  plotsSortedByYDescending() {
    return this.plots.sort((e, t) => t.yPx - e.yPx);
  }
  plotsSortedByIdAscending() {
    return this.plots.sort((e, t) => e.id - t.id);
  }
  plotsSortedByIdDescending() {
    return this.plots.sort((e, t) => t.id - e.id);
  }
}
const As = yi("datasets", {
  state: () => ({
    datasets: new Hx(new dw("dataset 1", [], 1))
  }),
  getters: {
    //MEMO: Piniaでこの書き方だと循環参照してしまう。そもそも不要？
    // datasets() {
    //   return this.datasets
    // },
  },
  actions: {
    addPlot(s) {
      this.datasets.activeDataset.addPlot(s.xPx, s.yPx);
    },
    addDataset() {
      const s = this.datasets.nextDatasetId;
      this.datasets.addDataset(new dw(`dataset ${s}`, [], s));
    },
    popDataset() {
      this.datasets.popDataset();
    },
    moveActivePlot(s) {
      this.datasets.activeDataset.moveActivePlot(s);
    },
    clearPlot(s) {
      this.datasets.activeDataset.clearPlot(s);
    },
    clearPlots() {
      this.datasets.activeDataset.clearPlots();
    },
    inactivatePlots() {
      this.datasets.activeDataset.inactivatePlots();
    },
    clearActivePlots() {
      this.datasets.activeDataset.clearActivePlots();
    },
    setPlots(s) {
      this.datasets.setPlots(s);
    },
    toggleActivatedPlot(s) {
      this.datasets.activeDataset.toggleActivatedPlot(s);
    },
    activatePlot(s) {
      this.datasets.activeDataset.activatePlot(s);
    },
    setActiveDataset(s) {
      this.datasets.setActiveDataset(s);
    },
    sortPlots() {
      this.datasets.sortPlots();
    }
  }
}), kx = Je({
  components: {
    MagnifierVerticalLine: zE,
    MagnifierHorizontalLine: jE,
    MagnifierImage: ex,
    MagnifierAxes: Cx,
    MagnifierPlots: Sx,
    MagnifierSettings: xx,
    MagnifierSettingsBtn: _x,
    MagnifierExtractSize: Dx
  },
  data() {
    return {
      magnifierSettingError: "",
      shouldShowSettingsDialog: !1
    };
  },
  computed: {
    ...Me(As, ["datasets"]),
    ...Me(jn, ["magnifier"]),
    ...Me(os, ["axes"]),
    ...Me(Pt, ["canvas"]),
    // magnifierHalfSize(): number {
    //   return this.magnifier.sizePx / 2
    // },
    // INFO: 小数点ありのピクセル表示するとユーザーを混乱させるので表示上は切り上げ
    // canvasCursorCeil(): {
    //   xPx: number
    //   yPx: number
    // } {
    //   return {
    //     xPx: Math.ceil(this.canvasCursor.xPx),
    //     yPx: Math.ceil(this.canvasCursor.yPx),
    //   }
    // },
    xyValue() {
      return new By(this.axes, {
        x: this.axes.xIsLog,
        y: this.axes.yIsLog
      }).calculateXYValues(
        this.canvas.cursor.xPx,
        this.canvas.cursor.yPx
      );
    }
  },
  methods: {
    ...Tt(jn, ["setScale"]),
    toggleSettingsDialog() {
      this.shouldShowSettingsDialog = !this.shouldShowSettingsDialog;
    },
    setMagnifierScale(s) {
      const e = parseInt(s);
      if (this.magnifierSettingError = "", e < 2) {
        this.magnifierSettingError = "The Magnifier scale is supposed to be larger than 2 times.", this.setScale(2);
        return;
      }
      this.setScale(parseInt(s));
    }
  }
}), Nx = { class: "mb-5" };
function Lx(s, e, t, n, o, r) {
  const a = ce("magnifier-settings-btn"), l = ce("magnifier-image"), c = ce("magnifier-plots"), h = ce("magnifier-extract-size"), u = ce("magnifier-axes"), f = ce("magnifier-vertical-line"), g = ce("magnifier-horizontal-line"), m = ce("magnifier-settings");
  return we(), ke("div", Nx, [
    Re("div", {
      style: Et({
        overflow: "hidden",
        width: `${s.magnifier.sizePx}px`,
        height: `${s.magnifier.sizePx}px`,
        position: "relative",
        outline: "1px solid grey"
      })
    }, [
      te(a, { toggleSettingsDialog: s.toggleSettingsDialog }, null, 8, ["toggleSettingsDialog"]),
      te(l),
      (we(!0), ke(Fc, null, Vc(s.datasets.activeDataset.plots, (w) => (we(), ke("div", {
        key: w.id
      }, [
        te(c, {
          plot: w,
          magnifierSize: s.magnifier.sizePx,
          isActive: s.datasets.activeDataset.activePlotIds.includes(w.id)
        }, null, 8, ["plot", "magnifierSize", "isActive"])
      ]))), 128)),
      te(h),
      te(u),
      te(f),
      te(g)
    ], 4),
    Re("span", null, "x: " + ns(s.xyValue.xV) + ", y: " + ns(s.xyValue.yV), 1),
    te(m, {
      shouldShowSettingsDialog: s.shouldShowSettingsDialog,
      toggleSettingsDialog: s.toggleSettingsDialog,
      magnifierSettingError: s.magnifierSettingError,
      setMagnifierScale: s.setMagnifierScale
    }, null, 8, ["shouldShowSettingsDialog", "toggleSettingsDialog", "magnifierSettingError", "setMagnifierScale"])
  ]);
}
const $x = /* @__PURE__ */ it(kx, [["render", Lx]]), Fx = Je({
  computed: {
    ...Me(Pt, ["canvas"]),
    plotHalfSize() {
      return this.plotSizePx / 2;
    },
    xPx() {
      return this.plot.xPx;
    },
    yPx() {
      return this.plot.yPx;
    },
    cursor() {
      const s = this.canvas.manualMode;
      if (s === 1 || s === 2)
        return "pointer";
    }
  },
  props: {
    plot: {
      type: Object,
      required: !0
    },
    plotSizePx: {
      type: Number,
      required: !0
    },
    isActive: {
      type: Boolean
    }
  },
  methods: {
    ...Tt(As, [
      "toggleActivatedPlot",
      "activatePlot",
      "clearPlot"
    ]),
    click(s) {
      switch (this.canvas.manualMode) {
        case 0:
          return;
        case 1:
          if (s.ctrlKey || s.metaKey) {
            this.toggleActivatedPlot(this.plot.id);
            return;
          }
          this.activatePlot(this.plot.id);
          return;
        case 2:
          this.clearPlot(this.plot.id);
          return;
      }
    }
  }
});
function Vx(s, e, t, n, o, r) {
  return we(), ke("div", {
    class: "canvas-plot",
    style: Et({
      position: "absolute",
      top: `${s.yPx - s.plotHalfSize}px`,
      left: `${s.xPx - s.plotHalfSize}px`,
      cursor: s.cursor,
      width: `${s.plotSizePx}px`,
      height: `${s.plotSizePx}px`,
      "background-color": s.isActive ? "red" : "dodgerblue",
      border: "1px solid white",
      "border-radius": "50%"
    }),
    onClick: e[0] || (e[0] = (...a) => s.click && s.click(...a))
  }, null, 4);
}
const Bx = /* @__PURE__ */ it(Fx, [["render", Vx]]), Wx = Je({
  components: {
    CanvasPlot: Bx
  },
  computed: {
    ...Me(As, ["datasets"]),
    ...Me(Pt, ["canvas"]),
    ...Me(Ra, ["plotSizePx"]),
    plotHalfSize() {
      return this.plotSizePx / 2;
    }
  },
  data() {
    return {};
  },
  methods: {}
});
function Ux(s, e, t, n, o, r) {
  const a = ce("canvas-plot");
  return we(), ke("div", null, [
    (we(!0), ke(Fc, null, Vc(s.datasets.activeDataset.scaledPlots(s.canvas.scale), (l) => (we(), bs(a, {
      key: l.id,
      plotSizePx: s.plotSizePx,
      plot: l,
      isActive: s.datasets.activeDataset.activePlotIds.includes(l.id)
    }, null, 8, ["plotSizePx", "plot", "isActive"]))), 128))
  ]);
}
const zx = /* @__PURE__ */ it(Wx, [["render", Ux]]), Yx = Je({
  props: {
    axis: {
      type: Object,
      required: !0
    }
  },
  data() {
    return {
      fontSize: 14
    };
  },
  computed: {
    ...Me(Ra, [
      "axisSizePx",
      "axisHalfSizePx",
      "axisCrossBorderHalfPx",
      "axisCrossBorderPx",
      "axisCrossTopPx",
      "axisCrossCursorPx"
    ]),
    ...Me(Pt, ["canvas"]),
    ...Me(os, ["axes"]),
    xPx() {
      return this.axis.coord ? this.axis.coord.xPx * this.canvas.scale : -999;
    },
    yPx() {
      return this.axis.coord ? this.axis.coord.yPx * this.canvas.scale : -999;
    },
    labelLeft() {
      return this.axis.name.includes("x") ? this.xPx - this.axisCrossCursorPx / 2 : this.axis.name.includes("y") ? this.xPx - this.axisCrossCursorPx * 2 : 0;
    },
    labelTop() {
      return this.axis.name.includes("x") ? this.yPx + this.axisCrossCursorPx / 2 : this.axis.name.includes("y") ? this.yPx - this.axisCrossCursorPx : 0;
    },
    isActive() {
      return this.axes.pointMode === 0 && this.axes.activeAxisName === "x1" && this.axis.name === "y1" ? !0 : this.axes.activeAxisName === this.axis.name;
    }
  },
  methods: {}
}), Gx = { key: 0 };
function jx(s, e, t, n, o, r) {
  return s.axis.coordIsFilled ? (we(), ke("div", Gx, [
    Re("div", {
      style: Et({
        position: "absolute",
        top: `${s.yPx - s.axisHalfSizePx}px`,
        left: `${s.xPx - s.axisCrossBorderHalfPx}px`,
        "pointer-events": "none",
        width: `${s.axisCrossBorderPx}px`,
        height: `${s.axisSizePx}px`,
        background: s.isActive ? "red" : "dodgerblue"
      })
    }, [
      Re("div", {
        style: Et({
          content: "",
          position: "absolute",
          top: `${s.axisCrossTopPx}px`,
          left: `${-s.axisCrossTopPx}px`,
          width: `${s.axisSizePx}px`,
          height: `${s.axisCrossBorderPx}px`,
          background: s.isActive ? "red" : "dodgerblue"
        })
      }, null, 4)
    ], 4),
    s.axis.name !== "x2y2" ? (we(), ke("span", {
      key: 0,
      style: Et({
        position: "absolute",
        top: `${s.labelTop}px`,
        left: `${s.labelLeft}px`,
        "pointer-events": "none",
        "user-select": "none"
      })
    }, ns(s.axis.name), 5)) : Ot("", !0)
  ])) : Ot("", !0);
}
const Kx = /* @__PURE__ */ it(Yx, [["render", jx]]), Xx = Je({
  components: {
    CanvasAxis: Kx
  },
  computed: {
    ...Me(os, ["axes"])
  },
  methods: {}
});
function qx(s, e, t, n, o, r) {
  const a = ce("canvas-axis");
  return we(), ke("div", null, [
    te(a, {
      axis: s.axes.x1
    }, null, 8, ["axis"]),
    te(a, {
      axis: s.axes.x2
    }, null, 8, ["axis"]),
    te(a, {
      axis: s.axes.y1
    }, null, 8, ["axis"]),
    te(a, {
      axis: s.axes.y2
    }, null, 8, ["axis"]),
    te(a, {
      axis: s.axes.x2y2
    }, null, 8, ["axis"])
  ]);
}
const Zx = /* @__PURE__ */ it(Xx, [["render", qx]]), Xa = {
  position: "absolute",
  backgroundColor: "#00ff00",
  opacity: "0.8",
  "pointer-events": "none"
}, Qx = Je({
  components: {},
  methods: {
    //INFO: computedではリアクティブにならなかったのでmethodとしている
    getImageCanvasSize() {
      const s = document.getElementById("imageCanvas");
      return s ? { w: s.clientWidth, h: s.clientHeight } : { w: 0, h: 0 };
    }
  },
  computed: {
    ...Me(os, ["axes"]),
    ...Me(Pt, ["canvas"]),
    isActive() {
      return this.axes.pointMode === 0;
    },
    isX1Y1LineVisible() {
      return this.axes.x1.coordIsFilled || this.canvas.scaledCursor.xPx !== 0;
    },
    isX2Y2LineVisible() {
      return this.axes.x2y2.coordIsFilled;
    },
    X1Y1HorizontalLineStyle() {
      const s = this.axes.x1.coordIsFilled ? this.axes.x1.coord.yPx * this.canvas.scale : this.canvas.scaledCursor.yPx;
      return {
        ...Xa,
        right: "0",
        left: "0",
        width: `${this.getImageCanvasSize().w}px`,
        height: "1px",
        top: s + "px"
      };
    },
    X1Y1VerticalLineStyle() {
      const s = this.axes.x1.coordIsFilled ? this.axes.x1.coord.xPx * this.canvas.scale : this.canvas.scaledCursor.xPx;
      return {
        ...Xa,
        width: "1px",
        height: `${this.getImageCanvasSize().h}px`,
        top: "0",
        bottom: "0",
        left: s + "px"
      };
    },
    X2Y2HorizontalLineStyle() {
      const s = this.axes.x2y2.coordIsFilled ? this.axes.x2y2.coord.yPx * this.canvas.scale : this.canvas.scaledCursor.yPx;
      return {
        ...Xa,
        right: "0",
        left: "0",
        width: `${this.getImageCanvasSize().w}px`,
        height: "1px",
        top: s + "px"
      };
    },
    X2Y2VerticalLineStyle() {
      const s = this.axes.x2y2.coordIsFilled ? this.axes.x2y2.coord.xPx * this.canvas.scale : this.canvas.scaledCursor.xPx;
      return {
        ...Xa,
        width: "1px",
        height: `${this.getImageCanvasSize().h}px`,
        top: "0",
        bottom: "0",
        left: s + "px"
      };
    }
  }
}), Jx = {
  key: 0,
  class: "axes-guide"
};
function eT(s, e, t, n, o, r) {
  return s.isActive ? (we(), ke("div", Jx, [
    s.isX1Y1LineVisible ? (we(), ke("div", {
      key: 0,
      style: Et(s.X1Y1HorizontalLineStyle)
    }, null, 4)) : Ot("", !0),
    s.isX1Y1LineVisible ? (we(), ke("div", {
      key: 1,
      style: Et(s.X1Y1VerticalLineStyle)
    }, null, 4)) : Ot("", !0),
    s.isX2Y2LineVisible ? (we(), ke("div", {
      key: 2,
      style: Et(s.X2Y2HorizontalLineStyle)
    }, null, 4)) : Ot("", !0),
    s.isX2Y2LineVisible ? (we(), ke("div", {
      key: 3,
      style: Et(s.X2Y2VerticalLineStyle)
    }, null, 4)) : Ot("", !0)
  ])) : Ot("", !0);
}
const tT = /* @__PURE__ */ it(Qx, [["render", eT]]), fw = {
  position: "absolute",
  pointerEvents: "none",
  opacity: "0.8"
}, sT = Je({
  computed: {
    ...Me(Ra, ["axisCrossCursorPx", "axisHalfSizePx"]),
    ...Me(Pt, ["canvas"]),
    ...Me(os, ["axes"]),
    ...Me(As, ["datasets"]),
    rightLabel() {
      switch (this.canvas.maskMode) {
        case 0:
          return "Pen";
        case 1:
          return "Box";
        case 2:
          return "Eraser";
      }
      switch (this.canvas.manualMode) {
        case 0:
          return "Add";
        case 1:
          return "Edit";
        case 2:
          return "Delete";
      }
      return "";
    },
    bottomLabel() {
      var s, e;
      return ((s = this.axes.nextAxis) == null ? void 0 : s.name) === "x2y2" ? "x2'" : (e = this.axes.nextAxis) != null && e.name.includes("x") ? this.axes.nextAxis.name : "";
    },
    leftLabel() {
      var s, e, t;
      return ((s = this.axes.nextAxis) == null ? void 0 : s.name) === "x2y2" ? "y2'" : (e = this.axes.nextAxis) != null && e.name.includes("y") ? this.axes.nextAxis.name : ((t = this.axes.nextAxis) == null ? void 0 : t.name) === "x1" && this.axes.pointMode === 0 ? "y1" : "";
    },
    isCursorGuideLinesActive() {
      return !(this.canvas.manualMode === -1 && this.axes.y2.coordIsFilled || this.canvas.maskMode !== -1 || this.canvas.manualMode !== -1 && this.canvas.manualMode !== 0);
    },
    guideLineColor() {
      return this.canvas.manualMode === -1 ? "#00ff00" : this.canvas.manualMode === 0 ? "#ffcc00" : "#00ff00";
    },
    horizontalGuideLineStyle() {
      return {
        ...fw,
        width: `${this.getImageCanvasSize().w}px`,
        height: "1px",
        top: `${this.canvas.scaledCursor.yPx}px`,
        backgroundColor: this.guideLineColor
      };
    },
    verticalGuideLineStyle() {
      return {
        ...fw,
        width: "1px",
        top: "0",
        height: `${this.getImageCanvasSize().h}px`,
        left: `${this.canvas.scaledCursor.xPx}px`,
        backgroundColor: this.guideLineColor
      };
    }
  },
  methods: {
    //INFO: computedではリアクティブにならなかったのでmethodとしている
    getImageCanvasSize() {
      const s = document.getElementById("imageCanvas");
      return s ? { w: s.clientWidth, h: s.clientHeight } : { w: 0, h: 0 };
    }
  }
}), nT = { key: 3 };
function iT(s, e, t, n, o, r) {
  return we(), ke("div", null, [
    s.axes.isAdjusting || s.datasets.activeDataset.plotsAreAdjusting ? Ot("", !0) : (we(), ke("div", {
      key: 0,
      style: Et({
        position: "absolute",
        top: `${s.canvas.scaledCursor.yPx - s.axisCrossCursorPx}px`,
        left: `${s.canvas.scaledCursor.xPx + s.axisCrossCursorPx}px`,
        "pointer-events": "none"
      })
    }, ns(s.rightLabel), 5)),
    s.axes.isAdjusting ? Ot("", !0) : (we(), ke("div", {
      key: 1,
      style: Et({
        position: "absolute",
        top: `${s.canvas.scaledCursor.yPx + s.axisCrossCursorPx / 2}px`,
        left: `${s.canvas.scaledCursor.xPx - s.axisCrossCursorPx / 2}px`,
        "pointer-events": "none"
      })
    }, ns(s.bottomLabel), 5)),
    s.axes.isAdjusting ? Ot("", !0) : (we(), ke("div", {
      key: 2,
      style: Et({
        position: "absolute",
        top: `${s.canvas.scaledCursor.yPx - s.axisCrossCursorPx}px`,
        left: `${s.canvas.scaledCursor.xPx - s.axisCrossCursorPx * 2}px`,
        "pointer-events": "none"
      })
    }, ns(s.leftLabel), 5)),
    s.isCursorGuideLinesActive ? (we(), ke("div", nT, [
      Re("div", {
        style: Et(s.horizontalGuideLineStyle)
      }, null, 4),
      Re("div", {
        style: Et(s.verticalGuideLineStyle)
      }, null, 4)
    ])) : Ot("", !0)
  ]);
}
const oT = /* @__PURE__ */ it(sT, [["render", iT]]), rT = Je({
  computed: {
    ...Me(os, ["axes"]),
    ...Me(As, ["datasets"])
  },
  methods: {
    ...Tt(As, ["clearPlots", "clearActivePlots"]),
    ...Tt(os, [
      "clearAxesCoords",
      "clearXAxisCoords",
      "clearYAxisCoords"
    ]),
    ...Tt(Pt, ["setManualMode"]),
    clearAxes() {
      this.clearAxesCoords(), this.setManualMode(-1);
    },
    clearXAxis() {
      this.clearXAxisCoords(), this.setManualMode(-1);
    },
    clearYAxis() {
      this.clearAxesCoords(), this.setManualMode(-1);
    }
  }
}), aT = { class: "mt-2" };
function lT(s, e, t, n, o, r) {
  const a = ce("v-btn");
  return we(), ke("div", aT, [
    te(a, {
      class: "ml-2",
      size: "small",
      disabled: !s.axes.hasAtLeastOneAxis,
      onClick: s.clearAxes
    }, {
      default: ye(() => [
        xt(" Clear Axes")
      ]),
      _: 1
    }, 8, ["disabled", "onClick"]),
    te(a, {
      size: "small",
      class: "ml-2",
      disabled: s.datasets.activeDataset.plots.length === 0,
      onClick: s.clearPlots
    }, {
      default: ye(() => [
        xt("Clear Points")
      ]),
      _: 1
    }, 8, ["disabled", "onClick"]),
    te(a, {
      size: "small",
      class: "ml-2",
      disabled: s.datasets.activeDataset.plots.length === 0 || !s.datasets.activeDataset.nextPlotId,
      onClick: s.clearActivePlots
    }, {
      default: ye(() => [
        xt("Clear Active Point")
      ]),
      _: 1
    }, 8, ["disabled", "onClick"])
  ]);
}
const cT = /* @__PURE__ */ it(rT, [["render", lT]]), hT = Je({
  computed: {
    ...Me(Pt, ["canvas"]),
    showCanvasScale() {
      return Math.trunc(this.canvas.scale * 100) + "%";
    }
  },
  methods: {
    ...Tt(Pt, [
      "scaleUp",
      "scaleDown",
      "resizeCanvasToOriginal",
      "drawFitSizeImage"
    ])
  }
}), uT = { class: "d-flex justify-end" }, dT = /* @__PURE__ */ Re("div", null, null, -1), fT = { class: "ml-2" }, gT = { class: "ma-1" };
function mT(s, e, t, n, o, r) {
  const a = ce("v-icon"), l = ce("v-btn");
  return we(), ke("div", uT, [
    dT,
    Re("div", fT, [
      te(l, {
        size: "small",
        onClick: s.scaleDown
      }, {
        default: ye(() => [
          te(a, null, {
            default: ye(() => [
              xt("mdi-minus")
            ]),
            _: 1
          })
        ]),
        _: 1
      }, 8, ["onClick"]),
      te(l, {
        size: "small",
        class: "ml-2",
        onClick: s.scaleUp
      }, {
        default: ye(() => [
          te(a, null, {
            default: ye(() => [
              xt("mdi-plus")
            ]),
            _: 1
          })
        ]),
        _: 1
      }, 8, ["onClick"]),
      te(l, {
        size: "small",
        class: "ml-2",
        onClick: s.resizeCanvasToOriginal
      }, {
        default: ye(() => [
          xt("100%")
        ]),
        _: 1
      }, 8, ["onClick"]),
      te(l, {
        size: "small",
        class: "ml-2",
        onClick: s.drawFitSizeImage
      }, {
        default: ye(() => [
          xt("Fit")
        ]),
        _: 1
      }, 8, ["onClick"])
    ]),
    Re("span", gT, ns(s.showCanvasScale), 1)
  ]);
}
const pT = /* @__PURE__ */ it(hT, [["render", mT]]), Sr = 1, wT = Je({
  components: {
    CanvasAxes: Zx,
    CanvasPlots: zx,
    CanvasCursor: oT,
    CanvasAxesGuide: tT
  },
  props: {
    imagePath: String
  },
  beforeDestroy() {
    document.removeEventListener("keydown", this.keyDownHandler);
  },
  computed: {
    ...Me(Pt, ["canvas"]),
    ...Me(os, ["axes"]),
    ...Me(As, ["datasets"])
  },
  async mounted() {
    if (document.addEventListener("keydown", this.keyDownHandler.bind(this)), !!this.imagePath)
      try {
        await this.canvas.initializeImageElement(), this.drawFitSizeImage(), this.setUploadImageUrl(this.imagePath), this.setSwatches(this.canvas.colorSwatches);
      } finally {
      }
  },
  methods: {
    ...Tt(As, [
      "addPlot",
      "moveActivePlot",
      "clearActivePlots",
      "inactivatePlots"
    ]),
    ...Tt(Pt, [
      "mouseMoveOnCanvas",
      "setCanvasCursor",
      "drawFitSizeImage",
      "setUploadImageUrl",
      "setManualMode"
    ]),
    ...Tt(os, [
      "addAxisCoord",
      "inactivateAxis",
      "moveActiveAxis"
    ]),
    ...Tt(qi, ["setSwatches"]),
    // REFACTOR: modeに応じてplotなりpickColorなりを呼び出す形に変更する
    plot(s) {
      if (this.canvas.isDrawingMask)
        return;
      const e = s.target, t = e.className === "canvas-plot";
      switch (this.canvas.manualMode) {
        case 0:
          this.addPlot({
            xPx: t ? (s.offsetX + parseFloat(e.style.left) - Sr) / this.canvas.scale : (s.offsetX - Sr) / this.canvas.scale,
            yPx: t ? (s.offsetY + parseFloat(e.style.top)) / this.canvas.scale : s.offsetY / this.canvas.scale
          }), this.inactivateAxis();
          return;
        case 1:
          return;
        case 2:
          return;
      }
      if (!t && this.axes.nextAxis) {
        this.addAxisCoord({
          xPx: (s.offsetX - Sr) / this.canvas.scale,
          yPx: s.offsetY / this.canvas.scale
        }), this.inactivatePlots(), this.axes.nextAxis || (this.canvas.manualMode = 0);
        return;
      }
    },
    mouseDrag(s) {
      this.mouseMoveOnCanvas(s);
    },
    mouseMove(s) {
      const e = s.target, t = s.offsetX - Sr + parseFloat(e.style.left), n = s.offsetY + parseFloat(e.style.top);
      this.axes.isAdjusting = !1, this.datasets.activeDataset.plotsAreAdjusting = !1, this.setCanvasCursor({
        xPx: t / this.canvas.scale,
        yPx: n / this.canvas.scale
      }), s.buttons === 1 && this.mouseDrag({ xPx: t, yPx: n });
    },
    mouseDown(s) {
      const e = s.target, t = s.offsetX - Sr + parseFloat(e.style.left), n = s.offsetY + parseFloat(e.style.top);
      this.canvas.maskMode === 1 && this.canvas.mouseDownForBox(t, n);
    },
    mouseUp() {
      this.canvas.maskMode === 1 && this.canvas.mouseUpForBox();
    },
    keyDownHandler(s) {
      const e = s.target;
      if (e.hasAttribute("contentEditable"))
        return;
      const t = e.nodeName;
      if (t === "INPUT" || t === "TEXTAREA")
        return;
      const n = [
        "ArrowUp",
        "ArrowRight",
        "ArrowDown",
        "ArrowLeft",
        "Backspace",
        "Delete",
        "a",
        "e",
        "d"
      ], o = s.key;
      if (!n.includes(o))
        return;
      switch (s.preventDefault(), o) {
        case "a":
          this.setManualMode(0);
          return;
        case "e":
          this.setManualMode(1);
          return;
        case "d":
          this.setManualMode(2);
          return;
      }
      this.datasets.activeDataset.hasActive() && (o === "Backspace" || o === "Delete") && this.clearActivePlots();
      const r = s.shiftKey, a = {
        direction: this.getDirectionFromKey(o),
        distancePx: r ? 10 : 1
      };
      this.axes.activeAxis && this.axes.activeAxis.coord && (this.moveActiveAxis(a), this.setCanvasCursor(this.axes.activeAxis.coord)), this.datasets.activeDataset.plotsAreActive && (this.moveActivePlot(a), this.setCanvasCursor(
        this.datasets.activeDataset.plots.filter(
          (l) => this.datasets.activeDataset.activePlotIds.includes(l.id)
        )[0]
      ));
    },
    getDirectionFromKey(s) {
      switch (s) {
        case "ArrowUp":
          return "up";
        case "ArrowDown":
          return "down";
        case "ArrowRight":
          return "right";
        case "ArrowLeft":
          return "left";
        default:
          throw new Error(`undefined direction: ${s}`);
      }
    }
  }
});
const Pf = (s) => (Hy("data-v-9ce439db"), s = s(), ky(), s), CT = /* @__PURE__ */ Pf(() => /* @__PURE__ */ Re("canvas", { id: "imageCanvas" }, null, -1)), vT = /* @__PURE__ */ Pf(() => /* @__PURE__ */ Re("canvas", {
  id: "tempMaskCanvas",
  style: {
    position: "absolute",
    top: 0,
    left: 0,
    opacity: 0.5
  }
}, null, -1)), yT = /* @__PURE__ */ Pf(() => /* @__PURE__ */ Re("canvas", {
  style: {
    position: "absolute",
    top: 0,
    left: 0,
    opacity: 0.5
  },
  id: "maskCanvas"
}, null, -1));
function ST(s, e, t, n, o, r) {
  const a = ce("canvas-axes-guide"), l = ce("canvas-axes"), c = ce("canvas-plots"), h = ce("canvas-cursor");
  return we(), ke("div", {
    id: "canvasWrapper",
    class: "c__canvas-wrapper",
    onClick: e[0] || (e[0] = (...u) => s.plot && s.plot(...u)),
    onMousemove: e[1] || (e[1] = (...u) => s.mouseMove && s.mouseMove(...u)),
    onMousedown: e[2] || (e[2] = (...u) => s.mouseDown && s.mouseDown(...u)),
    onMouseup: e[3] || (e[3] = (...u) => s.mouseUp && s.mouseUp(...u))
  }, [
    CT,
    vT,
    yT,
    te(a),
    te(l),
    te(c),
    te(h)
  ], 32);
}
const bT = /* @__PURE__ */ it(wT, [["render", ST], ["__scopeId", "data-v-9ce439db"]]), RT = Je({
  computed: {
    ...Me(os, ["axes"]),
    errorMessage() {
      if (this.axes.xIsLog) {
        if (this.x1 === "0" || this.x2 === "0")
          return "x1 or x2 should not be 0";
      } else if (this.x1 === this.x2)
        return "x1 and x2 should not be same value";
      if (this.axes.yIsLog) {
        if (this.y1 === "0" || this.y2 === "0")
          return "y1 or y2 should not be 0";
      } else if (this.y1 === this.y2)
        return "y1 and y2 should not be same value";
      return "";
    }
  },
  data() {
    return {
      x1: "0",
      x2: "1",
      y1: "0",
      y2: "1",
      xIsLog: !1,
      yIsLog: !1
    };
  },
  methods: {
    ...Tt(os, [
      "setX1Value",
      "setX2Value",
      "setY1Value",
      "setY2Value",
      "setXIsLog",
      "setYIsLog"
    ]),
    multiplyByTenX1() {
      this.x1 = String(this.multiplyByTen(parseFloat(this.x1)));
    },
    divideByTenX1() {
      this.x1 = String(this.divideByTen(parseFloat(this.x1)));
    },
    multiplyByTenX2() {
      this.x2 = String(this.multiplyByTen(parseFloat(this.x2)));
    },
    divideByTenX2() {
      this.x2 = String(this.divideByTen(parseFloat(this.x2)));
    },
    multiplyByTenY1() {
      this.y1 = String(this.multiplyByTen(parseFloat(this.y1)));
    },
    divideByTenY1() {
      this.y1 = String(this.divideByTen(parseFloat(this.y1)));
    },
    multiplyByTenY2() {
      this.y2 = String(this.multiplyByTen(parseFloat(this.y2)));
    },
    divideByTenY2() {
      this.y2 = String(this.divideByTen(parseFloat(this.y2)));
    },
    multiplyByTen(s) {
      return s === 0 ? 1 : (s * 10).toPrecision(1);
    },
    divideByTen(s) {
      return s === 0 ? 0.1 : (s * 0.1).toPrecision(1);
    }
  },
  mounted() {
    this.x1 = String(this.axes.x1.value), this.x2 = String(this.axes.x2.value), this.y1 = String(this.axes.y1.value), this.y2 = String(this.axes.y2.value), this.xIsLog = this.axes.xIsLog, this.yIsLog = this.axes.yIsLog;
  },
  watch: {
    xIsLog(s) {
      this.setXIsLog(s);
    },
    yIsLog(s) {
      this.setYIsLog(s);
    },
    x1(s) {
      this.setX1Value(parseFloat(s));
    },
    x2(s) {
      this.setX2Value(parseFloat(s));
    },
    y1(s) {
      this.setY1Value(parseFloat(s));
    },
    y2(s) {
      this.setY2Value(parseFloat(s));
    }
  }
});
const ar = (s) => (Hy("data-v-d02d45ba"), s = s(), ky(), s), ET = /* @__PURE__ */ ar(() => /* @__PURE__ */ Re("h4", null, "XY Axes", -1)), xT = { class: "c__axes-settings__table" }, TT = /* @__PURE__ */ ar(() => /* @__PURE__ */ Re("td", { class: "pl-0 pr-1" }, "X", -1)), MT = { class: "pl-0 pr-1" }, _T = {
  key: 0,
  class: "c__axes-settings__log-adjuster"
}, IT = { class: "pl-0 pr-1" }, OT = {
  key: 0,
  class: "c__axes-settings__log-adjuster"
}, AT = /* @__PURE__ */ ar(() => /* @__PURE__ */ Re("span", { class: "c__axes-settings__hint" }, "Log", -1)), PT = /* @__PURE__ */ ar(() => /* @__PURE__ */ Re("td", { class: "pl-0 pr-1" }, "Y", -1)), DT = { class: "pl-0 pr-1" }, HT = {
  key: 0,
  class: "c__axes-settings__log-adjuster"
}, kT = { class: "pl-0 pr-1" }, NT = {
  key: 0,
  class: "c__axes-settings__log-adjuster"
}, LT = /* @__PURE__ */ ar(() => /* @__PURE__ */ Re("span", { class: "c__axes-settings__hint" }, "Log", -1)), $T = { class: "mb-5" }, FT = /* @__PURE__ */ ar(() => /* @__PURE__ */ Re("h5", { class: "c__axes-settings__point-mode__label" }, " Define the axes by the coordinates of: ", -1)), VT = { class: "text-red" };
function BT(s, e, t, n, o, r) {
  const a = ce("v-text-field"), l = ce("v-checkbox"), c = ce("v-radio"), h = ce("v-radio-group");
  return we(), ke("div", null, [
    ET,
    Re("table", xT, [
      Re("tbody", null, [
        Re("tr", null, [
          TT,
          Re("td", MT, [
            te(a, {
              modelValue: s.x1,
              "onUpdate:modelValue": e[2] || (e[2] = (u) => s.x1 = u),
              id: "x1-value",
              type: "number",
              "hide-details": "",
              label: "x1",
              density: "compact"
            }, {
              default: ye(() => [
                s.xIsLog ? (we(), ke("div", _T, [
                  Re("button", {
                    size: "x-small",
                    onClick: e[0] || (e[0] = (...u) => s.multiplyByTenX1 && s.multiplyByTenX1(...u)),
                    id: "multiply-by-ten-x1",
                    icon: ""
                  }, " x10 "),
                  Re("button", {
                    id: "divide-by-ten-x1",
                    size: "x-small",
                    onClick: e[1] || (e[1] = (...u) => s.divideByTenX1 && s.divideByTenX1(...u)),
                    icon: ""
                  }, " /10 ")
                ])) : Ot("", !0)
              ]),
              _: 1
            }, 8, ["modelValue"])
          ]),
          Re("td", IT, [
            te(a, {
              modelValue: s.x2,
              "onUpdate:modelValue": e[5] || (e[5] = (u) => s.x2 = u),
              id: "x2-value",
              type: "number",
              "hide-details": "",
              label: "x2",
              density: "compact"
            }, {
              default: ye(() => [
                s.xIsLog ? (we(), ke("div", OT, [
                  Re("button", {
                    id: "multiply-by-ten-x2",
                    size: "x-small",
                    onClick: e[3] || (e[3] = (...u) => s.multiplyByTenX2 && s.multiplyByTenX2(...u)),
                    icon: ""
                  }, " x10 "),
                  Re("button", {
                    id: "divide-by-ten-x2",
                    size: "x-small",
                    onClick: e[4] || (e[4] = (...u) => s.divideByTenX2 && s.divideByTenX2(...u)),
                    icon: ""
                  }, " /10 ")
                ])) : Ot("", !0)
              ]),
              _: 1
            }, 8, ["modelValue"])
          ]),
          Re("td", null, [
            te(l, {
              color: "primary",
              modelValue: s.xIsLog,
              "onUpdate:modelValue": e[6] || (e[6] = (u) => s.xIsLog = u),
              id: "x-is-log",
              "hide-details": "",
              density: "compact"
            }, null, 8, ["modelValue"]),
            AT
          ])
        ]),
        Re("tr", null, [
          PT,
          Re("td", DT, [
            te(a, {
              modelValue: s.y1,
              "onUpdate:modelValue": e[9] || (e[9] = (u) => s.y1 = u),
              id: "y1-value",
              type: "number",
              "hide-details": "",
              label: "y1",
              density: "compact"
            }, {
              default: ye(() => [
                s.yIsLog ? (we(), ke("div", HT, [
                  Re("button", {
                    id: "multiply-by-ten-y1",
                    size: "x-small",
                    onClick: e[7] || (e[7] = (...u) => s.multiplyByTenY1 && s.multiplyByTenY1(...u)),
                    icon: ""
                  }, " x10 "),
                  Re("button", {
                    id: "divide-by-ten-y1",
                    size: "x-small",
                    onClick: e[8] || (e[8] = (...u) => s.divideByTenY1 && s.divideByTenY1(...u)),
                    icon: ""
                  }, " /10 ")
                ])) : Ot("", !0)
              ]),
              _: 1
            }, 8, ["modelValue"])
          ]),
          Re("td", kT, [
            te(a, {
              modelValue: s.y2,
              "onUpdate:modelValue": e[12] || (e[12] = (u) => s.y2 = u),
              id: "y2-value",
              type: "number",
              "hide-details": "",
              label: "y2",
              density: "compact"
            }, {
              default: ye(() => [
                s.yIsLog ? (we(), ke("div", NT, [
                  Re("button", {
                    id: "multiply-by-ten-y2",
                    size: "x-small",
                    onClick: e[10] || (e[10] = (...u) => s.multiplyByTenY2 && s.multiplyByTenY2(...u)),
                    icon: ""
                  }, " x10 "),
                  Re("button", {
                    id: "divide-by-ten-y2",
                    size: "x-small",
                    onClick: e[11] || (e[11] = (...u) => s.divideByTenY2 && s.divideByTenY2(...u)),
                    icon: ""
                  }, " /10 ")
                ])) : Ot("", !0)
              ]),
              _: 1
            }, 8, ["modelValue"])
          ]),
          Re("td", null, [
            te(l, {
              color: "primary",
              modelValue: s.yIsLog,
              "onUpdate:modelValue": e[13] || (e[13] = (u) => s.yIsLog = u),
              id: "y-is-log",
              density: "compact",
              "hide-details": ""
            }, null, 8, ["modelValue"]),
            LT
          ])
        ])
      ])
    ]),
    Re("div", $T, [
      FT,
      te(h, {
        row: "",
        modelValue: s.axes.pointMode,
        "onUpdate:modelValue": e[14] || (e[14] = (u) => s.axes.pointMode = u),
        modelModifiers: { number: !0 },
        inline: "",
        color: "primary",
        "hide-details": ""
      }, {
        default: ye(() => [
          te(c, {
            label: "2 Points",
            value: 0
          }),
          te(c, {
            label: "4 Points",
            value: 1
          })
        ]),
        _: 1
      }, 8, ["modelValue"]),
      s.axes.pointMode === 1 ? (we(), bs(l, {
        key: 0,
        modelValue: s.axes.considerGraphTilt,
        "onUpdate:modelValue": e[15] || (e[15] = (u) => s.axes.considerGraphTilt = u),
        label: "Consider graph tilt",
        density: "compact",
        color: "primary"
      }, null, 8, ["modelValue"])) : Ot("", !0)
    ]),
    Re("p", VT, ns(s.errorMessage), 1)
  ]);
}
const WT = /* @__PURE__ */ it(RT, [["render", BT], ["__scopeId", "data-v-d02d45ba"]]), UT = Je({
  computed: {
    ...Me(Hd, ["symbolExtractByArea"])
  },
  methods: {
    ...Tt(Hd, [
      "setMinDiameterPx",
      "setMaxDiameterPx"
    ]),
    inputMin(s) {
      this.setMinDiameterPx(parseInt(s));
    },
    inputMax(s) {
      this.setMaxDiameterPx(parseInt(s));
    }
  }
});
function zT(s, e, t, n, o, r) {
  const a = ce("v-text-field"), l = ce("v-col"), c = ce("v-row");
  return we(), bs(c, { class: "ma-0" }, {
    default: ye(() => [
      te(l, { class: "pa-0" }, {
        default: ye(() => [
          te(a, {
            "model-value": s.symbolExtractByArea.minDiameterPx,
            "onUpdate:modelValue": s.inputMin,
            label: "Min. Diameter (px)",
            type: "number",
            class: "ma-0",
            density: "compact"
          }, null, 8, ["model-value", "onUpdate:modelValue"])
        ]),
        _: 1
      }),
      te(l, { class: "pa-0" }, {
        default: ye(() => [
          te(a, {
            "model-value": s.symbolExtractByArea.maxDiameterPx,
            "onUpdate:modelValue": s.inputMax,
            label: "Max. Diameter (px)",
            type: "number",
            class: "ma-0",
            density: "compact"
          }, null, 8, ["model-value", "onUpdate:modelValue"])
        ]),
        _: 1
      })
    ]),
    _: 1
  });
}
const YT = /* @__PURE__ */ it(UT, [["render", zT]]), GT = Je({
  computed: {
    ...Me(Dd, ["lineExtract"])
  },
  methods: {
    ...Tt(Dd, ["setDyPx", "setDxPx"]),
    inputDxDyPx(s) {
      this.setDxPx(parseInt(s)), this.setDyPx(parseInt(s));
    }
  }
});
function jT(s, e, t, n, o, r) {
  const a = ce("v-text-field"), l = ce("v-col"), c = ce("v-row");
  return we(), bs(c, { class: "ma-0" }, {
    default: ye(() => [
      te(l, { class: "pa-0" }, {
        default: ye(() => [
          te(a, {
            "model-value": s.lineExtract.dxPx,
            "onUpdate:modelValue": s.inputDxDyPx,
            label: "ΔX (px)",
            type: "number",
            class: "ma-0",
            id: "line-extract-dx",
            density: "compact"
          }, null, 8, ["model-value", "onUpdate:modelValue"])
        ]),
        _: 1
      }),
      te(l, { class: "pa-0" }, {
        default: ye(() => [
          te(a, {
            "model-value": s.lineExtract.dyPx,
            "onUpdate:modelValue": s.inputDxDyPx,
            label: "ΔY (px)",
            type: "number",
            class: "ma-0",
            id: "line-extract-dy",
            density: "compact"
          }, null, 8, ["model-value", "onUpdate:modelValue"])
        ]),
        _: 1
      })
    ]),
    _: 1
  });
}
const KT = /* @__PURE__ */ it(GT, [["render", jT]]), XT = Je({
  computed: {
    ...Me(Pt, ["canvas"])
  },
  methods: {
    ...Tt(Pt, [
      "setPenToolSizePx",
      "setMaskMode",
      "setEraserSizePx"
    ]),
    onChangePenToolSizePx(s) {
      this.setPenToolSizePx(Number(s.target.value));
    },
    onChangeEraserSizePx(s) {
      this.setEraserSizePx(Number(s.target.value));
    },
    change(s) {
      if (s === void 0) {
        this.setMaskMode(-1);
        return;
      }
      this.setMaskMode(s);
    },
    clearMask() {
      this.canvas.clearMask(), this.canvas.maskMode === 2 && (this.canvas.maskMode = -1);
    }
  }
}), qT = { class: "mt-3 mb-5" }, ZT = /* @__PURE__ */ Re("h5", { class: "mb-2" }, "Selection Area", -1);
function QT(s, e, t, n, o, r) {
  const a = ce("v-btn"), l = ce("v-btn-toggle"), c = ce("v-text-field");
  return we(), ke("div", qT, [
    ZT,
    te(l, {
      "model-value": s.canvas.maskMode,
      "onUpdate:modelValue": s.change,
      density: "compact",
      class: "mb-2",
      divided: "",
      border: !0
    }, {
      default: ye(() => [
        te(a, {
          size: "small",
          color: "primary"
        }, {
          default: ye(() => [
            xt(" Pen ")
          ]),
          _: 1
        }),
        te(a, {
          size: "small",
          color: "primary"
        }, {
          default: ye(() => [
            xt(" Box ")
          ]),
          _: 1
        }),
        te(a, {
          size: "small",
          color: "primary"
        }, {
          default: ye(() => [
            xt(" Eraser ")
          ]),
          _: 1
        })
      ]),
      _: 1
    }, 8, ["model-value", "onUpdate:modelValue"]),
    te(a, {
      size: "small",
      class: "ml-1",
      disabled: !s.canvas.isDrawnMask,
      onClick: s.clearMask
    }, {
      default: ye(() => [
        xt(" Clear ")
      ]),
      _: 1
    }, 8, ["disabled", "onClick"]),
    s.canvas.maskMode === 0 ? (we(), bs(c, {
      key: 0,
      "model-value": s.canvas.penToolSizePx,
      onChange: s.onChangePenToolSizePx,
      type: "number",
      "hide-details": "",
      label: "Pen Size",
      density: "compact"
    }, null, 8, ["model-value", "onChange"])) : Ot("", !0),
    s.canvas.maskMode === 2 ? (we(), bs(c, {
      key: 1,
      "model-value": s.canvas.eraserSizePx,
      onChange: s.onChangeEraserSizePx,
      type: "number",
      "hide-details": "",
      label: "Eraser Size (px)",
      density: "compact"
    }, null, 8, ["model-value", "onChange"])) : Ot("", !0)
  ]);
}
const JT = /* @__PURE__ */ it(XT, [["render", QT]]), eM = Je({
  data() {
    return {
      colorDistancePctErrorMsg: ""
    };
  },
  computed: {
    ...Me(qi, ["extractor"])
  },
  methods: {
    ...Tt(qi, ["setColorPicker", "setColorDistancePct"]),
    inputColorPicker(s) {
      console.log(s), this.setColorPicker(s.target.value);
    },
    inputColorDistancePct(s) {
      const e = parseInt(s);
      this.colorDistancePctErrorMsg = "", e < 1 && (this.colorDistancePctErrorMsg = "The Color Difference(%) is supposed to be larger than 1%."), 100 <= e && (this.colorDistancePctErrorMsg = 'The Color Difference(%) is supposed to be size="small"er than 100%'), this.setColorDistancePct(e);
    }
  }
}), tM = { class: "mt-3 mb-5" }, sM = /* @__PURE__ */ Re("h5", { class: "mb-2" }, "Extracted Color", -1), nM = { class: "d-flex" }, iM = ["value"];
function oM(s, e, t, n, o, r) {
  const a = ce("v-icon"), l = ce("v-col"), c = ce("v-text-field"), h = ce("v-row"), u = ce("v-color-picker");
  return we(), ke("div", tM, [
    sM,
    te(h, { class: "mt-1" }, {
      default: ye(() => [
        te(l, { cols: "4" }, {
          default: ye(() => [
            Re("label", nM, [
              Re("input", {
                type: "color",
                value: s.extractor.colorPicker,
                onInput: e[0] || (e[0] = (...f) => s.inputColorPicker && s.inputColorPicker(...f))
              }, null, 40, iM),
              te(a, { size: "small" }, {
                default: ye(() => [
                  xt("mdi-palette")
                ]),
                _: 1
              })
            ])
          ]),
          _: 1
        }),
        te(l, { cols: "8" }, {
          default: ye(() => [
            te(c, {
              "model-value": s.extractor.colorDistancePct,
              "onUpdate:modelValue": s.inputColorDistancePct,
              label: "Color Diff. (%)",
              type: "number",
              error: s.colorDistancePctErrorMsg.length > 0,
              "error-messages": s.colorDistancePctErrorMsg,
              density: "compact"
            }, null, 8, ["model-value", "onUpdate:modelValue", "error", "error-messages"])
          ]),
          _: 1
        })
      ]),
      _: 1
    }),
    te(u, {
      "model-value": s.extractor.colorPicker,
      "onUpdate:modelValue": s.setColorPicker,
      "hide-canvas": "",
      "hide-inputs": "",
      "show-swatches": "",
      "hide-sliders": "",
      swatches: s.extractor.swatches,
      elevation: 0
    }, null, 8, ["model-value", "onUpdate:modelValue", "swatches"])
  ]);
}
const rM = /* @__PURE__ */ it(eM, [["render", oM]]), aM = Je({
  components: {
    SymbolExtractSettings: YT,
    LineExtractSettings: KT,
    MaskSettings: JT,
    ColorSettings: rM
  },
  data() {
    return {
      isExtracting: !1
    };
  },
  computed: {
    ...Me(qi, ["extractor"]),
    ...Me(Pt, ["canvas"])
  },
  props: {
    initialExtractorStrategy: {
      type: String,
      required: !1
    }
  },
  mounted() {
    switch (this.initialExtractorStrategy) {
      case "Symbol Extract":
        this.setStrategy(ra.instance);
        break;
      case "Line Extract":
        this.setStrategy(er.instance);
    }
  },
  methods: {
    ...Tt(qi, ["setStrategy"]),
    ...Tt(os, ["inactivateAxis"]),
    ...Tt(As, [
      "clearPlots",
      "setPlots",
      "sortPlots",
      "inactivatePlots"
    ]),
    ...Tt(Pt, ["setManualMode"]),
    changeManualMode(s) {
      if (this.inactivatePlots(), s === void 0) {
        this.setManualMode(-1);
        return;
      }
      this.setManualMode(s);
    },
    setExtractStrategy(s) {
      switch (s) {
        case "Symbol Extract":
          this.setStrategy(ra.instance);
          break;
        case "Line Extract":
          this.setStrategy(er.instance);
      }
    },
    async extractPlots() {
      this.isExtracting = !0, this.inactivateAxis(), this.clearPlots();
      try {
        this.setPlots(this.extractor.execute(this.canvas)), this.sortPlots();
      } catch (s) {
        console.error("failed to extractPlots", { cause: s });
      } finally {
        this.isExtracting = !1;
      }
    }
  }
}), lM = /* @__PURE__ */ Re("h4", { class: "mb-2" }, "Manual Extraction", -1), cM = /* @__PURE__ */ Re("h4", { class: "mb-2" }, "Automatic Extraction", -1), hM = { key: 0 }, uM = { key: 1 };
function dM(s, e, t, n, o, r) {
  const a = ce("v-btn"), l = ce("v-btn-toggle"), c = ce("v-select"), h = ce("symbol-extract-settings"), u = ce("line-extract-settings"), f = ce("mask-settings"), g = ce("color-settings");
  return we(), ke("div", null, [
    lM,
    te(l, {
      "model-value": s.canvas.manualMode,
      "onUpdate:modelValue": s.changeManualMode,
      density: "compact",
      class: "mb-4",
      divided: "",
      border: !0
    }, {
      default: ye(() => [
        te(a, {
          size: "small",
          color: "primary"
        }, {
          default: ye(() => [
            xt(" Add (A) ")
          ]),
          _: 1
        }),
        te(a, {
          size: "small",
          color: "primary"
        }, {
          default: ye(() => [
            xt(" Edit (E) ")
          ]),
          _: 1
        }),
        te(a, {
          size: "small",
          color: "primary"
        }, {
          default: ye(() => [
            xt(" Delete (D) ")
          ]),
          _: 1
        })
      ]),
      _: 1
    }, 8, ["model-value", "onUpdate:modelValue"]),
    cM,
    te(c, {
      "onUpdate:modelValue": s.setExtractStrategy,
      "model-value": s.extractor.strategy.name,
      items: s.extractor.strategies,
      label: "Select Algorithm"
    }, null, 8, ["onUpdate:modelValue", "model-value", "items"]),
    s.extractor.strategy.name === "Symbol Extract" ? (we(), ke("div", hM, [
      te(h)
    ])) : s.extractor.strategy.name === "Line Extract" ? (we(), ke("div", uM, [
      te(u)
    ])) : Ot("", !0),
    te(f),
    te(g),
    te(a, {
      loading: s.isExtracting,
      onClick: s.extractPlots,
      color: "primary",
      size: "small"
    }, {
      default: ye(() => [
        xt("Run")
      ]),
      _: 1
    }, 8, ["loading", "onClick"])
  ]);
}
const fM = /* @__PURE__ */ it(aM, [["render", dM]]), gM = Je({
  computed: {
    ...Me(Pt, ["canvas"])
  },
  data() {
    return {};
  },
  mounted() {
    document.addEventListener("paste", this.pasteHandler.bind(this));
  },
  beforeDestroy() {
    document.removeEventListener("paste", this.pasteHandler);
  },
  methods: {
    ...Tt(Pt, ["drawFitSizeImage", "setUploadImageUrl"]),
    ...Tt(os, ["clearAxesCoords"]),
    ...Tt(As, ["clearPlots"]),
    ...Tt(qi, ["setSwatches"]),
    async uploadImage(s) {
      try {
        const e = await this.readFile(s);
        if (typeof e.result != "string")
          throw new Error("file is not string type");
        const t = await this.loadImage(e.result);
        this.canvas.changeImage(t), this.drawFitSizeImage(), this.setSwatches(this.canvas.colorSwatches), this.setUploadImageUrl(e.result), this.clearAxesCoords(), this.clearPlots();
      } finally {
      }
    },
    readFile(s) {
      return new Promise((e, t) => {
        const n = new FileReader();
        n.readAsDataURL(s), n.addEventListener("load", () => e(n)), n.addEventListener("error", (o) => t(o));
      });
    },
    loadImage(s) {
      return new Promise((e, t) => {
        const n = new Image();
        n.onload = () => e(n), n.onerror = (o) => t(o), n.src = s;
      });
    },
    pasteHandler(s) {
      const e = s.target.nodeName;
      if (e === "INPUT" || e === "TEXTAREA" || !s.clipboardData || !s.clipboardData.items)
        return;
      const t = s.clipboardData.items;
      if (t[0].type.indexOf("image") === -1)
        return;
      const n = t[0].getAsFile();
      n && this.uploadImage(n);
    }
  }
});
function mM(s, e, t, n, o, r) {
  const a = ce("v-file-input");
  return we(), bs(a, {
    accept: "image/*",
    onChange: s.uploadImage,
    clearable: !1,
    label: "choose an image file",
    "hide-details": "",
    class: "mb-5"
  }, null, 8, ["onChange"]);
}
const pM = /* @__PURE__ */ it(gM, [["render", mM]]), wM = Je({
  components: {},
  data() {
    return {
      sortKey: "as added",
      sortKeys: ["as added", "x", "y"],
      sortOrder: "ascending",
      sortOrders: ["ascending", "descending"]
    };
  },
  computed: {
    ...Me(As, ["datasets"]),
    ...Me(Pt, ["canvas"])
  },
  props: {
    exportBtnText: {
      type: String,
      required: !1
    },
    exportBtnClick: {
      type: Function,
      required: !1
    }
  },
  methods: {
    ...Tt(As, [
      "addDataset",
      "setActiveDataset",
      "popDataset"
    ]),
    activateDataset(s) {
      this.setActiveDataset(s), this.canvas.clearMask(), this.canvas.maskMode = -1;
    }
  }
}), CM = { class: "align-self-center" };
function vM(s, e, t, n, o, r) {
  const a = ce("v-icon"), l = ce("v-btn"), c = ce("v-text-field"), h = ce("v-col"), u = ce("v-row"), f = ce("v-list-item"), g = ce("v-list");
  return we(), ke("div", null, [
    Re("h4", null, [
      xt(" Datasets "),
      te(l, {
        onClick: s.addDataset,
        size: "x-small",
        class: "ml-2"
      }, {
        default: ye(() => [
          te(a, null, {
            default: ye(() => [
              xt("mdi-plus")
            ]),
            _: 1
          })
        ]),
        _: 1
      }, 8, ["onClick"]),
      te(l, {
        size: "x-small",
        onClick: s.popDataset,
        disabled: s.datasets.datasets.length === 1,
        class: "ml-2"
      }, {
        default: ye(() => [
          te(a, null, {
            default: ye(() => [
              xt("mdi-minus")
            ]),
            _: 1
          })
        ]),
        _: 1
      }, 8, ["onClick", "disabled"])
    ]),
    te(g, {
      density: "compact",
      height: "20vh",
      class: "overflow-y-auto mb-5 mt-1 pa-0",
      style: { outline: "solid 1px gray" }
    }, {
      default: ye(() => [
        (we(!0), ke(Fc, null, Vc(s.datasets.datasets, (m) => (we(), bs(f, {
          key: m.id,
          class: lw(["pl-2", m.id === s.datasets.activeDataset.id && "blue lighten-4"]),
          link: "",
          onClick: (w) => s.activateDataset(m.id)
        }, {
          default: ye(() => [
            te(u, null, {
              default: ye(() => [
                te(h, { cols: "10" }, {
                  default: ye(() => [
                    te(c, {
                      modelValue: m.name,
                      "onUpdate:modelValue": (w) => m.name = w,
                      placeholder: "dataset " + m.id,
                      "hide-details": "",
                      density: "compact",
                      class: "mt-0 pt-0"
                    }, null, 8, ["modelValue", "onUpdate:modelValue", "placeholder"])
                  ]),
                  _: 2
                }, 1024),
                te(h, {
                  cols: "2",
                  class: lw(["pa-0 d-flex align-items-center", `dataset-count-${m.id}`])
                }, {
                  default: ye(() => [
                    Re("span", CM, ns(m.plots.length), 1)
                  ]),
                  _: 2
                }, 1032, ["class"])
              ]),
              _: 2
            }, 1024)
          ]),
          _: 2
        }, 1032, ["onClick", "class"]))), 128))
      ]),
      _: 1
    })
  ]);
}
const yM = /* @__PURE__ */ it(wM, [["render", vM]]), Wy = "0.16.1", SM = Object.freeze({
  base: "#f44336",
  lighten5: "#ffebee",
  lighten4: "#ffcdd2",
  lighten3: "#ef9a9a",
  lighten2: "#e57373",
  lighten1: "#ef5350",
  darken1: "#e53935",
  darken2: "#d32f2f",
  darken3: "#c62828",
  darken4: "#b71c1c",
  accent1: "#ff8a80",
  accent2: "#ff5252",
  accent3: "#ff1744",
  accent4: "#d50000"
}), bM = Object.freeze({
  base: "#e91e63",
  lighten5: "#fce4ec",
  lighten4: "#f8bbd0",
  lighten3: "#f48fb1",
  lighten2: "#f06292",
  lighten1: "#ec407a",
  darken1: "#d81b60",
  darken2: "#c2185b",
  darken3: "#ad1457",
  darken4: "#880e4f",
  accent1: "#ff80ab",
  accent2: "#ff4081",
  accent3: "#f50057",
  accent4: "#c51162"
}), RM = Object.freeze({
  base: "#9c27b0",
  lighten5: "#f3e5f5",
  lighten4: "#e1bee7",
  lighten3: "#ce93d8",
  lighten2: "#ba68c8",
  lighten1: "#ab47bc",
  darken1: "#8e24aa",
  darken2: "#7b1fa2",
  darken3: "#6a1b9a",
  darken4: "#4a148c",
  accent1: "#ea80fc",
  accent2: "#e040fb",
  accent3: "#d500f9",
  accent4: "#aa00ff"
}), EM = Object.freeze({
  base: "#673ab7",
  lighten5: "#ede7f6",
  lighten4: "#d1c4e9",
  lighten3: "#b39ddb",
  lighten2: "#9575cd",
  lighten1: "#7e57c2",
  darken1: "#5e35b1",
  darken2: "#512da8",
  darken3: "#4527a0",
  darken4: "#311b92",
  accent1: "#b388ff",
  accent2: "#7c4dff",
  accent3: "#651fff",
  accent4: "#6200ea"
}), xM = Object.freeze({
  base: "#3f51b5",
  lighten5: "#e8eaf6",
  lighten4: "#c5cae9",
  lighten3: "#9fa8da",
  lighten2: "#7986cb",
  lighten1: "#5c6bc0",
  darken1: "#3949ab",
  darken2: "#303f9f",
  darken3: "#283593",
  darken4: "#1a237e",
  accent1: "#8c9eff",
  accent2: "#536dfe",
  accent3: "#3d5afe",
  accent4: "#304ffe"
}), TM = Object.freeze({
  base: "#2196f3",
  lighten5: "#e3f2fd",
  lighten4: "#bbdefb",
  lighten3: "#90caf9",
  lighten2: "#64b5f6",
  lighten1: "#42a5f5",
  darken1: "#1e88e5",
  darken2: "#1976d2",
  darken3: "#1565c0",
  darken4: "#0d47a1",
  accent1: "#82b1ff",
  accent2: "#448aff",
  accent3: "#2979ff",
  accent4: "#2962ff"
}), MM = Object.freeze({
  base: "#03a9f4",
  lighten5: "#e1f5fe",
  lighten4: "#b3e5fc",
  lighten3: "#81d4fa",
  lighten2: "#4fc3f7",
  lighten1: "#29b6f6",
  darken1: "#039be5",
  darken2: "#0288d1",
  darken3: "#0277bd",
  darken4: "#01579b",
  accent1: "#80d8ff",
  accent2: "#40c4ff",
  accent3: "#00b0ff",
  accent4: "#0091ea"
}), _M = Object.freeze({
  base: "#00bcd4",
  lighten5: "#e0f7fa",
  lighten4: "#b2ebf2",
  lighten3: "#80deea",
  lighten2: "#4dd0e1",
  lighten1: "#26c6da",
  darken1: "#00acc1",
  darken2: "#0097a7",
  darken3: "#00838f",
  darken4: "#006064",
  accent1: "#84ffff",
  accent2: "#18ffff",
  accent3: "#00e5ff",
  accent4: "#00b8d4"
}), IM = Object.freeze({
  base: "#009688",
  lighten5: "#e0f2f1",
  lighten4: "#b2dfdb",
  lighten3: "#80cbc4",
  lighten2: "#4db6ac",
  lighten1: "#26a69a",
  darken1: "#00897b",
  darken2: "#00796b",
  darken3: "#00695c",
  darken4: "#004d40",
  accent1: "#a7ffeb",
  accent2: "#64ffda",
  accent3: "#1de9b6",
  accent4: "#00bfa5"
}), OM = Object.freeze({
  base: "#4caf50",
  lighten5: "#e8f5e9",
  lighten4: "#c8e6c9",
  lighten3: "#a5d6a7",
  lighten2: "#81c784",
  lighten1: "#66bb6a",
  darken1: "#43a047",
  darken2: "#388e3c",
  darken3: "#2e7d32",
  darken4: "#1b5e20",
  accent1: "#b9f6ca",
  accent2: "#69f0ae",
  accent3: "#00e676",
  accent4: "#00c853"
}), AM = Object.freeze({
  base: "#8bc34a",
  lighten5: "#f1f8e9",
  lighten4: "#dcedc8",
  lighten3: "#c5e1a5",
  lighten2: "#aed581",
  lighten1: "#9ccc65",
  darken1: "#7cb342",
  darken2: "#689f38",
  darken3: "#558b2f",
  darken4: "#33691e",
  accent1: "#ccff90",
  accent2: "#b2ff59",
  accent3: "#76ff03",
  accent4: "#64dd17"
}), PM = Object.freeze({
  base: "#cddc39",
  lighten5: "#f9fbe7",
  lighten4: "#f0f4c3",
  lighten3: "#e6ee9c",
  lighten2: "#dce775",
  lighten1: "#d4e157",
  darken1: "#c0ca33",
  darken2: "#afb42b",
  darken3: "#9e9d24",
  darken4: "#827717",
  accent1: "#f4ff81",
  accent2: "#eeff41",
  accent3: "#c6ff00",
  accent4: "#aeea00"
}), DM = Object.freeze({
  base: "#ffeb3b",
  lighten5: "#fffde7",
  lighten4: "#fff9c4",
  lighten3: "#fff59d",
  lighten2: "#fff176",
  lighten1: "#ffee58",
  darken1: "#fdd835",
  darken2: "#fbc02d",
  darken3: "#f9a825",
  darken4: "#f57f17",
  accent1: "#ffff8d",
  accent2: "#ffff00",
  accent3: "#ffea00",
  accent4: "#ffd600"
}), HM = Object.freeze({
  base: "#ffc107",
  lighten5: "#fff8e1",
  lighten4: "#ffecb3",
  lighten3: "#ffe082",
  lighten2: "#ffd54f",
  lighten1: "#ffca28",
  darken1: "#ffb300",
  darken2: "#ffa000",
  darken3: "#ff8f00",
  darken4: "#ff6f00",
  accent1: "#ffe57f",
  accent2: "#ffd740",
  accent3: "#ffc400",
  accent4: "#ffab00"
}), kM = Object.freeze({
  base: "#ff9800",
  lighten5: "#fff3e0",
  lighten4: "#ffe0b2",
  lighten3: "#ffcc80",
  lighten2: "#ffb74d",
  lighten1: "#ffa726",
  darken1: "#fb8c00",
  darken2: "#f57c00",
  darken3: "#ef6c00",
  darken4: "#e65100",
  accent1: "#ffd180",
  accent2: "#ffab40",
  accent3: "#ff9100",
  accent4: "#ff6d00"
}), NM = Object.freeze({
  base: "#ff5722",
  lighten5: "#fbe9e7",
  lighten4: "#ffccbc",
  lighten3: "#ffab91",
  lighten2: "#ff8a65",
  lighten1: "#ff7043",
  darken1: "#f4511e",
  darken2: "#e64a19",
  darken3: "#d84315",
  darken4: "#bf360c",
  accent1: "#ff9e80",
  accent2: "#ff6e40",
  accent3: "#ff3d00",
  accent4: "#dd2c00"
}), LM = Object.freeze({
  base: "#795548",
  lighten5: "#efebe9",
  lighten4: "#d7ccc8",
  lighten3: "#bcaaa4",
  lighten2: "#a1887f",
  lighten1: "#8d6e63",
  darken1: "#6d4c41",
  darken2: "#5d4037",
  darken3: "#4e342e",
  darken4: "#3e2723"
}), $M = Object.freeze({
  base: "#607d8b",
  lighten5: "#eceff1",
  lighten4: "#cfd8dc",
  lighten3: "#b0bec5",
  lighten2: "#90a4ae",
  lighten1: "#78909c",
  darken1: "#546e7a",
  darken2: "#455a64",
  darken3: "#37474f",
  darken4: "#263238"
}), FM = Object.freeze({
  base: "#9e9e9e",
  lighten5: "#fafafa",
  lighten4: "#f5f5f5",
  lighten3: "#eeeeee",
  lighten2: "#e0e0e0",
  lighten1: "#bdbdbd",
  darken1: "#757575",
  darken2: "#616161",
  darken3: "#424242",
  darken4: "#212121"
}), VM = Object.freeze({
  black: "#000000",
  white: "#ffffff",
  transparent: "#ffffff00"
}), BM = Object.freeze({
  red: SM,
  pink: bM,
  purple: RM,
  deepPurple: EM,
  indigo: xM,
  blue: TM,
  lightBlue: MM,
  cyan: _M,
  teal: IM,
  green: OM,
  lightGreen: AM,
  lime: PM,
  yellow: DM,
  amber: HM,
  orange: kM,
  deepOrange: NM,
  brown: LM,
  blueGrey: $M,
  grey: FM,
  shades: VM
});
var Ul = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof global < "u" ? global : typeof self < "u" ? self : {};
function Uy(s) {
  return s && s.__esModule && Object.prototype.hasOwnProperty.call(s, "default") ? s.default : s;
}
function WM(s) {
  if (s.__esModule)
    return s;
  var e = s.default;
  if (typeof e == "function") {
    var t = function n() {
      return this instanceof n ? Reflect.construct(e, arguments, this.constructor) : e.apply(this, arguments);
    };
    t.prototype = e.prototype;
  } else
    t = {};
  return Object.defineProperty(t, "__esModule", { value: !0 }), Object.keys(s).forEach(function(n) {
    var o = Object.getOwnPropertyDescriptor(s, n);
    Object.defineProperty(t, n, o.get ? o : {
      enumerable: !0,
      get: function() {
        return s[n];
      }
    });
  }), t;
}
var qa = function(s) {
  return s && s.Math === Math && s;
}, rs = (
  // eslint-disable-next-line es/no-global-this -- safe
  qa(typeof globalThis == "object" && globalThis) || qa(typeof window == "object" && window) || // eslint-disable-next-line no-restricted-globals -- safe
  qa(typeof self == "object" && self) || qa(typeof Ul == "object" && Ul) || // eslint-disable-next-line no-new-func -- fallback
  function() {
    return this;
  }() || Ul || Function("return this")()
), Df = {}, Us = function(s) {
  try {
    return !!s();
  } catch {
    return !0;
  }
}, UM = Us, En = !UM(function() {
  return Object.defineProperty({}, 1, { get: function() {
    return 7;
  } })[1] !== 7;
}), zM = Us, Bc = !zM(function() {
  var s = (function() {
  }).bind();
  return typeof s != "function" || s.hasOwnProperty("prototype");
}), YM = Bc, Za = Function.prototype.call, Wc = YM ? Za.bind(Za) : function() {
  return Za.apply(Za, arguments);
}, zy = {}, Yy = {}.propertyIsEnumerable, Gy = Object.getOwnPropertyDescriptor, GM = Gy && !Yy.call({ 1: 2 }, 1);
zy.f = GM ? function(e) {
  var t = Gy(this, e);
  return !!t && t.enumerable;
} : Yy;
var Hf = function(s, e) {
  return {
    enumerable: !(s & 1),
    configurable: !(s & 2),
    writable: !(s & 4),
    value: e
  };
}, jy = Bc, Ky = Function.prototype, kd = Ky.call, jM = jy && Ky.bind.bind(kd, kd), ps = jy ? jM : function(s) {
  return function() {
    return kd.apply(s, arguments);
  };
}, Xy = ps, KM = Xy({}.toString), XM = Xy("".slice), lr = function(s) {
  return XM(KM(s), 8, -1);
}, qM = ps, ZM = Us, QM = lr, Bh = Object, JM = qM("".split), e_ = ZM(function() {
  return !Bh("z").propertyIsEnumerable(0);
}) ? function(s) {
  return QM(s) === "String" ? JM(s, "") : Bh(s);
} : Bh, qy = function(s) {
  return s == null;
}, t_ = qy, s_ = TypeError, Zy = function(s) {
  if (t_(s))
    throw s_("Can't call method on " + s);
  return s;
}, n_ = e_, i_ = Zy, Uc = function(s) {
  return n_(i_(s));
}, Nd = typeof document == "object" && document.all, o_ = typeof Nd > "u" && Nd !== void 0, Qy = {
  all: Nd,
  IS_HTMLDDA: o_
}, Jy = Qy, r_ = Jy.all, Jt = Jy.IS_HTMLDDA ? function(s) {
  return typeof s == "function" || s === r_;
} : function(s) {
  return typeof s == "function";
}, gw = Jt, eS = Qy, a_ = eS.all, no = eS.IS_HTMLDDA ? function(s) {
  return typeof s == "object" ? s !== null : gw(s) || s === a_;
} : function(s) {
  return typeof s == "object" ? s !== null : gw(s);
}, Wh = rs, l_ = Jt, c_ = function(s) {
  return l_(s) ? s : void 0;
}, Ea = function(s, e) {
  return arguments.length < 2 ? c_(Wh[s]) : Wh[s] && Wh[s][e];
}, h_ = ps, tS = h_({}.isPrototypeOf), kf = typeof navigator < "u" && String(navigator.userAgent) || "", sS = rs, Uh = kf, mw = sS.process, pw = sS.Deno, ww = mw && mw.versions || pw && pw.version, Cw = ww && ww.v8, Zs, oc;
Cw && (Zs = Cw.split("."), oc = Zs[0] > 0 && Zs[0] < 4 ? 1 : +(Zs[0] + Zs[1]));
!oc && Uh && (Zs = Uh.match(/Edge\/(\d+)/), (!Zs || Zs[1] >= 74) && (Zs = Uh.match(/Chrome\/(\d+)/), Zs && (oc = +Zs[1])));
var u_ = oc, vw = u_, d_ = Us, f_ = rs, g_ = f_.String, Nf = !!Object.getOwnPropertySymbols && !d_(function() {
  var s = Symbol("symbol detection");
  return !g_(s) || !(Object(s) instanceof Symbol) || // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances
  !Symbol.sham && vw && vw < 41;
}), m_ = Nf, nS = m_ && !Symbol.sham && typeof Symbol.iterator == "symbol", p_ = Ea, w_ = Jt, C_ = tS, v_ = nS, y_ = Object, Lf = v_ ? function(s) {
  return typeof s == "symbol";
} : function(s) {
  var e = p_("Symbol");
  return w_(e) && C_(e.prototype, y_(s));
}, S_ = String, iS = function(s) {
  try {
    return S_(s);
  } catch {
    return "Object";
  }
}, b_ = Jt, R_ = iS, E_ = TypeError, $f = function(s) {
  if (b_(s))
    return s;
  throw E_(R_(s) + " is not a function");
}, x_ = $f, T_ = qy, M_ = function(s, e) {
  var t = s[e];
  return T_(t) ? void 0 : x_(t);
}, zh = Wc, Yh = Jt, Gh = no, __ = TypeError, I_ = function(s, e) {
  var t, n;
  if (e === "string" && Yh(t = s.toString) && !Gh(n = zh(t, s)) || Yh(t = s.valueOf) && !Gh(n = zh(t, s)) || e !== "string" && Yh(t = s.toString) && !Gh(n = zh(t, s)))
    return n;
  throw __("Can't convert object to primitive value");
}, oS = { exports: {} }, yw = rs, O_ = Object.defineProperty, Ff = function(s, e) {
  try {
    O_(yw, s, { value: e, configurable: !0, writable: !0 });
  } catch {
    yw[s] = e;
  }
  return e;
}, A_ = rs, P_ = Ff, Sw = "__core-js_shared__", D_ = A_[Sw] || P_(Sw, {}), Vf = D_, bw = Vf;
(oS.exports = function(s, e) {
  return bw[s] || (bw[s] = e !== void 0 ? e : {});
})("versions", []).push({
  version: "3.32.2",
  mode: "global",
  copyright: "© 2014-2023 Denis Pushkarev (zloirock.ru)",
  license: "https://github.com/zloirock/core-js/blob/v3.32.2/LICENSE",
  source: "https://github.com/zloirock/core-js"
});
var rS = oS.exports, H_ = Zy, k_ = Object, zc = function(s) {
  return k_(H_(s));
}, N_ = ps, L_ = zc, $_ = N_({}.hasOwnProperty), qn = Object.hasOwn || function(e, t) {
  return $_(L_(e), t);
}, F_ = ps, V_ = 0, B_ = Math.random(), W_ = F_(1 .toString), aS = function(s) {
  return "Symbol(" + (s === void 0 ? "" : s) + ")_" + W_(++V_ + B_, 36);
}, U_ = rs, z_ = rS, Rw = qn, Y_ = aS, G_ = Nf, j_ = nS, Wo = U_.Symbol, jh = z_("wks"), K_ = j_ ? Wo.for || Wo : Wo && Wo.withoutSetter || Y_, Yc = function(s) {
  return Rw(jh, s) || (jh[s] = G_ && Rw(Wo, s) ? Wo[s] : K_("Symbol." + s)), jh[s];
}, X_ = Wc, Ew = no, xw = Lf, q_ = M_, Z_ = I_, Q_ = Yc, J_ = TypeError, e1 = Q_("toPrimitive"), t1 = function(s, e) {
  if (!Ew(s) || xw(s))
    return s;
  var t = q_(s, e1), n;
  if (t) {
    if (e === void 0 && (e = "default"), n = X_(t, s, e), !Ew(n) || xw(n))
      return n;
    throw J_("Can't convert object to primitive value");
  }
  return e === void 0 && (e = "number"), Z_(s, e);
}, s1 = t1, n1 = Lf, lS = function(s) {
  var e = s1(s, "string");
  return n1(e) ? e : e + "";
}, i1 = rs, Tw = no, Ld = i1.document, o1 = Tw(Ld) && Tw(Ld.createElement), Bf = function(s) {
  return o1 ? Ld.createElement(s) : {};
}, r1 = En, a1 = Us, l1 = Bf, cS = !r1 && !a1(function() {
  return Object.defineProperty(l1("div"), "a", {
    get: function() {
      return 7;
    }
  }).a !== 7;
}), c1 = En, h1 = Wc, u1 = zy, d1 = Hf, f1 = Uc, g1 = lS, m1 = qn, p1 = cS, Mw = Object.getOwnPropertyDescriptor;
Df.f = c1 ? Mw : function(e, t) {
  if (e = f1(e), t = g1(t), p1)
    try {
      return Mw(e, t);
    } catch {
    }
  if (m1(e, t))
    return d1(!h1(u1.f, e, t), e[t]);
};
var io = {}, w1 = En, C1 = Us, hS = w1 && C1(function() {
  return Object.defineProperty(function() {
  }, "prototype", {
    value: 42,
    writable: !1
  }).prototype !== 42;
}), v1 = no, y1 = String, S1 = TypeError, xa = function(s) {
  if (v1(s))
    return s;
  throw S1(y1(s) + " is not an object");
}, b1 = En, R1 = cS, E1 = hS, Qa = xa, _w = lS, x1 = TypeError, Kh = Object.defineProperty, T1 = Object.getOwnPropertyDescriptor, Xh = "enumerable", qh = "configurable", Zh = "writable";
io.f = b1 ? E1 ? function(e, t, n) {
  if (Qa(e), t = _w(t), Qa(n), typeof e == "function" && t === "prototype" && "value" in n && Zh in n && !n[Zh]) {
    var o = T1(e, t);
    o && o[Zh] && (e[t] = n.value, n = {
      configurable: qh in n ? n[qh] : o[qh],
      enumerable: Xh in n ? n[Xh] : o[Xh],
      writable: !1
    });
  }
  return Kh(e, t, n);
} : Kh : function(e, t, n) {
  if (Qa(e), t = _w(t), Qa(n), R1)
    try {
      return Kh(e, t, n);
    } catch {
    }
  if ("get" in n || "set" in n)
    throw x1("Accessors not supported");
  return "value" in n && (e[t] = n.value), e;
};
var M1 = En, _1 = io, I1 = Hf, Ta = M1 ? function(s, e, t) {
  return _1.f(s, e, I1(1, t));
} : function(s, e, t) {
  return s[e] = t, s;
}, uS = { exports: {} }, $d = En, O1 = qn, dS = Function.prototype, A1 = $d && Object.getOwnPropertyDescriptor, Wf = O1(dS, "name"), P1 = Wf && (function() {
}).name === "something", D1 = Wf && (!$d || $d && A1(dS, "name").configurable), H1 = {
  EXISTS: Wf,
  PROPER: P1,
  CONFIGURABLE: D1
}, k1 = ps, N1 = Jt, Fd = Vf, L1 = k1(Function.toString);
N1(Fd.inspectSource) || (Fd.inspectSource = function(s) {
  return L1(s);
});
var $1 = Fd.inspectSource, F1 = rs, V1 = Jt, Iw = F1.WeakMap, B1 = V1(Iw) && /native code/.test(String(Iw)), W1 = rS, U1 = aS, Ow = W1("keys"), fS = function(s) {
  return Ow[s] || (Ow[s] = U1(s));
}, Uf = {}, z1 = B1, gS = rs, Y1 = no, G1 = Ta, Qh = qn, Jh = Vf, j1 = fS, K1 = Uf, Aw = "Object already initialized", Vd = gS.TypeError, X1 = gS.WeakMap, rc, aa, ac, q1 = function(s) {
  return ac(s) ? aa(s) : rc(s, {});
}, Z1 = function(s) {
  return function(e) {
    var t;
    if (!Y1(e) || (t = aa(e)).type !== s)
      throw Vd("Incompatible receiver, " + s + " required");
    return t;
  };
};
if (z1 || Jh.state) {
  var on = Jh.state || (Jh.state = new X1());
  on.get = on.get, on.has = on.has, on.set = on.set, rc = function(s, e) {
    if (on.has(s))
      throw Vd(Aw);
    return e.facade = s, on.set(s, e), e;
  }, aa = function(s) {
    return on.get(s) || {};
  }, ac = function(s) {
    return on.has(s);
  };
} else {
  var po = j1("state");
  K1[po] = !0, rc = function(s, e) {
    if (Qh(s, po))
      throw Vd(Aw);
    return e.facade = s, G1(s, po, e), e;
  }, aa = function(s) {
    return Qh(s, po) ? s[po] : {};
  }, ac = function(s) {
    return Qh(s, po);
  };
}
var Q1 = {
  set: rc,
  get: aa,
  has: ac,
  enforce: q1,
  getterFor: Z1
}, zf = ps, J1 = Us, eI = Jt, Ja = qn, Bd = En, tI = H1.CONFIGURABLE, sI = $1, mS = Q1, nI = mS.enforce, iI = mS.get, Pw = String, zl = Object.defineProperty, oI = zf("".slice), rI = zf("".replace), aI = zf([].join), lI = Bd && !J1(function() {
  return zl(function() {
  }, "length", { value: 8 }).length !== 8;
}), cI = String(String).split("String"), hI = uS.exports = function(s, e, t) {
  oI(Pw(e), 0, 7) === "Symbol(" && (e = "[" + rI(Pw(e), /^Symbol\(([^)]*)\)/, "$1") + "]"), t && t.getter && (e = "get " + e), t && t.setter && (e = "set " + e), (!Ja(s, "name") || tI && s.name !== e) && (Bd ? zl(s, "name", { value: e, configurable: !0 }) : s.name = e), lI && t && Ja(t, "arity") && s.length !== t.arity && zl(s, "length", { value: t.arity });
  try {
    t && Ja(t, "constructor") && t.constructor ? Bd && zl(s, "prototype", { writable: !1 }) : s.prototype && (s.prototype = void 0);
  } catch {
  }
  var n = nI(s);
  return Ja(n, "source") || (n.source = aI(cI, typeof e == "string" ? e : "")), s;
};
Function.prototype.toString = hI(function() {
  return eI(this) && iI(this).source || sI(this);
}, "toString");
var uI = uS.exports, dI = Jt, fI = io, gI = uI, mI = Ff, pI = function(s, e, t, n) {
  n || (n = {});
  var o = n.enumerable, r = n.name !== void 0 ? n.name : e;
  if (dI(t) && gI(t, r, n), n.global)
    o ? s[e] = t : mI(e, t);
  else {
    try {
      n.unsafe ? s[e] && (o = !0) : delete s[e];
    } catch {
    }
    o ? s[e] = t : fI.f(s, e, {
      value: t,
      enumerable: !1,
      configurable: !n.nonConfigurable,
      writable: !n.nonWritable
    });
  }
  return s;
}, pS = {}, wI = Math.ceil, CI = Math.floor, vI = Math.trunc || function(e) {
  var t = +e;
  return (t > 0 ? CI : wI)(t);
}, yI = vI, Yf = function(s) {
  var e = +s;
  return e !== e || e === 0 ? 0 : yI(e);
}, SI = Yf, bI = Math.max, RI = Math.min, EI = function(s, e) {
  var t = SI(s);
  return t < 0 ? bI(t + e, 0) : RI(t, e);
}, xI = Yf, TI = Math.min, MI = function(s) {
  return s > 0 ? TI(xI(s), 9007199254740991) : 0;
}, _I = MI, Gc = function(s) {
  return _I(s.length);
}, II = Uc, OI = EI, AI = Gc, Dw = function(s) {
  return function(e, t, n) {
    var o = II(e), r = AI(o), a = OI(n, r), l;
    if (s && t !== t) {
      for (; r > a; )
        if (l = o[a++], l !== l)
          return !0;
    } else
      for (; r > a; a++)
        if ((s || a in o) && o[a] === t)
          return s || a || 0;
    return !s && -1;
  };
}, PI = {
  // `Array.prototype.includes` method
  // https://tc39.es/ecma262/#sec-array.prototype.includes
  includes: Dw(!0),
  // `Array.prototype.indexOf` method
  // https://tc39.es/ecma262/#sec-array.prototype.indexof
  indexOf: Dw(!1)
}, DI = ps, eu = qn, HI = Uc, kI = PI.indexOf, NI = Uf, Hw = DI([].push), wS = function(s, e) {
  var t = HI(s), n = 0, o = [], r;
  for (r in t)
    !eu(NI, r) && eu(t, r) && Hw(o, r);
  for (; e.length > n; )
    eu(t, r = e[n++]) && (~kI(o, r) || Hw(o, r));
  return o;
}, Gf = [
  "constructor",
  "hasOwnProperty",
  "isPrototypeOf",
  "propertyIsEnumerable",
  "toLocaleString",
  "toString",
  "valueOf"
], LI = wS, $I = Gf, FI = $I.concat("length", "prototype");
pS.f = Object.getOwnPropertyNames || function(e) {
  return LI(e, FI);
};
var CS = {};
CS.f = Object.getOwnPropertySymbols;
var VI = Ea, BI = ps, WI = pS, UI = CS, zI = xa, YI = BI([].concat), GI = VI("Reflect", "ownKeys") || function(e) {
  var t = WI.f(zI(e)), n = UI.f;
  return n ? YI(t, n(e)) : t;
}, kw = qn, jI = GI, KI = Df, XI = io, vS = function(s, e, t) {
  for (var n = jI(e), o = XI.f, r = KI.f, a = 0; a < n.length; a++) {
    var l = n[a];
    !kw(s, l) && !(t && kw(t, l)) && o(s, l, r(e, l));
  }
}, qI = Us, ZI = Jt, QI = /#|\.prototype\./, Ma = function(s, e) {
  var t = eO[JI(s)];
  return t === sO ? !0 : t === tO ? !1 : ZI(e) ? qI(e) : !!e;
}, JI = Ma.normalize = function(s) {
  return String(s).replace(QI, ".").toLowerCase();
}, eO = Ma.data = {}, tO = Ma.NATIVE = "N", sO = Ma.POLYFILL = "P", nO = Ma, tu = rs, iO = Df.f, oO = Ta, rO = pI, aO = Ff, lO = vS, cO = nO, oo = function(s, e) {
  var t = s.target, n = s.global, o = s.stat, r, a, l, c, h, u;
  if (n ? a = tu : o ? a = tu[t] || aO(t, {}) : a = (tu[t] || {}).prototype, a)
    for (l in e) {
      if (h = e[l], s.dontCallGetSet ? (u = iO(a, l), c = u && u.value) : c = a[l], r = cO(n ? l : t + (o ? "." : "#") + l, s.forced), !r && c !== void 0) {
        if (typeof h == typeof c)
          continue;
        lO(h, c);
      }
      (s.sham || c && c.sham) && oO(h, "sham", !0), rO(a, l, h, s);
    }
}, hO = lr, yS = Array.isArray || function(e) {
  return hO(e) === "Array";
}, uO = En, dO = yS, fO = TypeError, gO = Object.getOwnPropertyDescriptor, mO = uO && !function() {
  if (this !== void 0)
    return !0;
  try {
    Object.defineProperty([], "length", { writable: !1 }).length = 1;
  } catch (s) {
    return s instanceof TypeError;
  }
}(), SS = mO ? function(s, e) {
  if (dO(s) && !gO(s, "length").writable)
    throw fO("Cannot set read only .length");
  return s.length = e;
} : function(s, e) {
  return s.length = e;
}, pO = TypeError, wO = 9007199254740991, bS = function(s) {
  if (s > wO)
    throw pO("Maximum allowed index exceeded");
  return s;
}, CO = oo, vO = zc, yO = Gc, SO = SS, bO = bS, RO = Us, EO = RO(function() {
  return [].push.call({ length: 4294967296 }, 1) !== 4294967297;
}), xO = function() {
  try {
    Object.defineProperty([], "length", { writable: !1 }).push();
  } catch (s) {
    return s instanceof TypeError;
  }
}, TO = EO || !xO();
CO({ target: "Array", proto: !0, arity: 1, forced: TO }, {
  // eslint-disable-next-line no-unused-vars -- required for `.length`
  push: function(e) {
    var t = vO(this), n = yO(t), o = arguments.length;
    bO(n + o);
    for (var r = 0; r < o; r++)
      t[n] = arguments[r], n++;
    return SO(t, n), n;
  }
});
var MO = Bc, RS = Function.prototype, Nw = RS.apply, Lw = RS.call, jc = typeof Reflect == "object" && Reflect.apply || (MO ? Lw.bind(Nw) : function() {
  return Lw.apply(Nw, arguments);
}), _O = ps, IO = $f, OO = function(s, e, t) {
  try {
    return _O(IO(Object.getOwnPropertyDescriptor(s, e)[t]));
  } catch {
  }
}, AO = Jt, PO = String, DO = TypeError, HO = function(s) {
  if (typeof s == "object" || AO(s))
    return s;
  throw DO("Can't set " + PO(s) + " as a prototype");
}, kO = OO, NO = xa, LO = HO, ES = Object.setPrototypeOf || ("__proto__" in {} ? function() {
  var s = !1, e = {}, t;
  try {
    t = kO(Object.prototype, "__proto__", "set"), t(e, []), s = e instanceof Array;
  } catch {
  }
  return function(o, r) {
    return NO(o), LO(r), s ? t(o, r) : o.__proto__ = r, o;
  };
}() : void 0), $O = io.f, FO = function(s, e, t) {
  t in s || $O(s, t, {
    configurable: !0,
    get: function() {
      return e[t];
    },
    set: function(n) {
      e[t] = n;
    }
  });
}, VO = Jt, BO = no, $w = ES, WO = function(s, e, t) {
  var n, o;
  return (
    // it can work only with native `setPrototypeOf`
    $w && // we haven't completely correct pre-ES6 way for getting `new.target`, so use this
    VO(n = e.constructor) && n !== t && BO(o = n.prototype) && o !== t.prototype && $w(s, o), s
  );
}, UO = Yc, zO = UO("toStringTag"), xS = {};
xS[zO] = "z";
var YO = String(xS) === "[object z]", GO = YO, jO = Jt, Yl = lr, KO = Yc, XO = KO("toStringTag"), qO = Object, ZO = Yl(function() {
  return arguments;
}()) === "Arguments", QO = function(s, e) {
  try {
    return s[e];
  } catch {
  }
}, JO = GO ? Yl : function(s) {
  var e, t, n;
  return s === void 0 ? "Undefined" : s === null ? "Null" : typeof (t = QO(e = qO(s), XO)) == "string" ? t : ZO ? Yl(e) : (n = Yl(e)) === "Object" && jO(e.callee) ? "Arguments" : n;
}, eA = JO, tA = String, TS = function(s) {
  if (eA(s) === "Symbol")
    throw TypeError("Cannot convert a Symbol value to a string");
  return tA(s);
}, sA = TS, nA = function(s, e) {
  return s === void 0 ? arguments.length < 2 ? "" : e : sA(s);
}, iA = no, oA = Ta, rA = function(s, e) {
  iA(e) && "cause" in e && oA(s, "cause", e.cause);
}, aA = ps, MS = Error, lA = aA("".replace), cA = function(s) {
  return String(MS(s).stack);
}("zxcasd"), _S = /\n\s*at [^:]*:[^\n]*/, hA = _S.test(cA), uA = function(s, e) {
  if (hA && typeof s == "string" && !MS.prepareStackTrace)
    for (; e--; )
      s = lA(s, _S, "");
  return s;
}, dA = Us, fA = Hf, gA = !dA(function() {
  var s = Error("a");
  return "stack" in s ? (Object.defineProperty(s, "stack", fA(1, 7)), s.stack !== 7) : !0;
}), mA = Ta, pA = uA, wA = gA, Fw = Error.captureStackTrace, CA = function(s, e, t, n) {
  wA && (Fw ? Fw(s, e) : mA(s, "stack", pA(t, n)));
}, Vw = Ea, vA = qn, Bw = Ta, yA = tS, Ww = ES, Uw = vS, zw = FO, SA = WO, bA = nA, RA = rA, EA = CA, xA = En, TA = function(s, e, t, n) {
  var o = "stackTraceLimit", r = n ? 2 : 1, a = s.split("."), l = a[a.length - 1], c = Vw.apply(null, a);
  if (c) {
    var h = c.prototype;
    if (vA(h, "cause") && delete h.cause, !t)
      return c;
    var u = Vw("Error"), f = e(function(g, m) {
      var w = bA(n ? m : g, void 0), C = n ? new c(g) : new c();
      return w !== void 0 && Bw(C, "message", w), EA(C, f, C.stack, 2), this && yA(h, this) && SA(C, this, f), arguments.length > r && RA(C, arguments[r]), C;
    });
    f.prototype = h, l !== "Error" ? Ww ? Ww(f, u) : Uw(f, u, { name: !0 }) : xA && o in c && (zw(f, c, o), zw(f, c, "prepareStackTrace")), Uw(f, c);
    try {
      h.name !== l && Bw(h, "name", l), h.constructor = f;
    } catch {
    }
    return f;
  }
}, IS = oo, MA = rs, xn = jc, OS = TA, Wd = "WebAssembly", Yw = MA[Wd], lc = Error("e", { cause: 7 }).cause !== 7, ro = function(s, e) {
  var t = {};
  t[s] = OS(s, e, lc), IS({ global: !0, constructor: !0, arity: 1, forced: lc }, t);
}, jf = function(s, e) {
  if (Yw && Yw[s]) {
    var t = {};
    t[s] = OS(Wd + "." + s, e, lc), IS({ target: Wd, stat: !0, constructor: !0, arity: 1, forced: lc }, t);
  }
};
ro("Error", function(s) {
  return function(t) {
    return xn(s, this, arguments);
  };
});
ro("EvalError", function(s) {
  return function(t) {
    return xn(s, this, arguments);
  };
});
ro("RangeError", function(s) {
  return function(t) {
    return xn(s, this, arguments);
  };
});
ro("ReferenceError", function(s) {
  return function(t) {
    return xn(s, this, arguments);
  };
});
ro("SyntaxError", function(s) {
  return function(t) {
    return xn(s, this, arguments);
  };
});
ro("TypeError", function(s) {
  return function(t) {
    return xn(s, this, arguments);
  };
});
ro("URIError", function(s) {
  return function(t) {
    return xn(s, this, arguments);
  };
});
jf("CompileError", function(s) {
  return function(t) {
    return xn(s, this, arguments);
  };
});
jf("LinkError", function(s) {
  return function(t) {
    return xn(s, this, arguments);
  };
});
jf("RuntimeError", function(s) {
  return function(t) {
    return xn(s, this, arguments);
  };
});
var _A = lr, IA = ps, OA = function(s) {
  if (_A(s) === "Function")
    return IA(s);
}, Gw = OA, AA = $f, PA = Bc, DA = Gw(Gw.bind), HA = function(s, e) {
  return AA(s), e === void 0 ? s : PA ? DA(s, e) : function() {
    return s.apply(e, arguments);
  };
}, kA = Ea, AS = kA("document", "documentElement"), NA = ps, Kf = NA([].slice), LA = TypeError, PS = function(s, e) {
  if (s < e)
    throw LA("Not enough arguments");
  return s;
}, $A = kf, FA = /(?:ipad|iphone|ipod).*applewebkit/i.test($A), VA = rs, BA = lr, WA = BA(VA.process) === "process", Os = rs, UA = jc, zA = HA, jw = Jt, YA = qn, DS = Us, Kw = AS, GA = Kf, Xw = Bf, jA = PS, KA = FA, XA = WA, Ud = Os.setImmediate, zd = Os.clearImmediate, qA = Os.process, su = Os.Dispatch, ZA = Os.Function, qw = Os.MessageChannel, QA = Os.String, nu = 0, jr = {}, Zw = "onreadystatechange", la, xi, iu, ou;
DS(function() {
  la = Os.location;
});
var Xf = function(s) {
  if (YA(jr, s)) {
    var e = jr[s];
    delete jr[s], e();
  }
}, ru = function(s) {
  return function() {
    Xf(s);
  };
}, Qw = function(s) {
  Xf(s.data);
}, Jw = function(s) {
  Os.postMessage(QA(s), la.protocol + "//" + la.host);
};
(!Ud || !zd) && (Ud = function(e) {
  jA(arguments.length, 1);
  var t = jw(e) ? e : ZA(e), n = GA(arguments, 1);
  return jr[++nu] = function() {
    UA(t, void 0, n);
  }, xi(nu), nu;
}, zd = function(e) {
  delete jr[e];
}, XA ? xi = function(s) {
  qA.nextTick(ru(s));
} : su && su.now ? xi = function(s) {
  su.now(ru(s));
} : qw && !KA ? (iu = new qw(), ou = iu.port2, iu.port1.onmessage = Qw, xi = zA(ou.postMessage, ou)) : Os.addEventListener && jw(Os.postMessage) && !Os.importScripts && la && la.protocol !== "file:" && !DS(Jw) ? (xi = Jw, Os.addEventListener("message", Qw, !1)) : Zw in Xw("script") ? xi = function(s) {
  Kw.appendChild(Xw("script"))[Zw] = function() {
    Kw.removeChild(this), Xf(s);
  };
} : xi = function(s) {
  setTimeout(ru(s), 0);
});
var HS = {
  set: Ud,
  clear: zd
}, JA = oo, eP = rs, eC = HS.clear;
JA({ global: !0, bind: !0, enumerable: !0, forced: eP.clearImmediate !== eC }, {
  clearImmediate: eC
});
var tP = typeof Bun == "function" && Bun && typeof Bun.version == "string", kS = rs, sP = jc, nP = Jt, iP = tP, oP = kf, rP = Kf, aP = PS, lP = kS.Function, cP = /MSIE .\./.test(oP) || iP && function() {
  var s = kS.Bun.version.split(".");
  return s.length < 3 || s[0] === "0" && (s[1] < 3 || s[1] === "3" && s[2] === "0");
}(), hP = function(s, e) {
  var t = e ? 2 : 1;
  return cP ? function(n, o) {
    var r = aP(arguments.length, 1) > t, a = nP(n) ? n : lP(n), l = r ? rP(arguments, t) : [], c = r ? function() {
      sP(a, this, l);
    } : a;
    return e ? s(c, o) : s(c);
  } : s;
}, uP = oo, NS = rs, tC = HS.set, dP = hP, sC = NS.setImmediate ? dP(tC, !1) : tC;
uP({ global: !0, bind: !0, enumerable: !0, forced: NS.setImmediate !== sC }, {
  setImmediate: sC
});
/*! @license DOMPurify 2.4.7 | (c) Cure53 and other contributors | Released under the Apache license 2.0 and Mozilla Public License 2.0 | github.com/cure53/DOMPurify/blob/2.4.7/LICENSE */
function hi(s) {
  "@babel/helpers - typeof";
  return hi = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(e) {
    return typeof e;
  } : function(e) {
    return e && typeof Symbol == "function" && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
  }, hi(s);
}
function Yd(s, e) {
  return Yd = Object.setPrototypeOf || function(n, o) {
    return n.__proto__ = o, n;
  }, Yd(s, e);
}
function fP() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function Gl(s, e, t) {
  return fP() ? Gl = Reflect.construct : Gl = function(o, r, a) {
    var l = [null];
    l.push.apply(l, r);
    var c = Function.bind.apply(o, l), h = new c();
    return a && Yd(h, a.prototype), h;
  }, Gl.apply(null, arguments);
}
function qs(s) {
  return gP(s) || mP(s) || pP(s) || wP();
}
function gP(s) {
  if (Array.isArray(s))
    return Gd(s);
}
function mP(s) {
  if (typeof Symbol < "u" && s[Symbol.iterator] != null || s["@@iterator"] != null)
    return Array.from(s);
}
function pP(s, e) {
  if (s) {
    if (typeof s == "string")
      return Gd(s, e);
    var t = Object.prototype.toString.call(s).slice(8, -1);
    if (t === "Object" && s.constructor && (t = s.constructor.name), t === "Map" || t === "Set")
      return Array.from(s);
    if (t === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))
      return Gd(s, e);
  }
}
function Gd(s, e) {
  (e == null || e > s.length) && (e = s.length);
  for (var t = 0, n = new Array(e); t < e; t++)
    n[t] = s[t];
  return n;
}
function wP() {
  throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
var CP = Object.hasOwnProperty, nC = Object.setPrototypeOf, vP = Object.isFrozen, yP = Object.getPrototypeOf, SP = Object.getOwnPropertyDescriptor, gs = Object.freeze, en = Object.seal, bP = Object.create, LS = typeof Reflect < "u" && Reflect, cc = LS.apply, jd = LS.construct;
cc || (cc = function(e, t, n) {
  return e.apply(t, n);
});
gs || (gs = function(e) {
  return e;
});
en || (en = function(e) {
  return e;
});
jd || (jd = function(e, t) {
  return Gl(e, qs(t));
});
var RP = Bs(Array.prototype.forEach), iC = Bs(Array.prototype.pop), br = Bs(Array.prototype.push), jl = Bs(String.prototype.toLowerCase), au = Bs(String.prototype.toString), EP = Bs(String.prototype.match), js = Bs(String.prototype.replace), xP = Bs(String.prototype.indexOf), TP = Bs(String.prototype.trim), us = Bs(RegExp.prototype.test), lu = MP(TypeError);
function Bs(s) {
  return function(e) {
    for (var t = arguments.length, n = new Array(t > 1 ? t - 1 : 0), o = 1; o < t; o++)
      n[o - 1] = arguments[o];
    return cc(s, e, n);
  };
}
function MP(s) {
  return function() {
    for (var e = arguments.length, t = new Array(e), n = 0; n < e; n++)
      t[n] = arguments[n];
    return jd(s, t);
  };
}
function Ke(s, e, t) {
  var n;
  t = (n = t) !== null && n !== void 0 ? n : jl, nC && nC(s, null);
  for (var o = e.length; o--; ) {
    var r = e[o];
    if (typeof r == "string") {
      var a = t(r);
      a !== r && (vP(e) || (e[o] = a), r = a);
    }
    s[r] = !0;
  }
  return s;
}
function Ti(s) {
  var e = bP(null), t;
  for (t in s)
    cc(CP, s, [t]) === !0 && (e[t] = s[t]);
  return e;
}
function el(s, e) {
  for (; s !== null; ) {
    var t = SP(s, e);
    if (t) {
      if (t.get)
        return Bs(t.get);
      if (typeof t.value == "function")
        return Bs(t.value);
    }
    s = yP(s);
  }
  function n(o) {
    return console.warn("fallback value for", o), null;
  }
  return n;
}
var oC = gs(["a", "abbr", "acronym", "address", "area", "article", "aside", "audio", "b", "bdi", "bdo", "big", "blink", "blockquote", "body", "br", "button", "canvas", "caption", "center", "cite", "code", "col", "colgroup", "content", "data", "datalist", "dd", "decorator", "del", "details", "dfn", "dialog", "dir", "div", "dl", "dt", "element", "em", "fieldset", "figcaption", "figure", "font", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "i", "img", "input", "ins", "kbd", "label", "legend", "li", "main", "map", "mark", "marquee", "menu", "menuitem", "meter", "nav", "nobr", "ol", "optgroup", "option", "output", "p", "picture", "pre", "progress", "q", "rp", "rt", "ruby", "s", "samp", "section", "select", "shadow", "small", "source", "spacer", "span", "strike", "strong", "style", "sub", "summary", "sup", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "time", "tr", "track", "tt", "u", "ul", "var", "video", "wbr"]), cu = gs(["svg", "a", "altglyph", "altglyphdef", "altglyphitem", "animatecolor", "animatemotion", "animatetransform", "circle", "clippath", "defs", "desc", "ellipse", "filter", "font", "g", "glyph", "glyphref", "hkern", "image", "line", "lineargradient", "marker", "mask", "metadata", "mpath", "path", "pattern", "polygon", "polyline", "radialgradient", "rect", "stop", "style", "switch", "symbol", "text", "textpath", "title", "tref", "tspan", "view", "vkern"]), hu = gs(["feBlend", "feColorMatrix", "feComponentTransfer", "feComposite", "feConvolveMatrix", "feDiffuseLighting", "feDisplacementMap", "feDistantLight", "feFlood", "feFuncA", "feFuncB", "feFuncG", "feFuncR", "feGaussianBlur", "feImage", "feMerge", "feMergeNode", "feMorphology", "feOffset", "fePointLight", "feSpecularLighting", "feSpotLight", "feTile", "feTurbulence"]), _P = gs(["animate", "color-profile", "cursor", "discard", "fedropshadow", "font-face", "font-face-format", "font-face-name", "font-face-src", "font-face-uri", "foreignobject", "hatch", "hatchpath", "mesh", "meshgradient", "meshpatch", "meshrow", "missing-glyph", "script", "set", "solidcolor", "unknown", "use"]), uu = gs(["math", "menclose", "merror", "mfenced", "mfrac", "mglyph", "mi", "mlabeledtr", "mmultiscripts", "mn", "mo", "mover", "mpadded", "mphantom", "mroot", "mrow", "ms", "mspace", "msqrt", "mstyle", "msub", "msup", "msubsup", "mtable", "mtd", "mtext", "mtr", "munder", "munderover"]), IP = gs(["maction", "maligngroup", "malignmark", "mlongdiv", "mscarries", "mscarry", "msgroup", "mstack", "msline", "msrow", "semantics", "annotation", "annotation-xml", "mprescripts", "none"]), rC = gs(["#text"]), aC = gs(["accept", "action", "align", "alt", "autocapitalize", "autocomplete", "autopictureinpicture", "autoplay", "background", "bgcolor", "border", "capture", "cellpadding", "cellspacing", "checked", "cite", "class", "clear", "color", "cols", "colspan", "controls", "controlslist", "coords", "crossorigin", "datetime", "decoding", "default", "dir", "disabled", "disablepictureinpicture", "disableremoteplayback", "download", "draggable", "enctype", "enterkeyhint", "face", "for", "headers", "height", "hidden", "high", "href", "hreflang", "id", "inputmode", "integrity", "ismap", "kind", "label", "lang", "list", "loading", "loop", "low", "max", "maxlength", "media", "method", "min", "minlength", "multiple", "muted", "name", "nonce", "noshade", "novalidate", "nowrap", "open", "optimum", "pattern", "placeholder", "playsinline", "poster", "preload", "pubdate", "radiogroup", "readonly", "rel", "required", "rev", "reversed", "role", "rows", "rowspan", "spellcheck", "scope", "selected", "shape", "size", "sizes", "span", "srclang", "start", "src", "srcset", "step", "style", "summary", "tabindex", "title", "translate", "type", "usemap", "valign", "value", "width", "xmlns", "slot"]), du = gs(["accent-height", "accumulate", "additive", "alignment-baseline", "ascent", "attributename", "attributetype", "azimuth", "basefrequency", "baseline-shift", "begin", "bias", "by", "class", "clip", "clippathunits", "clip-path", "clip-rule", "color", "color-interpolation", "color-interpolation-filters", "color-profile", "color-rendering", "cx", "cy", "d", "dx", "dy", "diffuseconstant", "direction", "display", "divisor", "dur", "edgemode", "elevation", "end", "fill", "fill-opacity", "fill-rule", "filter", "filterunits", "flood-color", "flood-opacity", "font-family", "font-size", "font-size-adjust", "font-stretch", "font-style", "font-variant", "font-weight", "fx", "fy", "g1", "g2", "glyph-name", "glyphref", "gradientunits", "gradienttransform", "height", "href", "id", "image-rendering", "in", "in2", "k", "k1", "k2", "k3", "k4", "kerning", "keypoints", "keysplines", "keytimes", "lang", "lengthadjust", "letter-spacing", "kernelmatrix", "kernelunitlength", "lighting-color", "local", "marker-end", "marker-mid", "marker-start", "markerheight", "markerunits", "markerwidth", "maskcontentunits", "maskunits", "max", "mask", "media", "method", "mode", "min", "name", "numoctaves", "offset", "operator", "opacity", "order", "orient", "orientation", "origin", "overflow", "paint-order", "path", "pathlength", "patterncontentunits", "patterntransform", "patternunits", "points", "preservealpha", "preserveaspectratio", "primitiveunits", "r", "rx", "ry", "radius", "refx", "refy", "repeatcount", "repeatdur", "restart", "result", "rotate", "scale", "seed", "shape-rendering", "specularconstant", "specularexponent", "spreadmethod", "startoffset", "stddeviation", "stitchtiles", "stop-color", "stop-opacity", "stroke-dasharray", "stroke-dashoffset", "stroke-linecap", "stroke-linejoin", "stroke-miterlimit", "stroke-opacity", "stroke", "stroke-width", "style", "surfacescale", "systemlanguage", "tabindex", "targetx", "targety", "transform", "transform-origin", "text-anchor", "text-decoration", "text-rendering", "textlength", "type", "u1", "u2", "unicode", "values", "viewbox", "visibility", "version", "vert-adv-y", "vert-origin-x", "vert-origin-y", "width", "word-spacing", "wrap", "writing-mode", "xchannelselector", "ychannelselector", "x", "x1", "x2", "xmlns", "y", "y1", "y2", "z", "zoomandpan"]), lC = gs(["accent", "accentunder", "align", "bevelled", "close", "columnsalign", "columnlines", "columnspan", "denomalign", "depth", "dir", "display", "displaystyle", "encoding", "fence", "frame", "height", "href", "id", "largeop", "length", "linethickness", "lspace", "lquote", "mathbackground", "mathcolor", "mathsize", "mathvariant", "maxsize", "minsize", "movablelimits", "notation", "numalign", "open", "rowalign", "rowlines", "rowspacing", "rowspan", "rspace", "rquote", "scriptlevel", "scriptminsize", "scriptsizemultiplier", "selection", "separator", "separators", "stretchy", "subscriptshift", "supscriptshift", "symmetric", "voffset", "width", "xmlns"]), tl = gs(["xlink:href", "xml:id", "xlink:title", "xml:space", "xmlns:xlink"]), OP = en(/\{\{[\w\W]*|[\w\W]*\}\}/gm), AP = en(/<%[\w\W]*|[\w\W]*%>/gm), PP = en(/\${[\w\W]*}/gm), DP = en(/^data-[\-\w.\u00B7-\uFFFF]/), HP = en(/^aria-[\-\w]+$/), kP = en(
  /^(?:(?:(?:f|ht)tps?|mailto|tel|callto|cid|xmpp):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i
  // eslint-disable-line no-useless-escape
), NP = en(/^(?:\w+script|data):/i), LP = en(
  /[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205F\u3000]/g
  // eslint-disable-line no-control-regex
), $P = en(/^html$/i), FP = function() {
  return typeof window > "u" ? null : window;
}, VP = function(e, t) {
  if (hi(e) !== "object" || typeof e.createPolicy != "function")
    return null;
  var n = null, o = "data-tt-policy-suffix";
  t.currentScript && t.currentScript.hasAttribute(o) && (n = t.currentScript.getAttribute(o));
  var r = "dompurify" + (n ? "#" + n : "");
  try {
    return e.createPolicy(r, {
      createHTML: function(l) {
        return l;
      },
      createScriptURL: function(l) {
        return l;
      }
    });
  } catch {
    return console.warn("TrustedTypes policy " + r + " could not be created."), null;
  }
};
function $S() {
  var s = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : FP(), e = function($) {
    return $S($);
  };
  if (e.version = "2.4.7", e.removed = [], !s || !s.document || s.document.nodeType !== 9)
    return e.isSupported = !1, e;
  var t = s.document, n = s.document, o = s.DocumentFragment, r = s.HTMLTemplateElement, a = s.Node, l = s.Element, c = s.NodeFilter, h = s.NamedNodeMap, u = h === void 0 ? s.NamedNodeMap || s.MozNamedAttrMap : h, f = s.HTMLFormElement, g = s.DOMParser, m = s.trustedTypes, w = l.prototype, C = el(w, "cloneNode"), S = el(w, "nextSibling"), x = el(w, "childNodes"), T = el(w, "parentNode");
  if (typeof r == "function") {
    var M = n.createElement("template");
    M.content && M.content.ownerDocument && (n = M.content.ownerDocument);
  }
  var _ = VP(m, t), P = _ ? _.createHTML("") : "", j = n, H = j.implementation, Z = j.createNodeIterator, X = j.createDocumentFragment, F = j.getElementsByTagName, z = t.importNode, ee = {};
  try {
    ee = Ti(n).documentMode ? n.documentMode : {};
  } catch {
  }
  var oe = {};
  e.isSupported = typeof T == "function" && H && H.createHTMLDocument !== void 0 && ee !== 9;
  var fe = OP, Ae = AP, Ze = PP, He = DP, R = HP, d = NP, p = LP, v = kP, E = null, I = Ke({}, [].concat(qs(oC), qs(cu), qs(hu), qs(uu), qs(rC))), A = null, K = Ke({}, [].concat(qs(aC), qs(du), qs(lC), qs(tl))), U = Object.seal(Object.create(null, {
    tagNameCheck: {
      writable: !0,
      configurable: !1,
      enumerable: !0,
      value: null
    },
    attributeNameCheck: {
      writable: !0,
      configurable: !1,
      enumerable: !0,
      value: null
    },
    allowCustomizedBuiltInElements: {
      writable: !0,
      configurable: !1,
      enumerable: !0,
      value: !1
    }
  })), J = null, ne = null, Q = !0, Ce = !0, Fe = !1, Ie = !0, Oe = !1, q = !1, Qe = !1, We = !1, xe = !1, Le = !1, Ee = !1, y = !0, b = !1, O = "user-content-", W = !0, k = !1, B = {}, N = null, L = Ke({}, ["annotation-xml", "audio", "colgroup", "desc", "foreignobject", "head", "iframe", "math", "mi", "mn", "mo", "ms", "mtext", "noembed", "noframes", "noscript", "plaintext", "script", "style", "svg", "template", "thead", "title", "video", "xmp"]), Y = null, V = Ke({}, ["audio", "video", "img", "source", "image", "track"]), G = null, le = Ke({}, ["alt", "class", "for", "id", "label", "name", "pattern", "placeholder", "role", "summary", "title", "value", "style", "xmlns"]), ge = "http://www.w3.org/1998/Math/MathML", be = "http://www.w3.org/2000/svg", Pe = "http://www.w3.org/1999/xhtml", Be = Pe, gt = !1, Xe = null, lt = Ke({}, [ge, be, Pe], au), bt, fo = ["application/xhtml+xml", "text/html"], wr = "text/html", kt, Zt = null, Ei = n.createElement("form"), hs = function($) {
    return $ instanceof RegExp || $ instanceof Function;
  }, zt = function($) {
    Zt && Zt === $ || ((!$ || hi($) !== "object") && ($ = {}), $ = Ti($), bt = // eslint-disable-next-line unicorn/prefer-includes
    fo.indexOf($.PARSER_MEDIA_TYPE) === -1 ? bt = wr : bt = $.PARSER_MEDIA_TYPE, kt = bt === "application/xhtml+xml" ? au : jl, E = "ALLOWED_TAGS" in $ ? Ke({}, $.ALLOWED_TAGS, kt) : I, A = "ALLOWED_ATTR" in $ ? Ke({}, $.ALLOWED_ATTR, kt) : K, Xe = "ALLOWED_NAMESPACES" in $ ? Ke({}, $.ALLOWED_NAMESPACES, au) : lt, G = "ADD_URI_SAFE_ATTR" in $ ? Ke(
      Ti(le),
      // eslint-disable-line indent
      $.ADD_URI_SAFE_ATTR,
      // eslint-disable-line indent
      kt
      // eslint-disable-line indent
    ) : le, Y = "ADD_DATA_URI_TAGS" in $ ? Ke(
      Ti(V),
      // eslint-disable-line indent
      $.ADD_DATA_URI_TAGS,
      // eslint-disable-line indent
      kt
      // eslint-disable-line indent
    ) : V, N = "FORBID_CONTENTS" in $ ? Ke({}, $.FORBID_CONTENTS, kt) : L, J = "FORBID_TAGS" in $ ? Ke({}, $.FORBID_TAGS, kt) : {}, ne = "FORBID_ATTR" in $ ? Ke({}, $.FORBID_ATTR, kt) : {}, B = "USE_PROFILES" in $ ? $.USE_PROFILES : !1, Q = $.ALLOW_ARIA_ATTR !== !1, Ce = $.ALLOW_DATA_ATTR !== !1, Fe = $.ALLOW_UNKNOWN_PROTOCOLS || !1, Ie = $.ALLOW_SELF_CLOSE_IN_ATTR !== !1, Oe = $.SAFE_FOR_TEMPLATES || !1, q = $.WHOLE_DOCUMENT || !1, xe = $.RETURN_DOM || !1, Le = $.RETURN_DOM_FRAGMENT || !1, Ee = $.RETURN_TRUSTED_TYPE || !1, We = $.FORCE_BODY || !1, y = $.SANITIZE_DOM !== !1, b = $.SANITIZE_NAMED_PROPS || !1, W = $.KEEP_CONTENT !== !1, k = $.IN_PLACE || !1, v = $.ALLOWED_URI_REGEXP || v, Be = $.NAMESPACE || Pe, U = $.CUSTOM_ELEMENT_HANDLING || {}, $.CUSTOM_ELEMENT_HANDLING && hs($.CUSTOM_ELEMENT_HANDLING.tagNameCheck) && (U.tagNameCheck = $.CUSTOM_ELEMENT_HANDLING.tagNameCheck), $.CUSTOM_ELEMENT_HANDLING && hs($.CUSTOM_ELEMENT_HANDLING.attributeNameCheck) && (U.attributeNameCheck = $.CUSTOM_ELEMENT_HANDLING.attributeNameCheck), $.CUSTOM_ELEMENT_HANDLING && typeof $.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements == "boolean" && (U.allowCustomizedBuiltInElements = $.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements), Oe && (Ce = !1), Le && (xe = !0), B && (E = Ke({}, qs(rC)), A = [], B.html === !0 && (Ke(E, oC), Ke(A, aC)), B.svg === !0 && (Ke(E, cu), Ke(A, du), Ke(A, tl)), B.svgFilters === !0 && (Ke(E, hu), Ke(A, du), Ke(A, tl)), B.mathMl === !0 && (Ke(E, uu), Ke(A, lC), Ke(A, tl))), $.ADD_TAGS && (E === I && (E = Ti(E)), Ke(E, $.ADD_TAGS, kt)), $.ADD_ATTR && (A === K && (A = Ti(A)), Ke(A, $.ADD_ATTR, kt)), $.ADD_URI_SAFE_ATTR && Ke(G, $.ADD_URI_SAFE_ATTR, kt), $.FORBID_CONTENTS && (N === L && (N = Ti(N)), Ke(N, $.FORBID_CONTENTS, kt)), W && (E["#text"] = !0), q && Ke(E, ["html", "head", "body"]), E.table && (Ke(E, ["tbody"]), delete J.tbody), gs && gs($), Zt = $);
  }, Ct = Ke({}, ["mi", "mo", "mn", "ms", "mtext"]), Zp = Ke({}, ["foreignobject", "desc", "title", "annotation-xml"]), yE = Ke({}, ["title", "style", "font", "a", "script"]), Ya = Ke({}, cu);
  Ke(Ya, hu), Ke(Ya, _P);
  var Hh = Ke({}, uu);
  Ke(Hh, IP);
  var SE = function($) {
    var ae = T($);
    (!ae || !ae.tagName) && (ae = {
      namespaceURI: Be,
      tagName: "template"
    });
    var he = jl($.tagName), rt = jl(ae.tagName);
    return Xe[$.namespaceURI] ? $.namespaceURI === be ? ae.namespaceURI === Pe ? he === "svg" : ae.namespaceURI === ge ? he === "svg" && (rt === "annotation-xml" || Ct[rt]) : !!Ya[he] : $.namespaceURI === ge ? ae.namespaceURI === Pe ? he === "math" : ae.namespaceURI === be ? he === "math" && Zp[rt] : !!Hh[he] : $.namespaceURI === Pe ? ae.namespaceURI === be && !Zp[rt] || ae.namespaceURI === ge && !Ct[rt] ? !1 : !Hh[he] && (yE[he] || !Ya[he]) : !!(bt === "application/xhtml+xml" && Xe[$.namespaceURI]) : !1;
  }, _n = function($) {
    br(e.removed, {
      element: $
    });
    try {
      $.parentNode.removeChild($);
    } catch {
      try {
        $.outerHTML = P;
      } catch {
        $.remove();
      }
    }
  }, kh = function($, ae) {
    try {
      br(e.removed, {
        attribute: ae.getAttributeNode($),
        from: ae
      });
    } catch {
      br(e.removed, {
        attribute: null,
        from: ae
      });
    }
    if (ae.removeAttribute($), $ === "is" && !A[$])
      if (xe || Le)
        try {
          _n(ae);
        } catch {
        }
      else
        try {
          ae.setAttribute($, "");
        } catch {
        }
  }, Qp = function($) {
    var ae, he;
    if (We)
      $ = "<remove></remove>" + $;
    else {
      var rt = EP($, /^[\r\n\t ]+/);
      he = rt && rt[0];
    }
    bt === "application/xhtml+xml" && Be === Pe && ($ = '<html xmlns="http://www.w3.org/1999/xhtml"><head></head><body>' + $ + "</body></html>");
    var Cs = _ ? _.createHTML($) : $;
    if (Be === Pe)
      try {
        ae = new g().parseFromString(Cs, bt);
      } catch {
      }
    if (!ae || !ae.documentElement) {
      ae = H.createDocument(Be, "template", null);
      try {
        ae.documentElement.innerHTML = gt ? P : Cs;
      } catch {
      }
    }
    var es = ae.body || ae.documentElement;
    return $ && he && es.insertBefore(n.createTextNode(he), es.childNodes[0] || null), Be === Pe ? F.call(ae, q ? "html" : "body")[0] : q ? ae.documentElement : es;
  }, Jp = function($) {
    return Z.call(
      $.ownerDocument || $,
      $,
      // eslint-disable-next-line no-bitwise
      c.SHOW_ELEMENT | c.SHOW_COMMENT | c.SHOW_TEXT,
      null,
      !1
    );
  }, bE = function($) {
    return $ instanceof f && (typeof $.nodeName != "string" || typeof $.textContent != "string" || typeof $.removeChild != "function" || !($.attributes instanceof u) || typeof $.removeAttribute != "function" || typeof $.setAttribute != "function" || typeof $.namespaceURI != "string" || typeof $.insertBefore != "function" || typeof $.hasChildNodes != "function");
  }, Cr = function($) {
    return hi(a) === "object" ? $ instanceof a : $ && hi($) === "object" && typeof $.nodeType == "number" && typeof $.nodeName == "string";
  }, In = function($, ae, he) {
    oe[$] && RP(oe[$], function(rt) {
      rt.call(e, ae, he, Zt);
    });
  }, ew = function($) {
    var ae;
    if (In("beforeSanitizeElements", $, null), bE($) || us(/[\u0080-\uFFFF]/, $.nodeName))
      return _n($), !0;
    var he = kt($.nodeName);
    if (In("uponSanitizeElement", $, {
      tagName: he,
      allowedTags: E
    }), $.hasChildNodes() && !Cr($.firstElementChild) && (!Cr($.content) || !Cr($.content.firstElementChild)) && us(/<[/\w]/g, $.innerHTML) && us(/<[/\w]/g, $.textContent) || he === "select" && us(/<template/i, $.innerHTML))
      return _n($), !0;
    if (!E[he] || J[he]) {
      if (!J[he] && sw(he) && (U.tagNameCheck instanceof RegExp && us(U.tagNameCheck, he) || U.tagNameCheck instanceof Function && U.tagNameCheck(he)))
        return !1;
      if (W && !N[he]) {
        var rt = T($) || $.parentNode, Cs = x($) || $.childNodes;
        if (Cs && rt)
          for (var es = Cs.length, Qt = es - 1; Qt >= 0; --Qt)
            rt.insertBefore(C(Cs[Qt], !0), S($));
      }
      return _n($), !0;
    }
    return $ instanceof l && !SE($) || (he === "noscript" || he === "noembed" || he === "noframes") && us(/<\/no(script|embed|frames)/i, $.innerHTML) ? (_n($), !0) : (Oe && $.nodeType === 3 && (ae = $.textContent, ae = js(ae, fe, " "), ae = js(ae, Ae, " "), ae = js(ae, Ze, " "), $.textContent !== ae && (br(e.removed, {
      element: $.cloneNode()
    }), $.textContent = ae)), In("afterSanitizeElements", $, null), !1);
  }, tw = function($, ae, he) {
    if (y && (ae === "id" || ae === "name") && (he in n || he in Ei))
      return !1;
    if (!(Ce && !ne[ae] && us(He, ae))) {
      if (!(Q && us(R, ae))) {
        if (!A[ae] || ne[ae]) {
          if (
            // First condition does a very basic check if a) it's basically a valid custom element tagname AND
            // b) if the tagName passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck
            // and c) if the attribute name passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.attributeNameCheck
            !(sw($) && (U.tagNameCheck instanceof RegExp && us(U.tagNameCheck, $) || U.tagNameCheck instanceof Function && U.tagNameCheck($)) && (U.attributeNameCheck instanceof RegExp && us(U.attributeNameCheck, ae) || U.attributeNameCheck instanceof Function && U.attributeNameCheck(ae)) || // Alternative, second condition checks if it's an `is`-attribute, AND
            // the value passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck
            ae === "is" && U.allowCustomizedBuiltInElements && (U.tagNameCheck instanceof RegExp && us(U.tagNameCheck, he) || U.tagNameCheck instanceof Function && U.tagNameCheck(he)))
          )
            return !1;
        } else if (!G[ae]) {
          if (!us(v, js(he, p, ""))) {
            if (!((ae === "src" || ae === "xlink:href" || ae === "href") && $ !== "script" && xP(he, "data:") === 0 && Y[$])) {
              if (!(Fe && !us(d, js(he, p, "")))) {
                if (he)
                  return !1;
              }
            }
          }
        }
      }
    }
    return !0;
  }, sw = function($) {
    return $.indexOf("-") > 0;
  }, nw = function($) {
    var ae, he, rt, Cs;
    In("beforeSanitizeAttributes", $, null);
    var es = $.attributes;
    if (es) {
      var Qt = {
        attrName: "",
        attrValue: "",
        keepAttr: !0,
        allowedAttributes: A
      };
      for (Cs = es.length; Cs--; ) {
        ae = es[Cs];
        var Ga = ae, jt = Ga.name, Nh = Ga.namespaceURI;
        if (he = jt === "value" ? ae.value : TP(ae.value), rt = kt(jt), Qt.attrName = rt, Qt.attrValue = he, Qt.keepAttr = !0, Qt.forceKeepAttr = void 0, In("uponSanitizeAttribute", $, Qt), he = Qt.attrValue, !Qt.forceKeepAttr && (kh(jt, $), !!Qt.keepAttr)) {
          if (!Ie && us(/\/>/i, he)) {
            kh(jt, $);
            continue;
          }
          Oe && (he = js(he, fe, " "), he = js(he, Ae, " "), he = js(he, Ze, " "));
          var iw = kt($.nodeName);
          if (tw(iw, rt, he)) {
            if (b && (rt === "id" || rt === "name") && (kh(jt, $), he = O + he), _ && hi(m) === "object" && typeof m.getAttributeType == "function" && !Nh)
              switch (m.getAttributeType(iw, rt)) {
                case "TrustedHTML": {
                  he = _.createHTML(he);
                  break;
                }
                case "TrustedScriptURL": {
                  he = _.createScriptURL(he);
                  break;
                }
              }
            try {
              Nh ? $.setAttributeNS(Nh, jt, he) : $.setAttribute(jt, he), iC(e.removed);
            } catch {
            }
          }
        }
      }
      In("afterSanitizeAttributes", $, null);
    }
  }, RE = function Te($) {
    var ae, he = Jp($);
    for (In("beforeSanitizeShadowDOM", $, null); ae = he.nextNode(); )
      In("uponSanitizeShadowNode", ae, null), !ew(ae) && (ae.content instanceof o && Te(ae.content), nw(ae));
    In("afterSanitizeShadowDOM", $, null);
  };
  return e.sanitize = function(Te) {
    var $ = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, ae, he, rt, Cs, es;
    if (gt = !Te, gt && (Te = "<!-->"), typeof Te != "string" && !Cr(Te))
      if (typeof Te.toString == "function") {
        if (Te = Te.toString(), typeof Te != "string")
          throw lu("dirty is not a string, aborting");
      } else
        throw lu("toString is not a function");
    if (!e.isSupported) {
      if (hi(s.toStaticHTML) === "object" || typeof s.toStaticHTML == "function") {
        if (typeof Te == "string")
          return s.toStaticHTML(Te);
        if (Cr(Te))
          return s.toStaticHTML(Te.outerHTML);
      }
      return Te;
    }
    if (Qe || zt($), e.removed = [], typeof Te == "string" && (k = !1), k) {
      if (Te.nodeName) {
        var Qt = kt(Te.nodeName);
        if (!E[Qt] || J[Qt])
          throw lu("root node is forbidden and cannot be sanitized in-place");
      }
    } else if (Te instanceof a)
      ae = Qp("<!---->"), he = ae.ownerDocument.importNode(Te, !0), he.nodeType === 1 && he.nodeName === "BODY" || he.nodeName === "HTML" ? ae = he : ae.appendChild(he);
    else {
      if (!xe && !Oe && !q && // eslint-disable-next-line unicorn/prefer-includes
      Te.indexOf("<") === -1)
        return _ && Ee ? _.createHTML(Te) : Te;
      if (ae = Qp(Te), !ae)
        return xe ? null : Ee ? P : "";
    }
    ae && We && _n(ae.firstChild);
    for (var Ga = Jp(k ? Te : ae); rt = Ga.nextNode(); )
      rt.nodeType === 3 && rt === Cs || ew(rt) || (rt.content instanceof o && RE(rt.content), nw(rt), Cs = rt);
    if (Cs = null, k)
      return Te;
    if (xe) {
      if (Le)
        for (es = X.call(ae.ownerDocument); ae.firstChild; )
          es.appendChild(ae.firstChild);
      else
        es = ae;
      return (A.shadowroot || A.shadowrootmod) && (es = z.call(t, es, !0)), es;
    }
    var jt = q ? ae.outerHTML : ae.innerHTML;
    return q && E["!doctype"] && ae.ownerDocument && ae.ownerDocument.doctype && ae.ownerDocument.doctype.name && us($P, ae.ownerDocument.doctype.name) && (jt = "<!DOCTYPE " + ae.ownerDocument.doctype.name + `>
` + jt), Oe && (jt = js(jt, fe, " "), jt = js(jt, Ae, " "), jt = js(jt, Ze, " ")), _ && Ee ? _.createHTML(jt) : jt;
  }, e.setConfig = function(Te) {
    zt(Te), Qe = !0;
  }, e.clearConfig = function() {
    Zt = null, Qe = !1;
  }, e.isValidAttribute = function(Te, $, ae) {
    Zt || zt({});
    var he = kt(Te), rt = kt($);
    return tw(he, rt, ae);
  }, e.addHook = function(Te, $) {
    typeof $ == "function" && (oe[Te] = oe[Te] || [], br(oe[Te], $));
  }, e.removeHook = function(Te) {
    if (oe[Te])
      return iC(oe[Te]);
  }, e.removeHooks = function(Te) {
    oe[Te] && (oe[Te] = []);
  }, e.removeAllHooks = function() {
    oe = {};
  }, e;
}
var BP = $S();
//! moment.js
//! version : 2.29.4
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com
var FS;
function se() {
  return FS.apply(null, arguments);
}
function WP(s) {
  FS = s;
}
function tn(s) {
  return s instanceof Array || Object.prototype.toString.call(s) === "[object Array]";
}
function Gi(s) {
  return s != null && Object.prototype.toString.call(s) === "[object Object]";
}
function nt(s, e) {
  return Object.prototype.hasOwnProperty.call(s, e);
}
function qf(s) {
  if (Object.getOwnPropertyNames)
    return Object.getOwnPropertyNames(s).length === 0;
  var e;
  for (e in s)
    if (nt(s, e))
      return !1;
  return !0;
}
function vs(s) {
  return s === void 0;
}
function Kn(s) {
  return typeof s == "number" || Object.prototype.toString.call(s) === "[object Number]";
}
function _a(s) {
  return s instanceof Date || Object.prototype.toString.call(s) === "[object Date]";
}
function VS(s, e) {
  var t = [], n, o = s.length;
  for (n = 0; n < o; ++n)
    t.push(e(s[n], n));
  return t;
}
function ui(s, e) {
  for (var t in e)
    nt(e, t) && (s[t] = e[t]);
  return nt(e, "toString") && (s.toString = e.toString), nt(e, "valueOf") && (s.valueOf = e.valueOf), s;
}
function Tn(s, e, t, n) {
  return hb(s, e, t, n, !0).utc();
}
function UP() {
  return {
    empty: !1,
    unusedTokens: [],
    unusedInput: [],
    overflow: -2,
    charsLeftOver: 0,
    nullInput: !1,
    invalidEra: null,
    invalidMonth: null,
    invalidFormat: !1,
    userInvalidated: !1,
    iso: !1,
    parsedDateParts: [],
    era: null,
    meridiem: null,
    rfc2822: !1,
    weekdayMismatch: !1
  };
}
function Ue(s) {
  return s._pf == null && (s._pf = UP()), s._pf;
}
var Kd;
Array.prototype.some ? Kd = Array.prototype.some : Kd = function(s) {
  var e = Object(this), t = e.length >>> 0, n;
  for (n = 0; n < t; n++)
    if (n in e && s.call(this, e[n], n, e))
      return !0;
  return !1;
};
function Zf(s) {
  if (s._isValid == null) {
    var e = Ue(s), t = Kd.call(e.parsedDateParts, function(o) {
      return o != null;
    }), n = !isNaN(s._d.getTime()) && e.overflow < 0 && !e.empty && !e.invalidEra && !e.invalidMonth && !e.invalidWeekday && !e.weekdayMismatch && !e.nullInput && !e.invalidFormat && !e.userInvalidated && (!e.meridiem || e.meridiem && t);
    if (s._strict && (n = n && e.charsLeftOver === 0 && e.unusedTokens.length === 0 && e.bigHour === void 0), Object.isFrozen == null || !Object.isFrozen(s))
      s._isValid = n;
    else
      return n;
  }
  return s._isValid;
}
function Kc(s) {
  var e = Tn(NaN);
  return s != null ? ui(Ue(e), s) : Ue(e).userInvalidated = !0, e;
}
var cC = se.momentProperties = [], fu = !1;
function Qf(s, e) {
  var t, n, o, r = cC.length;
  if (vs(e._isAMomentObject) || (s._isAMomentObject = e._isAMomentObject), vs(e._i) || (s._i = e._i), vs(e._f) || (s._f = e._f), vs(e._l) || (s._l = e._l), vs(e._strict) || (s._strict = e._strict), vs(e._tzm) || (s._tzm = e._tzm), vs(e._isUTC) || (s._isUTC = e._isUTC), vs(e._offset) || (s._offset = e._offset), vs(e._pf) || (s._pf = Ue(e)), vs(e._locale) || (s._locale = e._locale), r > 0)
    for (t = 0; t < r; t++)
      n = cC[t], o = e[n], vs(o) || (s[n] = o);
  return s;
}
function Ia(s) {
  Qf(this, s), this._d = new Date(s._d != null ? s._d.getTime() : NaN), this.isValid() || (this._d = /* @__PURE__ */ new Date(NaN)), fu === !1 && (fu = !0, se.updateOffset(this), fu = !1);
}
function sn(s) {
  return s instanceof Ia || s != null && s._isAMomentObject != null;
}
function BS(s) {
  se.suppressDeprecationWarnings === !1 && typeof console < "u" && console.warn && console.warn("Deprecation warning: " + s);
}
function zs(s, e) {
  var t = !0;
  return ui(function() {
    if (se.deprecationHandler != null && se.deprecationHandler(null, s), t) {
      var n = [], o, r, a, l = arguments.length;
      for (r = 0; r < l; r++) {
        if (o = "", typeof arguments[r] == "object") {
          o += `
[` + r + "] ";
          for (a in arguments[0])
            nt(arguments[0], a) && (o += a + ": " + arguments[0][a] + ", ");
          o = o.slice(0, -2);
        } else
          o = arguments[r];
        n.push(o);
      }
      BS(
        s + `
Arguments: ` + Array.prototype.slice.call(n).join("") + `
` + new Error().stack
      ), t = !1;
    }
    return e.apply(this, arguments);
  }, e);
}
var hC = {};
function WS(s, e) {
  se.deprecationHandler != null && se.deprecationHandler(s, e), hC[s] || (BS(e), hC[s] = !0);
}
se.suppressDeprecationWarnings = !1;
se.deprecationHandler = null;
function Mn(s) {
  return typeof Function < "u" && s instanceof Function || Object.prototype.toString.call(s) === "[object Function]";
}
function zP(s) {
  var e, t;
  for (t in s)
    nt(s, t) && (e = s[t], Mn(e) ? this[t] = e : this["_" + t] = e);
  this._config = s, this._dayOfMonthOrdinalParseLenient = new RegExp(
    (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + "|" + /\d{1,2}/.source
  );
}
function Xd(s, e) {
  var t = ui({}, s), n;
  for (n in e)
    nt(e, n) && (Gi(s[n]) && Gi(e[n]) ? (t[n] = {}, ui(t[n], s[n]), ui(t[n], e[n])) : e[n] != null ? t[n] = e[n] : delete t[n]);
  for (n in s)
    nt(s, n) && !nt(e, n) && Gi(s[n]) && (t[n] = ui({}, t[n]));
  return t;
}
function Jf(s) {
  s != null && this.set(s);
}
var qd;
Object.keys ? qd = Object.keys : qd = function(s) {
  var e, t = [];
  for (e in s)
    nt(s, e) && t.push(e);
  return t;
};
var YP = {
  sameDay: "[Today at] LT",
  nextDay: "[Tomorrow at] LT",
  nextWeek: "dddd [at] LT",
  lastDay: "[Yesterday at] LT",
  lastWeek: "[Last] dddd [at] LT",
  sameElse: "L"
};
function GP(s, e, t) {
  var n = this._calendar[s] || this._calendar.sameElse;
  return Mn(n) ? n.call(e, t) : n;
}
function Sn(s, e, t) {
  var n = "" + Math.abs(s), o = e - n.length, r = s >= 0;
  return (r ? t ? "+" : "" : "-") + Math.pow(10, Math.max(0, o)).toString().substr(1) + n;
}
var eg = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g, sl = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g, gu = {}, Go = {};
function _e(s, e, t, n) {
  var o = n;
  typeof n == "string" && (o = function() {
    return this[n]();
  }), s && (Go[s] = o), e && (Go[e[0]] = function() {
    return Sn(o.apply(this, arguments), e[1], e[2]);
  }), t && (Go[t] = function() {
    return this.localeData().ordinal(
      o.apply(this, arguments),
      s
    );
  });
}
function jP(s) {
  return s.match(/\[[\s\S]/) ? s.replace(/^\[|\]$/g, "") : s.replace(/\\/g, "");
}
function KP(s) {
  var e = s.match(eg), t, n;
  for (t = 0, n = e.length; t < n; t++)
    Go[e[t]] ? e[t] = Go[e[t]] : e[t] = jP(e[t]);
  return function(o) {
    var r = "", a;
    for (a = 0; a < n; a++)
      r += Mn(e[a]) ? e[a].call(o, s) : e[a];
    return r;
  };
}
function Kl(s, e) {
  return s.isValid() ? (e = US(e, s.localeData()), gu[e] = gu[e] || KP(e), gu[e](s)) : s.localeData().invalidDate();
}
function US(s, e) {
  var t = 5;
  function n(o) {
    return e.longDateFormat(o) || o;
  }
  for (sl.lastIndex = 0; t >= 0 && sl.test(s); )
    s = s.replace(
      sl,
      n
    ), sl.lastIndex = 0, t -= 1;
  return s;
}
var XP = {
  LTS: "h:mm:ss A",
  LT: "h:mm A",
  L: "MM/DD/YYYY",
  LL: "MMMM D, YYYY",
  LLL: "MMMM D, YYYY h:mm A",
  LLLL: "dddd, MMMM D, YYYY h:mm A"
};
function qP(s) {
  var e = this._longDateFormat[s], t = this._longDateFormat[s.toUpperCase()];
  return e || !t ? e : (this._longDateFormat[s] = t.match(eg).map(function(n) {
    return n === "MMMM" || n === "MM" || n === "DD" || n === "dddd" ? n.slice(1) : n;
  }).join(""), this._longDateFormat[s]);
}
var ZP = "Invalid date";
function QP() {
  return this._invalidDate;
}
var JP = "%d", eD = /\d{1,2}/;
function tD(s) {
  return this._ordinal.replace("%d", s);
}
var sD = {
  future: "in %s",
  past: "%s ago",
  s: "a few seconds",
  ss: "%d seconds",
  m: "a minute",
  mm: "%d minutes",
  h: "an hour",
  hh: "%d hours",
  d: "a day",
  dd: "%d days",
  w: "a week",
  ww: "%d weeks",
  M: "a month",
  MM: "%d months",
  y: "a year",
  yy: "%d years"
};
function nD(s, e, t, n) {
  var o = this._relativeTime[t];
  return Mn(o) ? o(s, e, t, n) : o.replace(/%d/i, s);
}
function iD(s, e) {
  var t = this._relativeTime[s > 0 ? "future" : "past"];
  return Mn(t) ? t(e) : t.replace(/%s/i, e);
}
var Kr = {};
function as(s, e) {
  var t = s.toLowerCase();
  Kr[t] = Kr[t + "s"] = Kr[e] = s;
}
function Ys(s) {
  return typeof s == "string" ? Kr[s] || Kr[s.toLowerCase()] : void 0;
}
function tg(s) {
  var e = {}, t, n;
  for (n in s)
    nt(s, n) && (t = Ys(n), t && (e[t] = s[n]));
  return e;
}
var zS = {};
function ls(s, e) {
  zS[s] = e;
}
function oD(s) {
  var e = [], t;
  for (t in s)
    nt(s, t) && e.push({ unit: t, priority: zS[t] });
  return e.sort(function(n, o) {
    return n.priority - o.priority;
  }), e;
}
function Xc(s) {
  return s % 4 === 0 && s % 100 !== 0 || s % 400 === 0;
}
function Vs(s) {
  return s < 0 ? Math.ceil(s) || 0 : Math.floor(s);
}
function qe(s) {
  var e = +s, t = 0;
  return e !== 0 && isFinite(e) && (t = Vs(e)), t;
}
function cr(s, e) {
  return function(t) {
    return t != null ? (YS(this, s, t), se.updateOffset(this, e), this) : hc(this, s);
  };
}
function hc(s, e) {
  return s.isValid() ? s._d["get" + (s._isUTC ? "UTC" : "") + e]() : NaN;
}
function YS(s, e, t) {
  s.isValid() && !isNaN(t) && (e === "FullYear" && Xc(s.year()) && s.month() === 1 && s.date() === 29 ? (t = qe(t), s._d["set" + (s._isUTC ? "UTC" : "") + e](
    t,
    s.month(),
    th(t, s.month())
  )) : s._d["set" + (s._isUTC ? "UTC" : "") + e](t));
}
function rD(s) {
  return s = Ys(s), Mn(this[s]) ? this[s]() : this;
}
function aD(s, e) {
  if (typeof s == "object") {
    s = tg(s);
    var t = oD(s), n, o = t.length;
    for (n = 0; n < o; n++)
      this[t[n].unit](s[t[n].unit]);
  } else if (s = Ys(s), Mn(this[s]))
    return this[s](e);
  return this;
}
var GS = /\d/, Ds = /\d\d/, jS = /\d{3}/, sg = /\d{4}/, qc = /[+-]?\d{6}/, St = /\d\d?/, KS = /\d\d\d\d?/, XS = /\d\d\d\d\d\d?/, Zc = /\d{1,3}/, ng = /\d{1,4}/, Qc = /[+-]?\d{1,6}/, hr = /\d+/, Jc = /[+-]?\d+/, lD = /Z|[+-]\d\d:?\d\d/gi, eh = /Z|[+-]\d\d(?::?\d\d)?/gi, cD = /[+-]?\d+(\.\d{1,3})?/, Oa = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i, uc;
uc = {};
function pe(s, e, t) {
  uc[s] = Mn(e) ? e : function(n, o) {
    return n && t ? t : e;
  };
}
function hD(s, e) {
  return nt(uc, s) ? uc[s](e._strict, e._locale) : new RegExp(uD(s));
}
function uD(s) {
  return Is(
    s.replace("\\", "").replace(
      /\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,
      function(e, t, n, o, r) {
        return t || n || o || r;
      }
    )
  );
}
function Is(s) {
  return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
}
var Zd = {};
function dt(s, e) {
  var t, n = e, o;
  for (typeof s == "string" && (s = [s]), Kn(e) && (n = function(r, a) {
    a[e] = qe(r);
  }), o = s.length, t = 0; t < o; t++)
    Zd[s[t]] = n;
}
function Aa(s, e) {
  dt(s, function(t, n, o, r) {
    o._w = o._w || {}, e(t, o._w, o, r);
  });
}
function dD(s, e, t) {
  e != null && nt(Zd, s) && Zd[s](e, t._a, t, s);
}
var is = 0, Un = 1, wn = 2, Yt = 3, Qs = 4, zn = 5, Wi = 6, fD = 7, gD = 8;
function mD(s, e) {
  return (s % e + e) % e;
}
var Ft;
Array.prototype.indexOf ? Ft = Array.prototype.indexOf : Ft = function(s) {
  var e;
  for (e = 0; e < this.length; ++e)
    if (this[e] === s)
      return e;
  return -1;
};
function th(s, e) {
  if (isNaN(s) || isNaN(e))
    return NaN;
  var t = mD(e, 12);
  return s += (e - t) / 12, t === 1 ? Xc(s) ? 29 : 28 : 31 - t % 7 % 2;
}
_e("M", ["MM", 2], "Mo", function() {
  return this.month() + 1;
});
_e("MMM", 0, 0, function(s) {
  return this.localeData().monthsShort(this, s);
});
_e("MMMM", 0, 0, function(s) {
  return this.localeData().months(this, s);
});
as("month", "M");
ls("month", 8);
pe("M", St);
pe("MM", St, Ds);
pe("MMM", function(s, e) {
  return e.monthsShortRegex(s);
});
pe("MMMM", function(s, e) {
  return e.monthsRegex(s);
});
dt(["M", "MM"], function(s, e) {
  e[Un] = qe(s) - 1;
});
dt(["MMM", "MMMM"], function(s, e, t, n) {
  var o = t._locale.monthsParse(s, n, t._strict);
  o != null ? e[Un] = o : Ue(t).invalidMonth = s;
});
var pD = "January_February_March_April_May_June_July_August_September_October_November_December".split(
  "_"
), qS = "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"), ZS = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/, wD = Oa, CD = Oa;
function vD(s, e) {
  return s ? tn(this._months) ? this._months[s.month()] : this._months[(this._months.isFormat || ZS).test(e) ? "format" : "standalone"][s.month()] : tn(this._months) ? this._months : this._months.standalone;
}
function yD(s, e) {
  return s ? tn(this._monthsShort) ? this._monthsShort[s.month()] : this._monthsShort[ZS.test(e) ? "format" : "standalone"][s.month()] : tn(this._monthsShort) ? this._monthsShort : this._monthsShort.standalone;
}
function SD(s, e, t) {
  var n, o, r, a = s.toLocaleLowerCase();
  if (!this._monthsParse)
    for (this._monthsParse = [], this._longMonthsParse = [], this._shortMonthsParse = [], n = 0; n < 12; ++n)
      r = Tn([2e3, n]), this._shortMonthsParse[n] = this.monthsShort(
        r,
        ""
      ).toLocaleLowerCase(), this._longMonthsParse[n] = this.months(r, "").toLocaleLowerCase();
  return t ? e === "MMM" ? (o = Ft.call(this._shortMonthsParse, a), o !== -1 ? o : null) : (o = Ft.call(this._longMonthsParse, a), o !== -1 ? o : null) : e === "MMM" ? (o = Ft.call(this._shortMonthsParse, a), o !== -1 ? o : (o = Ft.call(this._longMonthsParse, a), o !== -1 ? o : null)) : (o = Ft.call(this._longMonthsParse, a), o !== -1 ? o : (o = Ft.call(this._shortMonthsParse, a), o !== -1 ? o : null));
}
function bD(s, e, t) {
  var n, o, r;
  if (this._monthsParseExact)
    return SD.call(this, s, e, t);
  for (this._monthsParse || (this._monthsParse = [], this._longMonthsParse = [], this._shortMonthsParse = []), n = 0; n < 12; n++) {
    if (o = Tn([2e3, n]), t && !this._longMonthsParse[n] && (this._longMonthsParse[n] = new RegExp(
      "^" + this.months(o, "").replace(".", "") + "$",
      "i"
    ), this._shortMonthsParse[n] = new RegExp(
      "^" + this.monthsShort(o, "").replace(".", "") + "$",
      "i"
    )), !t && !this._monthsParse[n] && (r = "^" + this.months(o, "") + "|^" + this.monthsShort(o, ""), this._monthsParse[n] = new RegExp(r.replace(".", ""), "i")), t && e === "MMMM" && this._longMonthsParse[n].test(s))
      return n;
    if (t && e === "MMM" && this._shortMonthsParse[n].test(s))
      return n;
    if (!t && this._monthsParse[n].test(s))
      return n;
  }
}
function QS(s, e) {
  var t;
  if (!s.isValid())
    return s;
  if (typeof e == "string") {
    if (/^\d+$/.test(e))
      e = qe(e);
    else if (e = s.localeData().monthsParse(e), !Kn(e))
      return s;
  }
  return t = Math.min(s.date(), th(s.year(), e)), s._d["set" + (s._isUTC ? "UTC" : "") + "Month"](e, t), s;
}
function JS(s) {
  return s != null ? (QS(this, s), se.updateOffset(this, !0), this) : hc(this, "Month");
}
function RD() {
  return th(this.year(), this.month());
}
function ED(s) {
  return this._monthsParseExact ? (nt(this, "_monthsRegex") || eb.call(this), s ? this._monthsShortStrictRegex : this._monthsShortRegex) : (nt(this, "_monthsShortRegex") || (this._monthsShortRegex = wD), this._monthsShortStrictRegex && s ? this._monthsShortStrictRegex : this._monthsShortRegex);
}
function xD(s) {
  return this._monthsParseExact ? (nt(this, "_monthsRegex") || eb.call(this), s ? this._monthsStrictRegex : this._monthsRegex) : (nt(this, "_monthsRegex") || (this._monthsRegex = CD), this._monthsStrictRegex && s ? this._monthsStrictRegex : this._monthsRegex);
}
function eb() {
  function s(a, l) {
    return l.length - a.length;
  }
  var e = [], t = [], n = [], o, r;
  for (o = 0; o < 12; o++)
    r = Tn([2e3, o]), e.push(this.monthsShort(r, "")), t.push(this.months(r, "")), n.push(this.months(r, "")), n.push(this.monthsShort(r, ""));
  for (e.sort(s), t.sort(s), n.sort(s), o = 0; o < 12; o++)
    e[o] = Is(e[o]), t[o] = Is(t[o]);
  for (o = 0; o < 24; o++)
    n[o] = Is(n[o]);
  this._monthsRegex = new RegExp("^(" + n.join("|") + ")", "i"), this._monthsShortRegex = this._monthsRegex, this._monthsStrictRegex = new RegExp(
    "^(" + t.join("|") + ")",
    "i"
  ), this._monthsShortStrictRegex = new RegExp(
    "^(" + e.join("|") + ")",
    "i"
  );
}
_e("Y", 0, 0, function() {
  var s = this.year();
  return s <= 9999 ? Sn(s, 4) : "+" + s;
});
_e(0, ["YY", 2], 0, function() {
  return this.year() % 100;
});
_e(0, ["YYYY", 4], 0, "year");
_e(0, ["YYYYY", 5], 0, "year");
_e(0, ["YYYYYY", 6, !0], 0, "year");
as("year", "y");
ls("year", 1);
pe("Y", Jc);
pe("YY", St, Ds);
pe("YYYY", ng, sg);
pe("YYYYY", Qc, qc);
pe("YYYYYY", Qc, qc);
dt(["YYYYY", "YYYYYY"], is);
dt("YYYY", function(s, e) {
  e[is] = s.length === 2 ? se.parseTwoDigitYear(s) : qe(s);
});
dt("YY", function(s, e) {
  e[is] = se.parseTwoDigitYear(s);
});
dt("Y", function(s, e) {
  e[is] = parseInt(s, 10);
});
function Xr(s) {
  return Xc(s) ? 366 : 365;
}
se.parseTwoDigitYear = function(s) {
  return qe(s) + (qe(s) > 68 ? 1900 : 2e3);
};
var tb = cr("FullYear", !0);
function TD() {
  return Xc(this.year());
}
function MD(s, e, t, n, o, r, a) {
  var l;
  return s < 100 && s >= 0 ? (l = new Date(s + 400, e, t, n, o, r, a), isFinite(l.getFullYear()) && l.setFullYear(s)) : l = new Date(s, e, t, n, o, r, a), l;
}
function ca(s) {
  var e, t;
  return s < 100 && s >= 0 ? (t = Array.prototype.slice.call(arguments), t[0] = s + 400, e = new Date(Date.UTC.apply(null, t)), isFinite(e.getUTCFullYear()) && e.setUTCFullYear(s)) : e = new Date(Date.UTC.apply(null, arguments)), e;
}
function dc(s, e, t) {
  var n = 7 + e - t, o = (7 + ca(s, 0, n).getUTCDay() - e) % 7;
  return -o + n - 1;
}
function sb(s, e, t, n, o) {
  var r = (7 + t - n) % 7, a = dc(s, n, o), l = 1 + 7 * (e - 1) + r + a, c, h;
  return l <= 0 ? (c = s - 1, h = Xr(c) + l) : l > Xr(s) ? (c = s + 1, h = l - Xr(s)) : (c = s, h = l), {
    year: c,
    dayOfYear: h
  };
}
function ha(s, e, t) {
  var n = dc(s.year(), e, t), o = Math.floor((s.dayOfYear() - n - 1) / 7) + 1, r, a;
  return o < 1 ? (a = s.year() - 1, r = o + Gn(a, e, t)) : o > Gn(s.year(), e, t) ? (r = o - Gn(s.year(), e, t), a = s.year() + 1) : (a = s.year(), r = o), {
    week: r,
    year: a
  };
}
function Gn(s, e, t) {
  var n = dc(s, e, t), o = dc(s + 1, e, t);
  return (Xr(s) - n + o) / 7;
}
_e("w", ["ww", 2], "wo", "week");
_e("W", ["WW", 2], "Wo", "isoWeek");
as("week", "w");
as("isoWeek", "W");
ls("week", 5);
ls("isoWeek", 5);
pe("w", St);
pe("ww", St, Ds);
pe("W", St);
pe("WW", St, Ds);
Aa(
  ["w", "ww", "W", "WW"],
  function(s, e, t, n) {
    e[n.substr(0, 1)] = qe(s);
  }
);
function _D(s) {
  return ha(s, this._week.dow, this._week.doy).week;
}
var ID = {
  dow: 0,
  // Sunday is the first day of the week.
  doy: 6
  // The week that contains Jan 6th is the first week of the year.
};
function OD() {
  return this._week.dow;
}
function AD() {
  return this._week.doy;
}
function PD(s) {
  var e = this.localeData().week(this);
  return s == null ? e : this.add((s - e) * 7, "d");
}
function DD(s) {
  var e = ha(this, 1, 4).week;
  return s == null ? e : this.add((s - e) * 7, "d");
}
_e("d", 0, "do", "day");
_e("dd", 0, 0, function(s) {
  return this.localeData().weekdaysMin(this, s);
});
_e("ddd", 0, 0, function(s) {
  return this.localeData().weekdaysShort(this, s);
});
_e("dddd", 0, 0, function(s) {
  return this.localeData().weekdays(this, s);
});
_e("e", 0, 0, "weekday");
_e("E", 0, 0, "isoWeekday");
as("day", "d");
as("weekday", "e");
as("isoWeekday", "E");
ls("day", 11);
ls("weekday", 11);
ls("isoWeekday", 11);
pe("d", St);
pe("e", St);
pe("E", St);
pe("dd", function(s, e) {
  return e.weekdaysMinRegex(s);
});
pe("ddd", function(s, e) {
  return e.weekdaysShortRegex(s);
});
pe("dddd", function(s, e) {
  return e.weekdaysRegex(s);
});
Aa(["dd", "ddd", "dddd"], function(s, e, t, n) {
  var o = t._locale.weekdaysParse(s, n, t._strict);
  o != null ? e.d = o : Ue(t).invalidWeekday = s;
});
Aa(["d", "e", "E"], function(s, e, t, n) {
  e[n] = qe(s);
});
function HD(s, e) {
  return typeof s != "string" ? s : isNaN(s) ? (s = e.weekdaysParse(s), typeof s == "number" ? s : null) : parseInt(s, 10);
}
function kD(s, e) {
  return typeof s == "string" ? e.weekdaysParse(s) % 7 || 7 : isNaN(s) ? null : s;
}
function ig(s, e) {
  return s.slice(e, 7).concat(s.slice(0, e));
}
var ND = "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), nb = "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), LD = "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), $D = Oa, FD = Oa, VD = Oa;
function BD(s, e) {
  var t = tn(this._weekdays) ? this._weekdays : this._weekdays[s && s !== !0 && this._weekdays.isFormat.test(e) ? "format" : "standalone"];
  return s === !0 ? ig(t, this._week.dow) : s ? t[s.day()] : t;
}
function WD(s) {
  return s === !0 ? ig(this._weekdaysShort, this._week.dow) : s ? this._weekdaysShort[s.day()] : this._weekdaysShort;
}
function UD(s) {
  return s === !0 ? ig(this._weekdaysMin, this._week.dow) : s ? this._weekdaysMin[s.day()] : this._weekdaysMin;
}
function zD(s, e, t) {
  var n, o, r, a = s.toLocaleLowerCase();
  if (!this._weekdaysParse)
    for (this._weekdaysParse = [], this._shortWeekdaysParse = [], this._minWeekdaysParse = [], n = 0; n < 7; ++n)
      r = Tn([2e3, 1]).day(n), this._minWeekdaysParse[n] = this.weekdaysMin(
        r,
        ""
      ).toLocaleLowerCase(), this._shortWeekdaysParse[n] = this.weekdaysShort(
        r,
        ""
      ).toLocaleLowerCase(), this._weekdaysParse[n] = this.weekdays(r, "").toLocaleLowerCase();
  return t ? e === "dddd" ? (o = Ft.call(this._weekdaysParse, a), o !== -1 ? o : null) : e === "ddd" ? (o = Ft.call(this._shortWeekdaysParse, a), o !== -1 ? o : null) : (o = Ft.call(this._minWeekdaysParse, a), o !== -1 ? o : null) : e === "dddd" ? (o = Ft.call(this._weekdaysParse, a), o !== -1 || (o = Ft.call(this._shortWeekdaysParse, a), o !== -1) ? o : (o = Ft.call(this._minWeekdaysParse, a), o !== -1 ? o : null)) : e === "ddd" ? (o = Ft.call(this._shortWeekdaysParse, a), o !== -1 || (o = Ft.call(this._weekdaysParse, a), o !== -1) ? o : (o = Ft.call(this._minWeekdaysParse, a), o !== -1 ? o : null)) : (o = Ft.call(this._minWeekdaysParse, a), o !== -1 || (o = Ft.call(this._weekdaysParse, a), o !== -1) ? o : (o = Ft.call(this._shortWeekdaysParse, a), o !== -1 ? o : null));
}
function YD(s, e, t) {
  var n, o, r;
  if (this._weekdaysParseExact)
    return zD.call(this, s, e, t);
  for (this._weekdaysParse || (this._weekdaysParse = [], this._minWeekdaysParse = [], this._shortWeekdaysParse = [], this._fullWeekdaysParse = []), n = 0; n < 7; n++) {
    if (o = Tn([2e3, 1]).day(n), t && !this._fullWeekdaysParse[n] && (this._fullWeekdaysParse[n] = new RegExp(
      "^" + this.weekdays(o, "").replace(".", "\\.?") + "$",
      "i"
    ), this._shortWeekdaysParse[n] = new RegExp(
      "^" + this.weekdaysShort(o, "").replace(".", "\\.?") + "$",
      "i"
    ), this._minWeekdaysParse[n] = new RegExp(
      "^" + this.weekdaysMin(o, "").replace(".", "\\.?") + "$",
      "i"
    )), this._weekdaysParse[n] || (r = "^" + this.weekdays(o, "") + "|^" + this.weekdaysShort(o, "") + "|^" + this.weekdaysMin(o, ""), this._weekdaysParse[n] = new RegExp(r.replace(".", ""), "i")), t && e === "dddd" && this._fullWeekdaysParse[n].test(s))
      return n;
    if (t && e === "ddd" && this._shortWeekdaysParse[n].test(s))
      return n;
    if (t && e === "dd" && this._minWeekdaysParse[n].test(s))
      return n;
    if (!t && this._weekdaysParse[n].test(s))
      return n;
  }
}
function GD(s) {
  if (!this.isValid())
    return s != null ? this : NaN;
  var e = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
  return s != null ? (s = HD(s, this.localeData()), this.add(s - e, "d")) : e;
}
function jD(s) {
  if (!this.isValid())
    return s != null ? this : NaN;
  var e = (this.day() + 7 - this.localeData()._week.dow) % 7;
  return s == null ? e : this.add(s - e, "d");
}
function KD(s) {
  if (!this.isValid())
    return s != null ? this : NaN;
  if (s != null) {
    var e = kD(s, this.localeData());
    return this.day(this.day() % 7 ? e : e - 7);
  } else
    return this.day() || 7;
}
function XD(s) {
  return this._weekdaysParseExact ? (nt(this, "_weekdaysRegex") || og.call(this), s ? this._weekdaysStrictRegex : this._weekdaysRegex) : (nt(this, "_weekdaysRegex") || (this._weekdaysRegex = $D), this._weekdaysStrictRegex && s ? this._weekdaysStrictRegex : this._weekdaysRegex);
}
function qD(s) {
  return this._weekdaysParseExact ? (nt(this, "_weekdaysRegex") || og.call(this), s ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex) : (nt(this, "_weekdaysShortRegex") || (this._weekdaysShortRegex = FD), this._weekdaysShortStrictRegex && s ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex);
}
function ZD(s) {
  return this._weekdaysParseExact ? (nt(this, "_weekdaysRegex") || og.call(this), s ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex) : (nt(this, "_weekdaysMinRegex") || (this._weekdaysMinRegex = VD), this._weekdaysMinStrictRegex && s ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex);
}
function og() {
  function s(u, f) {
    return f.length - u.length;
  }
  var e = [], t = [], n = [], o = [], r, a, l, c, h;
  for (r = 0; r < 7; r++)
    a = Tn([2e3, 1]).day(r), l = Is(this.weekdaysMin(a, "")), c = Is(this.weekdaysShort(a, "")), h = Is(this.weekdays(a, "")), e.push(l), t.push(c), n.push(h), o.push(l), o.push(c), o.push(h);
  e.sort(s), t.sort(s), n.sort(s), o.sort(s), this._weekdaysRegex = new RegExp("^(" + o.join("|") + ")", "i"), this._weekdaysShortRegex = this._weekdaysRegex, this._weekdaysMinRegex = this._weekdaysRegex, this._weekdaysStrictRegex = new RegExp(
    "^(" + n.join("|") + ")",
    "i"
  ), this._weekdaysShortStrictRegex = new RegExp(
    "^(" + t.join("|") + ")",
    "i"
  ), this._weekdaysMinStrictRegex = new RegExp(
    "^(" + e.join("|") + ")",
    "i"
  );
}
function rg() {
  return this.hours() % 12 || 12;
}
function QD() {
  return this.hours() || 24;
}
_e("H", ["HH", 2], 0, "hour");
_e("h", ["hh", 2], 0, rg);
_e("k", ["kk", 2], 0, QD);
_e("hmm", 0, 0, function() {
  return "" + rg.apply(this) + Sn(this.minutes(), 2);
});
_e("hmmss", 0, 0, function() {
  return "" + rg.apply(this) + Sn(this.minutes(), 2) + Sn(this.seconds(), 2);
});
_e("Hmm", 0, 0, function() {
  return "" + this.hours() + Sn(this.minutes(), 2);
});
_e("Hmmss", 0, 0, function() {
  return "" + this.hours() + Sn(this.minutes(), 2) + Sn(this.seconds(), 2);
});
function ib(s, e) {
  _e(s, 0, 0, function() {
    return this.localeData().meridiem(
      this.hours(),
      this.minutes(),
      e
    );
  });
}
ib("a", !0);
ib("A", !1);
as("hour", "h");
ls("hour", 13);
function ob(s, e) {
  return e._meridiemParse;
}
pe("a", ob);
pe("A", ob);
pe("H", St);
pe("h", St);
pe("k", St);
pe("HH", St, Ds);
pe("hh", St, Ds);
pe("kk", St, Ds);
pe("hmm", KS);
pe("hmmss", XS);
pe("Hmm", KS);
pe("Hmmss", XS);
dt(["H", "HH"], Yt);
dt(["k", "kk"], function(s, e, t) {
  var n = qe(s);
  e[Yt] = n === 24 ? 0 : n;
});
dt(["a", "A"], function(s, e, t) {
  t._isPm = t._locale.isPM(s), t._meridiem = s;
});
dt(["h", "hh"], function(s, e, t) {
  e[Yt] = qe(s), Ue(t).bigHour = !0;
});
dt("hmm", function(s, e, t) {
  var n = s.length - 2;
  e[Yt] = qe(s.substr(0, n)), e[Qs] = qe(s.substr(n)), Ue(t).bigHour = !0;
});
dt("hmmss", function(s, e, t) {
  var n = s.length - 4, o = s.length - 2;
  e[Yt] = qe(s.substr(0, n)), e[Qs] = qe(s.substr(n, 2)), e[zn] = qe(s.substr(o)), Ue(t).bigHour = !0;
});
dt("Hmm", function(s, e, t) {
  var n = s.length - 2;
  e[Yt] = qe(s.substr(0, n)), e[Qs] = qe(s.substr(n));
});
dt("Hmmss", function(s, e, t) {
  var n = s.length - 4, o = s.length - 2;
  e[Yt] = qe(s.substr(0, n)), e[Qs] = qe(s.substr(n, 2)), e[zn] = qe(s.substr(o));
});
function JD(s) {
  return (s + "").toLowerCase().charAt(0) === "p";
}
var eH = /[ap]\.?m?\.?/i, tH = cr("Hours", !0);
function sH(s, e, t) {
  return s > 11 ? t ? "pm" : "PM" : t ? "am" : "AM";
}
var rb = {
  calendar: YP,
  longDateFormat: XP,
  invalidDate: ZP,
  ordinal: JP,
  dayOfMonthOrdinalParse: eD,
  relativeTime: sD,
  months: pD,
  monthsShort: qS,
  week: ID,
  weekdays: ND,
  weekdaysMin: LD,
  weekdaysShort: nb,
  meridiemParse: eH
}, Rt = {}, Rr = {}, ua;
function nH(s, e) {
  var t, n = Math.min(s.length, e.length);
  for (t = 0; t < n; t += 1)
    if (s[t] !== e[t])
      return t;
  return n;
}
function uC(s) {
  return s && s.toLowerCase().replace("_", "-");
}
function iH(s) {
  for (var e = 0, t, n, o, r; e < s.length; ) {
    for (r = uC(s[e]).split("-"), t = r.length, n = uC(s[e + 1]), n = n ? n.split("-") : null; t > 0; ) {
      if (o = sh(r.slice(0, t).join("-")), o)
        return o;
      if (n && n.length >= t && nH(r, n) >= t - 1)
        break;
      t--;
    }
    e++;
  }
  return ua;
}
function oH(s) {
  return s.match("^[^/\\\\]*$") != null;
}
function sh(s) {
  var e = null, t;
  if (Rt[s] === void 0 && typeof module < "u" && module && module.exports && oH(s))
    try {
      e = ua._abbr, t = require, t("./locale/" + s), gi(e);
    } catch {
      Rt[s] = null;
    }
  return Rt[s];
}
function gi(s, e) {
  var t;
  return s && (vs(e) ? t = Zn(s) : t = ag(s, e), t ? ua = t : typeof console < "u" && console.warn && console.warn(
    "Locale " + s + " not found. Did you forget to load it?"
  )), ua._abbr;
}
function ag(s, e) {
  if (e !== null) {
    var t, n = rb;
    if (e.abbr = s, Rt[s] != null)
      WS(
        "defineLocaleOverride",
        "use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."
      ), n = Rt[s]._config;
    else if (e.parentLocale != null)
      if (Rt[e.parentLocale] != null)
        n = Rt[e.parentLocale]._config;
      else if (t = sh(e.parentLocale), t != null)
        n = t._config;
      else
        return Rr[e.parentLocale] || (Rr[e.parentLocale] = []), Rr[e.parentLocale].push({
          name: s,
          config: e
        }), null;
    return Rt[s] = new Jf(Xd(n, e)), Rr[s] && Rr[s].forEach(function(o) {
      ag(o.name, o.config);
    }), gi(s), Rt[s];
  } else
    return delete Rt[s], null;
}
function rH(s, e) {
  if (e != null) {
    var t, n, o = rb;
    Rt[s] != null && Rt[s].parentLocale != null ? Rt[s].set(Xd(Rt[s]._config, e)) : (n = sh(s), n != null && (o = n._config), e = Xd(o, e), n == null && (e.abbr = s), t = new Jf(e), t.parentLocale = Rt[s], Rt[s] = t), gi(s);
  } else
    Rt[s] != null && (Rt[s].parentLocale != null ? (Rt[s] = Rt[s].parentLocale, s === gi() && gi(s)) : Rt[s] != null && delete Rt[s]);
  return Rt[s];
}
function Zn(s) {
  var e;
  if (s && s._locale && s._locale._abbr && (s = s._locale._abbr), !s)
    return ua;
  if (!tn(s)) {
    if (e = sh(s), e)
      return e;
    s = [s];
  }
  return iH(s);
}
function aH() {
  return qd(Rt);
}
function lg(s) {
  var e, t = s._a;
  return t && Ue(s).overflow === -2 && (e = t[Un] < 0 || t[Un] > 11 ? Un : t[wn] < 1 || t[wn] > th(t[is], t[Un]) ? wn : t[Yt] < 0 || t[Yt] > 24 || t[Yt] === 24 && (t[Qs] !== 0 || t[zn] !== 0 || t[Wi] !== 0) ? Yt : t[Qs] < 0 || t[Qs] > 59 ? Qs : t[zn] < 0 || t[zn] > 59 ? zn : t[Wi] < 0 || t[Wi] > 999 ? Wi : -1, Ue(s)._overflowDayOfYear && (e < is || e > wn) && (e = wn), Ue(s)._overflowWeeks && e === -1 && (e = fD), Ue(s)._overflowWeekday && e === -1 && (e = gD), Ue(s).overflow = e), s;
}
var lH = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, cH = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, hH = /Z|[+-]\d\d(?::?\d\d)?/, nl = [
  ["YYYYYY-MM-DD", /[+-]\d{6}-\d\d-\d\d/],
  ["YYYY-MM-DD", /\d{4}-\d\d-\d\d/],
  ["GGGG-[W]WW-E", /\d{4}-W\d\d-\d/],
  ["GGGG-[W]WW", /\d{4}-W\d\d/, !1],
  ["YYYY-DDD", /\d{4}-\d{3}/],
  ["YYYY-MM", /\d{4}-\d\d/, !1],
  ["YYYYYYMMDD", /[+-]\d{10}/],
  ["YYYYMMDD", /\d{8}/],
  ["GGGG[W]WWE", /\d{4}W\d{3}/],
  ["GGGG[W]WW", /\d{4}W\d{2}/, !1],
  ["YYYYDDD", /\d{7}/],
  ["YYYYMM", /\d{6}/, !1],
  ["YYYY", /\d{4}/, !1]
], mu = [
  ["HH:mm:ss.SSSS", /\d\d:\d\d:\d\d\.\d+/],
  ["HH:mm:ss,SSSS", /\d\d:\d\d:\d\d,\d+/],
  ["HH:mm:ss", /\d\d:\d\d:\d\d/],
  ["HH:mm", /\d\d:\d\d/],
  ["HHmmss.SSSS", /\d\d\d\d\d\d\.\d+/],
  ["HHmmss,SSSS", /\d\d\d\d\d\d,\d+/],
  ["HHmmss", /\d\d\d\d\d\d/],
  ["HHmm", /\d\d\d\d/],
  ["HH", /\d\d/]
], uH = /^\/?Date\((-?\d+)/i, dH = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/, fH = {
  UT: 0,
  GMT: 0,
  EDT: -4 * 60,
  EST: -5 * 60,
  CDT: -5 * 60,
  CST: -6 * 60,
  MDT: -6 * 60,
  MST: -7 * 60,
  PDT: -7 * 60,
  PST: -8 * 60
};
function ab(s) {
  var e, t, n = s._i, o = lH.exec(n) || cH.exec(n), r, a, l, c, h = nl.length, u = mu.length;
  if (o) {
    for (Ue(s).iso = !0, e = 0, t = h; e < t; e++)
      if (nl[e][1].exec(o[1])) {
        a = nl[e][0], r = nl[e][2] !== !1;
        break;
      }
    if (a == null) {
      s._isValid = !1;
      return;
    }
    if (o[3]) {
      for (e = 0, t = u; e < t; e++)
        if (mu[e][1].exec(o[3])) {
          l = (o[2] || " ") + mu[e][0];
          break;
        }
      if (l == null) {
        s._isValid = !1;
        return;
      }
    }
    if (!r && l != null) {
      s._isValid = !1;
      return;
    }
    if (o[4])
      if (hH.exec(o[4]))
        c = "Z";
      else {
        s._isValid = !1;
        return;
      }
    s._f = a + (l || "") + (c || ""), hg(s);
  } else
    s._isValid = !1;
}
function gH(s, e, t, n, o, r) {
  var a = [
    mH(s),
    qS.indexOf(e),
    parseInt(t, 10),
    parseInt(n, 10),
    parseInt(o, 10)
  ];
  return r && a.push(parseInt(r, 10)), a;
}
function mH(s) {
  var e = parseInt(s, 10);
  return e <= 49 ? 2e3 + e : e <= 999 ? 1900 + e : e;
}
function pH(s) {
  return s.replace(/\([^()]*\)|[\n\t]/g, " ").replace(/(\s\s+)/g, " ").replace(/^\s\s*/, "").replace(/\s\s*$/, "");
}
function wH(s, e, t) {
  if (s) {
    var n = nb.indexOf(s), o = new Date(
      e[0],
      e[1],
      e[2]
    ).getDay();
    if (n !== o)
      return Ue(t).weekdayMismatch = !0, t._isValid = !1, !1;
  }
  return !0;
}
function CH(s, e, t) {
  if (s)
    return fH[s];
  if (e)
    return 0;
  var n = parseInt(t, 10), o = n % 100, r = (n - o) / 100;
  return r * 60 + o;
}
function lb(s) {
  var e = dH.exec(pH(s._i)), t;
  if (e) {
    if (t = gH(
      e[4],
      e[3],
      e[2],
      e[5],
      e[6],
      e[7]
    ), !wH(e[1], t, s))
      return;
    s._a = t, s._tzm = CH(e[8], e[9], e[10]), s._d = ca.apply(null, s._a), s._d.setUTCMinutes(s._d.getUTCMinutes() - s._tzm), Ue(s).rfc2822 = !0;
  } else
    s._isValid = !1;
}
function vH(s) {
  var e = uH.exec(s._i);
  if (e !== null) {
    s._d = /* @__PURE__ */ new Date(+e[1]);
    return;
  }
  if (ab(s), s._isValid === !1)
    delete s._isValid;
  else
    return;
  if (lb(s), s._isValid === !1)
    delete s._isValid;
  else
    return;
  s._strict ? s._isValid = !1 : se.createFromInputFallback(s);
}
se.createFromInputFallback = zs(
  "value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",
  function(s) {
    s._d = /* @__PURE__ */ new Date(s._i + (s._useUTC ? " UTC" : ""));
  }
);
function Fo(s, e, t) {
  return s ?? e ?? t;
}
function yH(s) {
  var e = new Date(se.now());
  return s._useUTC ? [
    e.getUTCFullYear(),
    e.getUTCMonth(),
    e.getUTCDate()
  ] : [e.getFullYear(), e.getMonth(), e.getDate()];
}
function cg(s) {
  var e, t, n = [], o, r, a;
  if (!s._d) {
    for (o = yH(s), s._w && s._a[wn] == null && s._a[Un] == null && SH(s), s._dayOfYear != null && (a = Fo(s._a[is], o[is]), (s._dayOfYear > Xr(a) || s._dayOfYear === 0) && (Ue(s)._overflowDayOfYear = !0), t = ca(a, 0, s._dayOfYear), s._a[Un] = t.getUTCMonth(), s._a[wn] = t.getUTCDate()), e = 0; e < 3 && s._a[e] == null; ++e)
      s._a[e] = n[e] = o[e];
    for (; e < 7; e++)
      s._a[e] = n[e] = s._a[e] == null ? e === 2 ? 1 : 0 : s._a[e];
    s._a[Yt] === 24 && s._a[Qs] === 0 && s._a[zn] === 0 && s._a[Wi] === 0 && (s._nextDay = !0, s._a[Yt] = 0), s._d = (s._useUTC ? ca : MD).apply(
      null,
      n
    ), r = s._useUTC ? s._d.getUTCDay() : s._d.getDay(), s._tzm != null && s._d.setUTCMinutes(s._d.getUTCMinutes() - s._tzm), s._nextDay && (s._a[Yt] = 24), s._w && typeof s._w.d < "u" && s._w.d !== r && (Ue(s).weekdayMismatch = !0);
  }
}
function SH(s) {
  var e, t, n, o, r, a, l, c, h;
  e = s._w, e.GG != null || e.W != null || e.E != null ? (r = 1, a = 4, t = Fo(
    e.GG,
    s._a[is],
    ha(yt(), 1, 4).year
  ), n = Fo(e.W, 1), o = Fo(e.E, 1), (o < 1 || o > 7) && (c = !0)) : (r = s._locale._week.dow, a = s._locale._week.doy, h = ha(yt(), r, a), t = Fo(e.gg, s._a[is], h.year), n = Fo(e.w, h.week), e.d != null ? (o = e.d, (o < 0 || o > 6) && (c = !0)) : e.e != null ? (o = e.e + r, (e.e < 0 || e.e > 6) && (c = !0)) : o = r), n < 1 || n > Gn(t, r, a) ? Ue(s)._overflowWeeks = !0 : c != null ? Ue(s)._overflowWeekday = !0 : (l = sb(t, n, o, r, a), s._a[is] = l.year, s._dayOfYear = l.dayOfYear);
}
se.ISO_8601 = function() {
};
se.RFC_2822 = function() {
};
function hg(s) {
  if (s._f === se.ISO_8601) {
    ab(s);
    return;
  }
  if (s._f === se.RFC_2822) {
    lb(s);
    return;
  }
  s._a = [], Ue(s).empty = !0;
  var e = "" + s._i, t, n, o, r, a, l = e.length, c = 0, h, u;
  for (o = US(s._f, s._locale).match(eg) || [], u = o.length, t = 0; t < u; t++)
    r = o[t], n = (e.match(hD(r, s)) || [])[0], n && (a = e.substr(0, e.indexOf(n)), a.length > 0 && Ue(s).unusedInput.push(a), e = e.slice(
      e.indexOf(n) + n.length
    ), c += n.length), Go[r] ? (n ? Ue(s).empty = !1 : Ue(s).unusedTokens.push(r), dD(r, n, s)) : s._strict && !n && Ue(s).unusedTokens.push(r);
  Ue(s).charsLeftOver = l - c, e.length > 0 && Ue(s).unusedInput.push(e), s._a[Yt] <= 12 && Ue(s).bigHour === !0 && s._a[Yt] > 0 && (Ue(s).bigHour = void 0), Ue(s).parsedDateParts = s._a.slice(0), Ue(s).meridiem = s._meridiem, s._a[Yt] = bH(
    s._locale,
    s._a[Yt],
    s._meridiem
  ), h = Ue(s).era, h !== null && (s._a[is] = s._locale.erasConvertYear(h, s._a[is])), cg(s), lg(s);
}
function bH(s, e, t) {
  var n;
  return t == null ? e : s.meridiemHour != null ? s.meridiemHour(e, t) : (s.isPM != null && (n = s.isPM(t), n && e < 12 && (e += 12), !n && e === 12 && (e = 0)), e);
}
function RH(s) {
  var e, t, n, o, r, a, l = !1, c = s._f.length;
  if (c === 0) {
    Ue(s).invalidFormat = !0, s._d = /* @__PURE__ */ new Date(NaN);
    return;
  }
  for (o = 0; o < c; o++)
    r = 0, a = !1, e = Qf({}, s), s._useUTC != null && (e._useUTC = s._useUTC), e._f = s._f[o], hg(e), Zf(e) && (a = !0), r += Ue(e).charsLeftOver, r += Ue(e).unusedTokens.length * 10, Ue(e).score = r, l ? r < n && (n = r, t = e) : (n == null || r < n || a) && (n = r, t = e, a && (l = !0));
  ui(s, t || e);
}
function EH(s) {
  if (!s._d) {
    var e = tg(s._i), t = e.day === void 0 ? e.date : e.day;
    s._a = VS(
      [e.year, e.month, t, e.hour, e.minute, e.second, e.millisecond],
      function(n) {
        return n && parseInt(n, 10);
      }
    ), cg(s);
  }
}
function xH(s) {
  var e = new Ia(lg(cb(s)));
  return e._nextDay && (e.add(1, "d"), e._nextDay = void 0), e;
}
function cb(s) {
  var e = s._i, t = s._f;
  return s._locale = s._locale || Zn(s._l), e === null || t === void 0 && e === "" ? Kc({ nullInput: !0 }) : (typeof e == "string" && (s._i = e = s._locale.preparse(e)), sn(e) ? new Ia(lg(e)) : (_a(e) ? s._d = e : tn(t) ? RH(s) : t ? hg(s) : TH(s), Zf(s) || (s._d = null), s));
}
function TH(s) {
  var e = s._i;
  vs(e) ? s._d = new Date(se.now()) : _a(e) ? s._d = new Date(e.valueOf()) : typeof e == "string" ? vH(s) : tn(e) ? (s._a = VS(e.slice(0), function(t) {
    return parseInt(t, 10);
  }), cg(s)) : Gi(e) ? EH(s) : Kn(e) ? s._d = new Date(e) : se.createFromInputFallback(s);
}
function hb(s, e, t, n, o) {
  var r = {};
  return (e === !0 || e === !1) && (n = e, e = void 0), (t === !0 || t === !1) && (n = t, t = void 0), (Gi(s) && qf(s) || tn(s) && s.length === 0) && (s = void 0), r._isAMomentObject = !0, r._useUTC = r._isUTC = o, r._l = t, r._i = s, r._f = e, r._strict = n, xH(r);
}
function yt(s, e, t, n) {
  return hb(s, e, t, n, !1);
}
var MH = zs(
  "moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",
  function() {
    var s = yt.apply(null, arguments);
    return this.isValid() && s.isValid() ? s < this ? this : s : Kc();
  }
), _H = zs(
  "moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",
  function() {
    var s = yt.apply(null, arguments);
    return this.isValid() && s.isValid() ? s > this ? this : s : Kc();
  }
);
function ub(s, e) {
  var t, n;
  if (e.length === 1 && tn(e[0]) && (e = e[0]), !e.length)
    return yt();
  for (t = e[0], n = 1; n < e.length; ++n)
    (!e[n].isValid() || e[n][s](t)) && (t = e[n]);
  return t;
}
function IH() {
  var s = [].slice.call(arguments, 0);
  return ub("isBefore", s);
}
function OH() {
  var s = [].slice.call(arguments, 0);
  return ub("isAfter", s);
}
var AH = function() {
  return Date.now ? Date.now() : +/* @__PURE__ */ new Date();
}, Er = [
  "year",
  "quarter",
  "month",
  "week",
  "day",
  "hour",
  "minute",
  "second",
  "millisecond"
];
function PH(s) {
  var e, t = !1, n, o = Er.length;
  for (e in s)
    if (nt(s, e) && !(Ft.call(Er, e) !== -1 && (s[e] == null || !isNaN(s[e]))))
      return !1;
  for (n = 0; n < o; ++n)
    if (s[Er[n]]) {
      if (t)
        return !1;
      parseFloat(s[Er[n]]) !== qe(s[Er[n]]) && (t = !0);
    }
  return !0;
}
function DH() {
  return this._isValid;
}
function HH() {
  return nn(NaN);
}
function nh(s) {
  var e = tg(s), t = e.year || 0, n = e.quarter || 0, o = e.month || 0, r = e.week || e.isoWeek || 0, a = e.day || 0, l = e.hour || 0, c = e.minute || 0, h = e.second || 0, u = e.millisecond || 0;
  this._isValid = PH(e), this._milliseconds = +u + h * 1e3 + // 1000
  c * 6e4 + // 1000 * 60
  l * 1e3 * 60 * 60, this._days = +a + r * 7, this._months = +o + n * 3 + t * 12, this._data = {}, this._locale = Zn(), this._bubble();
}
function Xl(s) {
  return s instanceof nh;
}
function Qd(s) {
  return s < 0 ? Math.round(-1 * s) * -1 : Math.round(s);
}
function kH(s, e, t) {
  var n = Math.min(s.length, e.length), o = Math.abs(s.length - e.length), r = 0, a;
  for (a = 0; a < n; a++)
    (t && s[a] !== e[a] || !t && qe(s[a]) !== qe(e[a])) && r++;
  return r + o;
}
function db(s, e) {
  _e(s, 0, 0, function() {
    var t = this.utcOffset(), n = "+";
    return t < 0 && (t = -t, n = "-"), n + Sn(~~(t / 60), 2) + e + Sn(~~t % 60, 2);
  });
}
db("Z", ":");
db("ZZ", "");
pe("Z", eh);
pe("ZZ", eh);
dt(["Z", "ZZ"], function(s, e, t) {
  t._useUTC = !0, t._tzm = ug(eh, s);
});
var NH = /([\+\-]|\d\d)/gi;
function ug(s, e) {
  var t = (e || "").match(s), n, o, r;
  return t === null ? null : (n = t[t.length - 1] || [], o = (n + "").match(NH) || ["-", 0, 0], r = +(o[1] * 60) + qe(o[2]), r === 0 ? 0 : o[0] === "+" ? r : -r);
}
function dg(s, e) {
  var t, n;
  return e._isUTC ? (t = e.clone(), n = (sn(s) || _a(s) ? s.valueOf() : yt(s).valueOf()) - t.valueOf(), t._d.setTime(t._d.valueOf() + n), se.updateOffset(t, !1), t) : yt(s).local();
}
function Jd(s) {
  return -Math.round(s._d.getTimezoneOffset());
}
se.updateOffset = function() {
};
function LH(s, e, t) {
  var n = this._offset || 0, o;
  if (!this.isValid())
    return s != null ? this : NaN;
  if (s != null) {
    if (typeof s == "string") {
      if (s = ug(eh, s), s === null)
        return this;
    } else
      Math.abs(s) < 16 && !t && (s = s * 60);
    return !this._isUTC && e && (o = Jd(this)), this._offset = s, this._isUTC = !0, o != null && this.add(o, "m"), n !== s && (!e || this._changeInProgress ? mb(
      this,
      nn(s - n, "m"),
      1,
      !1
    ) : this._changeInProgress || (this._changeInProgress = !0, se.updateOffset(this, !0), this._changeInProgress = null)), this;
  } else
    return this._isUTC ? n : Jd(this);
}
function $H(s, e) {
  return s != null ? (typeof s != "string" && (s = -s), this.utcOffset(s, e), this) : -this.utcOffset();
}
function FH(s) {
  return this.utcOffset(0, s);
}
function VH(s) {
  return this._isUTC && (this.utcOffset(0, s), this._isUTC = !1, s && this.subtract(Jd(this), "m")), this;
}
function BH() {
  if (this._tzm != null)
    this.utcOffset(this._tzm, !1, !0);
  else if (typeof this._i == "string") {
    var s = ug(lD, this._i);
    s != null ? this.utcOffset(s) : this.utcOffset(0, !0);
  }
  return this;
}
function WH(s) {
  return this.isValid() ? (s = s ? yt(s).utcOffset() : 0, (this.utcOffset() - s) % 60 === 0) : !1;
}
function UH() {
  return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
}
function zH() {
  if (!vs(this._isDSTShifted))
    return this._isDSTShifted;
  var s = {}, e;
  return Qf(s, this), s = cb(s), s._a ? (e = s._isUTC ? Tn(s._a) : yt(s._a), this._isDSTShifted = this.isValid() && kH(s._a, e.toArray()) > 0) : this._isDSTShifted = !1, this._isDSTShifted;
}
function YH() {
  return this.isValid() ? !this._isUTC : !1;
}
function GH() {
  return this.isValid() ? this._isUTC : !1;
}
function fb() {
  return this.isValid() ? this._isUTC && this._offset === 0 : !1;
}
var jH = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/, KH = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
function nn(s, e) {
  var t = s, n = null, o, r, a;
  return Xl(s) ? t = {
    ms: s._milliseconds,
    d: s._days,
    M: s._months
  } : Kn(s) || !isNaN(+s) ? (t = {}, e ? t[e] = +s : t.milliseconds = +s) : (n = jH.exec(s)) ? (o = n[1] === "-" ? -1 : 1, t = {
    y: 0,
    d: qe(n[wn]) * o,
    h: qe(n[Yt]) * o,
    m: qe(n[Qs]) * o,
    s: qe(n[zn]) * o,
    ms: qe(Qd(n[Wi] * 1e3)) * o
    // the millisecond decimal point is included in the match
  }) : (n = KH.exec(s)) ? (o = n[1] === "-" ? -1 : 1, t = {
    y: Mi(n[2], o),
    M: Mi(n[3], o),
    w: Mi(n[4], o),
    d: Mi(n[5], o),
    h: Mi(n[6], o),
    m: Mi(n[7], o),
    s: Mi(n[8], o)
  }) : t == null ? t = {} : typeof t == "object" && ("from" in t || "to" in t) && (a = XH(
    yt(t.from),
    yt(t.to)
  ), t = {}, t.ms = a.milliseconds, t.M = a.months), r = new nh(t), Xl(s) && nt(s, "_locale") && (r._locale = s._locale), Xl(s) && nt(s, "_isValid") && (r._isValid = s._isValid), r;
}
nn.fn = nh.prototype;
nn.invalid = HH;
function Mi(s, e) {
  var t = s && parseFloat(s.replace(",", "."));
  return (isNaN(t) ? 0 : t) * e;
}
function dC(s, e) {
  var t = {};
  return t.months = e.month() - s.month() + (e.year() - s.year()) * 12, s.clone().add(t.months, "M").isAfter(e) && --t.months, t.milliseconds = +e - +s.clone().add(t.months, "M"), t;
}
function XH(s, e) {
  var t;
  return s.isValid() && e.isValid() ? (e = dg(e, s), s.isBefore(e) ? t = dC(s, e) : (t = dC(e, s), t.milliseconds = -t.milliseconds, t.months = -t.months), t) : { milliseconds: 0, months: 0 };
}
function gb(s, e) {
  return function(t, n) {
    var o, r;
    return n !== null && !isNaN(+n) && (WS(
      e,
      "moment()." + e + "(period, number) is deprecated. Please use moment()." + e + "(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."
    ), r = t, t = n, n = r), o = nn(t, n), mb(this, o, s), this;
  };
}
function mb(s, e, t, n) {
  var o = e._milliseconds, r = Qd(e._days), a = Qd(e._months);
  s.isValid() && (n = n ?? !0, a && QS(s, hc(s, "Month") + a * t), r && YS(s, "Date", hc(s, "Date") + r * t), o && s._d.setTime(s._d.valueOf() + o * t), n && se.updateOffset(s, r || a));
}
var qH = gb(1, "add"), ZH = gb(-1, "subtract");
function pb(s) {
  return typeof s == "string" || s instanceof String;
}
function QH(s) {
  return sn(s) || _a(s) || pb(s) || Kn(s) || ek(s) || JH(s) || s === null || s === void 0;
}
function JH(s) {
  var e = Gi(s) && !qf(s), t = !1, n = [
    "years",
    "year",
    "y",
    "months",
    "month",
    "M",
    "days",
    "day",
    "d",
    "dates",
    "date",
    "D",
    "hours",
    "hour",
    "h",
    "minutes",
    "minute",
    "m",
    "seconds",
    "second",
    "s",
    "milliseconds",
    "millisecond",
    "ms"
  ], o, r, a = n.length;
  for (o = 0; o < a; o += 1)
    r = n[o], t = t || nt(s, r);
  return e && t;
}
function ek(s) {
  var e = tn(s), t = !1;
  return e && (t = s.filter(function(n) {
    return !Kn(n) && pb(s);
  }).length === 0), e && t;
}
function tk(s) {
  var e = Gi(s) && !qf(s), t = !1, n = [
    "sameDay",
    "nextDay",
    "lastDay",
    "nextWeek",
    "lastWeek",
    "sameElse"
  ], o, r;
  for (o = 0; o < n.length; o += 1)
    r = n[o], t = t || nt(s, r);
  return e && t;
}
function sk(s, e) {
  var t = s.diff(e, "days", !0);
  return t < -6 ? "sameElse" : t < -1 ? "lastWeek" : t < 0 ? "lastDay" : t < 1 ? "sameDay" : t < 2 ? "nextDay" : t < 7 ? "nextWeek" : "sameElse";
}
function nk(s, e) {
  arguments.length === 1 && (arguments[0] ? QH(arguments[0]) ? (s = arguments[0], e = void 0) : tk(arguments[0]) && (e = arguments[0], s = void 0) : (s = void 0, e = void 0));
  var t = s || yt(), n = dg(t, this).startOf("day"), o = se.calendarFormat(this, n) || "sameElse", r = e && (Mn(e[o]) ? e[o].call(this, t) : e[o]);
  return this.format(
    r || this.localeData().calendar(o, this, yt(t))
  );
}
function ik() {
  return new Ia(this);
}
function ok(s, e) {
  var t = sn(s) ? s : yt(s);
  return this.isValid() && t.isValid() ? (e = Ys(e) || "millisecond", e === "millisecond" ? this.valueOf() > t.valueOf() : t.valueOf() < this.clone().startOf(e).valueOf()) : !1;
}
function rk(s, e) {
  var t = sn(s) ? s : yt(s);
  return this.isValid() && t.isValid() ? (e = Ys(e) || "millisecond", e === "millisecond" ? this.valueOf() < t.valueOf() : this.clone().endOf(e).valueOf() < t.valueOf()) : !1;
}
function ak(s, e, t, n) {
  var o = sn(s) ? s : yt(s), r = sn(e) ? e : yt(e);
  return this.isValid() && o.isValid() && r.isValid() ? (n = n || "()", (n[0] === "(" ? this.isAfter(o, t) : !this.isBefore(o, t)) && (n[1] === ")" ? this.isBefore(r, t) : !this.isAfter(r, t))) : !1;
}
function lk(s, e) {
  var t = sn(s) ? s : yt(s), n;
  return this.isValid() && t.isValid() ? (e = Ys(e) || "millisecond", e === "millisecond" ? this.valueOf() === t.valueOf() : (n = t.valueOf(), this.clone().startOf(e).valueOf() <= n && n <= this.clone().endOf(e).valueOf())) : !1;
}
function ck(s, e) {
  return this.isSame(s, e) || this.isAfter(s, e);
}
function hk(s, e) {
  return this.isSame(s, e) || this.isBefore(s, e);
}
function uk(s, e, t) {
  var n, o, r;
  if (!this.isValid())
    return NaN;
  if (n = dg(s, this), !n.isValid())
    return NaN;
  switch (o = (n.utcOffset() - this.utcOffset()) * 6e4, e = Ys(e), e) {
    case "year":
      r = ql(this, n) / 12;
      break;
    case "month":
      r = ql(this, n);
      break;
    case "quarter":
      r = ql(this, n) / 3;
      break;
    case "second":
      r = (this - n) / 1e3;
      break;
    case "minute":
      r = (this - n) / 6e4;
      break;
    case "hour":
      r = (this - n) / 36e5;
      break;
    case "day":
      r = (this - n - o) / 864e5;
      break;
    case "week":
      r = (this - n - o) / 6048e5;
      break;
    default:
      r = this - n;
  }
  return t ? r : Vs(r);
}
function ql(s, e) {
  if (s.date() < e.date())
    return -ql(e, s);
  var t = (e.year() - s.year()) * 12 + (e.month() - s.month()), n = s.clone().add(t, "months"), o, r;
  return e - n < 0 ? (o = s.clone().add(t - 1, "months"), r = (e - n) / (n - o)) : (o = s.clone().add(t + 1, "months"), r = (e - n) / (o - n)), -(t + r) || 0;
}
se.defaultFormat = "YYYY-MM-DDTHH:mm:ssZ";
se.defaultFormatUtc = "YYYY-MM-DDTHH:mm:ss[Z]";
function dk() {
  return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ");
}
function fk(s) {
  if (!this.isValid())
    return null;
  var e = s !== !0, t = e ? this.clone().utc() : this;
  return t.year() < 0 || t.year() > 9999 ? Kl(
    t,
    e ? "YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"
  ) : Mn(Date.prototype.toISOString) ? e ? this.toDate().toISOString() : new Date(this.valueOf() + this.utcOffset() * 60 * 1e3).toISOString().replace("Z", Kl(t, "Z")) : Kl(
    t,
    e ? "YYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYY-MM-DD[T]HH:mm:ss.SSSZ"
  );
}
function gk() {
  if (!this.isValid())
    return "moment.invalid(/* " + this._i + " */)";
  var s = "moment", e = "", t, n, o, r;
  return this.isLocal() || (s = this.utcOffset() === 0 ? "moment.utc" : "moment.parseZone", e = "Z"), t = "[" + s + '("]', n = 0 <= this.year() && this.year() <= 9999 ? "YYYY" : "YYYYYY", o = "-MM-DD[T]HH:mm:ss.SSS", r = e + '[")]', this.format(t + n + o + r);
}
function mk(s) {
  s || (s = this.isUtc() ? se.defaultFormatUtc : se.defaultFormat);
  var e = Kl(this, s);
  return this.localeData().postformat(e);
}
function pk(s, e) {
  return this.isValid() && (sn(s) && s.isValid() || yt(s).isValid()) ? nn({ to: this, from: s }).locale(this.locale()).humanize(!e) : this.localeData().invalidDate();
}
function wk(s) {
  return this.from(yt(), s);
}
function Ck(s, e) {
  return this.isValid() && (sn(s) && s.isValid() || yt(s).isValid()) ? nn({ from: this, to: s }).locale(this.locale()).humanize(!e) : this.localeData().invalidDate();
}
function vk(s) {
  return this.to(yt(), s);
}
function wb(s) {
  var e;
  return s === void 0 ? this._locale._abbr : (e = Zn(s), e != null && (this._locale = e), this);
}
var Cb = zs(
  "moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",
  function(s) {
    return s === void 0 ? this.localeData() : this.locale(s);
  }
);
function vb() {
  return this._locale;
}
var fc = 1e3, jo = 60 * fc, gc = 60 * jo, yb = (365 * 400 + 97) * 24 * gc;
function Ko(s, e) {
  return (s % e + e) % e;
}
function Sb(s, e, t) {
  return s < 100 && s >= 0 ? new Date(s + 400, e, t) - yb : new Date(s, e, t).valueOf();
}
function bb(s, e, t) {
  return s < 100 && s >= 0 ? Date.UTC(s + 400, e, t) - yb : Date.UTC(s, e, t);
}
function yk(s) {
  var e, t;
  if (s = Ys(s), s === void 0 || s === "millisecond" || !this.isValid())
    return this;
  switch (t = this._isUTC ? bb : Sb, s) {
    case "year":
      e = t(this.year(), 0, 1);
      break;
    case "quarter":
      e = t(
        this.year(),
        this.month() - this.month() % 3,
        1
      );
      break;
    case "month":
      e = t(this.year(), this.month(), 1);
      break;
    case "week":
      e = t(
        this.year(),
        this.month(),
        this.date() - this.weekday()
      );
      break;
    case "isoWeek":
      e = t(
        this.year(),
        this.month(),
        this.date() - (this.isoWeekday() - 1)
      );
      break;
    case "day":
    case "date":
      e = t(this.year(), this.month(), this.date());
      break;
    case "hour":
      e = this._d.valueOf(), e -= Ko(
        e + (this._isUTC ? 0 : this.utcOffset() * jo),
        gc
      );
      break;
    case "minute":
      e = this._d.valueOf(), e -= Ko(e, jo);
      break;
    case "second":
      e = this._d.valueOf(), e -= Ko(e, fc);
      break;
  }
  return this._d.setTime(e), se.updateOffset(this, !0), this;
}
function Sk(s) {
  var e, t;
  if (s = Ys(s), s === void 0 || s === "millisecond" || !this.isValid())
    return this;
  switch (t = this._isUTC ? bb : Sb, s) {
    case "year":
      e = t(this.year() + 1, 0, 1) - 1;
      break;
    case "quarter":
      e = t(
        this.year(),
        this.month() - this.month() % 3 + 3,
        1
      ) - 1;
      break;
    case "month":
      e = t(this.year(), this.month() + 1, 1) - 1;
      break;
    case "week":
      e = t(
        this.year(),
        this.month(),
        this.date() - this.weekday() + 7
      ) - 1;
      break;
    case "isoWeek":
      e = t(
        this.year(),
        this.month(),
        this.date() - (this.isoWeekday() - 1) + 7
      ) - 1;
      break;
    case "day":
    case "date":
      e = t(this.year(), this.month(), this.date() + 1) - 1;
      break;
    case "hour":
      e = this._d.valueOf(), e += gc - Ko(
        e + (this._isUTC ? 0 : this.utcOffset() * jo),
        gc
      ) - 1;
      break;
    case "minute":
      e = this._d.valueOf(), e += jo - Ko(e, jo) - 1;
      break;
    case "second":
      e = this._d.valueOf(), e += fc - Ko(e, fc) - 1;
      break;
  }
  return this._d.setTime(e), se.updateOffset(this, !0), this;
}
function bk() {
  return this._d.valueOf() - (this._offset || 0) * 6e4;
}
function Rk() {
  return Math.floor(this.valueOf() / 1e3);
}
function Ek() {
  return new Date(this.valueOf());
}
function xk() {
  var s = this;
  return [
    s.year(),
    s.month(),
    s.date(),
    s.hour(),
    s.minute(),
    s.second(),
    s.millisecond()
  ];
}
function Tk() {
  var s = this;
  return {
    years: s.year(),
    months: s.month(),
    date: s.date(),
    hours: s.hours(),
    minutes: s.minutes(),
    seconds: s.seconds(),
    milliseconds: s.milliseconds()
  };
}
function Mk() {
  return this.isValid() ? this.toISOString() : null;
}
function _k() {
  return Zf(this);
}
function Ik() {
  return ui({}, Ue(this));
}
function Ok() {
  return Ue(this).overflow;
}
function Ak() {
  return {
    input: this._i,
    format: this._f,
    locale: this._locale,
    isUTC: this._isUTC,
    strict: this._strict
  };
}
_e("N", 0, 0, "eraAbbr");
_e("NN", 0, 0, "eraAbbr");
_e("NNN", 0, 0, "eraAbbr");
_e("NNNN", 0, 0, "eraName");
_e("NNNNN", 0, 0, "eraNarrow");
_e("y", ["y", 1], "yo", "eraYear");
_e("y", ["yy", 2], 0, "eraYear");
_e("y", ["yyy", 3], 0, "eraYear");
_e("y", ["yyyy", 4], 0, "eraYear");
pe("N", fg);
pe("NN", fg);
pe("NNN", fg);
pe("NNNN", Wk);
pe("NNNNN", Uk);
dt(
  ["N", "NN", "NNN", "NNNN", "NNNNN"],
  function(s, e, t, n) {
    var o = t._locale.erasParse(s, n, t._strict);
    o ? Ue(t).era = o : Ue(t).invalidEra = s;
  }
);
pe("y", hr);
pe("yy", hr);
pe("yyy", hr);
pe("yyyy", hr);
pe("yo", zk);
dt(["y", "yy", "yyy", "yyyy"], is);
dt(["yo"], function(s, e, t, n) {
  var o;
  t._locale._eraYearOrdinalRegex && (o = s.match(t._locale._eraYearOrdinalRegex)), t._locale.eraYearOrdinalParse ? e[is] = t._locale.eraYearOrdinalParse(s, o) : e[is] = parseInt(s, 10);
});
function Pk(s, e) {
  var t, n, o, r = this._eras || Zn("en")._eras;
  for (t = 0, n = r.length; t < n; ++t) {
    switch (typeof r[t].since) {
      case "string":
        o = se(r[t].since).startOf("day"), r[t].since = o.valueOf();
        break;
    }
    switch (typeof r[t].until) {
      case "undefined":
        r[t].until = 1 / 0;
        break;
      case "string":
        o = se(r[t].until).startOf("day").valueOf(), r[t].until = o.valueOf();
        break;
    }
  }
  return r;
}
function Dk(s, e, t) {
  var n, o, r = this.eras(), a, l, c;
  for (s = s.toUpperCase(), n = 0, o = r.length; n < o; ++n)
    if (a = r[n].name.toUpperCase(), l = r[n].abbr.toUpperCase(), c = r[n].narrow.toUpperCase(), t)
      switch (e) {
        case "N":
        case "NN":
        case "NNN":
          if (l === s)
            return r[n];
          break;
        case "NNNN":
          if (a === s)
            return r[n];
          break;
        case "NNNNN":
          if (c === s)
            return r[n];
          break;
      }
    else if ([a, l, c].indexOf(s) >= 0)
      return r[n];
}
function Hk(s, e) {
  var t = s.since <= s.until ? 1 : -1;
  return e === void 0 ? se(s.since).year() : se(s.since).year() + (e - s.offset) * t;
}
function kk() {
  var s, e, t, n = this.localeData().eras();
  for (s = 0, e = n.length; s < e; ++s)
    if (t = this.clone().startOf("day").valueOf(), n[s].since <= t && t <= n[s].until || n[s].until <= t && t <= n[s].since)
      return n[s].name;
  return "";
}
function Nk() {
  var s, e, t, n = this.localeData().eras();
  for (s = 0, e = n.length; s < e; ++s)
    if (t = this.clone().startOf("day").valueOf(), n[s].since <= t && t <= n[s].until || n[s].until <= t && t <= n[s].since)
      return n[s].narrow;
  return "";
}
function Lk() {
  var s, e, t, n = this.localeData().eras();
  for (s = 0, e = n.length; s < e; ++s)
    if (t = this.clone().startOf("day").valueOf(), n[s].since <= t && t <= n[s].until || n[s].until <= t && t <= n[s].since)
      return n[s].abbr;
  return "";
}
function $k() {
  var s, e, t, n, o = this.localeData().eras();
  for (s = 0, e = o.length; s < e; ++s)
    if (t = o[s].since <= o[s].until ? 1 : -1, n = this.clone().startOf("day").valueOf(), o[s].since <= n && n <= o[s].until || o[s].until <= n && n <= o[s].since)
      return (this.year() - se(o[s].since).year()) * t + o[s].offset;
  return this.year();
}
function Fk(s) {
  return nt(this, "_erasNameRegex") || gg.call(this), s ? this._erasNameRegex : this._erasRegex;
}
function Vk(s) {
  return nt(this, "_erasAbbrRegex") || gg.call(this), s ? this._erasAbbrRegex : this._erasRegex;
}
function Bk(s) {
  return nt(this, "_erasNarrowRegex") || gg.call(this), s ? this._erasNarrowRegex : this._erasRegex;
}
function fg(s, e) {
  return e.erasAbbrRegex(s);
}
function Wk(s, e) {
  return e.erasNameRegex(s);
}
function Uk(s, e) {
  return e.erasNarrowRegex(s);
}
function zk(s, e) {
  return e._eraYearOrdinalRegex || hr;
}
function gg() {
  var s = [], e = [], t = [], n = [], o, r, a = this.eras();
  for (o = 0, r = a.length; o < r; ++o)
    e.push(Is(a[o].name)), s.push(Is(a[o].abbr)), t.push(Is(a[o].narrow)), n.push(Is(a[o].name)), n.push(Is(a[o].abbr)), n.push(Is(a[o].narrow));
  this._erasRegex = new RegExp("^(" + n.join("|") + ")", "i"), this._erasNameRegex = new RegExp("^(" + e.join("|") + ")", "i"), this._erasAbbrRegex = new RegExp("^(" + s.join("|") + ")", "i"), this._erasNarrowRegex = new RegExp(
    "^(" + t.join("|") + ")",
    "i"
  );
}
_e(0, ["gg", 2], 0, function() {
  return this.weekYear() % 100;
});
_e(0, ["GG", 2], 0, function() {
  return this.isoWeekYear() % 100;
});
function ih(s, e) {
  _e(0, [s, s.length], 0, e);
}
ih("gggg", "weekYear");
ih("ggggg", "weekYear");
ih("GGGG", "isoWeekYear");
ih("GGGGG", "isoWeekYear");
as("weekYear", "gg");
as("isoWeekYear", "GG");
ls("weekYear", 1);
ls("isoWeekYear", 1);
pe("G", Jc);
pe("g", Jc);
pe("GG", St, Ds);
pe("gg", St, Ds);
pe("GGGG", ng, sg);
pe("gggg", ng, sg);
pe("GGGGG", Qc, qc);
pe("ggggg", Qc, qc);
Aa(
  ["gggg", "ggggg", "GGGG", "GGGGG"],
  function(s, e, t, n) {
    e[n.substr(0, 2)] = qe(s);
  }
);
Aa(["gg", "GG"], function(s, e, t, n) {
  e[n] = se.parseTwoDigitYear(s);
});
function Yk(s) {
  return Rb.call(
    this,
    s,
    this.week(),
    this.weekday(),
    this.localeData()._week.dow,
    this.localeData()._week.doy
  );
}
function Gk(s) {
  return Rb.call(
    this,
    s,
    this.isoWeek(),
    this.isoWeekday(),
    1,
    4
  );
}
function jk() {
  return Gn(this.year(), 1, 4);
}
function Kk() {
  return Gn(this.isoWeekYear(), 1, 4);
}
function Xk() {
  var s = this.localeData()._week;
  return Gn(this.year(), s.dow, s.doy);
}
function qk() {
  var s = this.localeData()._week;
  return Gn(this.weekYear(), s.dow, s.doy);
}
function Rb(s, e, t, n, o) {
  var r;
  return s == null ? ha(this, n, o).year : (r = Gn(s, n, o), e > r && (e = r), Zk.call(this, s, e, t, n, o));
}
function Zk(s, e, t, n, o) {
  var r = sb(s, e, t, n, o), a = ca(r.year, 0, r.dayOfYear);
  return this.year(a.getUTCFullYear()), this.month(a.getUTCMonth()), this.date(a.getUTCDate()), this;
}
_e("Q", 0, "Qo", "quarter");
as("quarter", "Q");
ls("quarter", 7);
pe("Q", GS);
dt("Q", function(s, e) {
  e[Un] = (qe(s) - 1) * 3;
});
function Qk(s) {
  return s == null ? Math.ceil((this.month() + 1) / 3) : this.month((s - 1) * 3 + this.month() % 3);
}
_e("D", ["DD", 2], "Do", "date");
as("date", "D");
ls("date", 9);
pe("D", St);
pe("DD", St, Ds);
pe("Do", function(s, e) {
  return s ? e._dayOfMonthOrdinalParse || e._ordinalParse : e._dayOfMonthOrdinalParseLenient;
});
dt(["D", "DD"], wn);
dt("Do", function(s, e) {
  e[wn] = qe(s.match(St)[0]);
});
var Eb = cr("Date", !0);
_e("DDD", ["DDDD", 3], "DDDo", "dayOfYear");
as("dayOfYear", "DDD");
ls("dayOfYear", 4);
pe("DDD", Zc);
pe("DDDD", jS);
dt(["DDD", "DDDD"], function(s, e, t) {
  t._dayOfYear = qe(s);
});
function Jk(s) {
  var e = Math.round(
    (this.clone().startOf("day") - this.clone().startOf("year")) / 864e5
  ) + 1;
  return s == null ? e : this.add(s - e, "d");
}
_e("m", ["mm", 2], 0, "minute");
as("minute", "m");
ls("minute", 14);
pe("m", St);
pe("mm", St, Ds);
dt(["m", "mm"], Qs);
var eN = cr("Minutes", !1);
_e("s", ["ss", 2], 0, "second");
as("second", "s");
ls("second", 15);
pe("s", St);
pe("ss", St, Ds);
dt(["s", "ss"], zn);
var tN = cr("Seconds", !1);
_e("S", 0, 0, function() {
  return ~~(this.millisecond() / 100);
});
_e(0, ["SS", 2], 0, function() {
  return ~~(this.millisecond() / 10);
});
_e(0, ["SSS", 3], 0, "millisecond");
_e(0, ["SSSS", 4], 0, function() {
  return this.millisecond() * 10;
});
_e(0, ["SSSSS", 5], 0, function() {
  return this.millisecond() * 100;
});
_e(0, ["SSSSSS", 6], 0, function() {
  return this.millisecond() * 1e3;
});
_e(0, ["SSSSSSS", 7], 0, function() {
  return this.millisecond() * 1e4;
});
_e(0, ["SSSSSSSS", 8], 0, function() {
  return this.millisecond() * 1e5;
});
_e(0, ["SSSSSSSSS", 9], 0, function() {
  return this.millisecond() * 1e6;
});
as("millisecond", "ms");
ls("millisecond", 16);
pe("S", Zc, GS);
pe("SS", Zc, Ds);
pe("SSS", Zc, jS);
var di, xb;
for (di = "SSSS"; di.length <= 9; di += "S")
  pe(di, hr);
function sN(s, e) {
  e[Wi] = qe(("0." + s) * 1e3);
}
for (di = "S"; di.length <= 9; di += "S")
  dt(di, sN);
xb = cr("Milliseconds", !1);
_e("z", 0, 0, "zoneAbbr");
_e("zz", 0, 0, "zoneName");
function nN() {
  return this._isUTC ? "UTC" : "";
}
function iN() {
  return this._isUTC ? "Coordinated Universal Time" : "";
}
var re = Ia.prototype;
re.add = qH;
re.calendar = nk;
re.clone = ik;
re.diff = uk;
re.endOf = Sk;
re.format = mk;
re.from = pk;
re.fromNow = wk;
re.to = Ck;
re.toNow = vk;
re.get = rD;
re.invalidAt = Ok;
re.isAfter = ok;
re.isBefore = rk;
re.isBetween = ak;
re.isSame = lk;
re.isSameOrAfter = ck;
re.isSameOrBefore = hk;
re.isValid = _k;
re.lang = Cb;
re.locale = wb;
re.localeData = vb;
re.max = _H;
re.min = MH;
re.parsingFlags = Ik;
re.set = aD;
re.startOf = yk;
re.subtract = ZH;
re.toArray = xk;
re.toObject = Tk;
re.toDate = Ek;
re.toISOString = fk;
re.inspect = gk;
typeof Symbol < "u" && Symbol.for != null && (re[Symbol.for("nodejs.util.inspect.custom")] = function() {
  return "Moment<" + this.format() + ">";
});
re.toJSON = Mk;
re.toString = dk;
re.unix = Rk;
re.valueOf = bk;
re.creationData = Ak;
re.eraName = kk;
re.eraNarrow = Nk;
re.eraAbbr = Lk;
re.eraYear = $k;
re.year = tb;
re.isLeapYear = TD;
re.weekYear = Yk;
re.isoWeekYear = Gk;
re.quarter = re.quarters = Qk;
re.month = JS;
re.daysInMonth = RD;
re.week = re.weeks = PD;
re.isoWeek = re.isoWeeks = DD;
re.weeksInYear = Xk;
re.weeksInWeekYear = qk;
re.isoWeeksInYear = jk;
re.isoWeeksInISOWeekYear = Kk;
re.date = Eb;
re.day = re.days = GD;
re.weekday = jD;
re.isoWeekday = KD;
re.dayOfYear = Jk;
re.hour = re.hours = tH;
re.minute = re.minutes = eN;
re.second = re.seconds = tN;
re.millisecond = re.milliseconds = xb;
re.utcOffset = LH;
re.utc = FH;
re.local = VH;
re.parseZone = BH;
re.hasAlignedHourOffset = WH;
re.isDST = UH;
re.isLocal = YH;
re.isUtcOffset = GH;
re.isUtc = fb;
re.isUTC = fb;
re.zoneAbbr = nN;
re.zoneName = iN;
re.dates = zs(
  "dates accessor is deprecated. Use date instead.",
  Eb
);
re.months = zs(
  "months accessor is deprecated. Use month instead",
  JS
);
re.years = zs(
  "years accessor is deprecated. Use year instead",
  tb
);
re.zone = zs(
  "moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",
  $H
);
re.isDSTShifted = zs(
  "isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",
  zH
);
function oN(s) {
  return yt(s * 1e3);
}
function rN() {
  return yt.apply(null, arguments).parseZone();
}
function Tb(s) {
  return s;
}
var ot = Jf.prototype;
ot.calendar = GP;
ot.longDateFormat = qP;
ot.invalidDate = QP;
ot.ordinal = tD;
ot.preparse = Tb;
ot.postformat = Tb;
ot.relativeTime = nD;
ot.pastFuture = iD;
ot.set = zP;
ot.eras = Pk;
ot.erasParse = Dk;
ot.erasConvertYear = Hk;
ot.erasAbbrRegex = Vk;
ot.erasNameRegex = Fk;
ot.erasNarrowRegex = Bk;
ot.months = vD;
ot.monthsShort = yD;
ot.monthsParse = bD;
ot.monthsRegex = xD;
ot.monthsShortRegex = ED;
ot.week = _D;
ot.firstDayOfYear = AD;
ot.firstDayOfWeek = OD;
ot.weekdays = BD;
ot.weekdaysMin = UD;
ot.weekdaysShort = WD;
ot.weekdaysParse = YD;
ot.weekdaysRegex = XD;
ot.weekdaysShortRegex = qD;
ot.weekdaysMinRegex = ZD;
ot.isPM = JD;
ot.meridiem = sH;
function mc(s, e, t, n) {
  var o = Zn(), r = Tn().set(n, e);
  return o[t](r, s);
}
function Mb(s, e, t) {
  if (Kn(s) && (e = s, s = void 0), s = s || "", e != null)
    return mc(s, e, t, "month");
  var n, o = [];
  for (n = 0; n < 12; n++)
    o[n] = mc(s, n, t, "month");
  return o;
}
function mg(s, e, t, n) {
  typeof s == "boolean" ? (Kn(e) && (t = e, e = void 0), e = e || "") : (e = s, t = e, s = !1, Kn(e) && (t = e, e = void 0), e = e || "");
  var o = Zn(), r = s ? o._week.dow : 0, a, l = [];
  if (t != null)
    return mc(e, (t + r) % 7, n, "day");
  for (a = 0; a < 7; a++)
    l[a] = mc(e, (a + r) % 7, n, "day");
  return l;
}
function aN(s, e) {
  return Mb(s, e, "months");
}
function lN(s, e) {
  return Mb(s, e, "monthsShort");
}
function cN(s, e, t) {
  return mg(s, e, t, "weekdays");
}
function hN(s, e, t) {
  return mg(s, e, t, "weekdaysShort");
}
function uN(s, e, t) {
  return mg(s, e, t, "weekdaysMin");
}
gi("en", {
  eras: [
    {
      since: "0001-01-01",
      until: 1 / 0,
      offset: 1,
      name: "Anno Domini",
      narrow: "AD",
      abbr: "AD"
    },
    {
      since: "0000-12-31",
      until: -1 / 0,
      offset: 1,
      name: "Before Christ",
      narrow: "BC",
      abbr: "BC"
    }
  ],
  dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
  ordinal: function(s) {
    var e = s % 10, t = qe(s % 100 / 10) === 1 ? "th" : e === 1 ? "st" : e === 2 ? "nd" : e === 3 ? "rd" : "th";
    return s + t;
  }
});
se.lang = zs(
  "moment.lang is deprecated. Use moment.locale instead.",
  gi
);
se.langData = zs(
  "moment.langData is deprecated. Use moment.localeData instead.",
  Zn
);
var On = Math.abs;
function dN() {
  var s = this._data;
  return this._milliseconds = On(this._milliseconds), this._days = On(this._days), this._months = On(this._months), s.milliseconds = On(s.milliseconds), s.seconds = On(s.seconds), s.minutes = On(s.minutes), s.hours = On(s.hours), s.months = On(s.months), s.years = On(s.years), this;
}
function _b(s, e, t, n) {
  var o = nn(e, t);
  return s._milliseconds += n * o._milliseconds, s._days += n * o._days, s._months += n * o._months, s._bubble();
}
function fN(s, e) {
  return _b(this, s, e, 1);
}
function gN(s, e) {
  return _b(this, s, e, -1);
}
function fC(s) {
  return s < 0 ? Math.floor(s) : Math.ceil(s);
}
function mN() {
  var s = this._milliseconds, e = this._days, t = this._months, n = this._data, o, r, a, l, c;
  return s >= 0 && e >= 0 && t >= 0 || s <= 0 && e <= 0 && t <= 0 || (s += fC(ef(t) + e) * 864e5, e = 0, t = 0), n.milliseconds = s % 1e3, o = Vs(s / 1e3), n.seconds = o % 60, r = Vs(o / 60), n.minutes = r % 60, a = Vs(r / 60), n.hours = a % 24, e += Vs(a / 24), c = Vs(Ib(e)), t += c, e -= fC(ef(c)), l = Vs(t / 12), t %= 12, n.days = e, n.months = t, n.years = l, this;
}
function Ib(s) {
  return s * 4800 / 146097;
}
function ef(s) {
  return s * 146097 / 4800;
}
function pN(s) {
  if (!this.isValid())
    return NaN;
  var e, t, n = this._milliseconds;
  if (s = Ys(s), s === "month" || s === "quarter" || s === "year")
    switch (e = this._days + n / 864e5, t = this._months + Ib(e), s) {
      case "month":
        return t;
      case "quarter":
        return t / 3;
      case "year":
        return t / 12;
    }
  else
    switch (e = this._days + Math.round(ef(this._months)), s) {
      case "week":
        return e / 7 + n / 6048e5;
      case "day":
        return e + n / 864e5;
      case "hour":
        return e * 24 + n / 36e5;
      case "minute":
        return e * 1440 + n / 6e4;
      case "second":
        return e * 86400 + n / 1e3;
      case "millisecond":
        return Math.floor(e * 864e5) + n;
      default:
        throw new Error("Unknown unit " + s);
    }
}
function wN() {
  return this.isValid() ? this._milliseconds + this._days * 864e5 + this._months % 12 * 2592e6 + qe(this._months / 12) * 31536e6 : NaN;
}
function Qn(s) {
  return function() {
    return this.as(s);
  };
}
var CN = Qn("ms"), vN = Qn("s"), yN = Qn("m"), SN = Qn("h"), bN = Qn("d"), RN = Qn("w"), EN = Qn("M"), xN = Qn("Q"), TN = Qn("y");
function MN() {
  return nn(this);
}
function _N(s) {
  return s = Ys(s), this.isValid() ? this[s + "s"]() : NaN;
}
function ao(s) {
  return function() {
    return this.isValid() ? this._data[s] : NaN;
  };
}
var IN = ao("milliseconds"), ON = ao("seconds"), AN = ao("minutes"), PN = ao("hours"), DN = ao("days"), HN = ao("months"), kN = ao("years");
function NN() {
  return Vs(this.days() / 7);
}
var Vn = Math.round, Uo = {
  ss: 44,
  // a few seconds to seconds
  s: 45,
  // seconds to minute
  m: 45,
  // minutes to hour
  h: 22,
  // hours to day
  d: 26,
  // days to month/week
  w: null,
  // weeks to month
  M: 11
  // months to year
};
function LN(s, e, t, n, o) {
  return o.relativeTime(e || 1, !!t, s, n);
}
function $N(s, e, t, n) {
  var o = nn(s).abs(), r = Vn(o.as("s")), a = Vn(o.as("m")), l = Vn(o.as("h")), c = Vn(o.as("d")), h = Vn(o.as("M")), u = Vn(o.as("w")), f = Vn(o.as("y")), g = r <= t.ss && ["s", r] || r < t.s && ["ss", r] || a <= 1 && ["m"] || a < t.m && ["mm", a] || l <= 1 && ["h"] || l < t.h && ["hh", l] || c <= 1 && ["d"] || c < t.d && ["dd", c];
  return t.w != null && (g = g || u <= 1 && ["w"] || u < t.w && ["ww", u]), g = g || h <= 1 && ["M"] || h < t.M && ["MM", h] || f <= 1 && ["y"] || ["yy", f], g[2] = e, g[3] = +s > 0, g[4] = n, LN.apply(null, g);
}
function FN(s) {
  return s === void 0 ? Vn : typeof s == "function" ? (Vn = s, !0) : !1;
}
function VN(s, e) {
  return Uo[s] === void 0 ? !1 : e === void 0 ? Uo[s] : (Uo[s] = e, s === "s" && (Uo.ss = e - 1), !0);
}
function BN(s, e) {
  if (!this.isValid())
    return this.localeData().invalidDate();
  var t = !1, n = Uo, o, r;
  return typeof s == "object" && (e = s, s = !1), typeof s == "boolean" && (t = s), typeof e == "object" && (n = Object.assign({}, Uo, e), e.s != null && e.ss == null && (n.ss = e.s - 1)), o = this.localeData(), r = $N(this, !t, n, o), t && (r = o.pastFuture(+this, r)), o.postformat(r);
}
var pu = Math.abs;
function wo(s) {
  return (s > 0) - (s < 0) || +s;
}
function oh() {
  if (!this.isValid())
    return this.localeData().invalidDate();
  var s = pu(this._milliseconds) / 1e3, e = pu(this._days), t = pu(this._months), n, o, r, a, l = this.asSeconds(), c, h, u, f;
  return l ? (n = Vs(s / 60), o = Vs(n / 60), s %= 60, n %= 60, r = Vs(t / 12), t %= 12, a = s ? s.toFixed(3).replace(/\.?0+$/, "") : "", c = l < 0 ? "-" : "", h = wo(this._months) !== wo(l) ? "-" : "", u = wo(this._days) !== wo(l) ? "-" : "", f = wo(this._milliseconds) !== wo(l) ? "-" : "", c + "P" + (r ? h + r + "Y" : "") + (t ? h + t + "M" : "") + (e ? u + e + "D" : "") + (o || n || s ? "T" : "") + (o ? f + o + "H" : "") + (n ? f + n + "M" : "") + (s ? f + a + "S" : "")) : "P0D";
}
var et = nh.prototype;
et.isValid = DH;
et.abs = dN;
et.add = fN;
et.subtract = gN;
et.as = pN;
et.asMilliseconds = CN;
et.asSeconds = vN;
et.asMinutes = yN;
et.asHours = SN;
et.asDays = bN;
et.asWeeks = RN;
et.asMonths = EN;
et.asQuarters = xN;
et.asYears = TN;
et.valueOf = wN;
et._bubble = mN;
et.clone = MN;
et.get = _N;
et.milliseconds = IN;
et.seconds = ON;
et.minutes = AN;
et.hours = PN;
et.days = DN;
et.weeks = NN;
et.months = HN;
et.years = kN;
et.humanize = BN;
et.toISOString = oh;
et.toString = oh;
et.toJSON = oh;
et.locale = wb;
et.localeData = vb;
et.toIsoString = zs(
  "toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",
  oh
);
et.lang = Cb;
_e("X", 0, 0, "unix");
_e("x", 0, 0, "valueOf");
pe("x", Jc);
pe("X", cD);
dt("X", function(s, e, t) {
  t._d = new Date(parseFloat(s) * 1e3);
});
dt("x", function(s, e, t) {
  t._d = new Date(qe(s));
});
//! moment.js
se.version = "2.29.4";
WP(yt);
se.fn = re;
se.min = IH;
se.max = OH;
se.now = AH;
se.utc = Tn;
se.unix = oN;
se.months = aN;
se.isDate = _a;
se.locale = gi;
se.invalid = Kc;
se.duration = nn;
se.isMoment = sn;
se.weekdays = cN;
se.parseZone = rN;
se.localeData = Zn;
se.isDuration = Xl;
se.monthsShort = lN;
se.weekdaysMin = uN;
se.defineLocale = ag;
se.updateLocale = rH;
se.locales = aH;
se.weekdaysShort = hN;
se.normalizeUnits = Ys;
se.relativeTimeRounding = FN;
se.relativeTimeThreshold = VN;
se.calendarFormat = sk;
se.prototype = re;
se.HTML5_FMT = {
  DATETIME_LOCAL: "YYYY-MM-DDTHH:mm",
  // <input type="datetime-local" />
  DATETIME_LOCAL_SECONDS: "YYYY-MM-DDTHH:mm:ss",
  // <input type="datetime-local" step="1" />
  DATETIME_LOCAL_MS: "YYYY-MM-DDTHH:mm:ss.SSS",
  // <input type="datetime-local" step="0.001" />
  DATE: "YYYY-MM-DD",
  // <input type="date" />
  TIME: "HH:mm",
  // <input type="time" />
  TIME_SECONDS: "HH:mm:ss",
  // <input type="time" step="1" />
  TIME_MS: "HH:mm:ss.SSS",
  // <input type="time" step="0.001" />
  WEEK: "GGGG-[W]WW",
  // <input type="week" />
  MONTH: "YYYY-MM"
  // <input type="month" />
};
const WN = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: se
}, Symbol.toStringTag, { value: "Module" }));
function UN(s) {
  const e = s.length;
  let t = 0;
  for (; t < e; )
    s[t] = [s[t]], t += 1;
}
function gC(s, e) {
  const t = e.length;
  let n = 0;
  for (; n < t; )
    s.push(e[n]), n += 1;
}
function Zl(s) {
  const e = [];
  if (!s || s.length === 0 || !s[0] || s[0].length === 0)
    return e;
  const t = s.length, n = s[0].length;
  for (let o = 0; o < t; o++)
    for (let r = 0; r < n; r++)
      e[r] || (e[r] = []), e[r][o] = s[o][r];
  return e;
}
function cs(s, e, t, n) {
  let o = -1, r = s, a = t;
  Array.isArray(s) || (r = Array.from(s));
  const l = r.length;
  for (n && l && (o += 1, a = r[o]), o += 1; o < l; )
    a = e(a, r[o], o, r), o += 1;
  return a;
}
function Ws(s, e) {
  let t = 0, n = s;
  Array.isArray(s) || (n = Array.from(s));
  const o = n.length, r = [];
  let a = -1;
  for (; t < o; ) {
    const l = n[t];
    e(l, t, n) && (a += 1, r[a] = l), t += 1;
  }
  return r;
}
function Ye(s, e) {
  let t = 0, n = s;
  Array.isArray(s) || (n = Array.from(s));
  const o = n.length, r = [];
  let a = -1;
  for (; t < o; ) {
    const l = n[t];
    a += 1, r[a] = e(l, t, n), t += 1;
  }
  return r;
}
function D(s, e) {
  let t = 0, n = s;
  Array.isArray(s) || (n = Array.from(s));
  const o = n.length;
  for (; t < o && e(n[t], t, n) !== !1; )
    t += 1;
  return s;
}
function Ob(s) {
  const e = [];
  return D(s, (t) => {
    e.indexOf(t) === -1 && e.push(t);
  }), e;
}
function mC() {
  for (var s = arguments.length, e = new Array(s), t = 0; t < s; t++)
    e[t] = arguments[t];
  const [n, ...o] = [...e];
  let r = n;
  return D(o, (a) => {
    r = r.filter((l) => !a.includes(l));
  }), r;
}
function pC(s) {
  let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : " ";
  return s.split(e);
}
function ut(s) {
  for (var e = arguments.length, t = new Array(e > 1 ? e - 1 : 0), n = 1; n < e; n++)
    t[n - 1] = arguments[n];
  return cs(s, (r, a, l) => {
    const c = a.replace(/\r?\n\s*/g, ""), h = t[l] ? t[l] : "";
    return r + c + h;
  }, "").trim();
}
function Vt(s) {
  let e;
  switch (typeof s) {
    case "string":
    case "number":
      e = `${s}`;
      break;
    case "object":
      e = s === null ? "" : s.toString();
      break;
    case "undefined":
      e = "";
      break;
    default:
      e = s.toString();
      break;
  }
  return e;
}
function ue(s) {
  return typeof s < "u";
}
function wt(s) {
  return typeof s > "u";
}
function Gt(s) {
  return s === null || s === "" || wt(s);
}
function zN(s) {
  return Object.prototype.toString.call(s) === "[object RegExp]";
}
const Wr = "length", qr = (s) => parseInt(s, 16), wC = (s) => parseInt(s, 10), pc = (s, e, t) => s.substr(e, t), Zr = (s) => s.codePointAt(0) - 65, tf = (s) => `${s}`.replace(/\-/g, ""), YN = (s) => qr(pc(tf(s), qr("12"), Zr("F"))) / (qr(pc(tf(s), Zr("B"), ~~![][Wr])) || 9), GN = () => typeof location < "u" && /^([a-z0-9\-]+\.)?\x68\x61\x6E\x64\x73\x6F\x6E\x74\x61\x62\x6C\x65\x2E\x63\x6F\x6D$/i.test(location.host);
let CC = !1;
const vC = {
  invalid: () => ut`
    The license key for Handsontable is invalid.\x20
    If you need any help, contact us at support@handsontable.com.`,
  expired: (s) => {
    let {
      keyValidityDate: e,
      hotVersion: t
    } = s;
    return ut`
    The license key for Handsontable expired on ${e}, and is not valid for the installed\x20
    version ${t}. Renew your license key at handsontable.com or downgrade to a version released prior\x20
    to ${e}. If you need any help, contact us at sales@handsontable.com.`;
  },
  missing: () => ut`
    The license key for Handsontable is missing. Use your purchased key to activate the product.\x20
    Alternatively, you can activate Handsontable to use for non-commercial purposes by\x20
    passing the key: 'non-commercial-and-evaluation'. If you need any help, contact\x20
    us at support@handsontable.com.`,
  non_commercial: () => ""
}, yC = {
  invalid: () => ut`
    The license key for Handsontable is invalid.\x20
    <a href="https://handsontable.com/docs/tutorial-license-key.html" target="_blank">Read more</a> on how to\x20
    install it properly or contact us at <a href="mailto:support@handsontable.com">support@handsontable.com</a>.`,
  expired: (s) => {
    let {
      keyValidityDate: e,
      hotVersion: t
    } = s;
    return ut`
    The license key for Handsontable expired on ${e}, and is not valid for the installed\x20
    version ${t}. <a href="https://handsontable.com/pricing" target="_blank">Renew</a> your\x20
    license key or downgrade to a version released prior to ${e}. If you need any\x20
    help, contact us at <a href="mailto:sales@handsontable.com">sales@handsontable.com</a>.`;
  },
  missing: () => ut`
    The license key for Handsontable is missing. Use your purchased key to activate the product.\x20
    Alternatively, you can activate Handsontable to use for non-commercial purposes by\x20
    passing the key: 'non-commercial-and-evaluation'.\x20
    <a href="https://handsontable.com/docs/tutorial-license-key.html" target="_blank">Read more</a> about it in\x20
    the documentation or contact us at <a href="mailto:support@handsontable.com">support@handsontable.com</a>.`,
  non_commercial: () => ""
};
function jN(s, e) {
  const t = !Gt(s), n = typeof s == "string" && s.toLowerCase() === "non-commercial-and-evaluation", o = "13.1.0";
  let r, a = "invalid", l = "invalid";
  s = tf(s || "");
  const c = KN(s);
  if (t || n || c)
    if (c) {
      const h = se("31/08/2023", "DD/MM/YYYY"), u = Math.floor(h.toDate().getTime() / 864e5), f = YN(s);
      r = se((f + 1) * 864e5, "x").format("MMMM DD, YYYY"), u > f ? (a = "expired", l = "expired") : (a = "valid", l = "valid");
    } else
      n ? (a = "non_commercial", l = "valid") : (a = "invalid", l = "invalid");
  else
    a = "missing", l = "missing";
  if (GN() && (a = "valid", l = "valid"), !CC && a !== "valid" && (vC[a]({
    keyValidityDate: r,
    hotVersion: o
  }) && console[a === "non_commercial" ? "info" : "warn"](vC[a]({
    keyValidityDate: r,
    hotVersion: o
  })), CC = !0), l !== "valid" && e.parentNode && yC[l]({
    keyValidityDate: r,
    hotVersion: o
  })) {
    const u = document.createElement("div");
    u.className = "hot-display-license-info", u.innerHTML = yC[l]({
      keyValidityDate: r,
      hotVersion: o
    }), e.parentNode.insertBefore(u, e.nextSibling);
  }
}
function KN(s) {
  let e = [][Wr], t = e;
  if (s[Wr] !== Zr("Z"))
    return !1;
  for (let n = "", o = "B<H4P+".split(""), r = Zr(o.shift()); r; r = Zr(o.shift() || "A"))
    --r < ""[Wr] ? t = t | (wC(`${wC(qr(n) + (qr(pc(s, Math.abs(r), 2)) + []).padStart(2, "0"))}`) % 97 || 2) >> 1 : n = pc(s, r, r ? o[Wr] === 1 ? 9 : 8 : 6);
  return t === e;
}
function Js(s) {
  return s[0].toUpperCase() + s.substr(1);
}
function Ab() {
  function s() {
    return Math.floor((1 + Math.random()) * 65536).toString(16).substring(1);
  }
  return s() + s() + s() + s();
}
function Pb(s) {
  return /^([0-9][0-9]?%$)|(^100%$)/.test(s);
}
function Db(s) {
  let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  return `${s}`.replace(/(?:\\)?\[([^[\]]+)]/g, (t, n) => t.charAt(0) === "\\" ? t.substr(1, t.length - 1) : e[n] === void 0 ? "" : e[n]);
}
function SC(s) {
  return pg(`${s}`, {
    ALLOWED_TAGS: []
  });
}
function pg(s, e) {
  return BP.sanitize(s, e);
}
function XN(s) {
  let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, t = -1, n = null, o = s;
  for (; o !== null; ) {
    if (t === e) {
      n = o;
      break;
    }
    o.host && o.nodeType === Node.DOCUMENT_FRAGMENT_NODE ? o = o.host : (t += 1, o = o.parentNode);
  }
  return n;
}
function qN(s) {
  return Object.getPrototypeOf(s.parent) && s.frameElement;
}
function wc(s) {
  return qN(s) && s.parent;
}
function ji(s) {
  let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [], t = arguments.length > 2 ? arguments[2] : void 0;
  const {
    ELEMENT_NODE: n,
    DOCUMENT_FRAGMENT_NODE: o
  } = Node;
  let r = s;
  for (; r != null && r !== t; ) {
    const {
      nodeType: a,
      nodeName: l
    } = r;
    if (a === n && (e.includes(l) || e.includes(r)))
      return r;
    const {
      host: c
    } = r;
    c && a === o ? r = c : r = r.parentNode;
  }
  return null;
}
function il(s, e, t) {
  const n = [];
  let o = s;
  for (; o && (o = ji(o, e, t), !(!o || t && !t.contains(o))); )
    n.push(o), o.host && o.nodeType === Node.DOCUMENT_FRAGMENT_NODE ? o = o.host : o = o.parentNode;
  const r = n.length;
  return r ? n[r - 1] : null;
}
function Ki(s, e) {
  let t = s.parentNode, n = [];
  for (typeof e == "string" ? s.defaultView ? n = Array.prototype.slice.call(s.querySelectorAll(e), 0) : n = Array.prototype.slice.call(s.ownerDocument.querySelectorAll(e), 0) : n.push(e); t !== null; ) {
    if (n.indexOf(t) > -1)
      return !0;
    t = t.parentNode;
  }
  return !1;
}
function ZN(s) {
  let e = 0, t = s;
  if (t.previousSibling)
    for (; t = t.previousSibling; )
      e += 1;
  return e;
}
function _i(s, e, t) {
  const n = t.parentElement.querySelector(`.ht_clone_${s}`);
  return n ? n.contains(e) : null;
}
function Hb(s) {
  return !s || !s.length ? [] : s.filter((e) => !!e);
}
function Ne(s, e) {
  return s.classList === void 0 || typeof e != "string" || e === "" ? !1 : s.classList.contains(e);
}
function ie(s, e) {
  typeof e == "string" && (e = e.split(" ")), e = Hb(e), e.length > 0 && s.classList.add(...e);
}
function $e(s, e) {
  typeof e == "string" && (e = e.split(" ")), e = Hb(e), e.length > 0 && s.classList.remove(...e);
}
function kb(s) {
  if (s.nodeType === 3)
    s.parentNode.removeChild(s);
  else if (["TABLE", "THEAD", "TBODY", "TFOOT", "TR"].indexOf(s.nodeName) > -1) {
    const e = s.childNodes;
    for (let t = e.length - 1; t >= 0; t--)
      kb(e[t]);
  }
}
function bn(s) {
  let e;
  for (; e = s.lastChild; )
    s.removeChild(e);
}
const QN = /(<(.*)>|&(.*);)/;
function ur(s, e) {
  let t = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !0;
  QN.test(e) ? s.innerHTML = t ? pg(e) : e : Zi(s, e);
}
function Zi(s, e) {
  const t = s.firstChild;
  t && t.nodeType === 3 && t.nextSibling === null ? t.textContent = e : (bn(s), s.appendChild(s.ownerDocument.createTextNode(e)));
}
function da(s) {
  const e = s.ownerDocument.documentElement;
  let t = s;
  for (; t !== e; ) {
    if (t === null)
      return !1;
    if (t.nodeType === Node.DOCUMENT_FRAGMENT_NODE)
      if (t.host) {
        if (t.host.impl)
          return da(t.host.impl);
        if (t.host)
          return da(t.host);
        throw new Error("Lost in Web Components world");
      } else
        return !1;
    else if (t.style && t.style.display === "none")
      return !1;
    t = t.parentNode;
  }
  return !0;
}
function Wt(s) {
  const e = s.ownerDocument, t = e.defaultView, n = e.documentElement;
  let o = s, r, a, l;
  for (r = o.offsetLeft, a = o.offsetTop, l = o; (o = o.offsetParent) && o !== e.body; )
    r += o.offsetLeft, a += o.offsetTop, l = o;
  return l && l.style.position === "fixed" && (r += t.pageXOffset || n.scrollLeft, a += t.pageYOffset || n.scrollTop), {
    left: r,
    top: a
  };
}
function fa() {
  return (arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : window).scrollY;
}
function tr() {
  return (arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : window).scrollX;
}
function Cc(s) {
  let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : window;
  return s === e ? fa(e) : s.scrollTop;
}
function sf(s) {
  let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : window;
  return s === e ? tr(e) : s.scrollLeft;
}
function vc(s) {
  let e = s.ownerDocument, t = e ? e.defaultView : void 0;
  e || (e = s.document ? s.document : s, t = e.defaultView);
  const n = ["auto", "scroll"];
  let o = s.parentNode;
  for (; o && o.style && e.body !== o; ) {
    let {
      overflow: r,
      overflowX: a,
      overflowY: l
    } = o.style;
    if ([r, a, l].includes("scroll"))
      return o;
    if ({
      overflow: r,
      overflowX: a,
      overflowY: l
    } = t.getComputedStyle(o), n.includes(r) || n.includes(a) || n.includes(l) || o.clientHeight <= o.scrollHeight + 1 && (n.includes(l) || n.includes(r)) || o.clientWidth <= o.scrollWidth + 1 && (n.includes(a) || n.includes(r)))
      return o;
    o = o.parentNode;
  }
  return t;
}
function sr(s) {
  const e = s.ownerDocument, t = e.defaultView;
  let n = s.parentNode;
  for (; n && n.style && e.body !== n; ) {
    if (n.style.overflow !== "visible" && n.style.overflow !== "")
      return n;
    const o = Qi(n, t), r = ["scroll", "hidden", "auto"], a = o.getPropertyValue("overflow"), l = o.getPropertyValue("overflow-y"), c = o.getPropertyValue("overflow-x");
    if (r.includes(a) || r.includes(l) || r.includes(c))
      return n;
    n = n.parentNode;
  }
  return t;
}
function ga(s, e) {
  let t = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : window;
  if (s) {
    if (s === t)
      return e === "width" ? `${t.innerWidth}px` : e === "height" ? `${t.innerHeight}px` : void 0;
  } else
    return;
  const n = s.style[e];
  if (n !== "" && n !== void 0)
    return n;
  const o = Qi(s, t);
  if (o[e] !== "" && o[e] !== void 0)
    return o[e];
}
function Qi(s) {
  let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : window;
  return s.currentStyle || e.getComputedStyle(s);
}
function ht(s) {
  return s.offsetWidth;
}
function At(s) {
  return s.offsetHeight;
}
function fi(s) {
  return s.clientHeight || s.innerHeight;
}
function Ql(s) {
  return s.clientWidth || s.innerWidth;
}
function Nb(s) {
  return s.selectionStart ? s.selectionStart : 0;
}
function JN(s) {
  return s.selectionEnd ? s.selectionEnd : 0;
}
function eL() {
  let s = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : window;
  const e = s.document;
  let t = "";
  return s.getSelection ? t = s.getSelection().toString() : e.selection && e.selection.type !== "Control" && (t = e.selection.createRange().text), t;
}
function bC() {
  let s = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : window;
  s.getSelection && (s.getSelection().empty ? s.getSelection().empty() : s.getSelection().removeAllRanges && s.getSelection().removeAllRanges());
}
function rh(s, e, t) {
  if (t === void 0 && (t = e), s.setSelectionRange) {
    s.focus();
    try {
      s.setSelectionRange(e, t);
    } catch {
      const o = s.parentNode, r = o.style.display;
      o.style.display = "block", s.setSelectionRange(e, t), o.style.display = r;
    }
  }
}
let wu;
function tL() {
  let s = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : document;
  const e = s.createElement("div");
  e.style.height = "200px", e.style.width = "100%";
  const t = s.createElement("div");
  t.style.boxSizing = "content-box", t.style.height = "150px", t.style.left = "0px", t.style.overflow = "hidden", t.style.position = "absolute", t.style.top = "0px", t.style.width = "200px", t.style.visibility = "hidden", t.appendChild(e), (s.body || s.documentElement).appendChild(t);
  const n = e.offsetWidth;
  t.style.overflow = "scroll";
  let o = e.offsetWidth;
  return n === o && (o = t.clientWidth), (s.body || s.documentElement).removeChild(t), n - o;
}
function qt() {
  let s = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : document;
  return wu === void 0 && (wu = tL(s)), wu;
}
function sL(s) {
  return s.offsetWidth !== s.clientWidth;
}
function nL(s) {
  return s.offsetHeight !== s.clientHeight;
}
function wg(s, e, t) {
  s.style.transform = `translate3d(${e},${t},0)`;
}
function ah(s) {
  s.style.transform && s.style.transform !== "" && (s.style.transform = "");
}
function yc(s) {
  return s && (["INPUT", "SELECT", "TEXTAREA"].indexOf(s.nodeName) > -1 || s.contentEditable === "true");
}
function Cg(s) {
  return yc(s) && s.hasAttribute("data-hot-input") === !1;
}
function iL(s) {
  const e = s.ownerDocument.activeElement;
  Cg(e) || s.select();
}
function Lb(s) {
  return !s.parentNode;
}
function oL(s, e) {
  new IntersectionObserver((n, o) => {
    n.forEach((r) => {
      r.isIntersecting && s.offsetParent !== null && (e(), o.unobserve(s));
    });
  }, {
    root: s.ownerDocument.body
  }).observe(s);
}
function mt(s) {
  return typeof s == "function";
}
function $b(s) {
  let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 200, t = null, n;
  function o() {
    for (var r = arguments.length, a = new Array(r), l = 0; l < r; l++)
      a[l] = arguments[l];
    return t && clearTimeout(t), t = setTimeout(() => {
      n = s.apply(this, a);
    }, e), n;
  }
  return o;
}
function Fb(s) {
  for (var e = arguments.length, t = new Array(e > 1 ? e - 1 : 0), n = 1; n < e; n++)
    t[n - 1] = arguments[n];
  return function() {
    for (var r = arguments.length, a = new Array(r), l = 0; l < r; l++)
      a[l] = arguments[l];
    return s.apply(this, t.concat(a));
  };
}
function rL(s) {
  const e = s.length;
  function t(n) {
    return function() {
      for (var r = arguments.length, a = new Array(r), l = 0; l < r; l++)
        a[l] = arguments[l];
      const c = n.concat(a);
      let h;
      return c.length >= e ? h = s.apply(this, c) : h = t(c), h;
    };
  }
  return t([]);
}
function nf(s, e, t, n, o, r, a, l) {
  return ue(l) ? s.call(e, t, n, o, r, a, l) : ue(a) ? s.call(e, t, n, o, r, a) : ue(r) ? s.call(e, t, n, o, r) : ue(o) ? s.call(e, t, n, o) : ue(n) ? s.call(e, t, n) : ue(t) ? s.call(e, t) : s.call(e);
}
var aL = ps, RC = yS, lL = Jt, EC = lr, cL = TS, xC = aL([].push), hL = function(s) {
  if (lL(s))
    return s;
  if (RC(s)) {
    for (var e = s.length, t = [], n = 0; n < e; n++) {
      var o = s[n];
      typeof o == "string" ? xC(t, o) : (typeof o == "number" || EC(o) === "Number" || EC(o) === "String") && xC(t, cL(o));
    }
    var r = t.length, a = !0;
    return function(l, c) {
      if (a)
        return a = !1, c;
      if (RC(this))
        return c;
      for (var h = 0; h < r; h++)
        if (t[h] === l)
          return c;
    };
  }
}, uL = oo, Vb = Ea, Bb = jc, dL = Wc, Pa = ps, Wb = Us, TC = Jt, MC = Lf, Ub = Kf, fL = hL, gL = Nf, mL = String, mi = Vb("JSON", "stringify"), ol = Pa(/./.exec), _C = Pa("".charAt), pL = Pa("".charCodeAt), wL = Pa("".replace), CL = Pa(1 .toString), vL = /[\uD800-\uDFFF]/g, IC = /^[\uD800-\uDBFF]$/, OC = /^[\uDC00-\uDFFF]$/, AC = !gL || Wb(function() {
  var s = Vb("Symbol")("stringify detection");
  return mi([s]) !== "[null]" || mi({ a: s }) !== "{}" || mi(Object(s)) !== "{}";
}), PC = Wb(function() {
  return mi("\uDF06\uD834") !== '"\\udf06\\ud834"' || mi("\uDEAD") !== '"\\udead"';
}), yL = function(s, e) {
  var t = Ub(arguments), n = fL(e);
  if (!(!TC(n) && (s === void 0 || MC(s))))
    return t[1] = function(o, r) {
      if (TC(n) && (r = dL(n, this, mL(o), r)), !MC(r))
        return r;
    }, Bb(mi, null, t);
}, SL = function(s, e, t) {
  var n = _C(t, e - 1), o = _C(t, e + 1);
  return ol(IC, s) && !ol(OC, o) || ol(OC, s) && !ol(IC, n) ? "\\u" + CL(pL(s, 0), 16) : s;
};
mi && uL({ target: "JSON", stat: !0, arity: 3, forced: AC || PC }, {
  // eslint-disable-next-line no-unused-vars -- required for `.length`
  stringify: function(e, t, n) {
    var o = Ub(arguments), r = Bb(AC ? yL : mi, null, o);
    return PC && typeof r == "string" ? wL(r, vL, SL) : r;
  }
});
function ma(s) {
  let e;
  return Array.isArray(s) ? e = s.length ? new Array(s.length).fill(null) : [] : (e = {}, je(s, (t, n) => {
    n !== "__children" && (t && typeof t == "object" && !Array.isArray(t) ? e[n] = ma(t) : Array.isArray(t) ? t.length && typeof t[0] == "object" && !Array.isArray(t[0]) ? e[n] = [ma(t[0])] : e[n] = [] : e[n] = null);
  })), e;
}
function Si(s, e) {
  return e.prototype.constructor = e, s.prototype = new e(), s.prototype.constructor = s, s;
}
function Ut(s, e, t) {
  const n = Array.isArray(t);
  return je(e, (o, r) => {
    (n === !1 || t.includes(r)) && (s[r] = o);
  }), s;
}
function lh(s, e) {
  je(e, (t, n) => {
    e[n] && typeof e[n] == "object" ? (s[n] || (Array.isArray(e[n]) ? s[n] = [] : Object.prototype.toString.call(e[n]) === "[object Date]" ? s[n] = e[n] : s[n] = {}), lh(s[n], e[n])) : s[n] = e[n];
  });
}
function ms(s) {
  return typeof s == "object" ? JSON.parse(JSON.stringify(s)) : s;
}
function Ss(s) {
  const e = {};
  return je(s, (t, n) => {
    e[n] = t;
  }), e;
}
function ft(s) {
  s.MIXINS || (s.MIXINS = []);
  for (var e = arguments.length, t = new Array(e > 1 ? e - 1 : 0), n = 1; n < e; n++)
    t[n - 1] = arguments[n];
  return D(t, (o) => {
    s.MIXINS.push(o.MIXIN_NAME), je(o, (r, a) => {
      if (s.prototype[a] !== void 0)
        throw new Error(`Mixin conflict. Property '${a}' already exist and cannot be overwritten.`);
      if (typeof r == "function")
        s.prototype[a] = r;
      else {
        const l = function(u, f) {
          const g = `_${u}`, m = (w) => {
            let C = w;
            return (Array.isArray(C) || Ge(C)) && (C = ms(C)), C;
          };
          return function() {
            return this[g] === void 0 && (this[g] = m(f)), this[g];
          };
        }, c = function(u) {
          const f = `_${u}`;
          return function(g) {
            this[f] = g;
          };
        };
        Object.defineProperty(s.prototype, a, {
          get: l(a, r),
          set: c(a),
          configurable: !0
        });
      }
    });
  }), s;
}
function vg(s, e) {
  return JSON.stringify(s) === JSON.stringify(e);
}
function Ge(s) {
  return Object.prototype.toString.call(s) === "[object Object]";
}
function Jn(s, e, t, n) {
  n.value = t, n.writable = n.writable !== !1, n.enumerable = n.enumerable !== !1, n.configurable = n.configurable !== !1, Object.defineProperty(s, e, n);
}
function je(s, e) {
  for (const t in s)
    if ((!s.hasOwnProperty || s.hasOwnProperty && Object.prototype.hasOwnProperty.call(s, t)) && e(s[t], t, s) === !1)
      break;
  return s;
}
function bL(s, e) {
  const t = e.split(".");
  let n = s;
  return je(t, (o) => {
    if (n = n[o], n === void 0)
      return n = void 0, !1;
  }), n;
}
function Cu(s, e, t) {
  const n = e.split(".");
  let o = s;
  n.forEach((r, a) => {
    a !== n.length - 1 ? (Lt(o, r) || (o[r] = {}), o = o[r]) : o[r] = t;
  });
}
function yg(s) {
  if (!Ge(s))
    return 0;
  const e = function(t) {
    let n = 0;
    return Ge(t) ? je(t, (o, r) => {
      r !== "__children" && (n += e(o));
    }) : n += 1, n;
  };
  return e(s);
}
function nr(s) {
  let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "value";
  const t = `_${e}`, n = {
    _touched: !1,
    [t]: s,
    isTouched() {
      return this._touched;
    }
  };
  return Object.defineProperty(n, e, {
    get() {
      return this[t];
    },
    set(o) {
      this._touched = !0, this[t] = o;
    },
    enumerable: !0,
    configurable: !0
  }), n;
}
function Lt(s, e) {
  return Object.prototype.hasOwnProperty.call(s, e);
}
const $s = (s) => {
  const e = {
    value: !1
  };
  return e.test = (t, n) => {
    e.value = s(t, n);
  }, e;
}, lo = {
  chrome: $s((s, e) => /Chrome/.test(s) && /Google/.test(e)),
  chromeWebKit: $s((s) => /CriOS/.test(s)),
  edge: $s((s) => /Edge/.test(s)),
  edgeWebKit: $s((s) => /EdgiOS/.test(s)),
  firefox: $s((s) => /Firefox/.test(s)),
  firefoxWebKit: $s((s) => /FxiOS/.test(s)),
  mobile: $s((s) => /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(s)),
  safari: $s((s, e) => /Safari/.test(s) && /Apple Computer/.test(e))
}, Da = {
  mac: $s((s) => /^Mac/.test(s)),
  win: $s((s) => /^Win/.test(s)),
  linux: $s((s) => /^Linux/.test(s)),
  ios: $s((s) => /iPhone|iPad|iPod/i.test(s))
};
function RL() {
  let {
    userAgent: s = navigator.userAgent,
    vendor: e = navigator.vendor
  } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  je(lo, (t) => {
    let {
      test: n
    } = t;
    return void n(s, e);
  });
}
function EL() {
  let {
    platform: s = navigator.platform
  } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  je(Da, (e) => {
    let {
      test: t
    } = e;
    return void t(s);
  });
}
RL();
EL();
function zb() {
  return lo.chrome.value;
}
function xL() {
  return lo.chromeWebKit.value;
}
function vu() {
  return lo.firefox.value;
}
function TL() {
  return lo.firefoxWebKit.value;
}
function ML() {
  return lo.edge.value;
}
function vn() {
  return lo.mobile.value;
}
function Yb() {
  return Da.ios.value;
}
function Gb() {
  let {
    maxTouchPoints: s
  } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : navigator;
  return s > 2 && Da.mac.value;
}
function DC() {
  return Da.win.value;
}
function HC() {
  return Da.mac.value;
}
const ve = {
  ALT: 18,
  ARROW_DOWN: 40,
  ARROW_LEFT: 37,
  ARROW_RIGHT: 39,
  ARROW_UP: 38,
  AUDIO_DOWN: vu() ? 182 : 174,
  AUDIO_MUTE: vu() ? 181 : 173,
  AUDIO_UP: vu() ? 183 : 175,
  BACKSPACE: 8,
  CAPS_LOCK: 20,
  COMMA: 188,
  COMMAND_LEFT: 91,
  COMMAND_RIGHT: 93,
  COMMAND_FIREFOX: 224,
  CONTROL: 17,
  DELETE: 46,
  END: 35,
  ENTER: 13,
  ESCAPE: 27,
  F1: 112,
  F2: 113,
  F3: 114,
  F4: 115,
  F5: 116,
  F6: 117,
  F7: 118,
  F8: 119,
  F9: 120,
  F10: 121,
  F11: 122,
  F12: 123,
  F13: 124,
  F14: 125,
  F15: 126,
  F16: 127,
  F17: 128,
  F18: 129,
  F19: 130,
  HOME: 36,
  INSERT: 45,
  MEDIA_NEXT: 176,
  MEDIA_PLAY_PAUSE: 179,
  MEDIA_PREV: 177,
  MEDIA_STOP: 178,
  NULL: 0,
  NUM_LOCK: 144,
  PAGE_DOWN: 34,
  PAGE_UP: 33,
  PAUSE: 19,
  PERIOD: 190,
  SCROLL_LOCK: 145,
  SHIFT: 16,
  SPACE: 32,
  TAB: 9,
  A: 65,
  C: 67,
  D: 68,
  F: 70,
  L: 76,
  O: 79,
  P: 80,
  S: 83,
  V: 86,
  X: 88,
  Y: 89,
  Z: 90
}, _L = [ve.ALT, ve.ARROW_DOWN, ve.ARROW_LEFT, ve.ARROW_RIGHT, ve.ARROW_UP, ve.AUDIO_DOWN, ve.AUDIO_MUTE, ve.AUDIO_UP, ve.BACKSPACE, ve.CAPS_LOCK, ve.DELETE, ve.END, ve.ENTER, ve.ESCAPE, ve.F1, ve.F2, ve.F3, ve.F4, ve.F5, ve.F6, ve.F7, ve.F8, ve.F9, ve.F10, ve.F11, ve.F12, ve.F13, ve.F14, ve.F15, ve.F16, ve.F17, ve.F18, ve.F19, ve.HOME, ve.INSERT, ve.MEDIA_NEXT, ve.MEDIA_PLAY_PAUSE, ve.MEDIA_PREV, ve.MEDIA_STOP, ve.NULL, ve.NUM_LOCK, ve.PAGE_DOWN, ve.PAGE_UP, ve.PAUSE, ve.SCROLL_LOCK, ve.SHIFT, ve.TAB];
function IL(s) {
  return s === 32 || // space
  s >= 48 && s <= 57 || // 0-9
  s >= 96 && s <= 111 || // numpad
  s >= 186 && s <= 192 || // ;=,-./`
  s >= 219 && s <= 222 || // []{}\|"'
  s >= 226 || // special chars (229 for Asian chars)
  s >= 65 && s <= 90;
}
function jb(s) {
  return _L.includes(s);
}
function OL(s) {
  return [ve.CONTROL, ve.COMMAND_LEFT, ve.COMMAND_RIGHT, ve.COMMAND_FIREFOX].includes(s);
}
function pa(s, e) {
  const t = e.split("|");
  let n = !1;
  return D(t, (o) => {
    if (s === ve[o])
      return n = !0, !1;
  }), n;
}
function Rn(s) {
  s.isImmediatePropagationEnabled = !1, s.cancelBubble = !0;
}
function Vo(s) {
  return s.isImmediatePropagationEnabled === !1;
}
function Ji(s) {
  return s.button === 2;
}
function Sg(s) {
  return s.button === 0;
}
function pt() {
  ue(console) && console.warn(...arguments);
}
function bg() {
  ue(console) && console.error(...arguments);
}
const Co = [
  /* eslint-disable jsdoc/require-description-complete-sentence */
  /**
   * Fired after resetting a cell's meta. This happens when the {@link Core#updateSettings} method is called.
   *
   * @event Hooks#afterCellMetaReset
   */
  "afterCellMetaReset",
  /**
   * Fired after one or more cells has been changed. The changes are triggered in any situation when the
   * value is entered using an editor or changed using API (e.q setDataAtCell).
   *
   * __Note:__ For performance reasons, the `changes` array is null for `"loadData"` source.
   *
   * @event Hooks#afterChange
   * @param {Array[]} changes 2D array containing information about each of the edited cells `[[row, prop, oldVal, newVal], ...]`. `row` is a visual row index.
   * @param {string} [source] String that identifies source of hook call ([list of all available sources](@/guides/getting-started/events-and-hooks.md#definition-for-source-argument)).
   * @example
   * ::: only-for javascript
   * ```js
   * new Handsontable(element, {
   *   afterChange: (changes) => {
   *     changes?.forEach(([row, prop, oldValue, newValue]) => {
   *       // Some logic...
   *     });
   *   }
   * })
   * ```
   * :::
   *
   * ::: only-for react
   * ```jsx
   * <HotTable
   *   afterChange={(changes, source) => {
   *     changes?.forEach(([row, prop, oldValue, newValue]) => {
   *       // Some logic...
   *     });
   *   }}
   * />
   * ```
   * :::
   */
  "afterChange",
  /**
   * Fired each time user opens {@link ContextMenu} and after setting up the Context Menu's default options. These options are a collection
   * which user can select by setting an array of keys or an array of objects in {@link Options#contextMenu} option.
   *
   * @event Hooks#afterContextMenuDefaultOptions
   * @param {Array} predefinedItems An array of objects containing information about the pre-defined Context Menu items.
   */
  "afterContextMenuDefaultOptions",
  /**
   * Fired each time user opens {@link ContextMenu} plugin before setting up the Context Menu's items but after filtering these options by
   * user (`contextMenu` option). This hook can by helpful to determine if user use specified menu item or to set up
   * one of the menu item to by always visible.
   *
   * @event Hooks#beforeContextMenuSetItems
   * @param {object[]} menuItems An array of objects containing information about to generated Context Menu items.
   */
  "beforeContextMenuSetItems",
  /**
   * Fired by {@link DropdownMenu} plugin after setting up the Dropdown Menu's default options. These options are a
   * collection which user can select by setting an array of keys or an array of objects in {@link Options#dropdownMenu}
   * option.
   *
   * @event Hooks#afterDropdownMenuDefaultOptions
   * @param {object[]} predefinedItems An array of objects containing information about the pre-defined Context Menu items.
   */
  "afterDropdownMenuDefaultOptions",
  /**
   * Fired by {@link DropdownMenu} plugin before setting up the Dropdown Menu's items but after filtering these options
   * by user (`dropdownMenu` option). This hook can by helpful to determine if user use specified menu item or to set
   * up one of the menu item to by always visible.
   *
   * @event Hooks#beforeDropdownMenuSetItems
   * @param {object[]} menuItems An array of objects containing information about to generated Dropdown Menu items.
   */
  "beforeDropdownMenuSetItems",
  /**
   * Fired by {@link ContextMenu} plugin after hiding the Context Menu. This hook is fired when {@link Options#contextMenu}
   * option is enabled.
   *
   * @event Hooks#afterContextMenuHide
   * @param {object} context The Context Menu plugin instance.
   */
  "afterContextMenuHide",
  /**
   * Fired by {@link ContextMenu} plugin before opening the Context Menu. This hook is fired when {@link Options#contextMenu}
   * option is enabled.
   *
   * @event Hooks#beforeContextMenuShow
   * @param {object} context The Context Menu instance.
   */
  "beforeContextMenuShow",
  /**
   * Fired by {@link ContextMenu} plugin after opening the Context Menu. This hook is fired when {@link Options#contextMenu}
   * option is enabled.
   *
   * @event Hooks#afterContextMenuShow
   * @param {object} context The Context Menu plugin instance.
   */
  "afterContextMenuShow",
  /**
   * Fired by {@link CopyPaste} plugin after reaching the copy limit while copying data. This hook is fired when
   * {@link Options#copyPaste} option is enabled.
   *
   * @event Hooks#afterCopyLimit
   * @param {number} selectedRows Count of selected copyable rows.
   * @param {number} selectedColumns Count of selected copyable columns.
   * @param {number} copyRowsLimit Current copy rows limit.
   * @param {number} copyColumnsLimit Current copy columns limit.
   */
  "afterCopyLimit",
  /**
   * Fired before created a new column.
   *
   * @event Hooks#beforeCreateCol
   * @param {number} index Represents the visual index of first newly created column in the data source array.
   * @param {number} amount Number of newly created columns in the data source array.
   * @param {string} [source] String that identifies source of hook call
   *                          ([list of all available sources](@/guides/getting-started/events-and-hooks.md#definition-for-source-argument)).
   * @returns {*} If `false` then creating columns is cancelled.
   * @example
   * ::: only-for javascript
   * ```js
   * // Return `false` to cancel column inserting.
   * new Handsontable(element, {
   *   beforeCreateCol: function(data, coords) {
   *     return false;
   *   }
   * });
   * ```
   * :::
   *
   * ::: only-for react
   * ```jsx
   * // Return `false` to cancel column inserting.
   * <HotTable
   *   beforeCreateCol={(data, coords) => {
   *     return false;
   *   }}
   * />
   * ```
   * :::
   */
  "beforeCreateCol",
  /**
   * Fired after the order of columns has changed.
   * This hook is fired by changing column indexes of any type supported by the {@link IndexMapper}.
   *
   * @event Hooks#afterColumnSequenceChange
   * @param {'init'|'remove'|'insert'|'move'|'update'} [source] A string that indicates what caused the change to the order of columns.
   */
  "afterColumnSequenceChange",
  /**
   * Fired after created a new column.
   *
   * @event Hooks#afterCreateCol
   * @param {number} index Represents the visual index of first newly created column in the data source.
   * @param {number} amount Number of newly created columns in the data source.
   * @param {string} [source] String that identifies source of hook call
   *                          ([list of all available sources](@/guides/getting-started/events-and-hooks.md#definition-for-source-argument)).
   */
  "afterCreateCol",
  /**
   * Fired before created a new row.
   *
   * @event Hooks#beforeCreateRow
   * @param {number} index Represents the visual index of first newly created row in the data source array.
   * @param {number} amount Number of newly created rows in the data source array.
   * @param {string} [source] String that identifies source of hook call
   *                          ([list of all available sources](@/guides/getting-started/events-and-hooks.md#definition-for-source-argument)).
   * @returns {*|boolean} If false is returned the action is canceled.
   */
  "beforeCreateRow",
  /**
   * Fired after created a new row.
   *
   * @event Hooks#afterCreateRow
   * @param {number} index Represents the visual index of first newly created row in the data source array.
   * @param {number} amount Number of newly created rows in the data source array.
   * @param {string} [source] String that identifies source of hook call
   *                          ([list of all available sources](@/guides/getting-started/events-and-hooks.md#definition-for-source-argument)).
   */
  "afterCreateRow",
  /**
   * Fired after all selected cells are deselected.
   *
   * @event Hooks#afterDeselect
   */
  "afterDeselect",
  /**
   * Fired after destroying the Handsontable instance.
   *
   * @event Hooks#afterDestroy
   */
  "afterDestroy",
  /**
   * Hook fired after keydown event is handled.
   *
   * @event Hooks#afterDocumentKeyDown
   * @param {Event} event A native `keydown` event object.
   */
  "afterDocumentKeyDown",
  /**
   * Fired inside the Walkontable's selection `draw` method. Can be used to add additional class names to cells, depending on the current selection.
   *
   * @event Hooks#afterDrawSelection
   * @param {number} currentRow Row index of the currently processed cell.
   * @param {number} currentColumn Column index of the currently cell.
   * @param {number[]} cornersOfSelection Array of the current selection in a form of `[startRow, startColumn, endRow, endColumn]`.
   * @param {number|undefined} layerLevel Number indicating which layer of selection is currently processed.
   * @since 0.38.1
   * @returns {string|undefined} Can return a `String`, which will act as an additional `className` to be added to the currently processed cell.
   */
  "afterDrawSelection",
  /**
   * Fired inside the Walkontable's `refreshSelections` method. Can be used to remove additional class names from all cells in the table.
   *
   * @event Hooks#beforeRemoveCellClassNames
   * @since 0.38.1
   * @returns {string[]|undefined} Can return an `Array` of `String`s. Each of these strings will act like class names to be removed from all the cells in the table.
   */
  "beforeRemoveCellClassNames",
  /**
   * Fired after getting the cell settings.
   *
   * @event Hooks#afterGetCellMeta
   * @param {number} row Visual row index.
   * @param {number} column Visual column index.
   * @param {object} cellProperties Object containing the cell properties.
   */
  "afterGetCellMeta",
  /**
   * Fired after retrieving information about a column header and appending it to the table header.
   *
   * @event Hooks#afterGetColHeader
   * @param {number} column Visual column index.
   * @param {HTMLTableCellElement} TH Header's TH element.
   * @param {number} [headerLevel=0] (Since 12.2.0) Header level index. Accepts positive (0 to n)
   *                                 and negative (-1 to -n) values. For positive values, 0 points to the
   *                                 topmost header. For negative values, -1 points to the bottom-most
   *                                 header (the header closest to the cells).
   */
  "afterGetColHeader",
  /**
   * Fired after retrieving information about a row header and appending it to the table header.
   *
   * @event Hooks#afterGetRowHeader
   * @param {number} row Visual row index.
   * @param {HTMLTableCellElement} TH Header's TH element.
   */
  "afterGetRowHeader",
  /**
   * Fired after the Handsontable instance is initiated.
   *
   * @event Hooks#afterInit
   */
  "afterInit",
  /**
   * Fired after Handsontable's [`data`](@/api/options.md#data)
   * gets modified by the [`loadData()`](@/api/core.md#loaddata) method
   * or the [`updateSettings()`](@/api/core.md#updatesettings) method.
   *
   * Read more:
   * - [Binding to data](@/guides/getting-started/binding-to-data.md)
   * - [Saving data](@/guides/getting-started/saving-data.md)
   *
   * @event Hooks#afterLoadData
   * @param {Array} sourceData An [array of arrays](@/guides/getting-started/binding-to-data.md#array-of-arrays), or an [array of objects](@/guides/getting-started/binding-to-data.md#array-of-objects), that contains Handsontable's data
   * @param {boolean} initialLoad A flag that indicates whether the data was loaded at Handsontable's initialization (`true`) or later (`false`)
   * @param {string} source The source of the call
   */
  "afterLoadData",
  /**
   * Fired after the [`updateData()`](@/api/core.md#updatedata) method
   * modifies Handsontable's [`data`](@/api/options.md#data).
   *
   * Read more:
   * - [Binding to data](@/guides/getting-started/binding-to-data.md)
   * - [Saving data](@/guides/getting-started/saving-data.md)
   *
   * @event Hooks#afterUpdateData
   * @since 11.1.0
   * @param {Array} sourceData An [array of arrays](@/guides/getting-started/binding-to-data.md#array-of-arrays), or an [array of objects](@/guides/getting-started/binding-to-data.md#array-of-objects), that contains Handsontable's data
   * @param {boolean} initialLoad A flag that indicates whether the data was loaded at Handsontable's initialization (`true`) or later (`false`)
   * @param {string} source The source of the call
   */
  "afterUpdateData",
  /**
   * Fired after a scroll event, which is identified as a momentum scroll (e.g. On an iPad).
   *
   * @event Hooks#afterMomentumScroll
   */
  "afterMomentumScroll",
  /**
   * Fired after a `mousedown` event is triggered on the cell corner (the drag handle).
   *
   * @event Hooks#afterOnCellCornerMouseDown
   * @param {Event} event `mousedown` event object.
   */
  "afterOnCellCornerMouseDown",
  /**
   * Fired after a `dblclick` event is triggered on the cell corner (the drag handle).
   *
   * @event Hooks#afterOnCellCornerDblClick
   * @param {Event} event `dblclick` event object.
   */
  "afterOnCellCornerDblClick",
  /**
   * Fired after clicking on a cell or row/column header. In case the row/column header was clicked, the coordinate
   * indexes are negative.
   *
   * For example clicking on the row header of cell (0, 0) results with `afterOnCellMouseDown` called
   * with coordinates `{row: 0, col: -1}`.
   *
   * @event Hooks#afterOnCellMouseDown
   * @param {Event} event `mousedown` event object.
   * @param {CellCoords} coords Coordinates object containing the visual row and visual column indexes of the clicked cell.
   * @param {HTMLTableCellElement} TD Cell's TD (or TH) element.
   */
  "afterOnCellMouseDown",
  /**
   * Fired after clicking on a cell or row/column header. In case the row/column header was clicked, the coordinate
   * indexes are negative.
   *
   * For example clicking on the row header of cell (0, 0) results with `afterOnCellMouseUp` called
   * with coordinates `{row: 0, col: -1}`.
   *
   * @event Hooks#afterOnCellMouseUp
   * @param {Event} event `mouseup` event object.
   * @param {CellCoords} coords Coordinates object containing the visual row and visual column indexes of the clicked cell.
   * @param {HTMLTableCellElement} TD Cell's TD (or TH) element.
   */
  "afterOnCellMouseUp",
  /**
   * Fired after clicking right mouse button on a cell or row/column header.
   *
   * For example clicking on the row header of cell (0, 0) results with `afterOnCellContextMenu` called
   * with coordinates `{row: 0, col: -1}`.
   *
   * @event Hooks#afterOnCellContextMenu
   * @since 4.1.0
   * @param {Event} event `contextmenu` event object.
   * @param {CellCoords} coords Coordinates object containing the visual row and visual column indexes of the clicked cell.
   * @param {HTMLTableCellElement} TD Cell's TD (or TH) element.
   */
  "afterOnCellContextMenu",
  /**
   * Fired after hovering a cell or row/column header with the mouse cursor. In case the row/column header was
   * hovered, the index is negative.
   *
   * For example, hovering over the row header of cell (0, 0) results with `afterOnCellMouseOver` called
   * with coords `{row: 0, col: -1}`.
   *
   * @event Hooks#afterOnCellMouseOver
   * @param {Event} event `mouseover` event object.
   * @param {CellCoords} coords Hovered cell's visual coordinate object.
   * @param {HTMLTableCellElement} TD Cell's TD (or TH) element.
   */
  "afterOnCellMouseOver",
  /**
   * Fired after leaving a cell or row/column header with the mouse cursor.
   *
   * @event Hooks#afterOnCellMouseOut
   * @param {Event} event `mouseout` event object.
   * @param {CellCoords} coords Leaved cell's visual coordinate object.
   * @param {HTMLTableCellElement} TD Cell's TD (or TH) element.
   */
  "afterOnCellMouseOut",
  /**
   * Fired after one or more columns are removed.
   *
   * @event Hooks#afterRemoveCol
   * @param {number} index Visual index of starter column.
   * @param {number} amount An amount of removed columns.
   * @param {number[]} physicalColumns An array of physical columns removed from the data source.
   * @param {string} [source] String that identifies source of hook call
   *                          ([list of all available sources](@/guides/getting-started/events-and-hooks.md#definition-for-source-argument)).
   */
  "afterRemoveCol",
  /**
   * Fired after one or more rows are removed.
   *
   * @event Hooks#afterRemoveRow
   * @param {number} index Visual index of starter row.
   * @param {number} amount An amount of removed rows.
   * @param {number[]} physicalRows An array of physical rows removed from the data source.
   * @param {string} [source] String that identifies source of hook call
   *                          ([list of all available sources](@/guides/getting-started/events-and-hooks.md#definition-for-source-argument)).
   */
  "afterRemoveRow",
  /**
   * Fired before starting rendering the cell.
   *
   * @event Hooks#beforeRenderer
   * @param {HTMLTableCellElement} TD Currently rendered cell's TD element.
   * @param {number} row Visual row index.
   * @param {number} column Visual column index.
   * @param {string|number} prop Column property name or a column index, if datasource is an array of arrays.
   * @param {*} value Value of the rendered cell.
   * @param {object} cellProperties Object containing the cell's properties.
   */
  "beforeRenderer",
  /**
   * Fired after finishing rendering the cell (after the renderer finishes).
   *
   * @event Hooks#afterRenderer
   * @param {HTMLTableCellElement} TD Currently rendered cell's TD element.
   * @param {number} row Visual row index.
   * @param {number} column Visual column index.
   * @param {string|number} prop Column property name or a column index, if datasource is an array of arrays.
   * @param {*} value Value of the rendered cell.
   * @param {object} cellProperties Object containing the cell's properties.
   */
  "afterRenderer",
  /**
   * Fired after the order of rows has changed.
   * This hook is fired by changing row indexes of any type supported by the {@link IndexMapper}.
   *
   * @event Hooks#afterRowSequenceChange
   * @param {'init'|'remove'|'insert'|'move'|'update'} [source] A string that indicates what caused the change to the order of rows.
   */
  "afterRowSequenceChange",
  /**
   * Fired after the horizontal scroll event.
   *
   * @event Hooks#afterScrollHorizontally
   */
  "afterScrollHorizontally",
  /**
   * Fired after the vertical scroll event.
   *
   * @event Hooks#afterScrollVertically
   */
  "afterScrollVertically",
  /**
   * Fired after one or more cells are selected (e.g. During mouse move).
   *
   * @event Hooks#afterSelection
   * @param {number} row Selection start visual row index.
   * @param {number} column Selection start visual column index.
   * @param {number} row2 Selection end visual row index.
   * @param {number} column2 Selection end visual column index.
   * @param {object} preventScrolling A reference to the observable object with the `value` property.
   *                                  Property `preventScrolling.value` expects a boolean value that
   *                                  Handsontable uses to control scroll behavior after selection.
   * @param {object} preventScrolling Object with `value` property where its value change will be observed.
   * @param {number} selectionLayerLevel The number which indicates what selection layer is currently modified.
   * @example
   * ::: only-for javascript
   * ```js
   * new Handsontable(element, {
   *   afterSelection: (row, column, row2, column2, preventScrolling, selectionLayerLevel) => {
   *     // If set to `false` (default): when cell selection is outside the viewport,
   *     // Handsontable scrolls the viewport to cell selection's end corner.
   *     // If set to `true`: when cell selection is outside the viewport,
   *     // Handsontable doesn't scroll to cell selection's end corner.
   *     preventScrolling.value = true;
   *   }
   * })
   * ```
   * :::
   *
   * ::: only-for react
   * ```jsx
   * <HotTable
   *   afterSelection={(row, column, row2, column2, preventScrolling, selectionLayerLevel) => {
   *     // If set to `false` (default): when cell selection is outside the viewport,
   *     // Handsontable scrolls the viewport to cell selection's end corner.
   *     // If set to `true`: when cell selection is outside the viewport,
   *     // Handsontable doesn't scroll to cell selection's end corner.
   *     preventScrolling.value = true;
   *   }}
   * />
   * ```
   * :::
   */
  "afterSelection",
  /**
   * Fired after one or more cells are selected.
   *
   * The `prop` and `prop2` arguments represent the source object property name instead of the column number.
   *
   * @event Hooks#afterSelectionByProp
   * @param {number} row Selection start visual row index.
   * @param {string} prop Selection start data source object property name.
   * @param {number} row2 Selection end visual row index.
   * @param {string} prop2 Selection end data source object property name.
   * @param {object} preventScrolling Object with `value` property where its value change will be observed.
   * @param {number} selectionLayerLevel The number which indicates what selection layer is currently modified.
   * @example
   * ```js
   * ::: only-for javascript
   * new Handsontable(element, {
   *   afterSelectionByProp: (row, column, row2, column2, preventScrolling, selectionLayerLevel) => {
   *     // setting if prevent scrolling after selection
   *     preventScrolling.value = true;
   *   }
   * })
   * ```
   * :::
   *
   * ::: only-for react
   * ```jsx
   * <HotTable
   *   afterSelectionByProp={(row, column, row2, column2, preventScrolling, selectionLayerLevel) => {
   *     // setting if prevent scrolling after selection
   *     preventScrolling.value = true;
   *   }}
   * />
   * ```
   * :::
   */
  "afterSelectionByProp",
  /**
   * Fired after one or more cells are selected (e.g. On mouse up).
   *
   * @event Hooks#afterSelectionEnd
   * @param {number} row Selection start visual row index.
   * @param {number} column Selection start visual column index.
   * @param {number} row2 Selection end visual row index.
   * @param {number} column2 Selection end visual column index.
   * @param {number} selectionLayerLevel The number which indicates what selection layer is currently modified.
   */
  "afterSelectionEnd",
  /**
   * Fired after one or more cells are selected (e.g. On mouse up).
   *
   * The `prop` and `prop2` arguments represent the source object property name instead of the column number.
   *
   * @event Hooks#afterSelectionEndByProp
   * @param {number} row Selection start visual row index.
   * @param {string} prop Selection start data source object property index.
   * @param {number} row2 Selection end visual row index.
   * @param {string} prop2 Selection end data source object property index.
   * @param {number} selectionLayerLevel The number which indicates what selection layer is currently modified.
   */
  "afterSelectionEndByProp",
  /**
   * Fired after cell meta is changed.
   *
   * @event Hooks#afterSetCellMeta
   * @param {number} row Visual row index.
   * @param {number} column Visual column index.
   * @param {string} key The updated meta key.
   * @param {*} value The updated meta value.
   */
  "afterSetCellMeta",
  /**
   * Fired after cell meta is removed.
   *
   * @event Hooks#afterRemoveCellMeta
   * @param {number} row Visual row index.
   * @param {number} column Visual column index.
   * @param {string} key The removed meta key.
   * @param {*} value Value which was under removed key of cell meta.
   */
  "afterRemoveCellMeta",
  /**
   * Fired after cell data was changed.
   *
   * @event Hooks#afterSetDataAtCell
   * @param {Array} changes An array of changes in format `[[row, column, oldValue, value], ...]`.
   * @param {string} [source] String that identifies source of hook call
   *                          ([list of all available sources](@/guides/getting-started/events-and-hooks.md#definition-for-source-argument)).
   */
  "afterSetDataAtCell",
  /**
   * Fired after cell data was changed.
   * Called only when `setDataAtRowProp` was executed.
   *
   * @event Hooks#afterSetDataAtRowProp
   * @param {Array} changes An array of changes in format `[[row, prop, oldValue, value], ...]`.
   * @param {string} [source] String that identifies source of hook call
   *                          ([list of all available sources](@/guides/getting-started/events-and-hooks.md#definition-for-source-argument)).
   */
  "afterSetDataAtRowProp",
  /**
   * Fired after cell source data was changed.
   *
   * @event Hooks#afterSetSourceDataAtCell
   * @since 8.0.0
   * @param {Array} changes An array of changes in format `[[row, column, oldValue, value], ...]`.
   * @param {string} [source] String that identifies source of hook call.
   */
  "afterSetSourceDataAtCell",
  /**
   * Fired after calling the `updateSettings` method.
   *
   * @event Hooks#afterUpdateSettings
   * @param {object} newSettings New settings object.
   */
  "afterUpdateSettings",
  /**
   * @description
   * A plugin hook executed after validator function, only if validator function is defined.
   * Validation result is the first parameter. This can be used to determinate if validation passed successfully or not.
   *
   * __Returning false from the callback will mark the cell as invalid__.
   *
   * @event Hooks#afterValidate
   * @param {boolean} isValid `true` if valid, `false` if not.
   * @param {*} value The value in question.
   * @param {number} row Visual row index.
   * @param {string|number} prop Property name / visual column index.
   * @param {string} [source] String that identifies source of hook call
   *                          ([list of all available sources](@/guides/getting-started/events-and-hooks.md#definition-for-source-argument)).
   * @returns {undefined | boolean} If `false` the cell will be marked as invalid, `true` otherwise.
   */
  "afterValidate",
  /**
   * Fired before successful change of language (when proper language code was set).
   *
   * @event Hooks#beforeLanguageChange
   * @since 0.35.0
   * @param {string} languageCode New language code.
   */
  "beforeLanguageChange",
  /**
   * Fired after successful change of language (when proper language code was set).
   *
   * @event Hooks#afterLanguageChange
   * @since 0.35.0
   * @param {string} languageCode New language code.
   */
  "afterLanguageChange",
  /**
   * Fired by {@link Autofill} plugin before populating the data in the autofill feature. This hook is fired when
   * {@link Options#fillHandle} option is enabled.
   *
   * @event Hooks#beforeAutofill
   * @param {Array[]} selectionData Data the autofill operation will start from.
   * @param {CellRange} sourceRange The range values will be filled from.
   * @param {CellRange} targetRange The range new values will be filled into.
   * @param {string} direction Declares the direction of the autofill. Possible values: `up`, `down`, `left`, `right`.
   *
   * @returns {boolean|Array[]} If false, the operation is cancelled. If array of arrays, the returned data
   *                              will be passed into `populateFromArray` instead of the default autofill
   *                              algorithm's result.
   */
  "beforeAutofill",
  /**
   * Fired by {@link Autofill} plugin after populating the data in the autofill feature. This hook is fired when
   * {@link Options#fillHandle} option is enabled.
   *
   * @event Hooks#afterAutofill
   * @since 8.0.0
   * @param {Array[]} fillData The data that was used to fill the `targetRange`. If `beforeAutofill` was used
   *                            and returned `[[]]`, this will be the same object that was returned from `beforeAutofill`.
   * @param {CellRange} sourceRange The range values will be filled from.
   * @param {CellRange} targetRange The range new values will be filled into.
   * @param {string} direction Declares the direction of the autofill. Possible values: `up`, `down`, `left`, `right`.
   */
  "afterAutofill",
  /**
   * Fired before aligning the cell contents.
   *
   * @event Hooks#beforeCellAlignment
   * @param {object} stateBefore An object with class names defining the cell alignment.
   * @param {CellRange[]} range An array of CellRange coordinates where the alignment will be applied.
   * @param {string} type Type of the alignment - either `horizontal` or `vertical`.
   * @param {string} alignmentClass String defining the alignment class added to the cell.
   * Possible values:
   * * `htLeft`
   * * `htCenter`
   * * `htRight`
   * * `htJustify`
   * * `htTop`
   * * `htMiddle`
   * * `htBottom`.
   */
  "beforeCellAlignment",
  /**
   * Fired before one or more cells are changed.
   *
   * Use this hook to silently alter the user's changes before Handsontable re-renders.
   *
   * To ignore the user's changes, use a nullified array or return `false`.
   *
   * @event Hooks#beforeChange
   * @param {Array[]} changes 2D array containing information about each of the edited cells `[[row, prop, oldVal, newVal], ...]`. `row` is a visual row index.
   * @param {string} [source] String that identifies source of hook call
   *                          ([list of all available sources](@/guides/getting-started/events-and-hooks.md#definition-for-source-argument)).
   * @returns {undefined | boolean} If `false` all changes were cancelled, `true` otherwise.
   * @example
   * ::: only-for javascript
   * ```js
   * // to alter a single change, overwrite the value with `changes[i][3]`
   * new Handsontable(element, {
   *   beforeChange: (changes, source) => {
   *     // [[row, prop, oldVal, newVal], ...]
   *     changes[0][3] = 10;
   *   }
   * });
   *
   * // to ignore a single change, set `changes[i]` to `null`
   * // or remove `changes[i]` from the array, by using `changes.splice(i, 1)`
   * new Handsontable(element, {
   *   beforeChange: (changes, source) => {
   *     // [[row, prop, oldVal, newVal], ...]
   *     changes[0] = null;
   *   }
   * });
   *
   * // to ignore all changes, return `false`
   * // or set the array's length to 0, by using `changes.length = 0`
   * new Handsontable(element, {
   *   beforeChange: (changes, source) => {
   *     // [[row, prop, oldVal, newVal], ...]
   *     return false;
   *   }
   * });
   * ```
   * :::
   *
   * ::: only-for react
   * ```jsx
   * // to alter a single change, overwrite the desired value with `changes[i][3]`
   * <HotTable
   *   beforeChange={(changes, source) => {
   *     // [[row, prop, oldVal, newVal], ...]
   *     changes[0][3] = 10;
   *   }}
   * />
   *
   * // to ignore a single change, set `changes[i]` to `null`
   * // or remove `changes[i]` from the array, by using changes.splice(i, 1).
   * <HotTable
   *   beforeChange={(changes, source) => {
   *     // [[row, prop, oldVal, newVal], ...]
   *     changes[0] = null;
   *   }}
   * />
   *
   * // to ignore all changes, return `false`
   * // or set the array's length to 0 (`changes.length = 0`)
   * <HotTable
   *   beforeChange={(changes, source) => {
   *     // [[row, prop, oldVal, newVal], ...]
   *     return false;
   *   }}
   * />
   * ```
   * :::
   */
  "beforeChange",
  /**
   * Fired right before rendering the changes.
   *
   * @event Hooks#beforeChangeRender
   * @param {Array[]} changes Array in form of `[row, prop, oldValue, newValue]`.
   * @param {string} [source] String that identifies source of hook call
   *                          ([list of all available sources](@/guides/getting-started/events-and-hooks.md#definition-for-source-argument)).
   */
  "beforeChangeRender",
  /**
   * Fired before drawing the borders.
   *
   * @event Hooks#beforeDrawBorders
   * @param {Array} corners Array specifying the current selection borders.
   * @param {string} borderClassName Specifies the border class name.
   */
  "beforeDrawBorders",
  /**
   * Fired before getting cell settings.
   *
   * @event Hooks#beforeGetCellMeta
   * @param {number} row Visual row index.
   * @param {number} column Visual column index.
   * @param {object} cellProperties Object containing the cell's properties.
   */
  "beforeGetCellMeta",
  /**
   * Fired before cell meta is removed.
   *
   * @event Hooks#beforeRemoveCellMeta
   * @param {number} row Visual row index.
   * @param {number} column Visual column index.
   * @param {string} key The removed meta key.
   * @param {*} value Value which is under removed key of cell meta.
   * @returns {*|boolean} If false is returned the action is canceled.
   */
  "beforeRemoveCellMeta",
  /**
   * Fired before the Handsontable instance is initiated.
   *
   * @event Hooks#beforeInit
   */
  "beforeInit",
  /**
   * Fired before the Walkontable instance is initiated.
   *
   * @event Hooks#beforeInitWalkontable
   * @param {object} walkontableConfig Walkontable configuration object.
   */
  "beforeInitWalkontable",
  /**
   * Fired before Handsontable's [`data`](@/api/options.md#data)
   * gets modified by the [`loadData()`](@/api/core.md#loaddata) method
   * or the [`updateSettings()`](@/api/core.md#updatesettings) method.
   *
   * Read more:
   * - [Binding to data](@/guides/getting-started/binding-to-data.md)
   * - [Saving data](@/guides/getting-started/saving-data.md)
   *
   * @event Hooks#beforeLoadData
   * @since 8.0.0
   * @param {Array} sourceData An [array of arrays](@/guides/getting-started/binding-to-data.md#array-of-arrays), or an [array of objects](@/guides/getting-started/binding-to-data.md#array-of-objects), that contains Handsontable's data
   * @param {boolean} initialLoad A flag that indicates whether the data was loaded at Handsontable's initialization (`true`) or later (`false`)
   * @param {string} source The source of the call
   * @returns {Array} The returned array will be used as Handsontable's new dataset.
   */
  "beforeLoadData",
  /**
   * Fired before the [`updateData()`](@/api/core.md#updatedata) method
   * modifies Handsontable's [`data`](@/api/options.md#data).
   *
   * Read more:
   * - [Binding to data](@/guides/getting-started/binding-to-data.md)
   * - [Saving data](@/guides/getting-started/saving-data.md)
   *
   * @event Hooks#beforeUpdateData
   * @since 11.1.0
   * @param {Array} sourceData An [array of arrays](@/guides/getting-started/binding-to-data.md#array-of-arrays), or an [array of objects](@/guides/getting-started/binding-to-data.md#array-of-objects), that contains Handsontable's data
   * @param {boolean} initialLoad A flag that indicates whether the data was loaded at Handsontable's initialization (`true`) or later (`false`)
   * @param {string} source The source of the call
   * @returns {Array} The returned array will be used as Handsontable's new dataset.
   */
  "beforeUpdateData",
  /**
   * Hook fired before keydown event is handled. It can be used to stop default key bindings.
   *
   * __Note__: To prevent default behavior you need to call `false` in your `beforeKeyDown` handler.
   *
   * @event Hooks#beforeKeyDown
   * @param {Event} event Original DOM event.
   */
  "beforeKeyDown",
  /**
   * Fired after the user clicked a cell, but before all the calculations related with it.
   *
   * @event Hooks#beforeOnCellMouseDown
   * @param {Event} event The `mousedown` event object.
   * @param {CellCoords} coords Cell coords object containing the visual coordinates of the clicked cell.
   * @param {HTMLTableCellElement} TD TD element.
   * @param {object} controller An object with properties `row`, `column` and `cell`. Each property contains
   *                            a boolean value that allows or disallows changing the selection for that particular area.
   */
  "beforeOnCellMouseDown",
  /**
   * Fired after the user clicked a cell.
   *
   * @event Hooks#beforeOnCellMouseUp
   * @param {Event} event The `mouseup` event object.
   * @param {CellCoords} coords Cell coords object containing the visual coordinates of the clicked cell.
   * @param {HTMLTableCellElement} TD TD element.
   */
  "beforeOnCellMouseUp",
  /**
   * Fired after the user clicked a cell, but before all the calculations related with it.
   *
   * @event Hooks#beforeOnCellContextMenu
   * @since 4.1.0
   * @param {Event} event The `contextmenu` event object.
   * @param {CellCoords} coords Cell coords object containing the visual coordinates of the clicked cell.
   * @param {HTMLTableCellElement} TD TD element.
   */
  "beforeOnCellContextMenu",
  /**
   * Fired after the user moved cursor over a cell, but before all the calculations related with it.
   *
   * @event Hooks#beforeOnCellMouseOver
   * @param {Event} event The `mouseover` event object.
   * @param {CellCoords} coords CellCoords object containing the visual coordinates of the clicked cell.
   * @param {HTMLTableCellElement} TD TD element.
   * @param {object} controller An object with properties `row`, `column` and `cell`. Each property contains
   *                            a boolean value that allows or disallows changing the selection for that particular area.
   */
  "beforeOnCellMouseOver",
  /**
   * Fired after the user moved cursor out from a cell, but before all the calculations related with it.
   *
   * @event Hooks#beforeOnCellMouseOut
   * @param {Event} event The `mouseout` event object.
   * @param {CellCoords} coords CellCoords object containing the visual coordinates of the leaved cell.
   * @param {HTMLTableCellElement} TD TD element.
   */
  "beforeOnCellMouseOut",
  /**
   * Fired before one or more columns are about to be removed.
   *
   * @event Hooks#beforeRemoveCol
   * @param {number} index Visual index of starter column.
   * @param {number} amount Amount of columns to be removed.
   * @param {number[]} physicalColumns An array of physical columns removed from the data source.
   * @param {string} [source] String that identifies source of hook call
   *                          ([list of all available sources](@/guides/getting-started/events-and-hooks.md#definition-for-source-argument)).
   * @returns {*|boolean} If false is returned the action is canceled.
   */
  "beforeRemoveCol",
  /**
   * Fired when one or more rows are about to be removed.
   *
   * @event Hooks#beforeRemoveRow
   * @param {number} index Visual index of starter row.
   * @param {number} amount Amount of rows to be removed.
   * @param {number[]} physicalRows An array of physical rows removed from the data source.
   * @param {string} [source] String that identifies source of hook call
   *                          ([list of all available sources](@/guides/getting-started/events-and-hooks.md#definition-for-source-argument)).
   * @returns {*|boolean} If false is returned the action is canceled.
   */
  "beforeRemoveRow",
  /**
   * Fired before Handsontable's view-rendering engine is rendered.
   *
   * __Note:__ In Handsontable 9.x and earlier, the `beforeViewRender` hook was named `beforeRender`.
   *
   * @event Hooks#beforeViewRender
   * @since 10.0.0
   * @param {boolean} isForced If set to `true`, the rendering gets triggered by a change of settings, a change of
   *                           data, or a logic that needs a full Handsontable render cycle.
   *                           If set to `false`, the rendering gets triggered by scrolling or moving the selection.
   * @param {object} skipRender Object with `skipRender` property, if it is set to `true ` the next rendering cycle will be skipped.
   */
  "beforeViewRender",
  /**
   * Fired after Handsontable's view-rendering engine is rendered,
   * but before redrawing the selection borders and before scroll syncing.
   *
   * __Note:__ In Handsontable 9.x and earlier, the `afterViewRender` hook was named `afterRender`.
   *
   * @event Hooks#afterViewRender
   * @since 10.0.0
   * @param {boolean} isForced If set to `true`, the rendering gets triggered by a change of settings, a change of
   *                           data, or a logic that needs a full Handsontable render cycle.
   *                           If set to `false`, the rendering gets triggered by scrolling or moving the selection.
   */
  "afterViewRender",
  /**
   * Fired before Handsontable's view-rendering engine updates the view.
   *
   * The `beforeRender` event is fired right after the Handsontable
   * business logic is executed and right before the rendering engine starts calling
   * the Core logic, renderers, cell meta objects etc. to update the view.
   *
   * @event Hooks#beforeRender
   * @param {boolean} isForced If set to `true`, the rendering gets triggered by a change of settings, a change of
   *                           data, or a logic that needs a full Handsontable render cycle.
   *                           If set to `false`, the rendering gets triggered by scrolling or moving the selection.
   */
  "beforeRender",
  /**
   * Fired after Handsontable's view-rendering engine updates the view.
   *
   * @event Hooks#afterRender
   * @param {boolean} isForced If set to `true`, the rendering gets triggered by a change of settings, a change of
   *                           data, or a logic that needs a full Handsontable render cycle.
   *                           If set to `false`, the rendering gets triggered by scrolling or moving the selection.
   */
  "afterRender",
  /**
   * Fired before cell meta is changed.
   *
   * @event Hooks#beforeSetCellMeta
   * @since 8.0.0
   * @param {number} row Visual row index.
   * @param {number} column Visual column index.
   * @param {string} key The updated meta key.
   * @param {*} value The updated meta value.
   * @returns {boolean|undefined} If false is returned the action is canceled.
   */
  "beforeSetCellMeta",
  /**
   * Fired before setting range is started but not finished yet.
   *
   * @event Hooks#beforeSetRangeStartOnly
   * @param {CellCoords} coords CellCoords instance.
   */
  "beforeSetRangeStartOnly",
  /**
   * Fired before setting range is started.
   *
   * @event Hooks#beforeSetRangeStart
   * @param {CellCoords} coords CellCoords instance.
   */
  "beforeSetRangeStart",
  /**
   * Fired before setting range is ended.
   *
   * @event Hooks#beforeSetRangeEnd
   * @param {CellCoords} coords CellCoords instance.
   */
  "beforeSetRangeEnd",
  /**
   * Fired before the logic of handling a touch scroll, when user started scrolling on a touch-enabled device.
   *
   * @event Hooks#beforeTouchScroll
   */
  "beforeTouchScroll",
  /**
   * Fired before cell validation, only if validator function is defined. This can be used to manipulate the value
   * of changed cell before it is applied to the validator function.
   *
   * __Note:__ this will not affect values of changes. This will change value *ONLY* for validation.
   *
   * @event Hooks#beforeValidate
   * @param {*} value Value of the cell.
   * @param {number} row Visual row index.
   * @param {string|number} prop Property name / column index.
   * @param {string} [source] String that identifies source of hook call
   *                          ([list of all available sources](@/guides/getting-started/events-and-hooks.md#definition-for-source-argument)).
   */
  "beforeValidate",
  /**
   * Fired before cell value is rendered into the DOM (through renderer function). This can be used to manipulate the
   * value which is passed to the renderer without modifying the renderer itself.
   *
   * @event Hooks#beforeValueRender
   * @param {*} value Cell value to render.
   * @param {object} cellProperties An object containing the cell properties.
   */
  "beforeValueRender",
  /**
   * Fired after Handsontable instance is constructed (using `new` operator).
   *
   * @event Hooks#construct
   */
  "construct",
  /**
   * Fired after Handsontable instance is initiated but before table is rendered.
   *
   * @event Hooks#init
   */
  "init",
  /**
   * Fired when a column header index is about to be modified by a callback function.
   *
   * @event Hooks#modifyColHeader
   * @param {number} column Visual column header index.
   */
  "modifyColHeader",
  /**
   * Fired when a column width is about to be modified by a callback function.
   *
   * @event Hooks#modifyColWidth
   * @param {number} width Current column width.
   * @param {number} column Visual column index.
   */
  "modifyColWidth",
  /**
   * Fired when a row header index is about to be modified by a callback function.
   *
   * @event Hooks#modifyRowHeader
   * @param {number} row Visual row header index.
   */
  "modifyRowHeader",
  /**
   * Fired when a row height is about to be modified by a callback function.
   *
   * @event Hooks#modifyRowHeight
   * @param {number} height Row height.
   * @param {number} row Visual row index.
   */
  "modifyRowHeight",
  /**
   * Fired when a data was retrieved or modified.
   *
   * @event Hooks#modifyData
   * @param {number} row Physical row index.
   * @param {number} column Visual column index.
   * @param {object} valueHolder Object which contains original value which can be modified by overwriting `.value` property.
   * @param {string} ioMode String which indicates for what operation hook is fired (`get` or `set`).
   */
  "modifyData",
  /**
   * Fired when a data was retrieved or modified from the source data set.
   *
   * @event Hooks#modifySourceData
   * @since 8.0.0
   * @param {number} row Physical row index.
   * @param {number} column Physical column index or property name.
   * @param {object} valueHolder Object which contains original value which can be modified by overwriting `.value` property.
   * @param {string} ioMode String which indicates for what operation hook is fired (`get` or `set`).
   */
  "modifySourceData",
  /**
   * Fired when a data was retrieved or modified.
   *
   * @event Hooks#modifyRowData
   * @param {number} row Physical row index.
   */
  "modifyRowData",
  /**
   * Used to modify the cell coordinates when using the `getCell` method, opening editor, getting value from the editor
   * and saving values from the closed editor.
   *
   * @event Hooks#modifyGetCellCoords
   * @since 0.36.0
   * @param {number} row Visual row index.
   * @param {number} column Visual column index.
   * @param {boolean} topmost If set to `true`, it returns the TD element from the topmost overlay. For example,
   *                          if the wanted cell is in the range of fixed rows, it will return a TD element
   *                          from the `top` overlay.
   * @returns {undefined|number[]}
   */
  "modifyGetCellCoords",
  /**
   * Allows modify the visual row index that is used to retrieve the row header element (TH) before it's
   * highlighted (proper CSS class names are added). Modifying the visual row index allows building a custom
   * implementation of the nested headers feature or other features that require highlighting other DOM
   * elements than that the rendering engine, by default, would have highlighted.
   *
   * @event Hooks#beforeHighlightingRowHeader
   * @since 8.4.0
   * @param {number} row Visual row index.
   * @param {number} headerLevel Column header level (0 = most distant to the table).
   * @param {object} highlightMeta An object that contains additional information about processed selection.
   * @returns {number|undefined}
   */
  "beforeHighlightingRowHeader",
  /**
   * Allows modify the visual column index that is used to retrieve the column header element (TH) before it's
   * highlighted (proper CSS class names are added). Modifying the visual column index allows building a custom
   * implementation of the nested headers feature or other features that require highlighting other DOM
   * elements than that the rendering engine, by default, would have highlighted.
   *
   * @event Hooks#beforeHighlightingColumnHeader
   * @since 8.4.0
   * @param {number} column Visual column index.
   * @param {number} headerLevel Row header level (0 = most distant to the table).
   * @param {object} highlightMeta An object that contains additional information about processed selection.
   * @returns {number|undefined}
   */
  "beforeHighlightingColumnHeader",
  /**
   * Fired by {@link PersistentState} plugin, after loading value, saved under given key, from browser local storage.
   *
   * The `persistentStateLoad` hook is fired even when the {@link Options#persistentState} option is disabled.
   *
   * @event Hooks#persistentStateLoad
   * @param {string} key Key.
   * @param {object} valuePlaceholder Object containing the loaded value under `valuePlaceholder.value` (if no value have been saved, `value` key will be undefined).
   */
  "persistentStateLoad",
  /**
   * Fired by {@link PersistentState} plugin after resetting data from local storage. If no key is given, all values associated with table will be cleared.
   * This hook is fired when {@link Options#persistentState} option is enabled.
   *
   * @event Hooks#persistentStateReset
   * @param {string} [key] Key.
   */
  "persistentStateReset",
  /**
   * Fired by {@link PersistentState} plugin, after saving value under given key in browser local storage.
   *
   * The `persistentStateSave` hook is fired even when the {@link Options#persistentState} option is disabled.
   *
   * @event Hooks#persistentStateSave
   * @param {string} key Key.
   * @param {Mixed} value Value to save.
   */
  "persistentStateSave",
  /**
   * Fired by {@link ColumnSorting} and {@link MultiColumnSorting} plugins before sorting the column. If you return `false` value inside callback for hook, then sorting
   * will be not applied by the Handsontable (useful for server-side sorting).
   *
   * This hook is fired when {@link Options#columnSorting} or {@link Options#multiColumnSorting} option is enabled.
   *
   * @event Hooks#beforeColumnSort
   * @param {Array} currentSortConfig Current sort configuration (for all sorted columns).
   * @param {Array} destinationSortConfigs Destination sort configuration (for all sorted columns).
   * @returns {boolean | undefined} If `false` the column will not be sorted, `true` otherwise.
   */
  "beforeColumnSort",
  /**
   * Fired by {@link ColumnSorting} and {@link MultiColumnSorting} plugins after sorting the column. This hook is fired when {@link Options#columnSorting}
   * or {@link Options#multiColumnSorting} option is enabled.
   *
   * @event Hooks#afterColumnSort
   * @param {Array} currentSortConfig Current sort configuration (for all sorted columns).
   * @param {Array} destinationSortConfigs Destination sort configuration (for all sorted columns).
   */
  "afterColumnSort",
  /**
   * Fired by {@link Autofill} plugin after setting range of autofill. This hook is fired when {@link Options#fillHandle}
   * option is enabled.
   *
   * @event Hooks#modifyAutofillRange
   * @param {Array} startArea Array of visual coordinates of the starting point for the drag-down operation (`[startRow, startColumn, endRow, endColumn]`).
   * @param {Array} entireArea Array of visual coordinates of the entire area of the drag-down operation (`[startRow, startColumn, endRow, endColumn]`).
   */
  "modifyAutofillRange",
  /**
   * Fired to allow modifying the copyable range with a callback function.
   *
   * @event Hooks#modifyCopyableRange
   * @param {Array[]} copyableRanges Array of objects defining copyable cells.
   */
  "modifyCopyableRange",
  /**
   * Fired by {@link CopyPaste} plugin before copying the values to the clipboard and before clearing values of
   * the selected cells. This hook is fired when {@link Options#copyPaste} option is enabled.
   *
   * @event Hooks#beforeCut
   * @param {Array[]} data An array of arrays which contains data to cut.
   * @param {object[]} coords An array of objects with ranges of the visual indexes (`startRow`, `startCol`, `endRow`, `endCol`)
   *                       which will be cut out.
   * @returns {*} If returns `false` then operation of the cutting out is canceled.
   * @example
   * ::: only-for javascript
   * ```js
   * // To disregard a single row, remove it from the array using data.splice(i, 1).
   * new Handsontable(element, {
   *   beforeCut: function(data, coords) {
   *     // data -> [[1, 2, 3], [4, 5, 6]]
   *     data.splice(0, 1);
   *     // data -> [[4, 5, 6]]
   *     // coords -> [{startRow: 0, startCol: 0, endRow: 1, endCol: 2}]
   *   }
   * });
   * // To cancel a cutting action, just return `false`.
   * new Handsontable(element, {
   *   beforeCut: function(data, coords) {
   *     return false;
   *   }
   * });
   * ```
   * :::
   *
   * ::: only-for react
   * ```jsx
   * // To disregard a single row, remove it from the array using data.splice(i, 1).
   * <HotTable
   *   beforeCut={(data, coords) => {
   *     // data -> [[1, 2, 3], [4, 5, 6]]
   *     data.splice(0, 1);
   *     // data -> [[4, 5, 6]]
   *     // coords -> [{startRow: 0, startCol: 0, endRow: 1, endCol: 2}]
   *   }}
   * />
   * // To cancel a cutting action, just return `false`.
   * <HotTable
   *   beforeCut={(data, coords) => {
   *     return false;
   *   }}
   * />
   * ```
   * :::
   */
  "beforeCut",
  /**
   * Fired by {@link CopyPaste} plugin after data was cut out from the table. This hook is fired when
   * {@link Options#copyPaste} option is enabled.
   *
   * @event Hooks#afterCut
   * @param {Array[]} data An array of arrays with the cut data.
   * @param {object[]} coords An array of objects with ranges of the visual indexes (`startRow`, `startCol`, `endRow`, `endCol`)
   *                       which was cut out.
   */
  "afterCut",
  /**
   * Fired before values are copied to the clipboard.
   *
   * @event Hooks#beforeCopy
   * @param {Array[]} data An array of arrays which contains data to copied.
   * @param {object[]} coords An array of objects with ranges of the visual indexes (`startRow`, `startCol`, `endRow`, `endCol`)
   *                         which will copied.
   * @param {{ columnHeadersCount: number }} copiedHeadersCount (Since 12.3.0) The number of copied column headers.
   * @returns {*} If returns `false` then copying is canceled.
   *
   * @example
   * ::: only-for javascript
   * ```js
   * // To disregard a single row, remove it from array using data.splice(i, 1).
   * ...
   * new Handsontable(document.getElementById('example'), {
   *   beforeCopy: (data, coords) => {
   *     // data -> [[1, 2, 3], [4, 5, 6]]
   *     data.splice(0, 1);
   *     // data -> [[4, 5, 6]]
   *     // coords -> [{startRow: 0, startCol: 0, endRow: 1, endCol: 2}]
   *   }
   * });
   * ...
   *
   * // To cancel copying, return false from the callback.
   * ...
   * new Handsontable(document.getElementById('example'), {
   *   beforeCopy: (data, coords) => {
   *     return false;
   *   }
   * });
   * ...
   * ```
   * :::
   *
   * ::: only-for react
   * ```jsx
   * // To disregard a single row, remove it from array using data.splice(i, 1).
   * ...
   * <HotTable
   *   beforeCopy={(data, coords) => {
   *     // data -> [[1, 2, 3], [4, 5, 6]]
   *     data.splice(0, 1);
   *     // data -> [[4, 5, 6]]
   *     // coords -> [{startRow: 0, startCol: 0, endRow: 1, endCol: 2}]
   *   }}
   * />
   * ...
   *
   * // To cancel copying, return false from the callback.
   * ...
   * <HotTable
   *   beforeCopy={(data, coords) => {
   *     return false;
   *   }}
   * />
   * ...
   * ```
   * :::
   */
  "beforeCopy",
  /**
   * Fired by {@link CopyPaste} plugin after data are pasted into table. This hook is fired when {@link Options#copyPaste}
   * option is enabled.
   *
   * @event Hooks#afterCopy
   * @param {Array[]} data An array of arrays which contains the copied data.
   * @param {object[]} coords An array of objects with ranges of the visual indexes (`startRow`, `startCol`, `endRow`, `endCol`)
   *                         which was copied.
   * @param {{ columnHeadersCount: number }} copiedHeadersCount (Since 12.3.0) The number of copied column headers.
   */
  "afterCopy",
  /**
   * Fired by {@link CopyPaste} plugin before values are pasted into table. This hook is fired when
   * {@link Options#copyPaste} option is enabled.
   *
   * @event Hooks#beforePaste
   * @param {Array[]} data An array of arrays which contains data to paste.
   * @param {object[]} coords An array of objects with ranges of the visual indexes (`startRow`, `startCol`, `endRow`, `endCol`)
   *                       that correspond to the previously selected area.
   * @returns {*} If returns `false` then pasting is canceled.
   * @example
   * ```js
   * ::: only-for javascript
   * // To disregard a single row, remove it from array using data.splice(i, 1).
   * new Handsontable(example, {
   *   beforePaste: (data, coords) => {
   *     // data -> [[1, 2, 3], [4, 5, 6]]
   *     data.splice(0, 1);
   *     // data -> [[4, 5, 6]]
   *     // coords -> [{startRow: 0, startCol: 0, endRow: 1, endCol: 2}]
   *   }
   * });
   * // To cancel pasting, return false from the callback.
   * new Handsontable(example, {
   *   beforePaste: (data, coords) => {
   *     return false;
   *   }
   * });
   * ```
   * :::
   *
   * ::: only-for react
   * ```jsx
   * // To disregard a single row, remove it from array using data.splice(i, 1).
   * <HotTable
   *   beforePaste={(data, coords) => {
   *     // data -> [[1, 2, 3], [4, 5, 6]]
   *     data.splice(0, 1);
   *     // data -> [[4, 5, 6]]
   *     // coords -> [{startRow: 0, startCol: 0, endRow: 1, endCol: 2}]
   *   }}
   * />
   * // To cancel pasting, return false from the callback.
   * <HotTable
   *   beforePaste={(data, coords) => {
   *     return false;
   *   }}
   * />
   * ```
   * :::
   */
  "beforePaste",
  /**
   * Fired by {@link CopyPaste} plugin after values are pasted into table. This hook is fired when
   * {@link Options#copyPaste} option is enabled.
   *
   * @event Hooks#afterPaste
   * @param {Array[]} data An array of arrays with the pasted data.
   * @param {object[]} coords An array of objects with ranges of the visual indexes (`startRow`, `startCol`, `endRow`, `endCol`)
   *                       that correspond to the previously selected area.
   */
  "afterPaste",
  /**
   * Fired by the {@link ManualColumnFreeze} plugin, before freezing a column.
   *
   * @event Hooks#beforeColumnFreeze
   * @since 12.1.0
   * @param {number} column The visual index of the column that is going to freeze.
   * @param {boolean} freezePerformed If `true`: the column is going to freeze. If `false`: the column is not going to freeze (which might happen if the column is already frozen).
   * @returns {boolean|undefined} If `false`: the column is not going to freeze, and the `afterColumnFreeze` hook won't fire.
   */
  "beforeColumnFreeze",
  /**
   * Fired by the {@link ManualColumnFreeze} plugin, right after freezing a column.
   *
   * @event Hooks#afterColumnFreeze
   * @since 12.1.0
   * @param {number} column The visual index of the frozen column.
   * @param {boolean} freezePerformed If `true`: the column got successfully frozen. If `false`: the column didn't get frozen.
   */
  "afterColumnFreeze",
  /**
   * Fired by {@link ManualColumnMove} plugin before change order of the visual indexes. This hook is fired when
   * {@link Options#manualColumnMove} option is enabled.
   *
   * @event Hooks#beforeColumnMove
   * @param {Array} movedColumns Array of visual column indexes to be moved.
   * @param {number} finalIndex Visual column index, being a start index for the moved columns.
   *                            Points to where the elements will be placed after the moving action.
   *                            To check visualization of final index please take a look at
   *                            [documentation](@/guides/columns/column-moving.md).
   * @param {number|undefined} dropIndex Visual column index, being a drop index for the moved columns.
   *                                     Points to where we are going to drop the moved elements. To check
   *                                     visualization of drop index please take a look at
   *                                     [documentation](@/guides/columns/column-moving.md).
   *                                     It's `undefined` when `dragColumns` function wasn't called.
   * @param {boolean} movePossible Indicates if it's possible to move rows to the desired position.
   * @returns {undefined | boolean} If `false` the column will not be moved, `true` otherwise.
   */
  "beforeColumnMove",
  /**
   * Fired by {@link ManualColumnMove} plugin after changing order of the visual indexes.
   * This hook is fired when {@link Options#manualColumnMove} option is enabled.
   *
   * @event Hooks#afterColumnMove
   * @param {Array} movedColumns Array of visual column indexes to be moved.
   * @param {number} finalIndex Visual column index, being a start index for the moved columns.
   *                            Points to where the elements will be placed after the moving action.
   *                            To check visualization of final index please take a look at
   *                            [documentation](@/guides/columns/column-moving.md).
   * @param {number|undefined} dropIndex Visual column index, being a drop index for the moved columns.
   *                                     Points to where we are going to drop the moved elements.
   *                                     To check visualization of drop index please take a look at
   *                                     [documentation](@/guides/columns/column-moving.md).
   *                                     It's `undefined` when `dragColumns` function wasn't called.
   * @param {boolean} movePossible Indicates if it was possible to move columns to the desired position.
   * @param {boolean} orderChanged Indicates if order of columns was changed by move.
   */
  "afterColumnMove",
  /**
   * Fired by the {@link ManualColumnFreeze} plugin, before unfreezing a column.
   *
   * @event Hooks#beforeColumnUnfreeze
   * @since 12.1.0
   * @param {number} column The visual index of the column that is going to unfreeze.
   * @param {boolean} unfreezePerformed If `true`: the column is going to unfreeze. If `false`: the column is not going to unfreeze (which might happen if the column is already unfrozen).
   * @returns {boolean|undefined} If `false`: the column is not going to unfreeze, and the `afterColumnUnfreeze` hook won't fire.
   */
  "beforeColumnUnfreeze",
  /**
   * Fired by the {@link ManualColumnFreeze} plugin, right after unfreezing a column.
   *
   * @event Hooks#afterColumnUnfreeze
   * @since 12.1.0
   * @param {number} column The visual index of the unfrozen column.
   * @param {boolean} unfreezePerformed If `true`: the column got successfully unfrozen. If `false`: the column didn't get unfrozen.
   */
  "afterColumnUnfreeze",
  /**
   * Fired by {@link ManualRowMove} plugin before changing the order of the visual indexes. This hook is fired when
   * {@link Options#manualRowMove} option is enabled.
   *
   * @event Hooks#beforeRowMove
   * @param {Array} movedRows Array of visual row indexes to be moved.
   * @param {number} finalIndex Visual row index, being a start index for the moved rows.
   *                            Points to where the elements will be placed after the moving action.
   *                            To check visualization of final index please take a look at
   *                            [documentation](@/guides/rows/row-moving.md).
   * @param {number|undefined} dropIndex Visual row index, being a drop index for the moved rows.
   *                                     Points to where we are going to drop the moved elements.
   *                                     To check visualization of drop index please take a look at
   *                                     [documentation](@/guides/rows/row-moving.md).
   *                                     It's `undefined` when `dragRows` function wasn't called.
   * @param {boolean} movePossible Indicates if it's possible to move rows to the desired position.
   * @returns {*|boolean} If false is returned the action is canceled.
   */
  "beforeRowMove",
  /**
   * Fired by {@link ManualRowMove} plugin after changing the order of the visual indexes.
   * This hook is fired when {@link Options#manualRowMove} option is enabled.
   *
   * @event Hooks#afterRowMove
   * @param {Array} movedRows Array of visual row indexes to be moved.
   * @param {number} finalIndex Visual row index, being a start index for the moved rows.
   *                            Points to where the elements will be placed after the moving action.
   *                            To check visualization of final index please take a look at
   *                            [documentation](@/guides/rows/row-moving.md).
   * @param {number|undefined} dropIndex Visual row index, being a drop index for the moved rows.
   *                                     Points to where we are going to drop the moved elements.
   *                                     To check visualization of drop index please take a look at
   *                                     [documentation](@/guides/rows/row-moving.md).
   *                                     It's `undefined` when `dragRows` function wasn't called.
   * @param {boolean} movePossible Indicates if it was possible to move rows to the desired position.
   * @param {boolean} orderChanged Indicates if order of rows was changed by move.
   */
  "afterRowMove",
  /**
   * Fired by {@link ManualColumnResize} plugin before rendering the table with modified column sizes. This hook is
   * fired when {@link Options#manualColumnResize} option is enabled.
   *
   * @event Hooks#beforeColumnResize
   * @param {number} newSize Calculated new column width.
   * @param {number} column Visual index of the resized column.
   * @param {boolean} isDoubleClick Flag that determines whether there was a double-click.
   * @returns {number} Returns a new column size or `undefined`, if column size should be calculated automatically.
   */
  "beforeColumnResize",
  /**
   * Fired by {@link ManualColumnResize} plugin after rendering the table with modified column sizes. This hook is
   * fired when {@link Options#manualColumnResize} option is enabled.
   *
   * @event Hooks#afterColumnResize
   * @param {number} newSize Calculated new column width.
   * @param {number} column Visual index of the resized column.
   * @param {boolean} isDoubleClick Flag that determines whether there was a double-click.
   */
  "afterColumnResize",
  /**
   * Fired by {@link ManualRowResize} plugin before rendering the table with modified row sizes. This hook is
   * fired when {@link Options#manualRowResize} option is enabled.
   *
   * @event Hooks#beforeRowResize
   * @param {number} newSize Calculated new row height.
   * @param {number} row Visual index of the resized row.
   * @param {boolean} isDoubleClick Flag that determines whether there was a double-click.
   * @returns {number|undefined} Returns the new row size or `undefined` if row size should be calculated automatically.
   */
  "beforeRowResize",
  /**
   * Fired by {@link ManualRowResize} plugin after rendering the table with modified row sizes. This hook is
   * fired when {@link Options#manualRowResize} option is enabled.
   *
   * @event Hooks#afterRowResize
   * @param {number} newSize Calculated new row height.
   * @param {number} row Visual index of the resized row.
   * @param {boolean} isDoubleClick Flag that determines whether there was a double-click.
   */
  "afterRowResize",
  /**
   * Fired after getting the column header renderers.
   *
   * @event Hooks#afterGetColumnHeaderRenderers
   * @param {Function[]} renderers An array of the column header renderers.
   */
  "afterGetColumnHeaderRenderers",
  /**
   * Fired after getting the row header renderers.
   *
   * @event Hooks#afterGetRowHeaderRenderers
   * @param {Function[]} renderers An array of the row header renderers.
   */
  "afterGetRowHeaderRenderers",
  /**
   * Fired before applying stretched column width to column.
   *
   * @event Hooks#beforeStretchingColumnWidth
   * @param {number} stretchedWidth Calculated width.
   * @param {number} column Visual column index.
   * @returns {number|undefined} Returns new width which will be applied to the column element.
   */
  "beforeStretchingColumnWidth",
  /**
   * Fired by the [`Filters`](@/api/filters.md) plugin,
   * before a [column filter](@/guides/columns/column-filter.md) gets applied.
   *
   * [`beforeFilter`](#beforefilter) takes one argument (`conditionsStack`), which is an array of objects.
   * Each object represents one of your [column filters](@/api/filters.md#addcondition),
   * and consists of the following properties:
   *
   * | Property     | Possible values                                                         | Description                                                                                                              |
   * | ------------ | ----------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------ |
   * | `column`     | Number                                                                  | A visual index of the column to which the filter will be applied.                                                        |
   * | `conditions` | Array of objects                                                        | Each object represents one condition. For details, see [`addCondition()`](@/api/filters.md#addcondition).                |
   * | `operation`  | `'conjunction'` \| `'disjunction'` \| `'disjunctionWithExtraCondition'` | An operation to perform on your set of `conditions`. For details, see [`addCondition()`](@/api/filters.md#addcondition). |
   *
   * An example of the format of the `conditionsStack` argument:
   *
   * ```js
   * [
   *   {
   *     column: 2,
   *     conditions: [
   *       {name: 'begins_with', args: [['S']]}
   *     ],
   *     operation: 'conjunction'
   *   },
   *   {
   *     column: 4,
   *     conditions: [
   *       {name: 'not_empty', args: []}
   *     ],
   *     operation: 'conjunction'
   *   },
   * ]
   * ```
   *
   * To perform server-side filtering (i.e., to not apply filtering to Handsontable's UI),
   * set [`beforeFilter`](#beforefilter) to return `false`:
   *
   * ```js
   * new Handsontable(document.getElementById('example'), {
   *   beforeFilter: (conditionsStack) => {
   *     return false;
   *   }
   * });
   *```
   *
   * Read more:
   * - [Guides: Column filter](@/guides/columns/column-filter.md)
   * - [Hooks: `afterFilter`](#afterfilter)
   * - [Options: `filters`](@/api/options.md#filters)
   * - [Plugins: `Filters`](@/api/filters.md)
   * – [Plugin methods: `addCondition()`](@/api/filters.md#addcondition)
   *
   * @event Hooks#beforeFilter
   * @param {object[]} conditionsStack An array of objects with your [column filters](@/api/filters.md#addcondition).
   * @returns {boolean} To perform server-side filtering (i.e., to not apply filtering to Handsontable's UI), return `false`.
   */
  "beforeFilter",
  /**
   * Fired by the [`Filters`](@/api/filters.md) plugin,
   * after a [column filter](@/guides/columns/column-filter.md) gets applied.
   *
   * [`afterFilter`](#afterfilter) takes one argument (`conditionsStack`), which is an array of objects.
   * Each object represents one of your [column filters](@/api/filters.md#addcondition),
   * and consists of the following properties:
   *
   * | Property     | Possible values                                                         | Description                                                                                                              |
   * | ------------ | ----------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------ |
   * | `column`     | Number                                                                  | A visual index of the column to which the filter was applied.                                                            |
   * | `conditions` | Array of objects                                                        | Each object represents one condition. For details, see [`addCondition()`](@/api/filters.md#addcondition).                |
   * | `operation`  | `'conjunction'` \| `'disjunction'` \| `'disjunctionWithExtraCondition'` | An operation to perform on your set of `conditions`. For details, see [`addCondition()`](@/api/filters.md#addcondition). |
   *
   * An example of the format of the `conditionsStack` argument:
   *
   * ```js
   * [
   *   {
   *     column: 2,
   *     conditions: [
   *       {name: 'begins_with', args: [['S']]}
   *     ],
   *     operation: 'conjunction'
   *   },
   *   {
   *     column: 4,
   *     conditions: [
   *       {name: 'not_empty', args: []}
   *     ],
   *     operation: 'conjunction'
   *   },
   * ]
   * ```
   *
   * Read more:
   * - [Guides: Column filter](@/guides/columns/column-filter.md)
   * - [Hooks: `beforeFilter`](#beforefilter)
   * - [Options: `filters`](@/api/options.md#filters)
   * - [Plugins: `Filters`](@/api/filters.md)
   * – [Plugin methods: `addCondition()`](@/api/filters.md#addcondition)
   *
   * @event Hooks#afterFilter
   * @param {object[]} conditionsStack An array of objects with your [column filters](@/api/filters.md#addcondition).
   */
  "afterFilter",
  /**
   * Fired by the {@link Formulas} plugin, when any cell value changes.
   *
   * Returns an array of objects that contains:
   * - The addresses (`sheet`, `row`, `col`) and new values (`newValue`) of the changed cells.
   * - The addresses and new values of any cells that had to be recalculated (because their formulas depend on the cells that changed).
   *
   * This hook gets also fired on Handsontable's initialization, returning the addresses and values of all cells.
   *
   * Read more:
   * - [Guides: Formula calculation](@/guides/formulas/formula-calculation.md)
   * - [HyperFormula documentation: `valuesUpdated`](https://hyperformula.handsontable.com/api/interfaces/listeners.html#valuesupdated)
   *
   * @since 9.0.0
   * @event Hooks#afterFormulasValuesUpdate
   * @param {Array} changes The addresses and new values of all the changed and recalculated cells.
   */
  "afterFormulasValuesUpdate",
  /**
   * Fired when a named expression is added to the Formulas' engine instance.
   *
   * @since 9.0.0
   * @event Hooks#afterNamedExpressionAdded
   * @param {string} namedExpressionName The name of the added expression.
   * @param {Array} changes The values and location of applied changes.
   */
  "afterNamedExpressionAdded",
  /**
   * Fired when a named expression is removed from the Formulas' engine instance.
   *
   * @since 9.0.0
   * @event Hooks#afterNamedExpressionRemoved
   * @param {string} namedExpressionName The name of the removed expression.
   * @param {Array} changes The values and location of applied changes.
   */
  "afterNamedExpressionRemoved",
  /**
   * Fired when a new sheet is added to the Formulas' engine instance.
   *
   * @since 9.0.0
   * @event Hooks#afterSheetAdded
   * @param {string} addedSheetDisplayName The name of the added sheet.
   */
  "afterSheetAdded",
  /**
   * Fired when a sheet in the Formulas' engine instance is renamed.
   *
   * @since 9.0.0
   * @event Hooks#afterSheetRenamed
   * @param {string} oldDisplayName The old name of the sheet.
   * @param {string} newDisplayName The new name of the sheet.
   */
  "afterSheetRenamed",
  /**
   * Fired when a sheet is removed from the Formulas' engine instance.
   *
   * @since 9.0.0
   * @event Hooks#afterSheetRemoved
   * @param {string} removedSheetDisplayName The removed sheet name.
   * @param {Array} changes The values and location of applied changes.
   */
  "afterSheetRemoved",
  /**
   * Fired while retrieving the column header height.
   *
   * @event Hooks#modifyColumnHeaderHeight
   */
  "modifyColumnHeaderHeight",
  /**
   * Fired while retrieving a column header's value.
   *
   * @since 12.3.0
   * @event Hooks#modifyColumnHeaderValue
   * @param {string} value A column header value.
   * @param {number} visualColumnIndex A visual column index.
   * @param {number} [headerLevel=0] Header level index. Accepts positive (0 to n)
   *                                 and negative (-1 to -n) values. For positive values, 0 points to the
   *                                 topmost header. For negative values, -1 points to the bottom-most
   *                                 header (the header closest to the cells).
   * @returns {string} The column header value to be updated.
   */
  "modifyColumnHeaderValue",
  /**
   * Fired by {@link UndoRedo} plugin before the undo action. Contains information about the action that is being undone.
   * This hook is fired when {@link Options#undo} option is enabled.
   *
   * @event Hooks#beforeUndo
   * @param {object} action The action object. Contains information about the action being undone. The `actionType`
   *                        property of the object specifies the type of the action in a String format. (e.g. `'remove_row'`).
   * @returns {*|boolean} If false is returned the action is canceled.
   */
  "beforeUndo",
  /**
   * Fired by {@link UndoRedo} plugin before changing undo stack.
   *
   * @event Hooks#beforeUndoStackChange
   * @since 8.4.0
   * @param {Array} doneActions Stack of actions which may be undone.
   * @param {string} [source] String that identifies source of action
   *                          ([list of all available sources](@/guides/getting-started/events-and-hooks.md#definition-for-source-argument)).
   * @returns {*|boolean} If false is returned the action of changing undo stack is canceled.
   */
  "beforeUndoStackChange",
  /**
   * Fired by {@link UndoRedo} plugin after the undo action. Contains information about the action that is being undone.
   * This hook is fired when {@link Options#undo} option is enabled.
   *
   * @event Hooks#afterUndo
   * @param {object} action The action object. Contains information about the action being undone. The `actionType`
   *                        property of the object specifies the type of the action in a String format. (e.g. `'remove_row'`).
   */
  "afterUndo",
  /**
   * Fired by {@link UndoRedo} plugin after changing undo stack.
   *
   * @event Hooks#afterUndoStackChange
   * @since 8.4.0
   * @param {Array} doneActionsBefore Stack of actions which could be undone before performing new action.
   * @param {Array} doneActionsAfter Stack of actions which can be undone after performing new action.
   */
  "afterUndoStackChange",
  /**
   * Fired by {@link UndoRedo} plugin before the redo action. Contains information about the action that is being redone.
   * This hook is fired when {@link Options#undo} option is enabled.
   *
   * @event Hooks#beforeRedo
   * @param {object} action The action object. Contains information about the action being redone. The `actionType`
   *                        property of the object specifies the type of the action in a String format (e.g. `'remove_row'`).
   * @returns {*|boolean} If false is returned the action is canceled.
   */
  "beforeRedo",
  /**
   * Fired by {@link UndoRedo} plugin before changing redo stack.
   *
   * @event Hooks#beforeRedoStackChange
   * @since 8.4.0
   * @param {Array} undoneActions Stack of actions which may be redone.
   */
  "beforeRedoStackChange",
  /**
   * Fired by {@link UndoRedo} plugin after the redo action. Contains information about the action that is being redone.
   * This hook is fired when {@link Options#undo} option is enabled.
   *
   * @event Hooks#afterRedo
   * @param {object} action The action object. Contains information about the action being redone. The `actionType`
   *                        property of the object specifies the type of the action in a String format (e.g. `'remove_row'`).
   */
  "afterRedo",
  /**
   * Fired by {@link UndoRedo} plugin after changing redo stack.
   *
   * @event Hooks#afterRedoStackChange
   * @since 8.4.0
   * @param {Array} undoneActionsBefore Stack of actions which could be redone before performing new action.
   * @param {Array} undoneActionsAfter Stack of actions which can be redone after performing new action.
   */
  "afterRedoStackChange",
  /**
   * Fired while retrieving the row header width.
   *
   * @event Hooks#modifyRowHeaderWidth
   * @param {number} rowHeaderWidth Row header width.
   */
  "modifyRowHeaderWidth",
  /**
   * Fired when the start of the selection is being modified (e.g. Moving the selection with the arrow keys).
   *
   * @event Hooks#modifyTransformStart
   * @param {CellCoords} delta Cell coords object declaring the delta of the new selection relative to the previous one.
   */
  "modifyTransformStart",
  /**
   * Fired when the end of the selection is being modified (e.g. Moving the selection with the arrow keys).
   *
   * @event Hooks#modifyTransformEnd
   * @param {CellCoords} delta Cell coords object declaring the delta of the new selection relative to the previous one.
   */
  "modifyTransformEnd",
  /**
   * Fired after the start of the selection is being modified (e.g. Moving the selection with the arrow keys).
   *
   * @event Hooks#afterModifyTransformStart
   * @param {CellCoords} coords Coords of the freshly selected cell.
   * @param {number} rowTransformDir `-1` if trying to select a cell with a negative row index. `0` otherwise.
   * @param {number} colTransformDir `-1` if trying to select a cell with a negative column index. `0` otherwise.
   */
  "afterModifyTransformStart",
  /**
   * Fired after the end of the selection is being modified (e.g. Moving the selection with the arrow keys).
   *
   * @event Hooks#afterModifyTransformEnd
   * @param {CellCoords} coords Visual coords of the freshly selected cell.
   * @param {number} rowTransformDir `-1` if trying to select a cell with a negative row index. `0` otherwise.
   * @param {number} colTransformDir `-1` if trying to select a cell with a negative column index. `0` otherwise.
   */
  "afterModifyTransformEnd",
  /**
   * Fired inside the `viewportRowCalculatorOverride` method. Allows modifying the row calculator parameters.
   *
   * @event Hooks#afterViewportRowCalculatorOverride
   * @param {object} calc The row calculator.
   */
  "afterViewportRowCalculatorOverride",
  /**
   * Fired inside the `viewportColumnCalculatorOverride` method. Allows modifying the row calculator parameters.
   *
   * @event Hooks#afterViewportColumnCalculatorOverride
   * @param {object} calc The row calculator.
   */
  "afterViewportColumnCalculatorOverride",
  /**
   * Fired after initializing all the plugins.
   * This hook should be added before Handsontable is initialized.
   *
   * @event Hooks#afterPluginsInitialized
   *
   * @example
   * ```js
   * Handsontable.hooks.add('afterPluginsInitialized', myCallback);
   * ```
   */
  "afterPluginsInitialized",
  /**
   * Fired by {@link HiddenRows} plugin before marking the rows as hidden. Fired only if the {@link Options#hiddenRows} option is enabled.
   * Returning `false` in the callback will prevent the hiding action from completing.
   *
   * @event Hooks#beforeHideRows
   * @param {Array} currentHideConfig Current hide configuration - a list of hidden physical row indexes.
   * @param {Array} destinationHideConfig Destination hide configuration - a list of hidden physical row indexes.
   * @param {boolean} actionPossible `true`, if provided row indexes are valid, `false` otherwise.
   * @returns {undefined|boolean} If the callback returns `false`, the hiding action will not be completed.
   */
  "beforeHideRows",
  /**
   * Fired by {@link HiddenRows} plugin after marking the rows as hidden. Fired only if the {@link Options#hiddenRows} option is enabled.
   *
   * @event Hooks#afterHideRows
   * @param {Array} currentHideConfig Current hide configuration - a list of hidden physical row indexes.
   * @param {Array} destinationHideConfig Destination hide configuration - a list of hidden physical row indexes.
   * @param {boolean} actionPossible `true`, if provided row indexes are valid, `false` otherwise.
   * @param {boolean} stateChanged `true`, if the action affected any non-hidden rows, `false` otherwise.
   */
  "afterHideRows",
  /**
   * Fired by {@link HiddenRows} plugin before marking the rows as not hidden. Fired only if the {@link Options#hiddenRows} option is enabled.
   * Returning `false` in the callback will prevent the row revealing action from completing.
   *
   * @event Hooks#beforeUnhideRows
   * @param {Array} currentHideConfig Current hide configuration - a list of hidden physical row indexes.
   * @param {Array} destinationHideConfig Destination hide configuration - a list of hidden physical row indexes.
   * @param {boolean} actionPossible `true`, if provided row indexes are valid, `false` otherwise.
   * @returns {undefined|boolean} If the callback returns `false`, the revealing action will not be completed.
   */
  "beforeUnhideRows",
  /**
   * Fired by {@link HiddenRows} plugin after marking the rows as not hidden. Fired only if the {@link Options#hiddenRows} option is enabled.
   *
   * @event Hooks#afterUnhideRows
   * @param {Array} currentHideConfig Current hide configuration - a list of hidden physical row indexes.
   * @param {Array} destinationHideConfig Destination hide configuration - a list of hidden physical row indexes.
   * @param {boolean} actionPossible `true`, if provided row indexes are valid, `false` otherwise.
   * @param {boolean} stateChanged `true`, if the action affected any hidden rows, `false` otherwise.
   */
  "afterUnhideRows",
  /**
   * Fired by {@link HiddenColumns} plugin before marking the columns as hidden. Fired only if the {@link Options#hiddenColumns} option is enabled.
   * Returning `false` in the callback will prevent the hiding action from completing.
   *
   * @event Hooks#beforeHideColumns
   * @param {Array} currentHideConfig Current hide configuration - a list of hidden physical column indexes.
   * @param {Array} destinationHideConfig Destination hide configuration - a list of hidden physical column indexes.
   * @param {boolean} actionPossible `true`, if the provided column indexes are valid, `false` otherwise.
   * @returns {undefined|boolean} If the callback returns `false`, the hiding action will not be completed.
   */
  "beforeHideColumns",
  /**
   * Fired by {@link HiddenColumns} plugin after marking the columns as hidden. Fired only if the {@link Options#hiddenColumns} option is enabled.
   *
   * @event Hooks#afterHideColumns
   * @param {Array} currentHideConfig Current hide configuration - a list of hidden physical column indexes.
   * @param {Array} destinationHideConfig Destination hide configuration - a list of hidden physical column indexes.
   * @param {boolean} actionPossible `true`, if the provided column indexes are valid, `false` otherwise.
   * @param {boolean} stateChanged `true`, if the action affected any non-hidden columns, `false` otherwise.
   */
  "afterHideColumns",
  /**
   * Fired by {@link HiddenColumns} plugin before marking the columns as not hidden. Fired only if the {@link Options#hiddenColumns} option is enabled.
   * Returning `false` in the callback will prevent the column revealing action from completing.
   *
   * @event Hooks#beforeUnhideColumns
   * @param {Array} currentHideConfig Current hide configuration - a list of hidden physical column indexes.
   * @param {Array} destinationHideConfig Destination hide configuration - a list of hidden physical column indexes.
   * @param {boolean} actionPossible `true`, if the provided column indexes are valid, `false` otherwise.
   * @returns {undefined|boolean} If the callback returns `false`, the hiding action will not be completed.
   */
  "beforeUnhideColumns",
  /**
   * Fired by {@link HiddenColumns} plugin after marking the columns as not hidden. Fired only if the {@link Options#hiddenColumns} option is enabled.
   *
   * @event Hooks#afterUnhideColumns
   * @param {Array} currentHideConfig Current hide configuration - a list of hidden physical column indexes.
   * @param {Array} destinationHideConfig Destination hide configuration - a list of hidden physical column indexes.
   * @param {boolean} actionPossible `true`, if the provided column indexes are valid, `false` otherwise.
   * @param {boolean} stateChanged `true`, if the action affected any hidden columns, `false` otherwise.
   */
  "afterUnhideColumns",
  /**
   * Fired by {@link TrimRows} plugin before trimming rows. This hook is fired when {@link Options#trimRows} option is enabled.
   *
   * @event Hooks#beforeTrimRow
   * @param {Array} currentTrimConfig Current trim configuration - a list of trimmed physical row indexes.
   * @param {Array} destinationTrimConfig Destination trim configuration - a list of trimmed physical row indexes.
   * @param {boolean} actionPossible `true`, if all of the row indexes are withing the bounds of the table, `false` otherwise.
   * @returns {undefined|boolean} If the callback returns `false`, the trimming action will not be completed.
   */
  "beforeTrimRow",
  /**
   * Fired by {@link TrimRows} plugin after trimming rows. This hook is fired when {@link Options#trimRows} option is enabled.
   *
   * @event Hooks#afterTrimRow
   * @param {Array} currentTrimConfig Current trim configuration - a list of trimmed physical row indexes.
   * @param {Array} destinationTrimConfig Destination trim configuration - a list of trimmed physical row indexes.
   * @param {boolean} actionPossible `true`, if all of the row indexes are withing the bounds of the table, `false` otherwise.
   * @param {boolean} stateChanged `true`, if the action affected any non-trimmed rows, `false` otherwise.
   * @returns {undefined|boolean} If the callback returns `false`, the trimming action will not be completed.
   */
  "afterTrimRow",
  /**
   * Fired by {@link TrimRows} plugin before untrimming rows. This hook is fired when {@link Options#trimRows} option is enabled.
   *
   * @event Hooks#beforeUntrimRow
   * @param {Array} currentTrimConfig Current trim configuration - a list of trimmed physical row indexes.
   * @param {Array} destinationTrimConfig Destination trim configuration - a list of trimmed physical row indexes.
   * @param {boolean} actionPossible `true`, if all of the row indexes are withing the bounds of the table, `false` otherwise.
   * @returns {undefined|boolean} If the callback returns `false`, the untrimming action will not be completed.
   */
  "beforeUntrimRow",
  /**
   * Fired by {@link TrimRows} plugin after untrimming rows. This hook is fired when {@link Options#trimRows} option is enabled.
   *
   * @event Hooks#afterUntrimRow
   * @param {Array} currentTrimConfig Current trim configuration - a list of trimmed physical row indexes.
   * @param {Array} destinationTrimConfig Destination trim configuration - a list of trimmed physical row indexes.
   * @param {boolean} actionPossible `true`, if all of the row indexes are withing the bounds of the table, `false` otherwise.
   * @param {boolean} stateChanged `true`, if the action affected any trimmed rows, `false` otherwise.
   * @returns {undefined|boolean} If the callback returns `false`, the untrimming action will not be completed.
   */
  "afterUntrimRow",
  /**
   * Fired by {@link DropdownMenu} plugin before opening the dropdown menu. This hook is fired when {@link Options#dropdownMenu}
   * option is enabled.
   *
   * @event Hooks#beforeDropdownMenuShow
   * @param {DropdownMenu} dropdownMenu The DropdownMenu instance.
   */
  "beforeDropdownMenuShow",
  /**
   * Fired by {@link DropdownMenu} plugin after opening the Dropdown Menu. This hook is fired when {@link Options#dropdownMenu}
   * option is enabled.
   *
   * @event Hooks#afterDropdownMenuShow
   * @param {DropdownMenu} dropdownMenu The DropdownMenu instance.
   */
  "afterDropdownMenuShow",
  /**
   * Fired by {@link DropdownMenu} plugin after hiding the Dropdown Menu. This hook is fired when {@link Options#dropdownMenu}
   * option is enabled.
   *
   * @event Hooks#afterDropdownMenuHide
   * @param {DropdownMenu} instance The DropdownMenu instance.
   */
  "afterDropdownMenuHide",
  /**
   * Fired by {@link NestedRows} plugin before adding a children to the NestedRows structure. This hook is fired when
   * {@link Options#nestedRows} option is enabled.
   *
   * @event Hooks#beforeAddChild
   * @param {object} parent The parent object.
   * @param {object|undefined} element The element added as a child. If `undefined`, a blank child was added.
   * @param {number|undefined} index The index within the parent where the new child was added. If `undefined`, the element was added as the last child.
   */
  "beforeAddChild",
  /**
   * Fired by {@link NestedRows} plugin after adding a children to the NestedRows structure. This hook is fired when
   * {@link Options#nestedRows} option is enabled.
   *
   * @event Hooks#afterAddChild
   * @param {object} parent The parent object.
   * @param {object|undefined} element The element added as a child. If `undefined`, a blank child was added.
   * @param {number|undefined} index The index within the parent where the new child was added. If `undefined`, the element was added as the last child.
   */
  "afterAddChild",
  /**
   * Fired by {@link NestedRows} plugin before detaching a child from its parent. This hook is fired when
   * {@link Options#nestedRows} option is enabled.
   *
   * @event Hooks#beforeDetachChild
   * @param {object} parent An object representing the parent from which the element is to be detached.
   * @param {object} element The detached element.
   */
  "beforeDetachChild",
  /**
   * Fired by {@link NestedRows} plugin after detaching a child from its parent. This hook is fired when
   * {@link Options#nestedRows} option is enabled.
   *
   * @event Hooks#afterDetachChild
   * @param {object} parent An object representing the parent from which the element was detached.
   * @param {object} element The detached element.
   * @param {number} finalElementPosition The final row index of the detached element.
   */
  "afterDetachChild",
  /**
   * Fired after the editor is opened and rendered.
   *
   * @event Hooks#afterBeginEditing
   * @param {number} row Visual row index of the edited cell.
   * @param {number} column Visual column index of the edited cell.
   */
  "afterBeginEditing",
  /**
   * Fired by {@link MergeCells} plugin before cell merging. This hook is fired when {@link Options#mergeCells}
   * option is enabled.
   *
   * @event Hooks#beforeMergeCells
   * @param {CellRange} cellRange Selection cell range.
   * @param {boolean} [auto=false] `true` if called automatically by the plugin.
   */
  "beforeMergeCells",
  /**
   * Fired by {@link MergeCells} plugin after cell merging. This hook is fired when {@link Options#mergeCells}
   * option is enabled.
   *
   * @event Hooks#afterMergeCells
   * @param {CellRange} cellRange Selection cell range.
   * @param {object} mergeParent The parent collection of the provided cell range.
   * @param {boolean} [auto=false] `true` if called automatically by the plugin.
   */
  "afterMergeCells",
  /**
   * Fired by {@link MergeCells} plugin before unmerging the cells. This hook is fired when {@link Options#mergeCells}
   * option is enabled.
   *
   * @event Hooks#beforeUnmergeCells
   * @param {CellRange} cellRange Selection cell range.
   * @param {boolean} [auto=false] `true` if called automatically by the plugin.
   */
  "beforeUnmergeCells",
  /**
   * Fired by {@link MergeCells} plugin after unmerging the cells. This hook is fired when {@link Options#mergeCells}
   * option is enabled.
   *
   * @event Hooks#afterUnmergeCells
   * @param {CellRange} cellRange Selection cell range.
   * @param {boolean} [auto=false] `true` if called automatically by the plugin.
   */
  "afterUnmergeCells",
  /**
   * Fired after the table was switched into listening mode. This allows Handsontable to capture keyboard events and
   * respond in the right way.
   *
   * @event Hooks#afterListen
   */
  "afterListen",
  /**
   * Fired after the table was switched off from the listening mode. This makes the Handsontable inert for any
   * keyboard events.
   *
   * @event Hooks#afterUnlisten
   */
  "afterUnlisten",
  /**
   * Fired after the window was resized or the size of the Handsontable root element was changed.
   *
   * @event Hooks#afterRefreshDimensions
   * @param {object} previousDimensions Previous dimensions of the container.
   * @param {object} currentDimensions Current dimensions of the container.
   * @param {boolean} stateChanged `true`, if the container was re-render, `false` otherwise.
   */
  "afterRefreshDimensions",
  /**
   * Cancellable hook, called after resizing a window or after detecting size change of the
   * Handsontable root element, but before redrawing a table.
   *
   * @event Hooks#beforeRefreshDimensions
   * @param {object} previousDimensions Previous dimensions of the container.
   * @param {object} currentDimensions Current dimensions of the container.
   * @param {boolean} actionPossible `true`, if current and previous dimensions are different, `false` otherwise.
   * @returns {undefined|boolean} If the callback returns `false`, the refresh action will not be completed.
   */
  "beforeRefreshDimensions",
  /**
   * Fired by {@link CollapsibleColumns} plugin before columns collapse. This hook is fired when {@link Options#collapsibleColumns} option is enabled.
   *
   * @event Hooks#beforeColumnCollapse
   * @since 8.0.0
   * @param {Array} currentCollapsedColumns Current collapsible configuration - a list of collapsible physical column indexes.
   * @param {Array} destinationCollapsedColumns Destination collapsible configuration - a list of collapsible physical column indexes.
   * @param {boolean} collapsePossible `true`, if all of the column indexes are withing the bounds of the collapsed sections, `false` otherwise.
   * @returns {undefined|boolean} If the callback returns `false`, the collapsing action will not be completed.
   */
  "beforeColumnCollapse",
  /**
   * Fired by {@link CollapsibleColumns} plugin before columns collapse. This hook is fired when {@link Options#collapsibleColumns} option is enabled.
   *
   * @event Hooks#afterColumnCollapse
   * @since 8.0.0
   * @param {Array} currentCollapsedColumns Current collapsible configuration - a list of collapsible physical column indexes.
   * @param {Array} destinationCollapsedColumns Destination collapsible configuration - a list of collapsible physical column indexes.
   * @param {boolean} collapsePossible `true`, if all of the column indexes are withing the bounds of the collapsed sections, `false` otherwise.
   * @param {boolean} successfullyCollapsed `true`, if the action affected any non-collapsible column, `false` otherwise.
   */
  "afterColumnCollapse",
  /**
   * Fired by {@link CollapsibleColumns} plugin before columns expand. This hook is fired when {@link Options#collapsibleColumns} option is enabled.
   *
   * @event Hooks#beforeColumnExpand
   * @since 8.0.0
   * @param {Array} currentCollapsedColumns Current collapsible configuration - a list of collapsible physical column indexes.
   * @param {Array} destinationCollapsedColumns Destination collapsible configuration - a list of collapsible physical column indexes.
   * @param {boolean} expandPossible `true`, if all of the column indexes are withing the bounds of the collapsed sections, `false` otherwise.
   * @returns {undefined|boolean} If the callback returns `false`, the expanding action will not be completed.
   */
  "beforeColumnExpand",
  /**
   * Fired by {@link CollapsibleColumns} plugin before columns expand. This hook is fired when {@link Options#collapsibleColumns} option is enabled.
   *
   * @event Hooks#afterColumnExpand
   * @since 8.0.0
   * @param {Array} currentCollapsedColumns Current collapsible configuration - a list of collapsible physical column indexes.
   * @param {Array} destinationCollapsedColumns Destination collapsible configuration - a list of collapsible physical column indexes.
   * @param {boolean} expandPossible `true`, if all of the column indexes are withing the bounds of the collapsed sections, `false` otherwise.
   * @param {boolean} successfullyExpanded `true`, if the action affected any non-collapsible column, `false` otherwise.
   */
  "afterColumnExpand",
  /**
   * Fired by {@link AutoColumnSize} plugin within SampleGenerator utility.
   *
   * @event Hooks#modifyAutoColumnSizeSeed
   * @since 8.4.0
   * @param {string|undefined} seed Seed ID, unique name to categorize samples.
   * @param {object} cellProperties Object containing the cell properties.
   * @param {*} cellValue Value of the cell.
   */
  "modifyAutoColumnSizeSeed"
], AL = ut`The plugin hook "[hookName]" was removed in Handsontable [removedInVersion].\x20
  Please consult release notes https://github.com/handsontable/handsontable/releases/tag/[removedInVersion] to\x20
  learn about the migration path.`, yu = /* @__PURE__ */ new Map([["modifyRow", "8.0.0"], ["modifyCol", "8.0.0"], ["unmodifyRow", "8.0.0"], ["unmodifyCol", "8.0.0"], ["skipLengthCache", "8.0.0"], ["hiddenColumn", "8.0.0"], ["hiddenRow", "8.0.0"]]), Su = /* @__PURE__ */ new Map([]);
class Kb {
  static getSingleton() {
    return DL();
  }
  /**
   *
   */
  constructor() {
    this.globalBucket = this.createEmptyBucket();
  }
  /**
   * Returns a new object with empty handlers related to every registered hook name.
   *
   * @returns {object} The empty bucket object.
   *
   * @example
   * ```js
   * Handsontable.hooks.createEmptyBucket();
   * // Results:
   * {
   * ...
   * afterCreateCol: [],
   * afterCreateRow: [],
   * beforeInit: [],
   * ...
   * }
   * ```
   */
  createEmptyBucket() {
    const e = /* @__PURE__ */ Object.create(null);
    return D(Co, (t) => e[t] = []), e;
  }
  /**
   * Get hook bucket based on the context of the object or if argument is `undefined`, get the global hook bucket.
   *
   * @param {object} [context=null] A Handsontable instance.
   * @returns {object} Returns a global or Handsontable instance bucket.
   */
  getBucket() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
    return e ? (e.pluginHookBucket || (e.pluginHookBucket = this.createEmptyBucket()), e.pluginHookBucket) : this.globalBucket;
  }
  /**
   * Adds a listener (globally or locally) to a specified hook name.
   * If the `context` parameter is provided, the hook will be added only to the instance it references.
   * Otherwise, the callback will be used everytime the hook fires on any Handsontable instance.
   * You can provide an array of callback functions as the `callback` argument, this way they will all be fired
   * once the hook is triggered.
   *
   * @see Core#addHook
   * @param {string} key Hook name.
   * @param {Function|Array} callback Callback function or an array of functions.
   * @param {object} [context=null] The context for the hook callback to be added - a Handsontable instance or leave empty.
   * @returns {Hooks} Instance of Hooks.
   *
   * @example
   * ```js
   * // single callback, added locally
   * Handsontable.hooks.add('beforeInit', myCallback, hotInstance);
   *
   * // single callback, added globally
   * Handsontable.hooks.add('beforeInit', myCallback);
   *
   * // multiple callbacks, added locally
   * Handsontable.hooks.add('beforeInit', [myCallback, anotherCallback], hotInstance);
   *
   * // multiple callbacks, added globally
   * Handsontable.hooks.add('beforeInit', [myCallback, anotherCallback]);
   * ```
   */
  add(e, t) {
    let n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
    if (Array.isArray(t))
      D(t, (o) => this.add(e, o, n));
    else {
      yu.has(e) && pt(Db(AL, {
        hookName: e,
        removedInVersion: yu.get(e)
      })), Su.has(e) && pt(Su.get(e));
      const o = this.getBucket(n);
      if (typeof o[e] > "u" && (this.register(e), o[e] = []), t.skip = !1, o[e].indexOf(t) === -1) {
        let r = !1;
        t.initialHook && D(o[e], (a, l) => {
          if (a.initialHook)
            return o[e][l] = t, r = !0, !1;
        }), r || o[e].push(t);
      }
    }
    return this;
  }
  /**
   * Adds a listener to a specified hook. After the hook runs this listener will be automatically removed from the bucket.
   *
   * @see Core#addHookOnce
   * @param {string} key Hook/Event name.
   * @param {Function|Array} callback Callback function.
   * @param {object} [context=null] A Handsontable instance.
   *
   * @example
   * ```js
   * Handsontable.hooks.once('beforeInit', myCallback, hotInstance);
   * ```
   */
  once(e, t) {
    let n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
    Array.isArray(t) ? D(t, (o) => this.once(e, o, n)) : (t.runOnce = !0, this.add(e, t, n));
  }
  /**
   * Removes a listener from a hook with a given name. If the `context` argument is provided, it removes a listener from a local hook assigned to the given Handsontable instance.
   *
   * @see Core#removeHook
   * @param {string} key Hook/Event name.
   * @param {Function} callback Callback function (needs the be the function that was previously added to the hook).
   * @param {object} [context=null] Handsontable instance.
   * @returns {boolean} Returns `true` if hook was removed, `false` otherwise.
   *
   * @example
   * ```js
   * Handsontable.hooks.remove('beforeInit', myCallback);
   * ```
   */
  remove(e, t) {
    let n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
    const o = this.getBucket(n);
    return typeof o[e] < "u" && o[e].indexOf(t) >= 0 ? (t.skip = !0, !0) : !1;
  }
  /**
   * Checks whether there are any registered listeners for the provided hook name.
   * If the `context` parameter is provided, it only checks for listeners assigned to the given Handsontable instance.
   *
   * @param {string} key Hook name.
   * @param {object} [context=null] A Handsontable instance.
   * @returns {boolean} `true` for success, `false` otherwise.
   */
  has(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
    const n = this.getBucket(t);
    return !!(n[e] !== void 0 && n[e].length);
  }
  /**
   * Runs all local and global callbacks assigned to the hook identified by the `key` parameter.
   * It returns either a return value from the last called callback or the first parameter (`p1`) passed to the `run` function.
   *
   * @see Core#runHooks
   * @param {object} context Handsontable instance.
   * @param {string} key Hook/Event name.
   * @param {*} [p1] Parameter to be passed as an argument to the callback function.
   * @param {*} [p2] Parameter to be passed as an argument to the callback function.
   * @param {*} [p3] Parameter to be passed as an argument to the callback function.
   * @param {*} [p4] Parameter to be passed as an argument to the callback function.
   * @param {*} [p5] Parameter to be passed as an argument to the callback function.
   * @param {*} [p6] Parameter to be passed as an argument to the callback function.
   * @returns {*} Either a return value from the last called callback or `p1`.
   *
   * @example
   * ```js
   * Handsontable.hooks.run(hot, 'beforeInit');
   * ```
   */
  run(e, t, n, o, r, a, l, c) {
    {
      const h = this.globalBucket[t], u = h ? h.length : 0;
      let f = 0;
      if (u)
        for (; f < u; ) {
          if (!h[f] || h[f].skip) {
            f += 1;
            continue;
          }
          const g = nf(h[f], e, n, o, r, a, l, c);
          g !== void 0 && (n = g), h[f] && h[f].runOnce && this.remove(t, h[f]), f += 1;
        }
    }
    {
      const h = this.getBucket(e)[t], u = h ? h.length : 0;
      let f = 0;
      if (u)
        for (; f < u; ) {
          if (!h[f] || h[f].skip) {
            f += 1;
            continue;
          }
          const g = nf(h[f], e, n, o, r, a, l, c);
          g !== void 0 && (n = g), h[f] && h[f].runOnce && this.remove(t, h[f], e), f += 1;
        }
    }
    return n;
  }
  /**
   * Destroy all listeners connected to the context. If no context is provided, the global listeners will be destroyed.
   *
   * @param {object} [context=null] A Handsontable instance.
   * @example
   * ```js
   * // destroy the global listeners
   * Handsontable.hooks.destroy();
   *
   * // destroy the local listeners
   * Handsontable.hooks.destroy(hotInstance);
   * ```
   */
  destroy() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
    je(this.getBucket(e), (t, n, o) => o[n].length = 0);
  }
  /**
   * Registers a hook name (adds it to the list of the known hook names). Used by plugins.
   * It is not necessary to call register, but if you use it, your plugin hook will be used returned by
   * the `getRegistered` method. (which itself is used in the [demo](@/guides/getting-started/events-and-hooks.md)).
   *
   * @param {string} key The hook name.
   *
   * @example
   * ```js
   * Handsontable.hooks.register('myHook');
   * ```
   */
  register(e) {
    this.isRegistered(e) || Co.push(e);
  }
  /**
   * Deregisters a hook name (removes it from the list of known hook names).
   *
   * @param {string} key The hook name.
   *
   * @example
   * ```js
   * Handsontable.hooks.deregister('myHook');
   * ```
   */
  deregister(e) {
    this.isRegistered(e) && Co.splice(Co.indexOf(e), 1);
  }
  /**
   * Returns a boolean value depending on if a hook by such name has been removed or deprecated.
   *
   * @param {string} hookName The hook name to check.
   * @returns {boolean} Returns `true` if the provided hook name was marked as deprecated or
   * removed from API, `false` otherwise.
   * @example
   * ```js
   * Handsontable.hooks.isDeprecated('skipLengthCache');
   *
   * // Results:
   * true
   * ```
   */
  isDeprecated(e) {
    return Su.has(e) || yu.has(e);
  }
  /**
   * Returns a boolean depending on if a hook by such name has been registered.
   *
   * @param {string} hookName The hook name to check.
   * @returns {boolean} `true` for success, `false` otherwise.
   * @example
   * ```js
   * Handsontable.hooks.isRegistered('beforeInit');
   *
   * // Results:
   * true
   * ```
   */
  isRegistered(e) {
    return Co.indexOf(e) >= 0;
  }
  /**
   * Returns an array of registered hooks.
   *
   * @returns {Array} An array of registered hooks.
   *
   * @example
   * ```js
   * Handsontable.hooks.getRegistered();
   *
   * // Results:
   * [
   * ...
   *   'beforeInit',
   *   'beforeRender',
   *   'beforeSetRangeEnd',
   *   'beforeDrawBorders',
   *   'beforeChange',
   * ...
   * ]
   * ```
   */
  getRegistered() {
    return Co;
  }
}
const PL = new Kb();
function DL() {
  return PL;
}
const me = Kb, bu = /* @__PURE__ */ new Map();
function Gs() {
  let s = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "common";
  bu.has(s) || bu.set(s, /* @__PURE__ */ new Map());
  const e = bu.get(s);
  function t(l, c) {
    e.set(l, c);
  }
  function n(l) {
    return e.get(l);
  }
  function o(l) {
    return e.has(l);
  }
  function r() {
    return [...e.keys()];
  }
  function a() {
    return [...e.values()];
  }
  return {
    register: t,
    getItem: n,
    hasItem: o,
    getNames: r,
    getValues: a
  };
}
const of = /* @__PURE__ */ new WeakMap(), {
  register: HL,
  getItem: Xb,
  hasItem: qb,
  getNames: O4,
  getValues: A4
} = Gs("editors");
function kL(s) {
  const e = {}, t = s;
  this.getConstructor = function() {
    return s;
  }, this.getInstance = function(n) {
    return n.guid in e || (e[n.guid] = new t(n)), e[n.guid];
  }, me.getSingleton().add("afterDestroy", function() {
    e[this.guid] = null;
  });
}
function Zb(s, e) {
  let t;
  if (typeof s == "function")
    of.get(s) || _s(null, s), t = of.get(s);
  else if (typeof s == "string")
    t = Xb(s);
  else
    throw Error('Only strings and functions can be passed as "editor" parameter');
  if (!t)
    throw Error(`No editor registered under name "${s}"`);
  return t.getInstance(e);
}
function kC(s) {
  if (typeof s == "function")
    return s;
  if (!qb(s))
    throw Error(`No registered editor found under "${s}" name`);
  return Xb(s).getConstructor();
}
function _s(s, e) {
  s && typeof s != "string" && (e = s, s = e.EDITOR_TYPE);
  const t = new kL(e);
  typeof s == "string" && HL(s, t), of.set(e, t);
}
class NL {
  /**
   * @param {object} [context=null] An object to which event listeners will be stored.
   * @private
   */
  constructor() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
    this.context = e || this, this.context.eventListeners || (this.context.eventListeners = []);
  }
  /**
   * Register specified listener (`eventName`) to the element.
   *
   * @param {Element} element Target element.
   * @param {string} eventName Event name.
   * @param {Function} callback Function which will be called after event occur.
   * @param {AddEventListenerOptions|boolean} [options] Listener options if object or useCapture if boolean.
   * @returns {Function} Returns function which you can easily call to remove that event.
   */
  addEventListener(e, t, n) {
    let o = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : !1;
    function r(a) {
      n.call(this, LL(a));
    }
    return this.context.eventListeners.push({
      element: e,
      event: t,
      callback: n,
      callbackProxy: r,
      options: o,
      eventManager: this
    }), e.addEventListener(t, r, o), () => {
      this.removeEventListener(e, t, n);
    };
  }
  /**
   * Remove the event listener previously registered.
   *
   * @param {Element} element Target element.
   * @param {string} eventName Event name.
   * @param {Function} callback Function to remove from the event target. It must be the same as during registration listener.
   * @param {boolean} [onlyOwnEvents] Whether whould remove only events registered using this instance of EventManager.
   */
  removeEventListener(e, t, n) {
    let o = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : !1, r = this.context.eventListeners.length, a;
    for (; r; )
      if (r -= 1, a = this.context.eventListeners[r], a.event === t && a.element === e) {
        if (n && n !== a.callback || o && a.eventManager !== this)
          continue;
        this.context.eventListeners.splice(r, 1), a.element.removeEventListener(a.event, a.callbackProxy, a.options);
      }
  }
  /**
   * Clear all previously registered events.
   *
   * @private
   * @since 0.15.0-beta3
   * @param {boolean} [onlyOwnEvents] Whether whould remove only events registered using this instance of EventManager.
   */
  clearEvents() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
    if (!this.context)
      return;
    let t = this.context.eventListeners.length;
    for (; t; ) {
      t -= 1;
      const n = this.context.eventListeners[t];
      e && n.eventManager !== this || (this.context.eventListeners.splice(t, 1), n.element.removeEventListener(n.event, n.callbackProxy, n.options));
    }
  }
  /**
   * Clear all previously registered events.
   */
  clear() {
    this.clearEvents();
  }
  /**
   * Destroy instance of EventManager, clearing all events of the context.
   */
  destroy() {
    this.clearEvents(), this.context = null;
  }
  /**
   * Destroy instance of EventManager, clearing only the own events.
   */
  destroyWithOwnEventsOnly() {
    this.clearEvents(!0), this.context = null;
  }
  /**
   * Trigger event at the specified target element.
   *
   * @param {Element} element Target element.
   * @param {string} eventName Event name.
   */
  fireEvent(e, t) {
    let n = e.document, o = e;
    n || (n = e.ownerDocument ? e.ownerDocument : e, o = n.defaultView);
    const r = {
      bubbles: !0,
      cancelable: t !== "mousemove",
      view: o,
      detail: 0,
      screenX: 0,
      screenY: 0,
      clientX: 1,
      clientY: 1,
      ctrlKey: !1,
      altKey: !1,
      shiftKey: !1,
      metaKey: !1,
      button: 0,
      relatedTarget: void 0
    };
    let a;
    n.createEvent ? (a = n.createEvent("MouseEvents"), a.initMouseEvent(t, r.bubbles, r.cancelable, r.view, r.detail, r.screenX, r.screenY, r.clientX, r.clientY, r.ctrlKey, r.altKey, r.shiftKey, r.metaKey, r.button, n.body.parentNode)) : a = n.createEventObject(), e.dispatchEvent ? e.dispatchEvent(a) : e.fireEvent(`on${t}`, a);
  }
}
function LL(s) {
  const e = s.stopImmediatePropagation;
  return s.stopImmediatePropagation = function() {
    e.apply(this), Rn(this);
  }, s;
}
const Dt = NL, ch = "editorManager.navigation", Qr = "editorManager.handlingEditor";
class rf {
  /**
   * @param {Core} instance The Handsontable instance.
   * @param {TableMeta} tableMeta The table meta instance.
   * @param {Selection} selection The selection instance.
   */
  constructor(e, t, n) {
    this.instance = e, this.tableMeta = t, this.selection = n, this.eventManager = new Dt(e), this.destroyed = !1, this.lock = !1, this.activeEditor = void 0, this.cellProperties = void 0, this.instance.getShortcutManager().addContext("editor"), this.registerShortcuts(), this.instance.addHook("afterDocumentKeyDown", (r) => this.onAfterDocumentKeyDown(r)), this.eventManager.addEventListener(this.instance.rootDocument.documentElement, "compositionstart", (r) => {
      !this.destroyed && this.instance.isListening() && this.openEditor("", r);
    }), this.instance.view._wt.update("onCellDblClick", (r, a, l) => this.onCellDblClick(r, a, l));
  }
  /**
   * Register shortcuts responsible for handling some actions related to an editor.
   *
   * @private
   */
  registerShortcuts() {
    const e = this.instance.getShortcutManager(), t = e.getContext("grid"), n = e.getContext("editor"), o = {
      group: Qr
    };
    n.addShortcuts([{
      keys: [["Enter"], ["Enter", "Shift"], ["Enter", "Control/Meta"], ["Enter", "Control/Meta", "Shift"]],
      callback: (r, a) => {
        this.closeEditorAndSaveChanges(e.isCtrlPressed()), this.moveSelectionAfterEnter(a.includes("shift"));
      }
    }, {
      keys: [["Escape"], ["Escape", "Control/Meta"]],
      callback: () => {
        this.closeEditorAndRestoreOriginalValue(e.isCtrlPressed()), this.activeEditor.focus();
      }
    }], o), t.addShortcuts([{
      keys: [["F2"]],
      callback: (r) => {
        this.openEditor(null, r, !0);
      }
    }, {
      keys: [["Backspace"], ["Delete"]],
      callback: () => {
        this.instance.emptySelectedCells(), this.prepareEditor();
      }
    }, {
      keys: [["Enter"], ["Enter", "Shift"]],
      callback: (r, a) => {
        this.instance.getSettings().enterBeginsEditing ? this.cellProperties.readOnly ? this.moveSelectionAfterEnter() : this.openEditor(null, r, !0) : this.moveSelectionAfterEnter(a.includes("shift")), Rn(r);
      }
    }], {
      ...o,
      runOnlyIf: () => ue(this.instance.getSelected())
    });
  }
  /**
   * Lock the editor from being prepared and closed. Locking the editor prevents its closing and
   * reinitialized after selecting the new cell. This feature is necessary for a mobile editor.
   */
  lockEditor() {
    this.lock = !0;
  }
  /**
   * Unlock the editor from being prepared and closed. This method restores the original behavior of
   * the editors where for every new selection its instances are closed.
   */
  unlockEditor() {
    this.lock = !1;
  }
  /**
   * Destroy current editor, if exists.
   *
   * @param {boolean} revertOriginal If `false` and the cell using allowInvalid option,
   *                                 then an editor won't be closed until validation is passed.
   */
  destroyEditor(e) {
    this.lock || this.closeEditor(e);
  }
  /**
   * Get active editor.
   *
   * @returns {BaseEditor}
   */
  getActiveEditor() {
    return this.activeEditor;
  }
  /**
   * Prepare text input to be displayed at given grid cell.
   */
  prepareEditor() {
    if (this.lock)
      return;
    if (this.activeEditor && this.activeEditor.isWaiting()) {
      this.closeEditor(!1, !1, (c) => {
        c && this.prepareEditor();
      });
      return;
    }
    const {
      row: e,
      col: t
    } = this.instance.getSelectedRangeLast().highlight, n = this.instance.runHooks("modifyGetCellCoords", e, t);
    let o = e, r = t;
    Array.isArray(n) && ([o, r] = n), this.cellProperties = this.instance.getCellMeta(o, r);
    const {
      activeElement: a
    } = this.instance.rootDocument;
    if (a && Cg(a) && a.blur(), !this.isCellEditable()) {
      this.clearActiveEditor();
      return;
    }
    const l = this.instance.getCell(e, t, !0);
    if (l) {
      const c = this.instance.getCellEditor(this.cellProperties), h = this.instance.colToProp(r), u = this.instance.getSourceDataAtCell(this.instance.toPhysicalRow(o), r);
      this.activeEditor = Zb(c, this.instance), this.activeEditor.prepare(e, t, h, l, u, this.cellProperties);
    }
  }
  /**
   * Check is editor is opened/showed.
   *
   * @returns {boolean}
   */
  isEditorOpened() {
    return this.activeEditor && this.activeEditor.isOpened();
  }
  /**
   * Open editor with initial value.
   *
   * @param {null|string} newInitialValue New value from which editor will start if handled property it's not the `null`.
   * @param {Event} event The event object.
   * @param {boolean} [enableFullEditMode=false] When true, an editor works in full editing mode. Mode disallows closing an editor
   *                                             when arrow keys are pressed.
   */
  openEditor(e, t) {
    let n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1;
    if (!this.isCellEditable()) {
      this.clearActiveEditor();
      return;
    }
    if (!this.activeEditor) {
      const {
        row: o,
        col: r
      } = this.instance.getSelectedRangeLast().highlight, a = this.instance.rowIndexMapper.getRenderableFromVisualIndex(o), l = this.instance.columnIndexMapper.getRenderableFromVisualIndex(r);
      this.instance.view.scrollViewport(this.instance._createCellCoords(a, l)), this.instance.view.render(), this.prepareEditor();
    }
    this.activeEditor && (n && this.activeEditor.enableFullEditMode(), this.activeEditor.beginEditing(e, t));
  }
  /**
   * Close editor, finish editing cell.
   *
   * @param {boolean} restoreOriginalValue If `true`, then closes editor without saving value from the editor into a cell.
   * @param {boolean} isCtrlPressed If `true`, then editor will save value to each cell in the last selected range.
   * @param {Function} callback The callback function, fired after editor closing.
   */
  closeEditor(e, t, n) {
    this.activeEditor ? this.activeEditor.finishEditing(e, t, n) : n && n(!1);
  }
  /**
   * Close editor and save changes.
   *
   * @param {boolean} isCtrlPressed If `true`, then editor will save value to each cell in the last selected range.
   */
  closeEditorAndSaveChanges(e) {
    this.closeEditor(!1, e);
  }
  /**
   * Close editor and restore original value.
   *
   * @param {boolean} isCtrlPressed Indication of whether the CTRL button is pressed.
   */
  closeEditorAndRestoreOriginalValue(e) {
    this.closeEditor(!0, e);
  }
  /**
   * Clears reference to an instance of the active editor.
   *
   * @private
   */
  clearActiveEditor() {
    this.activeEditor = void 0;
  }
  /**
   * Checks if the currently selected cell (pointed by selection highlight coords) is editable.
   * Editable cell is when:
   *   - the cell has defined an editor type;
   *   - the cell is not marked as read-only;
   *   - the cell is not hidden.
   *
   * @private
   * @returns {boolean}
   */
  isCellEditable() {
    const e = this.instance.getCellEditor(this.cellProperties), {
      row: t,
      col: n
    } = this.instance.getSelectedRangeLast().highlight, {
      rowIndexMapper: o,
      columnIndexMapper: r
    } = this.instance, a = o.isHidden(this.instance.toPhysicalRow(t)) || r.isHidden(this.instance.toPhysicalColumn(n));
    return !(this.cellProperties.readOnly || !e || a);
  }
  /**
   * Controls selection's behaviour after clicking `Enter`.
   *
   * @private
   * @param {boolean} isShiftPressed If `true`, then the selection will move up after hit enter.
   */
  moveSelectionAfterEnter(e) {
    const t = typeof this.tableMeta.enterMoves == "function" ? this.tableMeta.enterMoves(event) : this.tableMeta.enterMoves;
    e ? this.selection.transformStart(-t.row, -t.col) : this.selection.transformStart(t.row, t.col, !0);
  }
  /**
   * OnAfterDocumentKeyDown callback.
   *
   * @private
   * @param {KeyboardEvent} event The keyboard event object.
   */
  onAfterDocumentKeyDown(e) {
    if (!this.instance.isListening())
      return;
    const {
      keyCode: t
    } = e;
    if (!this.selection.isSelected())
      return;
    const n = (e.ctrlKey || e.metaKey) && !e.altKey;
    if ((!this.activeEditor || this.activeEditor && !this.activeEditor.isWaiting()) && !jb(t) && !OL(t) && !n && !this.isEditorOpened()) {
      const r = this.instance.getShortcutManager().getContext("editor"), a = {
        runOnlyIf: () => ue(this.instance.getSelected()),
        group: ch
      };
      r.addShortcuts([{
        keys: [["ArrowUp"]],
        callback: () => {
          this.instance.selection.transformStart(-1, 0);
        }
      }, {
        keys: [["ArrowDown"]],
        callback: () => {
          this.instance.selection.transformStart(1, 0);
        }
      }, {
        keys: [["ArrowLeft"]],
        callback: () => {
          this.instance.selection.transformStart(0, -1 * this.instance.getDirectionFactor());
        }
      }, {
        keys: [["ArrowRight"]],
        callback: () => {
          this.instance.selection.transformStart(0, this.instance.getDirectionFactor());
        }
      }], a), this.openEditor("", e);
    }
  }
  /**
   * OnCellDblClick callback.
   *
   * @private
   * @param {MouseEvent} event The mouse event object.
   * @param {object} coords The cell coordinates.
   * @param {HTMLTableCellElement|HTMLTableHeaderCellElement} elem The element which triggers the action.
   */
  onCellDblClick(e, t, n) {
    n.nodeName === "TD" && this.openEditor(null, e, !0);
  }
  /**
   * Destroy the instance.
   */
  destroy() {
    this.destroyed = !0, this.eventManager.destroy();
  }
}
const NC = /* @__PURE__ */ new WeakMap();
rf.getInstance = function(s, e, t) {
  let n = NC.get(s);
  return n || (n = new rf(s, e, t), NC.set(s, n)), n;
};
const $L = rf, Qb = {
  "&nbsp;": " ",
  "&amp;": "&",
  "&lt;": "<",
  "&gt;": ">"
}, FL = new RegExp(Object.keys(Qb).map((s) => `(${s})`).join("|"), "gi");
function VL(s) {
  return (s && s.nodeName || "") === "TABLE";
}
function LC(s) {
  const e = s.hasColHeaders(), t = s.hasRowHeaders(), n = [e ? -1 : 0, t ? -1 : 0, s.countRows() - 1, s.countCols() - 1], o = s.getData(...n), r = o.length, a = r > 0 ? o[0].length : 0, l = ["<table>", "</table>"], c = e ? ["<thead>", "</thead>"] : [], h = ["<tbody>", "</tbody>"], u = t ? 1 : 0, f = e ? 1 : 0;
  for (let g = 0; g < r; g += 1) {
    const m = e && g === 0, w = [];
    for (let S = 0; S < a; S += 1) {
      const x = !m && t && S === 0;
      let T = "";
      if (m)
        T = `<th>${s.getColHeader(S - u)}</th>`;
      else if (x)
        T = `<th>${s.getRowHeader(g - f)}</th>`;
      else {
        const M = o[g][S], {
          hidden: _,
          rowspan: P,
          colspan: j
        } = s.getCellMeta(g - f, S - u);
        if (!_) {
          const H = [];
          if (P && H.push(`rowspan="${P}"`), j && H.push(`colspan="${j}"`), Gt(M))
            T = `<td ${H.join(" ")}></td>`;
          else {
            const Z = M.toString().replace("<", "&lt;").replace(">", "&gt;").replace(/(<br(\s*|\/)>(\r\n|\n)?|\r\n|\n)/g, `<br>\r
`).replace(/\x20/gi, "&nbsp;").replace(/\t/gi, "&#9;");
            T = `<td ${H.join(" ")}>${Z}</td>`;
          }
        }
      }
      w.push(T);
    }
    const C = ["<tr>", ...w, "</tr>"].join("");
    m ? c.splice(1, 0, C) : h.splice(-1, 0, C);
  }
  return l.splice(1, 0, c.join(""), h.join("")), l.join("");
}
function $C(s) {
  const e = s.length, t = ["<table>"];
  for (let n = 0; n < e; n += 1) {
    const o = s[n], r = o.length, a = [];
    n === 0 && t.push("<tbody>");
    for (let l = 0; l < r; l += 1) {
      const c = o[l], h = Gt(c) ? "" : c.toString().replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/(<br(\s*|\/)>(\r\n|\n)?|\r\n|\n)/g, `<br>\r
`).replace(/\x20{2,}/gi, (u) => `<span style="mso-spacerun: yes">${"&nbsp;".repeat(u.length - 1)} </span>`).replace(/\t/gi, "&#9;");
      a.push(`<td>${h}</td>`);
    }
    t.push("<tr>", ...a, "</tr>"), n + 1 === e && t.push("</tbody>");
  }
  return t.push("</table>"), t.join("");
}
function BL(s) {
  let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : document;
  const t = {}, n = e.createDocumentFragment(), o = e.createElement("div");
  n.appendChild(o);
  let r = s;
  if (typeof r == "string") {
    const M = r.replace(/<td\b[^>]*?>([\s\S]*?)<\/\s*td>/g, (_) => {
      const P = _.match(/<td\b[^>]*?>/g)[0], j = _.substring(P.length, _.lastIndexOf("<")).replace(/(<(?!br)([^>]+)>)/gi, "");
      return `${P}${j}</td>`;
    });
    o.insertAdjacentHTML("afterbegin", `${M}`), r = o.querySelector("table");
  }
  if (!r || !VL(r))
    return;
  const a = o.querySelector('meta[name$="enerator"]'), l = r.querySelector("tbody th") !== null, c = r.querySelector("tr"), h = c ? Array.from(c.cells).reduce((M, _) => M + _.colSpan, 0) - (l ? 1 : 0) : 0, u = r.tFoot && Array.from(r.tFoot.rows) || [], f = [];
  let g = !1, m = 0, w = 0;
  if (r.tHead) {
    const M = Array.from(r.tHead.rows).filter((_) => {
      const P = _.querySelector("td") !== null;
      return P && f.push(_), !P;
    });
    m = M.length, g = m > 0, m > 1 ? t.nestedHeaders = Array.from(M).reduce((_, P) => {
      const j = Array.from(P.cells).reduce((H, Z, X) => {
        if (l && X === 0)
          return H;
        const {
          colSpan: F,
          innerHTML: z
        } = Z, ee = F > 1 ? {
          label: z,
          colspan: F
        } : z;
        return H.push(ee), H;
      }, []);
      return _.push(j), _;
    }, []) : g && (t.colHeaders = Array.from(M[0].children).reduce((_, P, j) => (l && j === 0 || _.push(P.innerHTML), _), []));
  }
  f.length && (t.fixedRowsTop = f.length), u.length && (t.fixedRowsBottom = u.length);
  const C = [...f, ...Array.from(r.tBodies).reduce((M, _) => (M.push(...Array.from(_.rows)), M), []), ...u];
  w = C.length;
  const S = new Array(w);
  for (let M = 0; M < w; M++)
    S[M] = new Array(h);
  const x = [], T = [];
  for (let M = 0; M < w; M++) {
    const _ = C[M], P = Array.from(_.cells), j = P.length;
    for (let H = 0; H < j; H++) {
      const Z = P[H], {
        nodeName: X,
        innerHTML: F,
        rowSpan: z,
        colSpan: ee
      } = Z, oe = S[M].findIndex((fe) => fe === void 0);
      if (X === "TD") {
        if (z > 1 || ee > 1) {
          for (let He = M; He < M + z; He++)
            if (He < w)
              for (let R = oe; R < oe + ee; R++)
                S[He][R] = null;
          const Ae = Z.getAttribute("style");
          Ae && Ae.includes("mso-ignore:colspan") || x.push({
            col: oe,
            row: M,
            rowspan: z,
            colspan: ee
          });
        }
        let fe = "";
        a && /excel/gi.test(a.content) ? fe = F.replace(/[\r\n][\x20]{0,2}/g, " ").replace(/<br(\s*|\/)>[\r\n]?[\x20]{0,3}/gim, `\r
`) : fe = F.replace(/<br(\s*|\/)>[\r\n]?/gim, `\r
`), S[M][oe] = fe.replace(FL, (Ae) => Qb[Ae]);
      } else
        T.push(F);
    }
  }
  return x.length && (t.mergeCells = x), T.length && (t.rowHeaders = T), S.length && (t.data = S), t;
}
function ys(s) {
  let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
  const t = typeof s;
  if (t === "number")
    return !isNaN(s) && isFinite(s);
  if (t === "string") {
    if (s.length === 0)
      return !1;
    if (s.length === 1)
      return /\d/.test(s);
    const n = Array.from(/* @__PURE__ */ new Set([".", ...e])).map((o) => `\\${o}`).join("|");
    return new RegExp(`^[+-]?\\s*(((${n})?\\d+((${n})\\d+)?(e[+-]?\\d+)?)|(0x[a-f\\d]+))$`, "i").test(s.trim());
  } else if (t === "object")
    return !!s && typeof s.valueOf() == "number" && !(s instanceof Date);
  return !1;
}
function WL(s) {
  return ys(s, [","]);
}
function Se(s, e, t) {
  let n = -1;
  for (typeof e == "function" ? (t = e, e = s) : n = s - 1; ++n <= e && t(n) !== !1; )
    ;
}
function af(s, e, t) {
  let n = s + 1;
  for (typeof e == "function" && (t = e, e = 0); --n >= e && t(n) !== !1; )
    ;
}
function Jb(s, e) {
  return e = parseInt(e.toString().replace("%", ""), 10), e = isNaN(e) ? 0 : e, parseInt(s * e / 100, 10);
}
const lf = "asc", UL = "desc", FC = /* @__PURE__ */ new Map([[lf, [-1, 1]], [UL, [1, -1]]]), zL = (s) => `The priority '${s}' is already declared in a map.`, YL = (s) => `The priority '${s}' is not a number.`;
function GL() {
  let {
    errorPriorityExists: s,
    errorPriorityNaN: e
  } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  const t = /* @__PURE__ */ new Map();
  s = mt(s) ? s : zL, e = mt(e) ? e : YL;
  function n(r, a) {
    if (!ys(r))
      throw new Error(e(r));
    if (t.has(r))
      throw new Error(s(r));
    t.set(r, a);
  }
  function o() {
    let r = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : lf;
    const [a, l] = FC.get(r) || FC.get(lf);
    return [...t].sort((c, h) => c[0] < h[0] ? a : l).map((c) => c[1]);
  }
  return {
    addItem: n,
    getItems: o
  };
}
const jL = (s) => `The id '${s}' is already declared in a map.`;
function hh() {
  let {
    errorIdExists: s
  } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  const e = /* @__PURE__ */ new Map();
  s = mt(s) ? s : jL;
  function t(h, u) {
    if (c(h))
      throw new Error(s(h));
    e.set(h, u);
  }
  function n(h) {
    return e.delete(h);
  }
  function o() {
    e.clear();
  }
  function r(h) {
    const [u] = l().find((f) => {
      let [g, m] = f;
      return h === m ? g : !1;
    }) || [null];
    return u;
  }
  function a(h) {
    return e.get(h);
  }
  function l() {
    return [...e];
  }
  function c(h) {
    return e.has(h);
  }
  return {
    addItem: t,
    clear: o,
    getId: r,
    getItem: a,
    getItems: l,
    hasItem: c,
    removeItem: n
  };
}
const KL = (s) => `'${s}' value is already declared in a unique set.`;
function XL() {
  let {
    errorItemExists: s
  } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  const e = /* @__PURE__ */ new Set();
  s = mt(s) ? s : KL;
  function t(r) {
    if (e.has(r))
      throw new Error(s(r));
    e.add(r);
  }
  function n() {
    return [...e];
  }
  function o() {
    e.clear();
  }
  return {
    addItem: t,
    clear: o,
    getItems: n
  };
}
const Rg = (s) => `There is already registered "${s}" plugin.`, qL = (s) => `There is already registered plugin on priority "${s}".`, ZL = (s) => `The priority "${s}" is not a number.`, eR = GL({
  errorPriorityExists: qL,
  errorPriorityNaN: ZL
}), tR = XL({
  errorItemExists: Rg
}), cf = hh({
  errorIdExists: Rg
});
function sR() {
  return [...eR.getItems(), ...tR.getItems()];
}
function Eg(s) {
  const e = Js(s);
  return cf.getItem(e);
}
function QL(s) {
  return !!Eg(s);
}
function tt(s, e, t) {
  [s, e, t] = e$(s, e, t), Eg(s) === void 0 && JL(s, e, t);
}
function JL(s, e, t) {
  const n = Js(s);
  if (cf.hasItem(n))
    throw new Error(Rg(n));
  t === void 0 ? tR.addItem(n) : eR.addItem(t, n), cf.addItem(n, e);
}
function e$(s, e, t) {
  return typeof s == "function" && (e = s, s = e.PLUGIN_KEY, t = e.PLUGIN_PRIORITY), [s, e, t];
}
const {
  register: t$,
  getItem: s$,
  hasItem: nR,
  getNames: P4,
  getValues: D4
} = Gs("renderers");
function VC(s) {
  if (typeof s == "function")
    return s;
  if (!nR(s))
    throw Error(`No registered renderer found under "${s}" name`);
  return s$(s);
}
function $n(s, e) {
  typeof s != "string" && (e = s, s = e.RENDERER_TYPE), t$(s, e);
}
const {
  register: n$,
  getItem: i$,
  hasItem: iR,
  getNames: H4,
  getValues: k4
} = Gs("validators");
function o$(s) {
  if (typeof s == "function")
    return s;
  if (!iR(s))
    throw Error(`No registered validator found under "${s}" name`);
  return i$(s);
}
function Ur(s, e) {
  typeof s != "string" && (e = s, s = e.VALIDATOR_TYPE), n$(s, e);
}
var oR = {}, r$ = wS, a$ = Gf, l$ = Object.keys || function(e) {
  return r$(e, a$);
}, c$ = En, h$ = hS, u$ = io, d$ = xa, f$ = Uc, g$ = l$;
oR.f = c$ && !h$ ? Object.defineProperties : function(e, t) {
  d$(e);
  for (var n = f$(t), o = g$(t), r = o.length, a = 0, l; r > a; )
    u$.f(e, l = o[a++], n[l]);
  return e;
};
var m$ = xa, p$ = oR, BC = Gf, w$ = Uf, C$ = AS, v$ = Bf, y$ = fS, WC = ">", UC = "<", hf = "prototype", uf = "script", rR = y$("IE_PROTO"), Ru = function() {
}, aR = function(s) {
  return UC + uf + WC + s + UC + "/" + uf + WC;
}, zC = function(s) {
  s.write(aR("")), s.close();
  var e = s.parentWindow.Object;
  return s = null, e;
}, S$ = function() {
  var s = v$("iframe"), e = "java" + uf + ":", t;
  return s.style.display = "none", C$.appendChild(s), s.src = String(e), t = s.contentWindow.document, t.open(), t.write(aR("document.F=Object")), t.close(), t.F;
}, rl, Jl = function() {
  try {
    rl = new ActiveXObject("htmlfile");
  } catch {
  }
  Jl = typeof document < "u" ? document.domain && rl ? zC(rl) : S$() : zC(rl);
  for (var s = BC.length; s--; )
    delete Jl[hf][BC[s]];
  return Jl();
};
w$[rR] = !0;
var b$ = Object.create || function(e, t) {
  var n;
  return e !== null ? (Ru[hf] = m$(e), n = new Ru(), Ru[hf] = null, n[rR] = e) : n = Jl(), t === void 0 ? n : p$.f(n, t);
}, R$ = Yc, E$ = b$, x$ = io.f, df = R$("unscopables"), ff = Array.prototype;
ff[df] === void 0 && x$(ff, df, {
  configurable: !0,
  value: E$(null)
});
var T$ = function(s) {
  ff[df][s] = !0;
}, M$ = oo, _$ = zc, I$ = Gc, O$ = Yf, A$ = T$;
M$({ target: "Array", proto: !0 }, {
  at: function(e) {
    var t = _$(this), n = I$(t), o = O$(e), r = o >= 0 ? o : n + o;
    return r < 0 || r >= n ? void 0 : t[r];
  }
});
A$("at");
const Bi = 1, ss = 2, vo = /* @__PURE__ */ new WeakMap();
class xg {
  /**
   * Default column width.
   *
   * @type {number}
   */
  static get DEFAULT_WIDTH() {
    return 50;
  }
  /**
   * @param {object} options Object with all options specified for column viewport calculation.
   * @param {number} options.viewportSize Width of the viewport.
   * @param {number} options.scrollOffset Current horizontal scroll position of the viewport.
   * @param {number} options.totalItems Total number of columns.
   * @param {Function} options.itemSizeFn Function that returns the width of the column at a given index (in px).
   * @param {Function} options.overrideFn Function that changes calculated this.startRow, this.endRow (used by
   *   MergeCells plugin).
   * @param {string} options.calculationType String which describes types of calculation which will be performed.
   * @param {string} options.inlineStartOffset Inline-start offset of the parent container.
   * @param {string} [options.stretchMode] Stretch mode 'all' or 'last'.
   * @param {Function} [options.stretchingItemWidthFn] Function that returns the new width of the stretched column.
   */
  constructor() {
    let {
      viewportSize: e,
      scrollOffset: t,
      totalItems: n,
      itemSizeFn: o,
      overrideFn: r,
      calculationType: a,
      stretchMode: l,
      stretchingItemWidthFn: c = (u) => u,
      inlineStartOffset: h
    } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    vo.set(this, {
      viewportWidth: e,
      scrollOffset: t,
      totalColumns: n,
      columnWidthFn: o,
      overrideFn: r,
      calculationType: a,
      stretchingColumnWidthFn: c,
      inlineStartOffset: h
    }), this.count = 0, this.startColumn = null, this.endColumn = null, this.startPosition = null, this.isVisibleInTrimmingContainer = !1, this.stretchAllRatio = 0, this.stretchLastWidth = 0, this.stretch = l, this.totalTargetWidth = 0, this.needVerifyLastColumnWidth = !0, this.stretchAllColumnsWidth = [], this.calculate();
  }
  /**
   * Calculates viewport.
   */
  calculate() {
    let e = 0, t = !0;
    const n = [];
    let o, r = 0, a = 0;
    const l = vo.get(this), c = l.calculationType, h = l.overrideFn, u = l.scrollOffset, f = Math.max(l.scrollOffset, 0), g = l.totalColumns, m = l.viewportWidth, w = f > 0 ? m + 1 : m;
    for (let T = 0; T < g; T++)
      if (o = this._getColumnWidth(T), e <= f && c !== ss && (this.startColumn = T, r = o), e >= f && e + (c === ss ? o : 0) <= f + w && ((this.startColumn === null || this.startColumn === void 0) && (this.startColumn = T, r = o), this.endColumn = T), n.push(e), e += o, a = o, c !== ss && (this.endColumn = T), e >= f + m) {
        t = !1;
        break;
      }
    const C = u + m - w, S = c === ss ? 0 : a, x = c === ss ? r : 0;
    if (// the table is to the left of the viewport
    C < -1 * l.inlineStartOffset || u > n.at(-1) + S || // the table is to the right of the viewport
    -1 * l.scrollOffset - l.viewportWidth > -1 * x ? this.isVisibleInTrimmingContainer = !1 : this.isVisibleInTrimmingContainer = !0, this.endColumn === g - 1 && t)
      for (this.startColumn = this.endColumn; this.startColumn > 0; ) {
        const T = n[this.endColumn] + o - n[this.startColumn - 1];
        if ((T <= m || c !== ss) && (this.startColumn -= 1), T > m)
          break;
      }
    c === Bi && this.startColumn !== null && h && h(this), this.startPosition = n[this.startColumn], this.startPosition === void 0 && (this.startPosition = null), g < this.endColumn && (this.endColumn = g - 1), this.startColumn !== null && (this.count = this.endColumn - this.startColumn + 1);
  }
  /**
   * Recalculate columns stretching.
   *
   * @param {number} totalWidth The total width of the table.
   */
  refreshStretching(e) {
    if (this.stretch === "none")
      return;
    let t = e;
    this.totalTargetWidth = t;
    const n = vo.get(this), o = n.totalColumns;
    let r = 0;
    for (let l = 0; l < o; l++) {
      const c = this._getColumnWidth(l), h = n.stretchingColumnWidthFn(void 0, l);
      typeof h == "number" ? t -= h : r += c;
    }
    const a = t - r;
    if (this.stretch === "all" && a > 0)
      this.stretchAllRatio = t / r, this.stretchAllColumnsWidth = [], this.needVerifyLastColumnWidth = !0;
    else if (this.stretch === "last" && t !== 1 / 0) {
      const l = this._getColumnWidth(o - 1), c = a + l;
      this.stretchLastWidth = c >= 0 ? c : l;
    }
  }
  /**
   * Get stretched column width based on stretchH (all or last) setting passed in handsontable instance.
   *
   * @param {number} column The visual column index.
   * @param {number} baseWidth The default column width.
   * @returns {number|null}
   */
  getStretchedColumnWidth(e, t) {
    let n = null;
    return this.stretch === "all" && this.stretchAllRatio !== 0 ? n = this._getStretchedAllColumnWidth(e, t) : this.stretch === "last" && this.stretchLastWidth !== 0 && (n = this._getStretchedLastColumnWidth(e)), n;
  }
  /**
   * @param {number} column The visual column index.
   * @param {number} baseWidth The default column width.
   * @returns {number}
   * @private
   */
  _getStretchedAllColumnWidth(e, t) {
    let n = 0;
    const o = vo.get(this), r = o.totalColumns;
    if (!this.stretchAllColumnsWidth[e]) {
      const a = Math.round(t * this.stretchAllRatio), l = o.stretchingColumnWidthFn(a, e);
      l === void 0 ? this.stretchAllColumnsWidth[e] = a : this.stretchAllColumnsWidth[e] = isNaN(l) ? this._getColumnWidth(e) : l;
    }
    if (this.stretchAllColumnsWidth.length === r && this.needVerifyLastColumnWidth) {
      this.needVerifyLastColumnWidth = !1;
      for (let a = 0; a < this.stretchAllColumnsWidth.length; a++)
        n += this.stretchAllColumnsWidth[a];
      n !== this.totalTargetWidth && (this.stretchAllColumnsWidth[this.stretchAllColumnsWidth.length - 1] += this.totalTargetWidth - n);
    }
    return this.stretchAllColumnsWidth[e];
  }
  /**
   * @param {number} column The visual column index.
   * @returns {number|null}
   * @private
   */
  _getStretchedLastColumnWidth(e) {
    const n = vo.get(this).totalColumns;
    return e === n - 1 ? this.stretchLastWidth : null;
  }
  /**
   * @param {number} column The visual column index.
   * @returns {number}
   * @private
   */
  _getColumnWidth(e) {
    let t = vo.get(this).columnWidthFn(e);
    return isNaN(t) && (t = xg.DEFAULT_WIDTH), t;
  }
}
const Tg = xg, YC = /* @__PURE__ */ new WeakMap();
class Mg {
  /**
   * Default row height.
   *
   * @type {number}
   */
  static get DEFAULT_HEIGHT() {
    return 23;
  }
  /**
   * @param {object} options Object with all options specified for row viewport calculation.
   * @param {number} options.viewportSize Height of the viewport.
   * @param {number} options.scrollOffset Current vertical scroll position of the viewport.
   * @param {number} options.totalItems Total number of rows.
   * @param {Function} options.itemSizeFn Function that returns the height of the row at a given index (in px).
   * @param {Function} options.overrideFn Function that changes calculated this.startRow, this.endRow (used by MergeCells plugin).
   * @param {string} options.calculationType String which describes types of calculation which will be performed.
   * @param {number} options.scrollbarHeight The scrollbar height.
   */
  constructor() {
    let {
      viewportSize: e,
      scrollOffset: t,
      totalItems: n,
      itemSizeFn: o,
      overrideFn: r,
      calculationType: a,
      scrollbarHeight: l
    } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    YC.set(this, {
      viewportHeight: e,
      scrollOffset: t,
      totalRows: n,
      rowHeightFn: o,
      overrideFn: r,
      calculationType: a,
      horizontalScrollbarHeight: l
    }), this.count = 0, this.startRow = null, this.endRow = null, this.startPosition = null, this.isVisibleInTrimmingContainer = !1, this.calculate();
  }
  /**
   * Calculates viewport.
   */
  calculate() {
    const e = YC.get(this), t = e.calculationType, n = e.overrideFn, o = e.rowHeightFn, r = e.scrollOffset, a = Math.max(e.scrollOffset, 0), l = e.totalRows, c = e.viewportHeight, h = e.horizontalScrollbarHeight || 0;
    let u = 0, f = !0;
    const g = [];
    let m, w = 0, C = 0;
    for (let M = 0; M < l; M++)
      if (m = o(M), isNaN(m) && (m = Mg.DEFAULT_HEIGHT), u <= a && t !== ss && (this.startRow = M, w = m), u >= a && u + (t === ss ? m : 0) <= a + c - h && (this.startRow === null && (this.startRow = M, w = m), this.endRow = M), g.push(u), u += m, C = m, t !== ss && (this.endRow = M), u >= a + c - h) {
        f = !1;
        break;
      }
    const S = r + c - h, x = t === ss ? w : 0, T = t === ss ? 0 : C;
    if (S < x || r > g.at(-1) + T ? this.isVisibleInTrimmingContainer = !1 : this.isVisibleInTrimmingContainer = !0, this.endRow === l - 1 && f)
      for (this.startRow = this.endRow; this.startRow > 0; ) {
        const M = g[this.endRow] + m - g[this.startRow - 1];
        if ((M <= c - h || t !== ss) && (this.startRow -= 1), M >= c - h)
          break;
      }
    t === Bi && this.startRow !== null && n && n(this), this.startPosition = g[this.startRow], this.startPosition === void 0 && (this.startPosition = null), l < this.endRow && (this.endRow = l - 1), this.startRow !== null && (this.count = this.endRow - this.startRow + 1);
  }
}
const lR = Mg;
function P$(s, e, t) {
  D$(s, e), e.set(s, t);
}
function D$(s, e) {
  if (e.has(s))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function GC(s, e, t) {
  return e = H$(e), e in s ? Object.defineProperty(s, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : s[e] = t, s;
}
function H$(s) {
  var e = k$(s, "string");
  return typeof e == "symbol" ? e : String(e);
}
function k$(s, e) {
  if (typeof s != "object" || s === null)
    return s;
  var t = s[Symbol.toPrimitive];
  if (t !== void 0) {
    var n = t.call(s, e || "default");
    if (typeof n != "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(s);
}
function xr(s, e) {
  var t = cR(s, e, "get");
  return N$(s, t);
}
function N$(s, e) {
  return e.get ? e.get.call(s) : e.value;
}
function L$(s, e, t) {
  var n = cR(s, e, "set");
  return $$(s, n, t), t;
}
function cR(s, e, t) {
  if (!e.has(s))
    throw new TypeError("attempted to " + t + " private field on non-instance");
  return e.get(s);
}
function $$(s, e, t) {
  if (e.set)
    e.set.call(s, t);
  else {
    if (!e.writable)
      throw new TypeError("attempted to set read only private field");
    e.value = t;
  }
}
var Ii = /* @__PURE__ */ new WeakMap();
class _g {
  constructor(e, t) {
    let n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1;
    GC(this, "row", null), GC(this, "col", null), P$(this, Ii, {
      writable: !0,
      value: !1
    }), L$(this, Ii, n), typeof e < "u" && typeof t < "u" && (this.row = e, this.col = t);
  }
  /**
   * Checks if the coordinates in your `CellCoords` instance are valid
   * in the context of a given Walkontable instance.
   *
   * The `row` index:
   * - Can't be negative.
   * - Can't be higher than the total number of rows in the Walkontable instance.
   *
   * The `col` index:
   * - Can't be negative.
   * - Can't be higher than the total number of columns in the Walkontable instance.
   *
   * @param {Walkontable} wot A Walkontable instance.
   * @returns {boolean} `true`: The coordinates are valid.
   */
  isValid(e) {
    return !(this.row < 0 || this.col < 0 || this.row >= e.getSetting("totalRows") || this.col >= e.getSetting("totalColumns"));
  }
  /**
   * Checks if another set of coordinates (`cellCoords`)
   * is equal to the coordinates in your `CellCoords` instance.
   *
   * @param {CellCoords} cellCoords Coordinates to check.
   * @returns {boolean}
   */
  isEqual(e) {
    return e === this ? !0 : this.row === e.row && this.col === e.col;
  }
  /**
   * Checks if another set of coordinates (`testedCoords`)
   * is south-east of the coordinates in your `CellCoords` instance.
   *
   * @param {CellCoords} testedCoords Coordinates to check.
   * @returns {boolean}
   */
  isSouthEastOf(e) {
    return this.row >= e.row && (xr(this, Ii) ? this.col <= e.col : this.col >= e.col);
  }
  /**
   * Checks if another set of coordinates (`testedCoords`)
   * is north-west of the coordinates in your `CellCoords` instance.
   *
   * @param {CellCoords} testedCoords Coordinates to check.
   * @returns {boolean}
   */
  isNorthWestOf(e) {
    return this.row <= e.row && (xr(this, Ii) ? this.col >= e.col : this.col <= e.col);
  }
  /**
   * Checks if another set of coordinates (`testedCoords`)
   * is south-west of the coordinates in your `CellCoords` instance.
   *
   * @param {CellCoords} testedCoords Coordinates to check.
   * @returns {boolean}
   */
  isSouthWestOf(e) {
    return this.row >= e.row && (xr(this, Ii) ? this.col >= e.col : this.col <= e.col);
  }
  /**
   * Checks if another set of coordinates (`testedCoords`)
   * is north-east of the coordinates in your `CellCoords` instance.
   *
   * @param {CellCoords} testedCoords Coordinates to check.
   * @returns {boolean}
   */
  isNorthEastOf(e) {
    return this.row <= e.row && (xr(this, Ii) ? this.col <= e.col : this.col >= e.col);
  }
  /**
   * Normalizes the coordinates in your `CellCoords` instance to the nearest valid position.
   *
   * Coordinates that point to headers (negative values) are normalized to `0`.
   *
   * @returns {CellCoords}
   */
  normalize() {
    return this.row = this.row === null ? this.row : Math.max(this.row, 0), this.col = this.col === null ? this.col : Math.max(this.col, 0), this;
  }
  /**
   * Clones your `CellCoords` instance.
   *
   * @returns {CellCoords}
   */
  clone() {
    return new _g(this.row, this.col, xr(this, Ii));
  }
  /**
   * Converts your `CellCoords` instance into an object literal with `row` and `col` properties.
   *
   * @returns {{row: number, col: number}} An object literal with `row` and `col` properties.
   */
  toObject() {
    return {
      row: this.row,
      col: this.col
    };
  }
}
const Sc = _g;
function F$(s, e, t) {
  V$(s, e), e.set(s, t);
}
function V$(s, e) {
  if (e.has(s))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function Eu(s, e, t) {
  return e = B$(e), e in s ? Object.defineProperty(s, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : s[e] = t, s;
}
function B$(s) {
  var e = W$(s, "string");
  return typeof e == "symbol" ? e : String(e);
}
function W$(s, e) {
  if (typeof s != "object" || s === null)
    return s;
  var t = s[Symbol.toPrimitive];
  if (t !== void 0) {
    var n = t.call(s, e || "default");
    if (typeof n != "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(s);
}
function rn(s, e) {
  var t = hR(s, e, "get");
  return U$(s, t);
}
function U$(s, e) {
  return e.get ? e.get.call(s) : e.value;
}
function z$(s, e, t) {
  var n = hR(s, e, "set");
  return Y$(s, n, t), t;
}
function hR(s, e, t) {
  if (!e.has(s))
    throw new TypeError("attempted to " + t + " private field on non-instance");
  return e.get(s);
}
function Y$(s, e, t) {
  if (e.set)
    e.set.call(s, t);
  else {
    if (!e.writable)
      throw new TypeError("attempted to set read only private field");
    e.value = t;
  }
}
var Hs = /* @__PURE__ */ new WeakMap();
class Ig {
  constructor(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : e, n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : e, o = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : !1;
    Eu(this, "highlight", null), Eu(this, "from", null), Eu(this, "to", null), F$(this, Hs, {
      writable: !0,
      value: !1
    }), this.highlight = e.clone().normalize(), this.from = t.clone(), this.to = n.clone(), z$(this, Hs, o);
  }
  /**
   * Highlights cell selection at the `coords` coordinates.
   *
   * @param {CellCoords} coords Coordinates to use.
   * @returns {CellRange}
   */
  setHighlight(e) {
    return this.highlight = e.clone().normalize(), this;
  }
  /**
   * Sets the `coords` coordinates as the start of your range.
   *
   * @param {CellCoords} coords Coordinates to use.
   * @returns {CellRange}
   */
  setFrom(e) {
    return this.from = e.clone(), this;
  }
  /**
   * Sets the `coords` coordinates as the end of your range.
   *
   * @param {CellCoords} coords Coordinates to use.
   * @returns {CellRange}
   */
  setTo(e) {
    return this.to = e.clone(), this;
  }
  /**
   * Checks if the coordinates in your `CellRange` instance are valid
   * in the context of a given Walkontable instance.
   *
   * See the [`isValid()`](@/api/cellCoords.md#isvalid) method of the [`CellCoords`](@/api/cellCoords.md) class.
   *
   * @param {Walkontable} wot A Walkontable instance.
   * @returns {boolean}
   */
  isValid(e) {
    return this.from.isValid(e) && this.to.isValid(e);
  }
  /**
   * Checks if your range is just a single cell.
   *
   * @returns {boolean}
   */
  isSingle() {
    return this.from.row >= 0 && this.from.row === this.to.row && this.from.col >= 0 && this.from.col === this.to.col;
  }
  /**
   * Returns the height of your range (as a number of rows, including row headers).
   *
   * @returns {number}
   */
  getOuterHeight() {
    return Math.max(this.from.row, this.to.row) - Math.min(this.from.row, this.to.row) + 1;
  }
  /**
   * Returns the width of your range (as a number of columns, including column headers).
   *
   * @returns {number}
   */
  getOuterWidth() {
    return Math.max(this.from.col, this.to.col) - Math.min(this.from.col, this.to.col) + 1;
  }
  /**
   * Returns the height of your range (as a number of rows, excluding row headers).
   *
   * @returns {number}
   */
  getHeight() {
    if (this.from.row < 0 && this.to.row < 0)
      return 0;
    const e = Math.max(this.from.row, 0), t = Math.max(this.to.row, 0);
    return Math.max(e, t) - Math.min(e, t) + 1;
  }
  /**
   * Returns the width of your range (as a number of columns, excluding column headers).
   *
   * @returns {number}
   */
  getWidth() {
    if (this.from.col < 0 && this.to.col < 0)
      return 0;
    const e = Math.max(this.from.col, 0), t = Math.max(this.to.col, 0);
    return Math.max(e, t) - Math.min(e, t) + 1;
  }
  /**
   * Returns the number of cells within your range (excluding column and row headers).
   *
   * @returns {number}
   */
  getCellsCount() {
    return this.getWidth() * this.getHeight();
  }
  /**
   * Checks if another set of coordinates (`cellCoords`)
   * is within the `from` and `to` coordinates of your range.
   *
   * @param {CellCoords} cellCoords Coordinates to check.
   * @returns {boolean}
   */
  includes(e) {
    const {
      row: t,
      col: n
    } = e, o = this.getOuterTopStartCorner(), r = this.getOuterBottomEndCorner();
    return o.row <= t && r.row >= t && o.col <= n && r.col >= n;
  }
  /**
   * Checks if another range (`cellRange`) is within your range.
   *
   * @param {CellRange} cellRange A range to check.
   * @returns {boolean}
   */
  includesRange(e) {
    return this.includes(e.getOuterTopStartCorner()) && this.includes(e.getOuterBottomEndCorner());
  }
  /**
   * Checks if another range (`cellRange`) is equal to your range.
   *
   * @param {CellRange} cellRange A range to check.
   * @returns {boolean}
   */
  isEqual(e) {
    return Math.min(this.from.row, this.to.row) === Math.min(e.from.row, e.to.row) && Math.max(this.from.row, this.to.row) === Math.max(e.from.row, e.to.row) && Math.min(this.from.col, this.to.col) === Math.min(e.from.col, e.to.col) && Math.max(this.from.col, this.to.col) === Math.max(e.from.col, e.to.col);
  }
  /**
   * Checks if another range (`cellRange`) overlaps your range.
   *
   * Range A overlaps range B if the intersection of A and B (or B and A) is not empty.
   *
   * @param {CellRange} cellRange A range to check.
   * @returns {boolean}
   */
  overlaps(e) {
    return e.isSouthEastOf(this.getOuterTopLeftCorner()) && e.isNorthWestOf(this.getOuterBottomRightCorner());
  }
  /**
   * Checks if another range (`cellRange`) is south-east of your range.
   *
   * @param {CellRange} cellRange A range to check.
   * @returns {boolean}
   */
  isSouthEastOf(e) {
    return this.getOuterTopLeftCorner().isSouthEastOf(e) || this.getOuterBottomRightCorner().isSouthEastOf(e);
  }
  /**
   * Checks if another range (`cellRange`) is north-west of your range.
   *
   * @param {CellRange} cellRange A range to check.
   * @returns {boolean}
   */
  isNorthWestOf(e) {
    return this.getOuterTopLeftCorner().isNorthWestOf(e) || this.getOuterBottomRightCorner().isNorthWestOf(e);
  }
  /**
   * Checks if another range (`cellRange`) overlaps your range horizontally.
   *
   * For example: returns `true` if the last column of your range is `5`
   * and the first column of the `cellRange` range is `3`.
   *
   * @param {CellRange} cellRange A range to check.
   * @returns {boolean}
   */
  isOverlappingHorizontally(e) {
    return this.getOuterTopRightCorner().col >= e.getOuterTopLeftCorner().col && this.getOuterTopRightCorner().col <= e.getOuterTopRightCorner().col || this.getOuterTopLeftCorner().col <= e.getOuterTopRightCorner().col && this.getOuterTopLeftCorner().col >= e.getOuterTopLeftCorner().col;
  }
  /**
   * Checks if another range (`cellRange`) overlaps your range vertically.
   *
   * For example: returns `true` if the last row of your range is `5`
   * and the first row of the `cellRange` range is `3`.
   *
   * @param {CellRange} cellRange A range to check.
   * @returns {boolean}
   */
  isOverlappingVertically(e) {
    return this.getOuterBottomRightCorner().row >= e.getOuterTopRightCorner().row && this.getOuterBottomRightCorner().row <= e.getOuterBottomRightCorner().row || this.getOuterTopRightCorner().row <= e.getOuterBottomRightCorner().row && this.getOuterTopRightCorner().row >= e.getOuterTopRightCorner().row;
  }
  /**
   * Adds a cell to your range, at `cellCoords` coordinates.
   *
   * The `cellCoords` coordinates must exceed a corner of your range.
   *
   * @param {CellCoords} cellCoords A new cell's coordinates.
   * @returns {boolean}
   */
  expand(e) {
    const t = this.getOuterTopStartCorner(), n = this.getOuterBottomEndCorner();
    return e.row < t.row || e.col < t.col || e.row > n.row || e.col > n.col ? (this.from = this._createCellCoords(Math.min(t.row, e.row), Math.min(t.col, e.col)), this.to = this._createCellCoords(Math.max(n.row, e.row), Math.max(n.col, e.col)), !0) : !1;
  }
  /**
   * Expand your range with another range (`expandingRange`).
   *
   * @param {CellRange} expandingRange A new range.
   * @returns {boolean}
   */
  expandByRange(e) {
    if (this.includesRange(e) || !this.overlaps(e))
      return !1;
    const t = this.getOuterTopStartCorner(), n = this.getOuterBottomEndCorner(), o = this.getDirection(), r = e.getOuterTopStartCorner(), a = e.getOuterBottomEndCorner(), l = Math.min(t.row, r.row), c = Math.min(t.col, r.col), h = Math.max(n.row, a.row), u = Math.max(n.col, a.col), f = this._createCellCoords(l, c), g = this._createCellCoords(h, u);
    return this.from = f, this.to = g, this.setDirection(o), this.highlight.row === this.getOuterBottomRightCorner().row && this.getVerticalDirection() === "N-S" && this.flipDirectionVertically(), this.highlight.col === this.getOuterTopRightCorner().col && this.getHorizontalDirection() === "W-E" && this.flipDirectionHorizontally(), !0;
  }
  /**
   * Gets the direction of the selection.
   *
   * @returns {string} Returns one of the values: `'NW-SE'`, `'NE-SW'`, `'SE-NW'`, `'SW-NE'`.
   */
  getDirection() {
    if (this.from.isNorthWestOf(this.to))
      return "NW-SE";
    if (this.from.isNorthEastOf(this.to))
      return "NE-SW";
    if (this.from.isSouthEastOf(this.to))
      return "SE-NW";
    if (this.from.isSouthWestOf(this.to))
      return "SW-NE";
  }
  /**
   * Sets the direction of the selection.
   *
   * @param {string} direction One of the values: `'NW-SE'`, `'NE-SW'`, `'SE-NW'`, `'SW-NE'`.
   */
  setDirection(e) {
    switch (e) {
      case "NW-SE":
        [this.from, this.to] = [this.getOuterTopLeftCorner(), this.getOuterBottomRightCorner()];
        break;
      case "NE-SW":
        [this.from, this.to] = [this.getOuterTopRightCorner(), this.getOuterBottomLeftCorner()];
        break;
      case "SE-NW":
        [this.from, this.to] = [this.getOuterBottomRightCorner(), this.getOuterTopLeftCorner()];
        break;
      case "SW-NE":
        [this.from, this.to] = [this.getOuterBottomLeftCorner(), this.getOuterTopRightCorner()];
        break;
    }
  }
  /**
   * Gets the vertical direction of the selection.
   *
   * @returns {string} Returns one of the values: `N-S` (north->south), `S-N` (south->north).
   */
  getVerticalDirection() {
    return ["NE-SW", "NW-SE"].indexOf(this.getDirection()) > -1 ? "N-S" : "S-N";
  }
  /**
   * Gets the horizontal direction of the selection.
   *
   * @returns {string} Returns one of the values: `W-E` (west->east), `E-W` (east->west).
   */
  getHorizontalDirection() {
    return ["NW-SE", "SW-NE"].indexOf(this.getDirection()) > -1 ? "W-E" : "E-W";
  }
  /**
   * Flips the direction of your range vertically (e.g., `NW-SE` changes to `SW-NE`).
   */
  flipDirectionVertically() {
    switch (this.getDirection()) {
      case "NW-SE":
        this.setDirection("SW-NE");
        break;
      case "NE-SW":
        this.setDirection("SE-NW");
        break;
      case "SE-NW":
        this.setDirection("NE-SW");
        break;
      case "SW-NE":
        this.setDirection("NW-SE");
        break;
    }
  }
  /**
   * Flips the direction of your range horizontally (e.g., `NW-SE` changes to `NE-SW`).
   */
  flipDirectionHorizontally() {
    switch (this.getDirection()) {
      case "NW-SE":
        this.setDirection("NE-SW");
        break;
      case "NE-SW":
        this.setDirection("NW-SE");
        break;
      case "SE-NW":
        this.setDirection("SW-NE");
        break;
      case "SW-NE":
        this.setDirection("SE-NW");
        break;
    }
  }
  /**
   * Gets the top-left (in LTR) or top-right (in RTL) corner coordinates of your range.
   *
   * If the corner contains header coordinates (negative values),
   * the corner coordinates are normalized to `0`.
   *
   * @returns {CellCoords}
   */
  getTopStartCorner() {
    return this._createCellCoords(Math.min(this.from.row, this.to.row), Math.min(this.from.col, this.to.col)).normalize();
  }
  /**
   * Gets the top-left corner coordinates of your range,
   * both in the LTR and RTL layout direction.
   *
   * If the corner contains header coordinates (negative values),
   * the corner coordinates are normalized to `0`.
   *
   * @returns {CellCoords}
   */
  getTopLeftCorner() {
    return rn(this, Hs) ? this.getTopEndCorner() : this.getTopStartCorner();
  }
  /**
   * Gets the bottom right (in LTR) or bottom left (in RTL) corner coordinates of your range.
   *
   * If the corner contains header coordinates (negative values),
   * the corner coordinates are normalized to `0`.
   *
   * @returns {CellCoords}
   */
  getBottomEndCorner() {
    return this._createCellCoords(Math.max(this.from.row, this.to.row), Math.max(this.from.col, this.to.col)).normalize();
  }
  /**
   * Gets the bottom right corner coordinates of your range,
   * both in the LTR and RTL layout direction.
   *
   * If the corner contains header coordinates (negative values),
   * the corner coordinates are normalized to `0`.
   *
   * @returns {CellCoords}
   */
  getBottomRightCorner() {
    return rn(this, Hs) ? this.getBottomStartCorner() : this.getBottomEndCorner();
  }
  /**
   * Gets the top right (in LTR) or top left (in RTL) corner coordinates of your range.
   *
   * If the corner contains header coordinates (negative values),
   * the corner coordinates are normalized to `0`.
   *
   * @returns {CellCoords}
   */
  getTopEndCorner() {
    return this._createCellCoords(Math.min(this.from.row, this.to.row), Math.max(this.from.col, this.to.col)).normalize();
  }
  /**
   * Gets the top right corner coordinates of your range,
   * both in the LTR and RTL layout direction.
   *
   * If the corner contains header coordinates (negative values),
   * the corner coordinates are normalized to `0`.
   *
   * @returns {CellCoords}
   */
  getTopRightCorner() {
    return rn(this, Hs) ? this.getTopStartCorner() : this.getTopEndCorner();
  }
  /**
   * Gets the bottom left (in LTR) or bottom right (in RTL) corner coordinates of your range.
   *
   * If the corner contains header coordinates (negative values),
   * the corner coordinates are normalized to `0`.
   *
   * @returns {CellCoords}
   */
  getBottomStartCorner() {
    return this._createCellCoords(Math.max(this.from.row, this.to.row), Math.min(this.from.col, this.to.col)).normalize();
  }
  /**
   * Gets the bottom left corner coordinates of your range,
   * both in the LTR and RTL layout direction.
   *
   * If the corner contains header coordinates (negative values),
   * the corner coordinates are normalized to `0`.
   *
   * @returns {CellCoords}
   */
  getBottomLeftCorner() {
    return rn(this, Hs) ? this.getBottomEndCorner() : this.getBottomStartCorner();
  }
  /**
   * Gets the top left (in LTR) or top right (in RTL) corner coordinates of your range.
   *
   * If the corner contains header coordinates (negative values),
   * the top and start coordinates are pointed to that header.
   *
   * @returns {CellCoords}
   */
  getOuterTopStartCorner() {
    return this._createCellCoords(Math.min(this.from.row, this.to.row), Math.min(this.from.col, this.to.col));
  }
  /**
   * Gets the top left corner coordinates of your range,
   * both in the LTR and RTL layout direction.
   *
   * If the corner contains header coordinates (negative values),
   * the top and left coordinates are pointed to that header.
   *
   * @returns {CellCoords}
   */
  getOuterTopLeftCorner() {
    return rn(this, Hs) ? this.getOuterTopEndCorner() : this.getOuterTopStartCorner();
  }
  /**
   * Gets the bottom right (in LTR) or bottom left (in RTL) corner coordinates of your range.
   *
   * If the corner contains header coordinates (negative values),
   * the top and start coordinates are pointed to that header.
   *
   * @returns {CellCoords}
   */
  getOuterBottomEndCorner() {
    return this._createCellCoords(Math.max(this.from.row, this.to.row), Math.max(this.from.col, this.to.col));
  }
  /**
   * Gets the bottom right corner coordinates of your range,
   * both in the LTR and RTL layout direction.
   *
   * If the corner contains header coordinates (negative values),
   * the top and left coordinates are pointed to that header.
   *
   * @returns {CellCoords}
   */
  getOuterBottomRightCorner() {
    return rn(this, Hs) ? this.getOuterBottomStartCorner() : this.getOuterBottomEndCorner();
  }
  /**
   * Gets the top right (in LTR) or top left (in RTL) corner coordinates of your range.
   *
   * If the corner contains header coordinates (negative values),
   * the top and start coordinates are pointed to that header.
   *
   * @returns {CellCoords}
   */
  getOuterTopEndCorner() {
    return this._createCellCoords(Math.min(this.from.row, this.to.row), Math.max(this.from.col, this.to.col));
  }
  /**
   * Gets the top right corner coordinates of your range,
   * both in the LTR and RTL layout direction.
   *
   * If the corner contains header coordinates (negative values),
   * the top and left coordinates are pointed to that header.
   *
   * @returns {CellCoords}
   */
  getOuterTopRightCorner() {
    return rn(this, Hs) ? this.getOuterTopStartCorner() : this.getOuterTopEndCorner();
  }
  /**
   * Gets the bottom left (in LTR) or bottom right (in RTL) corner coordinates of your range.
   *
   * If the corner contains header coordinates (negative values),
   * the top and start coordinates are pointed to that header.
   *
   * @returns {CellCoords}
   */
  getOuterBottomStartCorner() {
    return this._createCellCoords(Math.max(this.from.row, this.to.row), Math.min(this.from.col, this.to.col));
  }
  /**
   * Gets the bottom left corner coordinates of your range,
   * both in the LTR and RTL layout direction.
   *
   * If the corner contains header coordinates (negative values),
   * the top and left coordinates are pointed to that header.
   *
   * @returns {CellCoords}
   */
  getOuterBottomLeftCorner() {
    return rn(this, Hs) ? this.getOuterBottomEndCorner() : this.getOuterBottomStartCorner();
  }
  /**
   * Checks if a set of coordinates (`coords`) matches one of the 4 corners of your range.
   *
   * @param {CellCoords} coords Coordinates to check.
   * @param {CellRange} [expandedRange] A range to compare with.
   * @returns {boolean}
   */
  isCorner(e, t) {
    return t && t.includes(e) && (this.getOuterTopLeftCorner().isEqual(this._createCellCoords(t.from.row, t.from.col)) || this.getOuterTopRightCorner().isEqual(this._createCellCoords(t.from.row, t.to.col)) || this.getOuterBottomLeftCorner().isEqual(this._createCellCoords(t.to.row, t.from.col)) || this.getOuterBottomRightCorner().isEqual(this._createCellCoords(t.to.row, t.to.col))) ? !0 : e.isEqual(this.getOuterTopLeftCorner()) || e.isEqual(this.getOuterTopRightCorner()) || e.isEqual(this.getOuterBottomLeftCorner()) || e.isEqual(this.getOuterBottomRightCorner());
  }
  /**
   * Gets the coordinates of a range corner opposite to the provided `coords`.
   *
   * For example: if the `coords` coordinates match the bottom-right corner of your range,
   * the coordinates of the top-left corner of your range are returned.
   *
   * @param {CellCoords} coords Coordinates to check.
   * @param {CellRange} [expandedRange] A range to compare with.
   * @returns {CellCoords}
   */
  getOppositeCorner(e, t) {
    if (!(e instanceof Sc))
      return !1;
    if (t) {
      const {
        from: n,
        to: o
      } = t;
      if (t.includes(e)) {
        if (this.getOuterTopStartCorner().isEqual(this._createCellCoords(n.row, n.col)))
          return this.getOuterBottomEndCorner();
        if (this.getOuterTopEndCorner().isEqual(this._createCellCoords(n.row, o.col)))
          return this.getOuterBottomStartCorner();
        if (this.getOuterBottomStartCorner().isEqual(this._createCellCoords(o.row, n.col)))
          return this.getOuterTopEndCorner();
        if (this.getOuterBottomEndCorner().isEqual(this._createCellCoords(o.row, o.col)))
          return this.getOuterTopStartCorner();
      }
    }
    if (e.isEqual(this.getOuterBottomEndCorner()))
      return this.getOuterTopStartCorner();
    if (e.isEqual(this.getOuterTopStartCorner()))
      return this.getOuterBottomEndCorner();
    if (e.isEqual(this.getOuterTopEndCorner()))
      return this.getOuterBottomStartCorner();
    if (e.isEqual(this.getOuterBottomStartCorner()))
      return this.getOuterTopEndCorner();
  }
  /**
   * Indicates which borders (top, right, bottom, left) are shared between
   * your `CellRange`instance and another `range` that's within your range.
   *
   * @param {CellRange} range A range to compare with.
   * @returns {Array<'top' | 'right' | 'bottom' | 'left'>}
   */
  getBordersSharedWith(e) {
    if (!this.includesRange(e))
      return [];
    const t = {
      top: Math.min(this.from.row, this.to.row),
      bottom: Math.max(this.from.row, this.to.row),
      left: Math.min(this.from.col, this.to.col),
      right: Math.max(this.from.col, this.to.col)
    }, n = {
      top: Math.min(e.from.row, e.to.row),
      bottom: Math.max(e.from.row, e.to.row),
      left: Math.min(e.from.col, e.to.col),
      right: Math.max(e.from.col, e.to.col)
    }, o = [];
    return t.top === n.top && o.push("top"), t.right === n.right && o.push("right"), t.bottom === n.bottom && o.push("bottom"), t.left === n.left && o.push("left"), o;
  }
  /**
   * Gets the coordinates of the inner cells of your range.
   *
   * @returns {CellCoords[]}
   */
  getInner() {
    const e = this.getOuterTopStartCorner(), t = this.getOuterBottomEndCorner(), n = [];
    for (let o = e.row; o <= t.row; o++)
      for (let r = e.col; r <= t.col; r++)
        !(this.from.row === o && this.from.col === r) && !(this.to.row === o && this.to.col === r) && n.push(this._createCellCoords(o, r));
    return n;
  }
  /**
   * Gets the coordinates of all cells of your range.
   *
   * @returns {CellCoords[]}
   */
  getAll() {
    const e = this.getOuterTopStartCorner(), t = this.getOuterBottomEndCorner(), n = [];
    for (let o = e.row; o <= t.row; o++)
      for (let r = e.col; r <= t.col; r++)
        e.row === o && e.col === r ? n.push(e) : t.row === o && t.col === r ? n.push(t) : n.push(this._createCellCoords(o, r));
    return n;
  }
  /**
   * Runs a callback function on all cells within your range.
   *
   * You can break the iteration by returning `false` in the callback function.
   *
   * @param {function(number, number): boolean} callback A callback function.
   */
  forAll(e) {
    const t = this.getOuterTopStartCorner(), n = this.getOuterBottomEndCorner();
    for (let o = t.row; o <= n.row; o++)
      for (let r = t.col; r <= n.col; r++)
        if (e(o, r) === !1)
          return;
  }
  /**
   * Clones your `CellRange` instance.
   *
   * @returns {CellRange}
   */
  clone() {
    return new Ig(this.highlight, this.from, this.to, rn(this, Hs));
  }
  /**
   * Converts your `CellRange` instance into an object literal with the following properties:
   *
   * - `from`
   *    - `row`
   *    - `col`
   * - `to`
   *    - `row`
   *    - `col`
   *
   * @returns {{from: {row: number, col: number}, to: {row: number, col: number}}} An object literal with `from` and `to` properties.
   */
  toObject() {
    return {
      from: this.from.toObject(),
      to: this.to.toObject()
    };
  }
  /**
   * Creates and returns a new instance of the `CellCoords` class.
   *
   * The new `CellCoords` instance automatically inherits the LTR/RTL flag
   * from your `CellRange` instance.
   *
   * @private
   * @param {number} row A row index.
   * @param {number} column A column index.
   * @returns {CellCoords}
   */
  _createCellCoords(e, t) {
    return new Sc(e, t, rn(this, Hs));
  }
}
const Og = Ig;
function Ag(s) {
  return window.requestAnimationFrame(s);
}
function bc(s) {
  window.cancelAnimationFrame(s);
}
function uR() {
  return "ontouchstart" in window;
}
let yo;
function G$(s) {
  let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  return yo || (typeof Intl == "object" ? yo = new Intl.Collator(s, e).compare : typeof String.prototype.localeCompare == "function" ? yo = (t, n) => `${t}`.localeCompare(n) : yo = (t, n) => t === n ? 0 : t > n ? -1 : 1, yo);
}
const So = /* @__PURE__ */ new WeakMap();
let j$ = class {
  /**
   * @param {FacadeGetter} facadeGetter Gets an instance facade.
   * @param {DomBindings} domBindings Bindings into dom.
   * @param {Settings} wtSettings The walkontable settings.
   * @param {EventManager} eventManager The walkontable event manager.
   * @param {Table} wtTable The table.
   * @param {Selections} selections Selections.
   * @param {Event} [parent=null] The main Event instance.
   */
  constructor(e, t, n, o, r, a) {
    let l = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : null;
    this.wtSettings = n, this.domBindings = t, this.wtTable = r, this.selections = a, this.parent = l, this.eventManager = o, this.facadeGetter = e, So.set(this, {
      selectedCellBeforeTouchEnd: void 0,
      dblClickTimeout: [null, null],
      dblClickOrigin: [null, null]
    }), this.registerEvents();
  }
  /**
   * Adds listeners for mouse and touch events.
   *
   * @private
   */
  registerEvents() {
    this.eventManager.addEventListener(this.wtTable.holder, "contextmenu", (n) => this.onContextMenu(n)), this.eventManager.addEventListener(this.wtTable.TABLE, "mouseover", (n) => this.onMouseOver(n)), this.eventManager.addEventListener(this.wtTable.TABLE, "mouseout", (n) => this.onMouseOut(n));
    const e = () => {
      this.eventManager.addEventListener(this.wtTable.holder, "touchstart", (n) => this.onTouchStart(n)), this.eventManager.addEventListener(this.wtTable.holder, "touchend", (n) => this.onTouchEnd(n)), this.momentumScrolling || (this.momentumScrolling = {}), this.eventManager.addEventListener(this.wtTable.holder, "scroll", () => {
        clearTimeout(this.momentumScrolling._timeout), this.momentumScrolling.ongoing || this.wtSettings.getSetting("onBeforeTouchScroll"), this.momentumScrolling.ongoing = !0, this.momentumScrolling._timeout = setTimeout(() => {
          this.touchApplied || (this.momentumScrolling.ongoing = !1, this.wtSettings.getSetting("onAfterMomentumScroll"));
        }, 200);
      });
    }, t = () => {
      this.eventManager.addEventListener(this.wtTable.holder, "mouseup", (n) => this.onMouseUp(n)), this.eventManager.addEventListener(this.wtTable.holder, "mousedown", (n) => this.onMouseDown(n));
    };
    vn() ? e() : (uR() && e(), t());
  }
  /**
   * Checks if an element is already selected.
   *
   * @private
   * @param {Element} touchTarget An element to check.
   * @returns {boolean}
   */
  selectedCellWasTouched(e) {
    const t = So.get(this), o = this.parentCell(e).coords;
    if (t.selectedCellBeforeTouchEnd && o) {
      const [r, a] = [o.row, t.selectedCellBeforeTouchEnd.from.row], [l, c] = [o.col, t.selectedCellBeforeTouchEnd.from.col];
      return r === a && l === c;
    }
    return !1;
  }
  /**
   * Gets closest TD or TH element.
   *
   * @private
   * @param {Element} elem An element from the traversing starts.
   * @returns {object} Contains coordinates and reference to TD or TH if it exists. Otherwise it's empty object.
   */
  parentCell(e) {
    const t = {}, n = this.wtTable.TABLE, o = il(e, ["TD", "TH"], n);
    return o ? (t.coords = this.wtTable.getCoords(o), t.TD = o) : Ne(e, "wtBorder") && Ne(e, "current") ? (t.coords = this.selections.getCell().cellRange.highlight, t.TD = this.wtTable.getCell(t.coords)) : Ne(e, "wtBorder") && Ne(e, "area") && this.selections.createOrGetArea().cellRange && (t.coords = this.selections.createOrGetArea().cellRange.to, t.TD = this.wtTable.getCell(t.coords)), t;
  }
  /**
   * OnMouseDown callback.
   *
   * @private
   * @param {MouseEvent} event The mouse event object.
   */
  onMouseDown(e) {
    const t = So.get(this), n = this.domBindings.rootDocument.activeElement, o = Fb(XN, e.target), r = e.target;
    if (r === n || o(0) === n || o(1) === n)
      return;
    const a = this.parentCell(r);
    Ne(r, "corner") ? this.wtSettings.getSetting("onCellCornerMouseDown", e, r) : a.TD && this.wtSettings.has("onCellMouseDown") && this.callListener("onCellMouseDown", e, a.coords, a.TD), (e.button === 0 || this.touchApplied) && a.TD && (t.dblClickOrigin[0] = a.TD, clearTimeout(t.dblClickTimeout[0]), t.dblClickTimeout[0] = setTimeout(() => {
      t.dblClickOrigin[0] = null;
    }, 1e3));
  }
  /**
   * OnContextMenu callback.
   *
   * @private
   * @param {MouseEvent} event The mouse event object.
   */
  onContextMenu(e) {
    if (this.wtSettings.has("onCellContextMenu")) {
      const t = this.parentCell(e.target);
      t.TD && this.callListener("onCellContextMenu", e, t.coords, t.TD);
    }
  }
  /**
   * OnMouseOver callback.
   *
   * @private
   * @param {MouseEvent} event The mouse event object.
   */
  onMouseOver(e) {
    if (!this.wtSettings.has("onCellMouseOver"))
      return;
    const t = this.wtTable.TABLE, n = il(e.target, ["TD", "TH"], t), o = this.parent || this;
    n && n !== o.lastMouseOver && Ki(n, t) && (o.lastMouseOver = n, this.callListener("onCellMouseOver", e, this.wtTable.getCoords(n), n));
  }
  /**
   * OnMouseOut callback.
   *
   * @private
   * @param {MouseEvent} event The mouse event object.
   */
  onMouseOut(e) {
    if (!this.wtSettings.has("onCellMouseOut"))
      return;
    const t = this.wtTable.TABLE, n = il(e.target, ["TD", "TH"], t), o = il(e.relatedTarget, ["TD", "TH"], t), r = this.parent || this;
    n && n !== o && Ki(n, t) && (this.callListener("onCellMouseOut", e, this.wtTable.getCoords(n), n), o === null && (r.lastMouseOver = null));
  }
  /**
   * OnMouseUp callback.
   *
   * @private
   * @param {MouseEvent} event The mouse event object.
   */
  onMouseUp(e) {
    const t = So.get(this), n = this.parentCell(e.target);
    n.TD && this.wtSettings.has("onCellMouseUp") && this.callListener("onCellMouseUp", e, n.coords, n.TD), !(e.button !== 0 && !this.touchApplied) && (n.TD === t.dblClickOrigin[0] && n.TD === t.dblClickOrigin[1] ? (Ne(e.target, "corner") ? this.callListener("onCellCornerDblClick", e, n.coords, n.TD) : this.callListener("onCellDblClick", e, n.coords, n.TD), t.dblClickOrigin[0] = null, t.dblClickOrigin[1] = null) : n.TD === t.dblClickOrigin[0] && (t.dblClickOrigin[1] = n.TD, clearTimeout(t.dblClickTimeout[1]), t.dblClickTimeout[1] = setTimeout(() => {
      t.dblClickOrigin[1] = null;
    }, 500)));
  }
  /**
   * OnTouchStart callback. Simulates mousedown event.
   *
   * @private
   * @param {MouseEvent} event The mouse event object.
   */
  onTouchStart(e) {
    const t = So.get(this);
    t.selectedCellBeforeTouchEnd = this.selections.getCell().cellRange, this.touchApplied = !0, this.onMouseDown(e);
  }
  /**
   * OnTouchEnd callback. Simulates mouseup event.
   *
   * @private
   * @param {MouseEvent} event The mouse event object.
   */
  onTouchEnd(e) {
    var t;
    const n = e.target, o = (t = this.parentCell(n)) === null || t === void 0 ? void 0 : t.coords, r = ue(o) && o.row >= 0 && o.col >= 0;
    if (e.cancelable && r && this.wtSettings.getSetting("isDataViewInstance")) {
      const l = ["A", "BUTTON", "INPUT"];
      Yb() && (xL() || TL()) && this.selectedCellWasTouched(n) && !l.includes(n.tagName) ? e.preventDefault() : this.selectedCellWasTouched(n) || e.preventDefault();
    }
    this.onMouseUp(e), this.touchApplied = !1;
  }
  /**
   * Call listener with backward compatibility.
   *
   * @private
   * @param {string} name Name of listener.
   * @param {MouseEvent} event The event object.
   * @param {CellCoords} coords Coordinates.
   * @param {HTMLElement} target Event target.
   */
  callListener(e, t, n, o) {
    const r = this.wtSettings.getSettingPure(e);
    r && r(t, n, o, this.facadeGetter());
  }
  /**
   * Clears double-click timeouts and destroys the internal eventManager instance.
   */
  destroy() {
    const e = So.get(this);
    clearTimeout(e.dblClickTimeout[0]), clearTimeout(e.dblClickTimeout[1]), this.eventManager.destroy();
  }
};
const dR = j$;
class K$ {
  /**
   * @param {number} offset The scroll horizontal offset.
   * @param {number} total The total width of the table.
   * @param {number} countTH The number of rendered row headers.
   */
  constructor(e, t, n) {
    this.offset = e, this.total = t, this.countTH = n;
  }
  /**
   * @param {number} index The visual column index.
   * @returns {number}
   */
  offsetted(e) {
    return e + this.offset;
  }
  /**
   * @param {number} index The visual column index.
   * @returns {number}
   */
  unOffsetted(e) {
    return e - this.offset;
  }
  /**
   * @param {number} index The visual column index.
   * @returns {number}
   */
  renderedToSource(e) {
    return this.offsetted(e);
  }
  /**
   * @param {number} index The visual column index.
   * @returns {number}
   */
  sourceToRendered(e) {
    return this.unOffsetted(e);
  }
  /**
   * @param {number} index The visual column index.
   * @returns {number}
   */
  offsettedTH(e) {
    return e - this.countTH;
  }
  /**
   * @param {number} index The visual column index.
   * @returns {number}
   */
  unOffsettedTH(e) {
    return e + this.countTH;
  }
  /**
   * @param {number} index The visual column index.
   * @returns {number}
   */
  visibleRowHeadedColumnToSourceColumn(e) {
    return this.renderedToSource(this.offsettedTH(e));
  }
  /**
   * @param {number} index The visual column index.
   * @returns {number}
   */
  sourceColumnToVisibleRowHeadedColumn(e) {
    return this.unOffsettedTH(this.sourceToRendered(e));
  }
}
const X$ = K$;
class q$ {
  /**
   * @param {number} offset The scroll vertical offset.
   * @param {number} total The total height of the table.
   * @param {number} countTH The number of rendered column headers.
   */
  constructor(e, t, n) {
    this.offset = e, this.total = t, this.countTH = n;
  }
  /**
   * @param {number} index The visual row index.
   * @returns {number}
   */
  offsetted(e) {
    return e + this.offset;
  }
  /**
   * @param {number} index The visual row index.
   * @returns {number}
   */
  unOffsetted(e) {
    return e - this.offset;
  }
  /**
   * @param {number} index The visual row index.
   * @returns {number}
   */
  renderedToSource(e) {
    return this.offsetted(e);
  }
  /**
   * @param {number} index The visual row index.
   * @returns {number}
   */
  sourceToRendered(e) {
    return this.unOffsetted(e);
  }
  /**
   * @param {number} index The visual row index.
   * @returns {number}
   */
  offsettedTH(e) {
    return e - this.countTH;
  }
  /**
   * @param {number} index The visual row index.
   * @returns {number}
   */
  unOffsettedTH(e) {
    return e + this.countTH;
  }
  /**
   * @param {number} index The visual row index.
   * @returns {number}
   */
  visibleColHeadedRowToSourceRow(e) {
    return this.renderedToSource(this.offsettedTH(e));
  }
  /**
   * @param {number} index The visual row index.
   * @returns {number}
   */
  sourceRowToVisibleColHeadedRow(e) {
    return this.unOffsettedTH(this.sourceToRendered(e));
  }
}
const Z$ = q$, Q$ = 0, Rc = 1, Ec = 2;
class jC {
  constructor() {
    this.currentSize = 0, this.nextSize = 0, this.currentOffset = 0, this.nextOffset = 0;
  }
  /**
   * Sets new size of the rendered DOM elements.
   *
   * @param {number} size The size.
   */
  setSize(e) {
    this.currentSize = this.nextSize, this.nextSize = e;
  }
  /**
   * Sets new offset.
   *
   * @param {number} offset The offset.
   */
  setOffset(e) {
    this.currentOffset = this.nextOffset, this.nextOffset = e;
  }
}
class J$ {
  constructor() {
    this.size = new jC(), this.workingSpace = Q$, this.sharedSize = null;
  }
  /**
   * Sets the size for rendered elements. It can be a size for rows, cells or size for row
   * headers etc.
   *
   * @param {number} size The size.
   */
  setSize(e) {
    this.size.setSize(e);
  }
  /**
   * Sets the offset for rendered elements. The offset describes the shift between 0 and
   * the first rendered element according to the scroll position.
   *
   * @param {number} offset The offset.
   */
  setOffset(e) {
    this.size.setOffset(e);
  }
  /**
   * Returns ViewSize instance.
   *
   * @returns {ViewSize}
   */
  getViewSize() {
    return this.size;
  }
  /**
   * Checks if this ViewSizeSet is sharing the size with another instance.
   *
   * @returns {boolean}
   */
  isShared() {
    return this.sharedSize instanceof jC;
  }
  /**
   * Checks what working space describes this size instance.
   *
   * @param {number} workingSpace The number which describes the type of the working space (see constants.js).
   * @returns {boolean}
   */
  isPlaceOn(e) {
    return this.workingSpace === e;
  }
  /**
   * Appends the ViewSizeSet instance to this instance that turns it into a shared mode.
   *
   * @param {ViewSizeSet} viewSize The instance of the ViewSizeSet class.
   */
  append(e) {
    this.workingSpace = Rc, e.workingSpace = Ec, this.sharedSize = e.getViewSize();
  }
  /**
   * Prepends the ViewSize instance to this instance that turns it into a shared mode.
   *
   * @param {ViewSizeSet} viewSize The instance of the ViewSizeSet class.
   */
  prepend(e) {
    this.workingSpace = Ec, e.workingSpace = Rc, this.sharedSize = e.getViewSize();
  }
}
class fR {
  constructor(e, t, n) {
    this.rootNode = e, this.nodesPool = t, this.sizeSet = new J$(), this.childNodeType = n.toUpperCase(), this.visualIndex = 0, this.collectedNodes = [];
  }
  /**
   * Sets the size for rendered elements. It can be a size for rows, cells or size for row
   * headers etc. It depends for what table renderer this instance was created.
   *
   * @param {number} size The size.
   * @returns {OrderView}
   */
  setSize(e) {
    return this.sizeSet.setSize(e), this;
  }
  /**
   * Sets the offset for rendered elements. The offset describes the shift between 0 and
   * the first rendered element according to the scroll position.
   *
   * @param {number} offset The offset.
   * @returns {OrderView}
   */
  setOffset(e) {
    return this.sizeSet.setOffset(e), this;
  }
  /**
   * Checks if this instance of the view shares the root node with another instance. This happens only once when
   * a row (TR) as a root node is managed by two OrderView instances. If this happens another DOM injection
   * algorithm is performed to achieve consistent order.
   *
   * @returns {boolean}
   */
  isSharedViewSet() {
    return this.sizeSet.isShared();
  }
  /**
   * Returns rendered DOM element based on visual index.
   *
   * @param {number} visualIndex The visual index.
   * @returns {HTMLElement}
   */
  getNode(e) {
    return e < this.collectedNodes.length ? this.collectedNodes[e] : null;
  }
  /**
   * Returns currently processed DOM element.
   *
   * @returns {HTMLElement}
   */
  getCurrentNode() {
    const e = this.collectedNodes.length;
    return e > 0 ? this.collectedNodes[e - 1] : null;
  }
  /**
   * Returns rendered child count for this instance.
   *
   * @returns {number}
   */
  getRenderedChildCount() {
    const {
      rootNode: e,
      sizeSet: t
    } = this;
    let n = 0;
    if (this.isSharedViewSet()) {
      let o = e.firstElementChild;
      for (; o; ) {
        if (o.tagName === this.childNodeType)
          n += 1;
        else if (t.isPlaceOn(Rc))
          break;
        o = o.nextElementSibling;
      }
    } else
      n = e.childElementCount;
    return n;
  }
  /**
   * Setups and prepares all necessary properties and start the rendering process.
   * This method has to be called only once (at the start) for the render cycle.
   */
  start() {
    this.collectedNodes.length = 0, this.visualIndex = 0;
    const {
      rootNode: e,
      sizeSet: t
    } = this, n = this.isSharedViewSet(), {
      nextSize: o
    } = t.getViewSize();
    let r = this.getRenderedChildCount();
    for (; r < o; ) {
      const l = this.nodesPool();
      !n || n && t.isPlaceOn(Ec) ? e.appendChild(l) : e.insertBefore(l, e.firstChild), r += 1;
    }
    const a = n && t.isPlaceOn(Rc);
    for (; r > o; )
      e.removeChild(a ? e.firstChild : e.lastChild), r -= 1;
  }
  /**
   * Renders the DOM element based on visual index (which is calculated internally).
   * This method has to be called as many times as the size count is met (to cover all previously rendered DOM elements).
   */
  render() {
    const {
      rootNode: e,
      sizeSet: t
    } = this;
    let n = this.visualIndex;
    this.isSharedViewSet() && t.isPlaceOn(Ec) && (n += t.sharedSize.nextSize);
    let o = e.childNodes[n];
    if (o.tagName !== this.childNodeType) {
      const r = this.nodesPool();
      e.replaceChild(r, o), o = r;
    }
    this.collectedNodes.push(o), this.visualIndex += 1;
  }
  /**
   * Ends the render process.
   * This method has to be called only once (at the end) for the render cycle.
   */
  end() {
  }
}
class gR extends fR {
  /**
   * The method results in merging external order view into the current order. This happens only for order views which
   * operate on the same root node.
   *
   * In the table, there is only one scenario when this happens. TR root element
   * has a common root node with cells order view and row headers order view. Both classes have to share
   * information about their order sizes to make proper diff calculations.
   *
   * @param {OrderView} orderView The order view to merging with. The view will be added at the beginning of the list.
   * @returns {SharedOrderView}
   */
  prependView(e) {
    return this.sizeSet.prepend(e.sizeSet), e.sizeSet.append(this.sizeSet), this;
  }
  /**
   * The method results in merging external order view into the current order. This happens only for order views which
   * operate on the same root node.
   *
   * In the table, there is only one scenario when this happens. TR root element
   * has a common root node with cells order view and row headers order view. Both classes have to share
   * information about their order sizes to make proper diff calculations.
   *
   * @param {OrderView} orderView The order view to merging with. The view will be added at the end of the list.
   * @returns {SharedOrderView}
   */
  appendView(e) {
    return this.sizeSet.append(e.sizeSet), e.sizeSet.prepend(this.sizeSet), this;
  }
}
class eF {
  constructor(e) {
    this.nodeType = e.toUpperCase();
  }
  /**
   * Set document owner for this instance.
   *
   * @param {HTMLDocument} rootDocument The document window owner.
   */
  setRootDocument(e) {
    this.rootDocument = e;
  }
  /**
   * Obtains an element. The returned elements in the feature can be cached.
   *
   * @returns {HTMLElement}
   */
  obtain() {
    return this.rootDocument.createElement(this.nodeType);
  }
}
class Ha {
  constructor(e, t) {
    this.nodesPool = typeof e == "string" ? new eF(e) : null, this.nodeType = e, this.rootNode = t, this.table = null, this.renderedNodes = 0;
  }
  /**
   * Sets the table renderer instance to the current renderer.
   *
   * @param {TableRenderer} table The TableRenderer instance.
   */
  setTable(e) {
    this.nodesPool && this.nodesPool.setRootDocument(e.rootDocument), this.table = e;
  }
  /**
   * Adjusts the number of rendered nodes.
   */
  adjust() {
  }
  /**
   * Renders the contents to the elements.
   */
  render() {
  }
}
class tF extends Ha {
  constructor() {
    super("TH"), this.orderViews = /* @__PURE__ */ new WeakMap(), this.sourceRowIndex = 0;
  }
  /**
   * Obtains the instance of the SharedOrderView class which is responsible for rendering the nodes to the root node.
   *
   * @param {HTMLTableRowElement} rootNode The TR element, which is root element for row headers (TH).
   * @returns {SharedOrderView}
   */
  obtainOrderView(e) {
    let t;
    return this.orderViews.has(e) ? t = this.orderViews.get(e) : (t = new gR(e, (n) => this.nodesPool.obtain(this.sourceRowIndex, n), this.nodeType), this.orderViews.set(e, t)), t;
  }
  /**
   * Renders the cells.
   */
  render() {
    const {
      rowsToRender: e,
      rowHeaderFunctions: t,
      rowHeadersCount: n,
      rows: o,
      cells: r
    } = this.table;
    for (let a = 0; a < e; a++) {
      const l = this.table.renderedRowToSource(a), c = o.getRenderedNode(a);
      this.sourceRowIndex = l;
      const h = this.obtainOrderView(c), u = r.obtainOrderView(c);
      h.appendView(u).setSize(n).setOffset(this.table.renderedColumnToSource(0)).start();
      for (let f = 0; f < n; f++) {
        h.render();
        const g = h.getCurrentNode();
        g.className = "", g.removeAttribute("style"), t[f](l, g, f);
      }
      h.end();
    }
  }
}
class sF extends Ha {
  constructor(e) {
    super(null, e);
  }
  /**
   * Adjusts the number of the rendered elements.
   */
  adjust() {
    const {
      columnHeadersCount: e,
      rowHeadersCount: t
    } = this.table;
    let n = this.rootNode.firstChild;
    if (e) {
      const {
        columnsToRender: o
      } = this.table, r = o + t;
      for (let l = 0, c = e; l < c; l++) {
        for (n = this.rootNode.childNodes[l], n || (n = this.table.rootDocument.createElement("tr"), this.rootNode.appendChild(n)), this.renderedNodes = n.childNodes.length; this.renderedNodes < r; )
          n.appendChild(this.table.rootDocument.createElement("th")), this.renderedNodes += 1;
        for (; this.renderedNodes > r; )
          n.removeChild(n.lastChild), this.renderedNodes -= 1;
      }
      const a = this.rootNode.childNodes.length;
      if (a > e)
        for (let l = e; l < a; l++)
          this.rootNode.removeChild(this.rootNode.lastChild);
    } else
      n && bn(n);
  }
  /**
   * Renders the TH elements.
   */
  render() {
    const {
      columnHeadersCount: e
    } = this.table;
    for (let t = 0; t < e; t += 1) {
      const {
        columnHeaderFunctions: n,
        columnsToRender: o,
        rowHeadersCount: r
      } = this.table, a = this.rootNode.childNodes[t];
      for (let l = -1 * r; l < o; l += 1) {
        const c = this.table.renderedColumnToSource(l), h = a.childNodes[l + r];
        h.className = "", h.removeAttribute("style"), n[t](c, h, t);
      }
    }
  }
}
class nF extends Ha {
  constructor(e) {
    super(null, e);
  }
  /**
   * Adjusts the number of the rendered elements.
   */
  adjust() {
    const {
      columnsToRender: e,
      rowHeadersCount: t
    } = this.table, n = e + t;
    for (; this.renderedNodes < n; )
      this.rootNode.appendChild(this.table.rootDocument.createElement("col")), this.renderedNodes += 1;
    for (; this.renderedNodes > n; )
      this.rootNode.removeChild(this.rootNode.lastChild), this.renderedNodes -= 1;
  }
  /**
   * Renders the col group elements.
   */
  render() {
    this.adjust();
    const {
      columnsToRender: e,
      rowHeadersCount: t
    } = this.table;
    for (let o = 0; o < t; o++) {
      const r = this.table.renderedColumnToSource(o), a = this.table.columnUtils.getHeaderWidth(r);
      this.rootNode.childNodes[o].style.width = `${a}px`;
    }
    for (let o = 0; o < e; o++) {
      const r = this.table.renderedColumnToSource(o), a = this.table.columnUtils.getStretchedColumnWidth(r);
      this.rootNode.childNodes[o + t].style.width = `${a}px`;
    }
    const n = this.rootNode.firstChild;
    n && ie(n, "rowHeader");
  }
}
let KC = !1;
class iF extends Ha {
  constructor(e) {
    super("TR", e), this.orderView = new fR(e, (t) => this.nodesPool.obtain(t), this.nodeType);
  }
  /**
   * Returns currently rendered node.
   *
   * @param {string} visualIndex Visual index of the rendered node (it always goeas from 0 to N).
   * @returns {HTMLTableRowElement}
   */
  getRenderedNode(e) {
    return this.orderView.getNode(e);
  }
  /**
   * Renders the cells.
   */
  render() {
    const {
      rowsToRender: e
    } = this.table;
    !KC && e > 1e3 && (KC = !0, pt(ut`Performance tip: Handsontable rendered more than 1000 visible rows. Consider limiting\x20
        the number of rendered rows by specifying the table height and/or turning off the "renderAllRows" option.`)), this.orderView.setSize(e).setOffset(this.table.renderedRowToSource(0)).start();
    for (let t = 0; t < e; t++)
      this.orderView.render();
    this.orderView.end();
  }
}
class oF extends Ha {
  constructor() {
    super("TD"), this.orderViews = /* @__PURE__ */ new WeakMap(), this.sourceRowIndex = 0;
  }
  /**
   * Obtains the instance of the SharedOrderView class which is responsible for rendering the nodes to the root node.
   *
   * @param {HTMLTableRowElement} rootNode The TR element, which is root element for cells (TD).
   * @returns {SharedOrderView}
   */
  obtainOrderView(e) {
    let t;
    return this.orderViews.has(e) ? t = this.orderViews.get(e) : (t = new gR(e, (n) => this.nodesPool.obtain(this.sourceRowIndex, n), this.nodeType), this.orderViews.set(e, t)), t;
  }
  /**
   * Renders the cells.
   */
  render() {
    const {
      rowsToRender: e,
      columnsToRender: t,
      rows: n,
      rowHeaders: o
    } = this.table;
    for (let r = 0; r < e; r++) {
      const a = this.table.renderedRowToSource(r), l = n.getRenderedNode(r);
      this.sourceRowIndex = a;
      const c = this.obtainOrderView(l), h = o.obtainOrderView(l);
      c.prependView(h).setSize(t).setOffset(this.table.renderedColumnToSource(0)).start();
      for (let u = 0; u < t; u++) {
        c.render();
        const f = c.getCurrentNode(), g = this.table.renderedColumnToSource(u);
        Ne(f, "hide") || (f.className = ""), f.removeAttribute("style"), f.removeAttribute("dir"), this.table.cellRenderer(a, g, f);
      }
      c.end();
    }
  }
}
class rF {
  constructor(e) {
    let {
      cellRenderer: t
    } = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    this.rootNode = e, this.rootDocument = this.rootNode.ownerDocument, this.rowHeaders = null, this.columnHeaders = null, this.colGroup = null, this.rows = null, this.cells = null, this.rowFilter = null, this.columnFilter = null, this.rowUtils = null, this.columnUtils = null, this.rowsToRender = 0, this.columnsToRender = 0, this.rowHeaderFunctions = [], this.rowHeadersCount = 0, this.columnHeaderFunctions = [], this.columnHeadersCount = 0, this.cellRenderer = t;
  }
  /**
   * Set row and column util classes.
   *
   * @param {RowUtils} rowUtils RowUtils instance which provides useful methods related to row sizes.
   * @param {ColumnUtils} columnUtils ColumnUtils instance which provides useful methods related to row sizes.
   */
  setAxisUtils(e, t) {
    this.rowUtils = e, this.columnUtils = t;
  }
  /**
   * Sets viewport size of the table.
   *
   * @param {number} rowsCount An amount of rows to render.
   * @param {number} columnsCount An amount of columns to render.
   */
  setViewportSize(e, t) {
    this.rowsToRender = e, this.columnsToRender = t;
  }
  /**
   * Sets row and column filter instances.
   *
   * @param {RowFilter} rowFilter Row filter instance which contains all necessary information about row index transformation.
   * @param {ColumnFilter} columnFilter Column filter instance which contains all necessary information about row
   * index transformation.
   */
  setFilters(e, t) {
    this.rowFilter = e, this.columnFilter = t;
  }
  /**
   * Sets row and column header functions.
   *
   * @param {Function[]} rowHeaders Row header functions. Factories for creating content for row headers.
   * @param {Function[]} columnHeaders Column header functions. Factories for creating content for column headers.
   */
  setHeaderContentRenderers(e, t) {
    this.rowHeaderFunctions = e, this.rowHeadersCount = e.length, this.columnHeaderFunctions = t, this.columnHeadersCount = t.length;
  }
  /**
   * Sets table renderers.
   *
   * @param {renderers} renderers The renderer units.
   * @param {RowHeadersRenderer} renderers.rowHeaders Row headers renderer.
   * @param {ColumnHeadersRenderer} renderers.columnHeaders Column headers renderer.
   * @param {ColGroupRenderer} renderers.colGroup Col group renderer.
   * @param {RowsRenderer} renderers.rows Rows renderer.
   * @param {CellsRenderer} renderers.cells Cells renderer.
   */
  setRenderers() {
    let {
      rowHeaders: e,
      columnHeaders: t,
      colGroup: n,
      rows: o,
      cells: r
    } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    e.setTable(this), t.setTable(this), n.setTable(this), o.setTable(this), r.setTable(this), this.rowHeaders = e, this.columnHeaders = t, this.colGroup = n, this.rows = o, this.cells = r;
  }
  /**
   * Transforms visual/rendered row index to source index.
   *
   * @param {number} rowIndex Rendered index.
   * @returns {number}
   */
  renderedRowToSource(e) {
    return this.rowFilter.renderedToSource(e);
  }
  /**
   * Transforms visual/rendered column index to source index.
   *
   * @param {number} columnIndex Rendered index.
   * @returns {number}
   */
  renderedColumnToSource(e) {
    return this.columnFilter.renderedToSource(e);
  }
  /**
   * Renders the table.
   */
  render() {
    this.colGroup.adjust(), this.columnHeaders.adjust(), this.rows.adjust(), this.rowHeaders.adjust(), this.columnHeaders.render(), this.rows.render(), this.rowHeaders.render(), this.cells.render(), this.columnUtils.calculateWidths(), this.colGroup.render();
    const {
      rowsToRender: e,
      rows: t
    } = this;
    for (let n = 0; n < e; n++) {
      const o = t.getRenderedNode(n);
      if (o.firstChild) {
        const r = this.renderedRowToSource(n), a = this.rowUtils.getHeight(r);
        a ? o.firstChild.style.height = `${a - 1}px` : o.firstChild.style.height = "";
      }
    }
  }
}
class aF {
  constructor() {
    let {
      TABLE: e,
      THEAD: t,
      COLGROUP: n,
      TBODY: o,
      rowUtils: r,
      columnUtils: a,
      cellRenderer: l
    } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    this.renderer = new rF(e, {
      cellRenderer: l
    }), this.renderer.setRenderers({
      rowHeaders: new tF(),
      columnHeaders: new sF(t),
      colGroup: new nF(n),
      rows: new iF(o),
      cells: new oF()
    }), this.renderer.setAxisUtils(r, a);
  }
  /**
   * Sets filter calculators for newly calculated row and column position. The filters are used to transform visual
   * indexes (0 to N) to source indexes provided by Handsontable.
   *
   * @param {RowFilter} rowFilter The row filter instance.
   * @param {ColumnFilter} columnFilter The column filter instance.
   * @returns {Renderer}
   */
  setFilters(e, t) {
    return this.renderer.setFilters(e, t), this;
  }
  /**
   * Sets the viewport size of the rendered table.
   *
   * @param {number} rowsCount An amount of rows to render.
   * @param {number} columnsCount An amount of columns to render.
   * @returns {Renderer}
   */
  setViewportSize(e, t) {
    return this.renderer.setViewportSize(e, t), this;
  }
  /**
   * Sets row and column header functions.
   *
   * @param {Function[]} rowHeaders Row header functions. Factories for creating content for row headers.
   * @param {Function[]} columnHeaders Column header functions. Factories for creating content for column headers.
   * @returns {Renderer}
   */
  setHeaderContentRenderers(e, t) {
    return this.renderer.setHeaderContentRenderers(e, t), this;
  }
  /**
   * Adjusts the table (preparing for render).
   */
  adjust() {
    this.renderer.adjust();
  }
  /**
   * Renders the table.
   */
  render() {
    this.renderer.render();
  }
}
class lF {
  /**
   * @param {TableDao} dataAccessObject The table Data Access Object.
   * @param {Settings} wtSettings The walkontable settings.
   */
  constructor(e, t) {
    this.dataAccessObject = e, this.wtSettings = t, this.headerWidths = /* @__PURE__ */ new Map();
  }
  /**
   * Returns column width based on passed source index.
   *
   * @param {number} sourceIndex Column source index.
   * @returns {number}
   */
  getWidth(e) {
    return this.wtSettings.getSetting("columnWidth", e) || this.wtSettings.getSetting("defaultColumnWidth");
  }
  /**
   * Returns stretched column width based on passed source index.
   *
   * @param {number} sourceIndex Column source index.
   * @returns {number}
   */
  getStretchedColumnWidth(e) {
    const t = this.dataAccessObject.wtViewport.columnsRenderCalculator;
    let n = this.getWidth(e);
    if (t) {
      const o = t.getStretchedColumnWidth(e, n);
      o && (n = o);
    }
    return n;
  }
  /**
   * Returns column header height based on passed header level.
   *
   * @param {number} level Column header level.
   * @returns {number}
   */
  getHeaderHeight(e) {
    let t = this.wtSettings.getSetting("defaultRowHeight");
    const n = this.dataAccessObject.wtViewport.oversizedColumnHeaders[e];
    return n !== void 0 && (t = t ? Math.max(t, n) : n), t;
  }
  /**
   * Returns column header width based on passed source index.
   *
   * @param {number} sourceIndex Column source index.
   * @returns {number}
   */
  getHeaderWidth(e) {
    return this.headerWidths.get(this.dataAccessObject.wtTable.columnFilter.sourceToRendered(e));
  }
  /**
   * Calculates column header widths that can be retrieved from the cache.
   */
  calculateWidths() {
    const {
      wtSettings: e
    } = this, {
      wtTable: t,
      wtViewport: n,
      cloneSource: o
    } = this.dataAccessObject, r = o ? o.wtTable.holder : t.holder, a = r.offsetHeight < r.scrollHeight ? qt() : 0;
    let l = e.getSetting("rowHeaderWidth");
    if (n.columnsRenderCalculator.refreshStretching(n.getViewportWidth() - a), l = e.getSetting("onModifyRowHeaderWidth", l), l != null) {
      const c = e.getSetting("rowHeaders").length, h = e.getSetting("defaultColumnWidth");
      for (let u = 0; u < c; u++) {
        let f = Array.isArray(l) ? l[u] : l;
        f = f ?? h, this.headerWidths.set(u, f);
      }
    }
  }
}
class cF {
  /**
   * @param {TableDao} dataAccessObject The table Data Access Object.
   * @param {Settings} wtSettings The walkontable settings.
   */
  constructor(e, t) {
    this.dataAccessObject = e, this.wtSettings = t;
  }
  /**
   * Returns row height based on passed source index.
   *
   * @param {number} sourceIndex Row source index.
   * @returns {number}
   */
  getHeight(e) {
    let t = this.wtSettings.getSetting("rowHeight", e);
    const n = this.dataAccessObject.wtViewport.oversizedRows[e];
    return n !== void 0 && (t = t === void 0 ? n : Math.max(t, n)), t;
  }
}
function an(s, e, t) {
  return e = hF(e), e in s ? Object.defineProperty(s, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : s[e] = t, s;
}
function hF(s) {
  var e = uF(s, "string");
  return typeof e == "symbol" ? e : String(e);
}
function uF(s, e) {
  if (typeof s != "object" || s === null)
    return s;
  var t = s[Symbol.toPrimitive];
  if (t !== void 0) {
    var n = t.call(s, e || "default");
    if (typeof n != "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(s);
}
class dF {
  /**
   *
   * @abstract
   * @param {TableDao} dataAccessObject The data access object.
   * @param {FacadeGetter} facadeGetter Function which return proper facade.
   * @param {DomBindings} domBindings Bindings into DOM.
   * @param {Settings} wtSettings The Walkontable settings.
   * @param {'master'|CLONE_TYPES_ENUM} name Overlay name.
   */
  constructor(e, t, n, o, r) {
    an(this, "wtSettings", null), an(this, "domBindings", void 0), an(this, "TBODY", null), an(this, "THEAD", null), an(this, "COLGROUP", null), an(this, "hasTableHeight", !0), an(this, "hasTableWidth", !0), an(this, "isTableVisible", !1), an(this, "tableOffset", 0), an(this, "holderOffset", 0), this.domBindings = n, this.isMaster = r === "master", this.name = r, this.dataAccessObject = e, this.facadeGetter = t, this.wtSettings = o, this.instance = this.dataAccessObject.wot, this.wot = this.dataAccessObject.wot, this.TABLE = n.rootTable, kb(this.TABLE), this.spreader = this.createSpreader(this.TABLE), this.hider = this.createHider(this.spreader), this.holder = this.createHolder(this.hider), this.wtRootElement = this.holder.parentNode, this.isMaster && this.alignOverlaysWithTrimmingContainer(), this.fixTableDomTree(), this.rowFilter = null, this.columnFilter = null, this.correctHeaderWidth = !1;
    const a = this.wtSettings.getSettingPure("rowHeaderWidth");
    this.wtSettings.update("rowHeaderWidth", () => this._modifyRowHeaderWidth(a)), this.rowUtils = new cF(this.dataAccessObject, this.wtSettings), this.columnUtils = new lF(this.dataAccessObject, this.wtSettings), this.tableRenderer = new aF({
      // TODO refactoring, It can be passed through IOC.
      TABLE: this.TABLE,
      THEAD: this.THEAD,
      COLGROUP: this.COLGROUP,
      TBODY: this.TBODY,
      rowUtils: this.rowUtils,
      columnUtils: this.columnUtils,
      cellRenderer: this.wtSettings.getSettingPure("cellRenderer")
    });
  }
  /**
   * Returns a boolean that is true if this Table represents a specific overlay, identified by the overlay name.
   * For MasterTable, it returns false.
   *
   * @param {string} overlayTypeName The overlay type.
   * @returns {boolean}
   */
  is(e) {
    return this.name === e;
  }
  /**
   *
   */
  fixTableDomTree() {
    const e = this.domBindings.rootDocument;
    this.TBODY = this.TABLE.querySelector("tbody"), this.TBODY || (this.TBODY = e.createElement("tbody"), this.TABLE.appendChild(this.TBODY)), this.THEAD = this.TABLE.querySelector("thead"), this.THEAD || (this.THEAD = e.createElement("thead"), this.TABLE.insertBefore(this.THEAD, this.TBODY)), this.COLGROUP = this.TABLE.querySelector("colgroup"), this.COLGROUP || (this.COLGROUP = e.createElement("colgroup"), this.TABLE.insertBefore(this.COLGROUP, this.THEAD));
  }
  /**
   * @param {HTMLTableElement} table An element to process.
   * @returns {HTMLElement}
   */
  createSpreader(e) {
    const t = e.parentNode;
    let n;
    return (!t || t.nodeType !== Node.ELEMENT_NODE || !Ne(t, "wtHolder")) && (n = this.domBindings.rootDocument.createElement("div"), n.className = "wtSpreader", t && t.insertBefore(n, e), n.appendChild(e)), n.style.position = "relative", n;
  }
  /**
   * @param {HTMLElement} spreader An element to the hider element is injected.
   * @returns {HTMLElement}
   */
  createHider(e) {
    const t = e.parentNode;
    let n;
    return (!t || t.nodeType !== Node.ELEMENT_NODE || !Ne(t, "wtHolder")) && (n = this.domBindings.rootDocument.createElement("div"), n.className = "wtHider", t && t.insertBefore(n, e), n.appendChild(e)), n;
  }
  /**
   *
   * @param {HTMLElement} hider An element to the holder element is injected.
   * @returns {HTMLElement}
   */
  createHolder(e) {
    const t = e.parentNode;
    let n;
    return (!t || t.nodeType !== Node.ELEMENT_NODE || !Ne(t, "wtHolder")) && (n = this.domBindings.rootDocument.createElement("div"), n.style.position = "relative", n.className = "wtHolder", t && t.insertBefore(n, e), this.isMaster && (n.parentNode.className += "ht_master handsontable", n.parentNode.setAttribute("dir", this.wtSettings.getSettingPure("rtlMode") ? "rtl" : "ltr")), n.appendChild(e)), n;
  }
  /**
   * Redraws the table.
   *
   * @param {boolean} [fastDraw=false] If TRUE, will try to avoid full redraw and only update the border positions.
   *                                   If FALSE or UNDEFINED, will perform a full redraw.
   * @returns {Table}
   */
  draw() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
    const {
      wtSettings: t
    } = this, {
      wtOverlays: n,
      wtViewport: o
    } = this.dataAccessObject, r = t.getSetting("totalRows"), a = t.getSetting("totalColumns"), l = t.getSetting("rowHeaders"), c = l.length, h = t.getSetting("columnHeaders"), u = h.length;
    let f = !1, g = e;
    if (this.isMaster && (this.holderOffset = Wt(this.holder), g = o.createRenderCalculators(g), c && !t.getSetting("fixedColumnsStart"))) {
      const w = n.inlineStartOverlay.getScrollPosition(), C = this.correctHeaderWidth;
      this.correctHeaderWidth = w !== 0, C !== this.correctHeaderWidth && (g = !1);
    }
    if (this.isMaster && (f = n.updateStateOfRendering()), g)
      this.isMaster && o.createVisibleCalculators(), n && n.refresh(!0);
    else {
      this.isMaster ? this.tableOffset = Wt(this.TABLE) : this.tableOffset = this.dataAccessObject.parentTableOffset;
      const w = r > 0 ? this.getFirstRenderedRow() : 0, C = a > 0 ? this.getFirstRenderedColumn() : 0;
      this.rowFilter = new Z$(w, r, u), this.columnFilter = new X$(C, a, c);
      let S = !0;
      if (this.isMaster) {
        this.alignOverlaysWithTrimmingContainer();
        const x = {};
        this.wtSettings.getSetting("beforeDraw", !0, x), S = x.skipRender !== !0;
      }
      if (S) {
        this.tableRenderer.setHeaderContentRenderers(l, h), (this.is(Cn) || this.is(pi)) && this.tableRenderer.setHeaderContentRenderers(l, []), this.resetOversizedRows(), this.tableRenderer.setViewportSize(this.getRenderedRowsCount(), this.getRenderedColumnsCount()).setFilters(this.rowFilter, this.columnFilter).render();
        let x;
        if (this.isMaster && (x = this.dataAccessObject.workspaceWidth, this.dataAccessObject.wtViewport.containerWidth = null, this.markOversizedColumnHeaders()), this.adjustColumnHeaderHeights(), (this.isMaster || this.is(Cn)) && this.markOversizedRows(), this.isMaster) {
          this.dataAccessObject.wtViewport.createVisibleCalculators(), this.dataAccessObject.wtOverlays.refresh(!1), this.dataAccessObject.wtOverlays.applyToDOM();
          const T = ht(this.hider), M = ht(this.TABLE);
          T !== 0 && M !== T && (this.columnUtils.calculateWidths(), this.tableRenderer.renderer.colGroup.render()), x !== this.dataAccessObject.wtViewport.getWorkspaceWidth() && (this.dataAccessObject.wtViewport.containerWidth = null, this.columnUtils.calculateWidths(), this.tableRenderer.renderer.colGroup.render()), this.wtSettings.getSetting("onDraw", !0);
        } else
          this.is(Cn) && this.dataAccessObject.cloneSource.wtOverlays.adjustElementsSize();
      }
    }
    let m = !1;
    return this.isMaster && (m = n.topOverlay.resetFixedPosition(), n.bottomOverlay.clone && (m = n.bottomOverlay.resetFixedPosition() || m), m = n.inlineStartOverlay.resetFixedPosition() || m, n.topInlineStartCornerOverlay && n.topInlineStartCornerOverlay.resetFixedPosition(), n.bottomInlineStartCornerOverlay && n.bottomInlineStartCornerOverlay.clone && n.bottomInlineStartCornerOverlay.resetFixedPosition()), m ? (n.refreshAll(), n.adjustElementsSize()) : this.refreshSelections(g), f && n.syncScrollWithMaster(), this.dataAccessObject.drawn = !0, this;
  }
  /**
   * @param {number} col The visual column index.
   */
  markIfOversizedColumnHeader(e) {
    const t = this.columnFilter.renderedToSource(e);
    let n = this.wtSettings.getSetting("columnHeaders").length;
    const o = this.wtSettings.getSetting("defaultRowHeight");
    let r, a, l;
    const c = this.wtSettings.getSetting("columnHeaderHeight") || [];
    for (; n; )
      n -= 1, r = this.getColumnHeaderHeight(n), a = this.getColumnHeader(t, n), a && (l = fi(a), (!r && o < l || r < l) && (this.dataAccessObject.wtViewport.oversizedColumnHeaders[n] = l), Array.isArray(c) ? c[n] !== null && c[n] !== void 0 && (this.dataAccessObject.wtViewport.oversizedColumnHeaders[n] = c[n]) : isNaN(c) || (this.dataAccessObject.wtViewport.oversizedColumnHeaders[n] = c), this.dataAccessObject.wtViewport.oversizedColumnHeaders[n] < (c[n] || c) && (this.dataAccessObject.wtViewport.oversizedColumnHeaders[n] = c[n] || c));
  }
  /**
   *
   */
  adjustColumnHeaderHeights() {
    const {
      wtSettings: e
    } = this, t = this.THEAD.childNodes, n = this.dataAccessObject.wtViewport.oversizedColumnHeaders, o = e.getSetting("columnHeaders");
    for (let r = 0, a = o.length; r < a; r++)
      if (n[r]) {
        if (!t[r] || t[r].childNodes.length === 0)
          return;
        t[r].childNodes[0].style.height = `${n[r]}px`;
      }
  }
  /**
   * Resets cache of row heights. The cache should be cached for each render cycle in a case
   * when new cell values have content which increases/decreases cell height.
   */
  resetOversizedRows() {
    const {
      wtSettings: e
    } = this, {
      wtViewport: t
    } = this.dataAccessObject;
    if (!(!this.isMaster && !this.is(Cn)) && !e.getSetting("externalRowCalculator")) {
      const n = this.getRenderedRowsCount();
      for (let o = 0; o < n; o++) {
        const r = this.rowFilter.renderedToSource(o);
        t.oversizedRows && t.oversizedRows[r] && (t.oversizedRows[r] = void 0);
      }
    }
  }
  /**
   * @param {string} className The CSS class name to remove from the table cells.
   */
  removeClassFromCells(e) {
    const t = this.TABLE.querySelectorAll(`.${e}`);
    for (let n = 0, o = t.length; n < o; n++)
      $e(t[n], e);
  }
  /**
   * Refresh the table selection by re-rendering Selection instances connected with that instance.
   *
   * @param {boolean} fastDraw If fast drawing is enabled than additionally className clearing is applied.
   */
  refreshSelections(e) {
    const {
      wtSettings: t
    } = this, {
      selections: n
    } = this.dataAccessObject;
    if (!n)
      return;
    const o = Array.from(n), r = o.length;
    if (e) {
      const a = [];
      for (let h = 0; h < r; h++) {
        const {
          highlightHeaderClassName: u,
          highlightRowClassName: f,
          highlightColumnClassName: g
        } = o[h].settings, m = o[h].classNames, w = m.length;
        for (let C = 0; C < w; C++)
          a.includes(m[C]) || a.push(m[C]);
        u && !a.includes(u) && a.push(u), f && !a.includes(f) && a.push(f), g && !a.includes(g) && a.push(g);
      }
      const l = t.getSetting("onBeforeRemoveCellClassNames");
      if (Array.isArray(l))
        for (let h = 0; h < l.length; h++)
          a.push(l[h]);
      const c = a.length;
      for (let h = 0; h < c; h++)
        this.removeClassFromCells(a[h]);
    }
    for (let a = 0; a < r; a++)
      o[a].draw(this.facadeGetter(), e);
  }
  /**
   * Get cell element at coords.
   * Negative coords.row or coords.col are used to retrieve header cells. If there are multiple header levels, the
   * negative value corresponds to the distance from the working area. For example, when there are 3 levels of column
   * headers, coords.col=-1 corresponds to the most inner header element, while coords.col=-3 corresponds to the
   * outmost header element.
   *
   * In case an element for the coords is not rendered, the method returns an error code.
   * To produce the error code, the input parameters are validated in the order in which they
   * are given. Thus, if both the row and the column coords are out of the rendered bounds,
   * the method returns the error code for the row.
   *
   * @param {CellCoords} coords The cell coordinates.
   * @returns {HTMLElement|number} HTMLElement on success or Number one of the exit codes on error:
   *  -1 row before viewport
   *  -2 row after viewport
   *  -3 column before viewport
   *  -4 column after viewport.
   */
  getCell(e) {
    let t = e.row, n = e.col;
    const o = this.wtSettings.getSetting("onModifyGetCellCoords", t, n);
    if (o && Array.isArray(o) && ([t, n] = o), this.isRowBeforeRenderedRows(t))
      return -1;
    if (this.isRowAfterRenderedRows(t))
      return -2;
    if (this.isColumnBeforeRenderedColumns(n))
      return -3;
    if (this.isColumnAfterRenderedColumns(n))
      return -4;
    const r = this.getRow(t);
    if (!r && t >= 0)
      throw new Error("TR was expected to be rendered but is not");
    const a = r.childNodes[this.columnFilter.sourceColumnToVisibleRowHeadedColumn(n)];
    if (!a && n >= 0)
      throw new Error("TD or TH was expected to be rendered but is not");
    return a;
  }
  /**
   * Get the DOM element of the row with the provided index.
   *
   * @param {number} rowIndex Row index.
   * @returns {HTMLTableRowElement|boolean} Return the row's DOM element or `false` if the row with the provided
   * index doesn't exist.
   */
  getRow(e) {
    let t = null, n = null;
    if (e < 0) {
      var o;
      t = (o = this.rowFilter) === null || o === void 0 ? void 0 : o.sourceRowToVisibleColHeadedRow(e), n = this.THEAD;
    } else {
      var r;
      t = (r = this.rowFilter) === null || r === void 0 ? void 0 : r.sourceToRendered(e), n = this.TBODY;
    }
    return t !== void 0 && n !== void 0 ? n.childNodes.length < t + 1 ? !1 : n.childNodes[t] : !1;
  }
  /**
   * GetColumnHeader.
   *
   * @param {number} col Column index.
   * @param {number} [level=0] Header level (0 = most distant to the table).
   * @returns {object} HTMLElement on success or undefined on error.
   */
  getColumnHeader(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
    const n = this.THEAD.childNodes[t];
    return n == null ? void 0 : n.childNodes[this.columnFilter.sourceColumnToVisibleRowHeadedColumn(e)];
  }
  /**
   * Gets all columns headers (TH elements) from the table.
   *
   * @param {number} column A source column index.
   * @returns {HTMLTableCellElement[]}
   */
  getColumnHeaders(e) {
    const t = [], n = this.columnFilter.sourceColumnToVisibleRowHeadedColumn(e);
    return this.THEAD.childNodes.forEach((o) => {
      const r = o.childNodes[n];
      r && t.push(r);
    }), t;
  }
  /**
   * GetRowHeader.
   *
   * @param {number} row Row index.
   * @param {number} [level=0] Header level (0 = most distant to the table).
   * @returns {HTMLElement} HTMLElement on success or Number one of the exit codes on error: `null table doesn't have
   *   row headers`.
   */
  getRowHeader(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
    if (this.columnFilter.sourceColumnToVisibleRowHeadedColumn(0) === 0)
      return;
    const n = this.wtSettings.getSetting("rowHeaders").length;
    if (t >= n)
      return;
    const o = this.TBODY.childNodes[this.rowFilter.sourceToRendered(e)];
    return o == null ? void 0 : o.childNodes[t];
  }
  /**
   * Gets all rows headers (TH elements) from the table.
   *
   * @param {number} row A source row index.
   * @returns {HTMLTableCellElement[]}
   */
  getRowHeaders(e) {
    if (this.columnFilter.sourceColumnToVisibleRowHeadedColumn(0) === 0)
      return [];
    const t = [], n = this.wtSettings.getSetting("rowHeaders").length;
    for (let o = 0; o < n; o++) {
      const r = this.TBODY.childNodes[this.rowFilter.sourceToRendered(e)], a = r == null ? void 0 : r.childNodes[o];
      a && t.push(a);
    }
    return t;
  }
  /**
   * Returns cell coords object for a given TD (or a child element of a TD element).
   *
   * @param {HTMLTableCellElement} TD A cell DOM element (or a child of one).
   * @returns {CellCoords|null} The coordinates of the provided TD element (or the closest TD element) or null, if the
   *   provided element is not applicable.
   */
  getCoords(e) {
    let t = e;
    if (t.nodeName !== "TD" && t.nodeName !== "TH" && (t = ji(t, ["TD", "TH"])), t === null)
      return null;
    const n = t.parentNode, o = n.parentNode;
    let r = ZN(n), a = t.cellIndex;
    return _i(so, t, this.wtRootElement) || _i(eo, t, this.wtRootElement) ? o.nodeName === "THEAD" && (r -= o.childNodes.length) : _i(pi, t, this.wtRootElement) || _i(Cn, t, this.wtRootElement) ? r = this.wtSettings.getSetting("totalRows") - o.childNodes.length + r : o === this.THEAD ? r = this.rowFilter.visibleColHeadedRowToSourceRow(r) : r = this.rowFilter.renderedToSource(r), _i(so, t, this.wtRootElement) || _i(to, t, this.wtRootElement) || _i(pi, t, this.wtRootElement) ? a = this.columnFilter.offsettedTH(a) : a = this.columnFilter.visibleRowHeadedColumnToSourceColumn(a), this.wot.createCellCoords(r, a);
  }
  /**
   * Check if any of the rendered rows is higher than expected, and if so, cache them.
   */
  markOversizedRows() {
    if (this.wtSettings.getSetting("externalRowCalculator"))
      return;
    let e = this.TBODY.childNodes.length;
    const t = e * this.wtSettings.getSetting("defaultRowHeight"), n = fi(this.TBODY) - 1;
    let o, r, a, l, c;
    if (!(t === n && !this.wtSettings.getSetting("fixedRowsBottom")))
      for (; e; )
        e -= 1, a = this.rowFilter.renderedToSource(e), o = this.getRowHeight(a), l = this.getTrForRow(a), c = l.querySelector("th"), c ? r = fi(c) : r = fi(l) - 1, (!o && this.wtSettings.getSetting("defaultRowHeight") < r || o < r) && (r += 1, this.dataAccessObject.wtViewport.oversizedRows[a] = r);
  }
  /**
   * @param {number} row The visual row index.
   * @returns {HTMLTableElement}
   */
  getTrForRow(e) {
    return this.TBODY.childNodes[this.rowFilter.sourceToRendered(e)];
  }
  /**
   * Checks if the column index (negative value from -1 to N) is rendered.
   *
   * @param {number} column The column index (negative value from -1 to N).
   * @returns {boolean}
   */
  isColumnHeaderRendered(e) {
    if (e >= 0)
      return !1;
    const n = this.wtSettings.getSetting("rowHeaders").length;
    return Math.abs(e) <= n;
  }
  /**
   * Checks if the row index (negative value from -1 to N) is rendered.
   *
   * @param {number} row The row index (negative value from -1 to N).
   * @returns {boolean}
   */
  isRowHeaderRendered(e) {
    if (e >= 0)
      return !1;
    const n = this.wtSettings.getSetting("columnHeaders").length;
    return Math.abs(e) <= n;
  }
  /* eslint-disable jsdoc/require-description-complete-sentence */
  /**
   * Check if the given row index is lower than the index of the first row that
   * is currently rendered and return TRUE in that case, or FALSE otherwise.
   *
   * Negative row index is used to check the columns' headers.
   *
   *  Headers
   *           +--------------+                                     │
   *       -3  │    │    │    │                                     │
   *           +--------------+                                     │
   *       -2  │    │    │    │                                     │ TRUE
   *           +--------------+                                     │
   *       -1  │    │    │    │                                     │
   *  Cells  +==================+                                   │
   *        0  ┇    ┇    ┇    ┇ <--- For fixedRowsTop: 1            │
   *           +--------------+      the master overlay do       ---+ first rendered row (index 1)
   *        1  │ A2 │ B2 │ C2 │      not render the first row.      │
   *           +--------------+                                     │ FALSE
   *        2  │ A3 │ B3 │ C3 │                                     │
   *           +--------------+                                  ---+ last rendered row
   *                                                                │
   *                                                                │ FALSE
   *
   * @param {number} row The visual row index.
   * @memberof Table#
   * @function isRowBeforeRenderedRows
   * @returns {boolean}
   */
  /* eslint-enable jsdoc/require-description-complete-sentence */
  isRowBeforeRenderedRows(e) {
    const t = this.getFirstRenderedRow();
    return e < 0 && t <= 0 ? !this.isRowHeaderRendered(e) : e < t;
  }
  /* eslint-disable jsdoc/require-description-complete-sentence */
  /**
   * Check if the given column index is greater than the index of the last column that
   * is currently rendered and return TRUE in that case, or FALSE otherwise.
   *
   * The negative row index is used to check the columns' headers. However,
   * keep in mind that for negative indexes, the method always returns FALSE as
   * it is not possible to render headers partially. The "after" index can not be
   * lower than -1.
   *
   *  Headers
   *           +--------------+                                     │
   *       -3  │    │    │    │                                     │
   *           +--------------+                                     │
   *       -2  │    │    │    │                                     │ FALSE
   *           +--------------+                                     │
   *       -1  │    │    │    │                                     │
   *  Cells  +==================+                                   │
   *        0  ┇    ┇    ┇    ┇ <--- For fixedRowsTop: 1            │
   *           +--------------+      the master overlay do       ---+ first rendered row (index 1)
   *        1  │ A2 │ B2 │ C2 │      not render the first rows      │
   *           +--------------+                                     │ FALSE
   *        2  │ A3 │ B3 │ C3 │                                     │
   *           +--------------+                                  ---+ last rendered row
   *                                                                │
   *                                                                │ TRUE
   *
   * @param {number} row The visual row index.
   * @memberof Table#
   * @function isRowAfterRenderedRows
   * @returns {boolean}
   */
  /* eslint-enable jsdoc/require-description-complete-sentence */
  isRowAfterRenderedRows(e) {
    return e > this.getLastRenderedRow();
  }
  /* eslint-disable jsdoc/require-description-complete-sentence */
  /**
   * Check if the given column index is lower than the index of the first column that
   * is currently rendered and return TRUE in that case, or FALSE otherwise.
   *
   * Negative column index is used to check the rows' headers.
   *
   *                            For fixedColumnsStart: 1 the master overlay
   *                            do not render this first columns.
   *  Headers    -3   -2   -1    |
   *           +----+----+----║┄ ┄ +------+------+
   *           │    │    │    ║    │  B1  │  C1  │
   *           +--------------║┄ ┄ --------------│
   *           │    │    │    ║    │  B2  │  C2  │
   *           +--------------║┄ ┄ --------------│
   *           │    │    │    ║    │  B3  │  C3  │
   *           +----+----+----║┄ ┄ +------+------+
   *                               ╷             ╷
   *      -------------------------+-------------+---------------->
   *          TRUE             first    FALSE   last         FALSE
   *                           rendered         rendered
   *                           column           column
   *
   * @param {number} column The visual column index.
   * @memberof Table#
   * @function isColumnBeforeRenderedColumns
   * @returns {boolean}
   */
  /* eslint-enable jsdoc/require-description-complete-sentence */
  isColumnBeforeRenderedColumns(e) {
    const t = this.getFirstRenderedColumn();
    return e < 0 && t <= 0 ? !this.isColumnHeaderRendered(e) : e < t;
  }
  /* eslint-disable jsdoc/require-description-complete-sentence */
  /**
   * Check if the given column index is greater than the index of the last column that
   * is currently rendered and return TRUE in that case, or FALSE otherwise.
   *
   * The negative column index is used to check the rows' headers. However,
   * keep in mind that for negative indexes, the method always returns FALSE as
   * it is not possible to render headers partially. The "after" index can not be
   * lower than -1.
   *
   *                            For fixedColumnsStart: 1 the master overlay
   *                            do not render this first columns.
   *  Headers    -3   -2   -1    |
   *           +----+----+----║┄ ┄ +------+------+
   *           │    │    │    ║    │  B1  │  C1  │
   *           +--------------║┄ ┄ --------------│
   *           │    │    │    ║    │  B2  │  C2  │
   *           +--------------║┄ ┄ --------------│
   *           │    │    │    ║    │  B3  │  C3  │
   *           +----+----+----║┄ ┄ +------+------+
   *                               ╷             ╷
   *      -------------------------+-------------+---------------->
   *          FALSE             first    FALSE   last         TRUE
   *                           rendered         rendered
   *                           column           column
   *
   * @param {number} column The visual column index.
   * @memberof Table#
   * @function isColumnAfterRenderedColumns
   * @returns {boolean}
   */
  /* eslint-enable jsdoc/require-description-complete-sentence */
  isColumnAfterRenderedColumns(e) {
    return this.columnFilter && e > this.getLastRenderedColumn();
  }
  isColumnAfterViewport(e) {
    return this.columnFilter && e > this.getLastVisibleColumn();
  }
  isRowAfterViewport(e) {
    return this.rowFilter && e > this.getLastVisibleRow();
  }
  isColumnBeforeViewport(e) {
    return this.columnFilter && this.columnFilter.sourceToRendered(e) < 0 && e >= 0;
  }
  isLastRowFullyVisible() {
    return this.getLastVisibleRow() === this.getLastRenderedRow();
  }
  isLastColumnFullyVisible() {
    return this.getLastVisibleColumn() === this.getLastRenderedColumn();
  }
  allRowsInViewport() {
    return this.wtSettings.getSetting("totalRows") === this.getVisibleRowsCount();
  }
  allColumnsInViewport() {
    return this.wtSettings.getSetting("totalColumns") === this.getVisibleColumnsCount();
  }
  /**
   * Checks if any of the row's cells content exceeds its initial height, and if so, returns the oversized height.
   *
   * @param {number} sourceRow The physical row index.
   * @returns {number}
   */
  getRowHeight(e) {
    return this.rowUtils.getHeight(e);
  }
  /**
   * @param {number} level The column level.
   * @returns {number}
   */
  getColumnHeaderHeight(e) {
    return this.columnUtils.getHeaderHeight(e);
  }
  /**
   * @param {number} sourceColumn The physical column index.
   * @returns {number}
   */
  getColumnWidth(e) {
    return this.columnUtils.getWidth(e);
  }
  /**
   * @param {number} sourceColumn The physical column index.
   * @returns {number}
   */
  getStretchedColumnWidth(e) {
    return this.columnUtils.getStretchedColumnWidth(e);
  }
  /**
   * Checks if the table has defined size. It returns `true` when the table has width and height
   * set bigger than `0px`.
   *
   * @returns {boolean}
   */
  hasDefinedSize() {
    return this.hasTableHeight && this.hasTableWidth;
  }
  /**
   * Gets table's width. The returned width is the width of the rendered cells that fit in the
   * current viewport. The value may change depends on the viewport position (scroll position).
   *
   * @returns {number}
   */
  getWidth() {
    return ht(this.TABLE);
  }
  /**
   * Gets table's height. The returned height is the height of the rendered cells that fit in the
   * current viewport. The value may change depends on the viewport position (scroll position).
   *
   * @returns {number}
   */
  getHeight() {
    return At(this.TABLE);
  }
  /**
   * Gets table's total width. The returned width is the width of all rendered cells (including headers)
   * that can be displayed in the table.
   *
   * @returns {number}
   */
  getTotalWidth() {
    const e = ht(this.hider);
    return e !== 0 ? e : this.getWidth();
  }
  /**
   * Gets table's total height. The returned height is the height of all rendered cells (including headers)
   * that can be displayed in the table.
   *
   * @returns {number}
   */
  getTotalHeight() {
    const e = At(this.hider);
    return e !== 0 ? e : this.getHeight();
  }
  /**
   * Checks if the table is visible. It returns `true` when the holder element (or its parents)
   * has CSS 'display' property different than 'none'.
   *
   * @returns {boolean}
   */
  isVisible() {
    return da(this.TABLE);
  }
  /**
   * Modify row header widths provided by user in class contructor.
   *
   * @private
   * @param {Function} rowHeaderWidthFactory The function which can provide default width values for rows..
   * @returns {number}
   */
  _modifyRowHeaderWidth(e) {
    let t = mt(e) ? e() : null;
    return Array.isArray(t) ? (t = [...t], t[t.length - 1] = this._correctRowHeaderWidth(t[t.length - 1])) : t = this._correctRowHeaderWidth(t), t;
  }
  /**
   * Correct row header width if necessary.
   *
   * @private
   * @param {number} width The width to process.
   * @returns {number}
   */
  _correctRowHeaderWidth(e) {
    let t = e;
    return typeof e != "number" && (t = this.wtSettings.getSetting("defaultColumnWidth")), this.correctHeaderWidth && (t += 1), t;
  }
}
const dr = dF, fF = "stickyRowsBottom", mR = {
  /**
   * Get the source index of the first rendered row. If no rows are rendered, returns an error code: -1.
   *
   * @returns {number}
   * @this Table
   */
  getFirstRenderedRow() {
    const s = this.wtSettings.getSetting("totalRows"), e = this.wtSettings.getSetting("fixedRowsBottom"), t = s - e;
    return s === 0 || e === 0 ? -1 : t < 0 ? 0 : t;
  },
  /**
   * Get the source index of the first row fully visible in the viewport. If no rows are fully visible, returns an error code: -1.
   * Assumes that all rendered rows are fully visible.
   *
   * @returns {number}
   * @this Table
   */
  getFirstVisibleRow() {
    return this.getFirstRenderedRow();
  },
  /**
   * Get the source index of the last rendered row. If no rows are rendered, returns an error code: -1.
   *
   * @returns {number}
   * @this Table
   */
  getLastRenderedRow() {
    return this.wtSettings.getSetting("totalRows") - 1;
  },
  /**
   * Get the source index of the last row fully visible in the viewport. If no rows are fully visible, returns an error code: -1.
   * Assumes that all rendered rows are fully visible.
   *
   * @returns {number}
   * @this Table
   */
  getLastVisibleRow() {
    return this.getLastRenderedRow();
  },
  /**
   * Get the number of rendered rows.
   *
   * @returns {number}
   * @this Table
   */
  getRenderedRowsCount() {
    const s = this.wtSettings.getSetting("totalRows");
    return Math.min(this.wtSettings.getSetting("fixedRowsBottom"), s);
  },
  /**
   * Get the number of fully visible rows in the viewport.
   * Assumes that all rendered rows are fully visible.
   *
   * @returns {number}
   * @this Table
   */
  getVisibleRowsCount() {
    return this.getRenderedRowsCount();
  }
};
Jn(mR, "MIXIN_NAME", fF, {
  writable: !1,
  enumerable: !1
});
const pR = mR, gF = "stickyColumnsStart", wR = {
  /**
   * Get the source index of the first rendered column. If no columns are rendered, returns an error code: -1.
   *
   * @returns {number}
   * @this Table
   */
  getFirstRenderedColumn() {
    return this.wtSettings.getSetting("totalColumns") === 0 ? -1 : 0;
  },
  /**
   * Get the source index of the first column fully visible in the viewport. If no columns are fully visible, returns an error code: -1.
   * Assumes that all rendered columns are fully visible.
   *
   * @returns {number}
   * @this Table
   */
  getFirstVisibleColumn() {
    return this.getFirstRenderedColumn();
  },
  /**
   * Get the source index of the last rendered column. If no columns are rendered, returns an error code: -1.
   *
   * @returns {number}
   * @this Table
   */
  getLastRenderedColumn() {
    return this.getRenderedColumnsCount() - 1;
  },
  /**
   * Get the source index of the last column fully visible in the viewport. If no columns are fully visible, returns an error code: -1.
   * Assumes that all rendered columns are fully visible.
   *
   * @returns {number}
   * @this Table
   */
  getLastVisibleColumn() {
    return this.getLastRenderedColumn();
  },
  /**
   * Get the number of rendered columns.
   *
   * @returns {number}
   * @this Table
   */
  getRenderedColumnsCount() {
    const s = this.wtSettings.getSetting("totalColumns");
    return Math.min(this.wtSettings.getSetting("fixedColumnsStart"), s);
  },
  /**
   * Get the number of fully visible columns in the viewport.
   * Assumes that all rendered columns are fully visible.
   *
   * @returns {number}
   * @this Table
   */
  getVisibleColumnsCount() {
    return this.getRenderedColumnsCount();
  }
};
Jn(wR, "MIXIN_NAME", gF, {
  writable: !1,
  enumerable: !1
});
const Pg = wR;
class Dg extends dr {
  /**
   * @param {TableDao} dataAccessObject The data access object.
   * @param {FacadeGetter} facadeGetter Function which return proper facade.
   * @param {DomBindings} domBindings Bindings into DOM.
   * @param {Settings} wtSettings The Walkontable settings.
   */
  constructor(e, t, n, o) {
    super(e, t, n, o, pi);
  }
}
ft(Dg, pR);
ft(Dg, Pg);
const mF = Dg, eo = "top", Cn = "bottom", to = "inline_start", so = "top_inline_start_corner", pi = "bottom_inline_start_corner", pF = [eo, Cn, to, so, pi], wF = /* @__PURE__ */ new Map([[eo, `ht_clone_${eo}`], [Cn, `ht_clone_${Cn}`], [to, `ht_clone_${to} ht_clone_left`], [so, `ht_clone_${so} ht_clone_top_left_corner`], [pi, `ht_clone_${pi} ht_clone_bottom_left_corner`]]);
function xu(s, e, t) {
  return e = CF(e), e in s ? Object.defineProperty(s, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : s[e] = t, s;
}
function CF(s) {
  var e = vF(s, "string");
  return typeof e == "symbol" ? e : String(e);
}
function vF(s, e) {
  if (typeof s != "object" || s === null)
    return s;
  var t = s[Symbol.toPrimitive];
  if (t !== void 0) {
    var n = t.call(s, e || "default");
    if (typeof n != "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(s);
}
class yF {
  /**
   * @param {ScrollDao} dataAccessObject Tha data access object.
   */
  constructor(e) {
    xu(this, "dataAccessObject", void 0), xu(this, "lastScrolledColumnPos", -1), xu(this, "lastScrolledRowPos", -1), this.dataAccessObject = e;
  }
  /**
   * Scrolls viewport to a cell.
   *
   * @param {CellCoords} coords The cell coordinates.
   * @param {boolean} [snapToTop] If `true`, viewport is scrolled to show the cell on the top of the table.
   * @param {boolean} [snapToRight] If `true`, viewport is scrolled to show the cell on the right of the table.
   * @param {boolean} [snapToBottom] If `true`, viewport is scrolled to show the cell on the bottom of the table.
   * @param {boolean} [snapToLeft] If `true`, viewport is scrolled to show the cell on the left of the table.
   * @returns {boolean}
   */
  scrollViewport(e, t, n, o, r) {
    const a = this.scrollViewportHorizontally(e.col, n, r), l = this.scrollViewportVertically(e.row, t, o);
    return a || l;
  }
  /**
   * Scrolls viewport to a column.
   *
   * @param {number} column Visual column index.
   * @param {boolean} [snapToRight] If `true`, viewport is scrolled to show the cell on the right of the table.
   * @param {boolean} [snapToLeft] If `true`, viewport is scrolled to show the cell on the left of the table.
   * @returns {boolean}
   */
  scrollViewportHorizontally(e, t, n) {
    const {
      drawn: o,
      totalColumns: r
    } = this.dataAccessObject;
    if (!o || !Number.isInteger(e) || e < 0 || e > r)
      return !1;
    const a = this.getFirstVisibleColumn(), l = this.getLastVisibleColumn(), c = t === void 0 && n === void 0, {
      fixedColumnsStart: h,
      inlineStartOverlay: u
    } = this.dataAccessObject;
    if (c && e < h)
      return !1;
    let f = !1;
    return a === -1 ? f = u.scrollTo(e, c ? e > this.lastScrolledColumnPos : t) : (c && (e < a || e > l) || !c) && (f = u.scrollTo(e, c ? e > l : t)), f && (this.lastScrolledColumnPos = e), f;
  }
  /**
   * Scrolls viewport to a row.
   *
   * @param {number} row Visual row index.
   * @param {boolean} [snapToTop] If `true`, viewport is scrolled to show the cell on the top of the table.
   * @param {boolean} [snapToBottom] If `true`, viewport is scrolled to show the cell on the bottom of the table.
   * @returns {boolean}
   */
  scrollViewportVertically(e, t, n) {
    const {
      drawn: o,
      totalRows: r
    } = this.dataAccessObject;
    if (!o || !Number.isInteger(e) || e < 0 || e > r)
      return !1;
    const a = this.getFirstVisibleRow(), l = this.getLastVisibleRow(), c = t === void 0 && n === void 0, {
      fixedRowsBottom: h,
      fixedRowsTop: u,
      topOverlay: f
    } = this.dataAccessObject;
    if (c && (e < u || e > r - h - 1))
      return !1;
    let g = !1;
    return a === -1 ? g = f.scrollTo(e, c ? e > this.lastScrolledRowPos : n) : (c && (e < a || e > l) || !c) && (g = f.scrollTo(e, c ? e > l : n)), g && (this.lastScrolledRowPos = e), g;
  }
  /**
   * Get first visible row based on virtual dom and how table is visible in browser window viewport.
   *
   * @returns {number}
   */
  getFirstVisibleRow() {
    const {
      topOverlay: e,
      wtTable: t,
      wtViewport: n,
      totalRows: o,
      fixedRowsTop: r,
      rootWindow: a
    } = this.dataAccessObject;
    let l = t.getFirstVisibleRow();
    if (e.mainTableScrollableElement === a) {
      const c = Wt(t.wtRootElement), h = fi(t.hider), u = fi(a), f = Cc(a, a);
      if (c.top + h - u <= f) {
        let g = n.getColumnHeaderHeight();
        g += e.sumCellSizes(0, r);
        for (let m = o; m > 0; m--)
          if (g += e.sumCellSizes(m - 1, m), c.top + h - g <= f) {
            l = m;
            break;
          }
      }
    }
    return l;
  }
  /**
   * Get last visible row based on virtual dom and how table is visible in browser window viewport.
   *
   * @returns {number}
   */
  getLastVisibleRow() {
    const {
      topOverlay: e,
      wtTable: t,
      wtViewport: n,
      totalRows: o,
      rootWindow: r
    } = this.dataAccessObject;
    let a = t.getLastVisibleRow();
    if (e.mainTableScrollableElement === r) {
      const l = Wt(t.wtRootElement), c = Cc(r, r);
      if (l.top > c) {
        const h = fi(r);
        let u = n.getColumnHeaderHeight();
        for (let f = 1; f <= o; f++)
          if (u += e.sumCellSizes(f - 1, f), l.top + u - c >= h) {
            a = f - 2;
            break;
          }
      }
    }
    return a;
  }
  /**
   * Get first visible column based on virtual dom and how table is visible in browser window viewport.
   *
   * @returns {number}
   */
  getFirstVisibleColumn() {
    const {
      inlineStartOverlay: e,
      wtTable: t,
      wtViewport: n,
      totalColumns: o,
      rootWindow: r
    } = this.dataAccessObject;
    let a = t.getFirstVisibleColumn();
    if (e.mainTableScrollableElement === r) {
      const l = Wt(t.wtRootElement), c = Ql(t.hider), h = Ql(r), u = Math.abs(sf(r, r));
      if (l.left + c - h <= u) {
        let f = n.getRowHeaderWidth();
        for (let g = o; g > 0; g--)
          if (f += e.sumCellSizes(g - 1, g), l.left + c - f <= u) {
            a = g;
            break;
          }
      }
    }
    return a;
  }
  /**
   * Get last visible column based on virtual dom and how table is visible in browser window viewport.
   *
   * @returns {number}
   */
  getLastVisibleColumn() {
    const {
      wtSettings: e,
      inlineStartOverlay: t,
      wtTable: n,
      wtViewport: o,
      totalColumns: r,
      rootWindow: a
    } = this.dataAccessObject;
    let l = n.getLastVisibleColumn();
    if (t.mainTableScrollableElement === a) {
      const c = e.getSetting("rtlMode");
      let h = null;
      if (c) {
        const f = n.TABLE.getBoundingClientRect(), m = this.dataAccessObject.rootWindow.document.documentElement.offsetWidth;
        h = Math.abs(f.right - m);
      } else
        h = Wt(n.wtRootElement).left;
      const u = Math.abs(sf(a, a));
      if (h > u) {
        const f = Ql(a);
        let g = o.getRowHeaderWidth();
        for (let m = 1; m <= r; m++)
          if (g += t.sumCellSizes(m - 1, m), h + g - u >= f) {
            l = m - 2;
            break;
          }
      }
    }
    return l;
  }
}
const SF = yF;
function Ks(s, e, t) {
  return e = bF(e), e in s ? Object.defineProperty(s, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : s[e] = t, s;
}
function bF(s) {
  var e = RF(s, "string");
  return typeof e == "symbol" ? e : String(e);
}
function RF(s, e) {
  if (typeof s != "object" || s === null)
    return s;
  var t = s[Symbol.toPrimitive];
  if (t !== void 0) {
    var n = t.call(s, e || "default");
    if (typeof n != "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(s);
}
class Hg {
  get eventManager() {
    return new Dt(this);
  }
  /**
   * @param {HTMLTableElement} table Main table.
   * @param {Settings} settings The Walkontable settings.
   */
  constructor(e, t) {
    Ks(this, "wtTable", void 0), Ks(this, "wtScroll", void 0), Ks(this, "wtViewport", void 0), Ks(this, "wtOverlays", void 0), Ks(this, "selections", void 0), Ks(this, "wtEvent", void 0), Ks(this, "guid", `wt_${Ab()}`), Ks(this, "drawInterrupted", !1), Ks(this, "drawn", !1), Ks(this, "domBindings", void 0), Ks(this, "wtSettings", void 0), this.domBindings = {
      rootTable: e,
      rootDocument: e.ownerDocument,
      rootWindow: e.ownerDocument.defaultView
    }, this.wtSettings = t, this.wtScroll = new SF(this.createScrollDao());
  }
  findOriginalHeaders() {
    const e = [];
    if (this.wtTable.THEAD.childNodes.length && this.wtTable.THEAD.childNodes[0].childNodes.length) {
      for (let t = 0, n = this.wtTable.THEAD.childNodes[0].childNodes.length; t < n; t++)
        e.push(this.wtTable.THEAD.childNodes[0].childNodes[t].innerHTML);
      this.wtSettings.getSetting("columnHeaders").length || this.wtSettings.update("columnHeaders", [function(t, n) {
        Zi(n, e[t]);
      }]);
    }
  }
  /**
   * Creates and returns the CellCoords object.
   *
   * @param {*} row The row index.
   * @param {*} column The column index.
   * @returns {CellCoords}
   */
  createCellCoords(e, t) {
    return new Sc(e, t, this.wtSettings.getSetting("rtlMode"));
  }
  /**
   * Creates and returns the CellRange object.
   *
   * @param {CellCoords} highlight The highlight coordinates.
   * @param {CellCoords} from The from coordinates.
   * @param {CellCoords} to The to coordinates.
   * @returns {CellRange}
   */
  createCellRange(e, t, n) {
    return new Og(e, t, n, this.wtSettings.getSetting("rtlMode"));
  }
  /**
   * Force rerender of Walkontable.
   *
   * @param {boolean} [fastDraw=false] When `true`, try to refresh only the positions of borders without rerendering
   *                                   the data. It will only work if Table.draw() does not force
   *                                   rendering anyway.
   * @returns {Walkontable}
   */
  draw() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
    return this.drawInterrupted = !1, !e && !this.wtTable.isVisible() ? this.drawInterrupted = !0 : this.wtTable.draw(e), this;
  }
  /**
   * Returns the TD at coords. If topmost is set to true, returns TD from the topmost overlay layer,
   * if not set or set to false, returns TD from the master table.
   *
   * @param {CellCoords} coords The cell coordinates.
   * @param {boolean} [topmost=false] If set to `true`, it returns the TD element from the topmost overlay. For example,
   *                                  if the wanted cell is in the range of fixed rows, it will return a TD element
   *                                  from the top overlay.
   * @returns {HTMLElement}
   */
  getCell(e) {
    if (!(arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1))
      return this.wtTable.getCell(e);
    const n = this.wtSettings.getSetting("totalRows"), o = this.wtSettings.getSetting("fixedRowsTop"), r = this.wtSettings.getSetting("fixedRowsBottom"), a = this.wtSettings.getSetting("fixedColumnsStart");
    if (e.row < o && e.col < a)
      return this.wtOverlays.topInlineStartCornerOverlay.clone.wtTable.getCell(e);
    if (e.row < o)
      return this.wtOverlays.topOverlay.clone.wtTable.getCell(e);
    if (e.col < a && e.row >= n - r) {
      if (this.wtOverlays.bottomInlineStartCornerOverlay && this.wtOverlays.bottomInlineStartCornerOverlay.clone)
        return this.wtOverlays.bottomInlineStartCornerOverlay.clone.wtTable.getCell(e);
    } else {
      if (e.col < a)
        return this.wtOverlays.inlineStartOverlay.clone.wtTable.getCell(e);
      if (e.row < n && e.row >= n - r && this.wtOverlays.bottomOverlay && this.wtOverlays.bottomOverlay.clone)
        return this.wtOverlays.bottomOverlay.clone.wtTable.getCell(e);
    }
    return this.wtTable.getCell(e);
  }
  /**
   * Scrolls the viewport to a cell (rerenders if needed).
   *
   * @param {CellCoords} coords The cell coordinates to scroll to.
   * @param {boolean} [snapToTop] If `true`, viewport is scrolled to show the cell on the top of the table.
   * @param {boolean} [snapToRight] If `true`, viewport is scrolled to show the cell on the right of the table.
   * @param {boolean} [snapToBottom] If `true`, viewport is scrolled to show the cell on the bottom of the table.
   * @param {boolean} [snapToLeft] If `true`, viewport is scrolled to show the cell on the left of the table.
   * @returns {boolean}
   */
  scrollViewport(e, t, n, o, r) {
    return e.col < 0 || e.row < 0 ? !1 : this.wtScroll.scrollViewport(e, t, n, o, r);
  }
  /**
   * Scrolls the viewport to a column (rerenders if needed).
   *
   * @param {number} column Visual column index.
   * @param {boolean} [snapToRight] If `true`, viewport is scrolled to show the cell on the right of the table.
   * @param {boolean} [snapToLeft] If `true`, viewport is scrolled to show the cell on the left of the table.
   * @returns {boolean}
   */
  scrollViewportHorizontally(e, t, n) {
    return e < 0 ? !1 : this.wtScroll.scrollViewportHorizontally(e, t, n);
  }
  /**
   * Scrolls the viewport to a row (rerenders if needed).
   *
   * @param {number} row Visual row index.
   * @param {boolean} [snapToTop] If `true`, viewport is scrolled to show the cell on the top of the table.
   * @param {boolean} [snapToBottom] If `true`, viewport is scrolled to show the cell on the bottom of the table.
   * @returns {boolean}
   */
  scrollViewportVertically(e, t, n) {
    return e < 0 ? !1 : this.wtScroll.scrollViewportVertically(e, t, n);
  }
  /**
   * @returns {Array}
   */
  getViewport() {
    return [this.wtTable.getFirstVisibleRow(), this.wtTable.getFirstVisibleColumn(), this.wtTable.getLastVisibleRow(), this.wtTable.getLastVisibleColumn()];
  }
  /**
   * Destroy instance.
   */
  destroy() {
    this.wtOverlays.destroy(), this.wtEvent.destroy();
  }
  /**
   * Create data access object for scroll.
   *
   * @protected
   * @returns {ScrollDao}
   */
  createScrollDao() {
    const e = this;
    return {
      get drawn() {
        return e.drawn;
      },
      get topOverlay() {
        return e.wtOverlays.topOverlay;
      },
      get inlineStartOverlay() {
        return e.wtOverlays.inlineStartOverlay;
      },
      get wtTable() {
        return e.wtTable;
      },
      get wtViewport() {
        return e.wtViewport;
      },
      get wtSettings() {
        return e.wtSettings;
      },
      get rootWindow() {
        return e.domBindings.rootWindow;
      },
      // TODO refactoring, consider about using injecting wtSettings into scroll (it'll enables remove dao layer)
      get totalRows() {
        return e.wtSettings.getSetting("totalRows");
      },
      get totalColumns() {
        return e.wtSettings.getSetting("totalColumns");
      },
      get fixedRowsTop() {
        return e.wtSettings.getSetting("fixedRowsTop");
      },
      get fixedRowsBottom() {
        return e.wtSettings.getSetting("fixedRowsBottom");
      },
      get fixedColumnsStart() {
        return e.wtSettings.getSetting("fixedColumnsStart");
      }
    };
  }
  // TODO refactoring: it will be much better to not use DAO objects. They are needed for now to provide
  // dynamically access to related objects
  /**
   * Create data access object for wtTable.
   *
   * @protected
   * @returns {TableDao}
   */
  getTableDao() {
    const e = this;
    return {
      get wot() {
        return e;
      },
      get parentTableOffset() {
        return e.cloneSource.wtTable.tableOffset;
      },
      get cloneSource() {
        return e.cloneSource;
      },
      get workspaceWidth() {
        return e.wtViewport.getWorkspaceWidth();
      },
      get wtViewport() {
        return e.wtViewport;
      },
      get wtOverlays() {
        return e.wtOverlays;
      },
      get selections() {
        return e.selections;
      },
      get drawn() {
        return e.drawn;
      },
      set drawn(t) {
        e.drawn = t;
      },
      get wtTable() {
        return e.wtTable;
      },
      get startColumnRendered() {
        return e.wtViewport.columnsRenderCalculator.startColumn;
      },
      get startColumnVisible() {
        return e.wtViewport.columnsVisibleCalculator.startColumn;
      },
      get endColumnRendered() {
        return e.wtViewport.columnsRenderCalculator.endColumn;
      },
      get endColumnVisible() {
        return e.wtViewport.columnsVisibleCalculator.endColumn;
      },
      get countColumnsRendered() {
        return e.wtViewport.columnsRenderCalculator.count;
      },
      get countColumnsVisible() {
        return e.wtViewport.columnsVisibleCalculator.count;
      },
      get startRowRendered() {
        return e.wtViewport.rowsRenderCalculator.startRow;
      },
      get startRowVisible() {
        return e.wtViewport.rowsVisibleCalculator.startRow;
      },
      get endRowRendered() {
        return e.wtViewport.rowsRenderCalculator.endRow;
      },
      get endRowVisible() {
        return e.wtViewport.rowsVisibleCalculator.endRow;
      },
      get countRowsRendered() {
        return e.wtViewport.rowsRenderCalculator.count;
      },
      get countRowsVisible() {
        return e.wtViewport.rowsVisibleCalculator.count;
      }
    };
  }
}
function XC(s, e, t) {
  return e = EF(e), e in s ? Object.defineProperty(s, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : s[e] = t, s;
}
function EF(s) {
  var e = xF(s, "string");
  return typeof e == "symbol" ? e : String(e);
}
function xF(s, e) {
  if (typeof s != "object" || s === null)
    return s;
  var t = s[Symbol.toPrimitive];
  if (t !== void 0) {
    var n = t.call(s, e || "default");
    if (typeof n != "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(s);
}
class TF extends Hg {
  /**
   * @param {HTMLTableElement} table Main table.
   * @param {SettingsPure|Settings} settings The Walkontable settings.
   * @param {WalkontableCloneOptions} clone Clone data.
   */
  constructor(e, t, n) {
    super(e, t), XC(this, "cloneSource", void 0), XC(this, "cloneOverlay", void 0);
    const o = this.wtSettings.getSetting("facade", this);
    this.cloneSource = n.source, this.cloneOverlay = n.overlay, this.wtTable = this.cloneOverlay.createTable(this.getTableDao(), o, this.domBindings, this.wtSettings), this.wtViewport = n.viewport, this.selections = n.selections, this.wtEvent = new dR(o, this.domBindings, this.wtSettings, this.eventManager, this.wtTable, this.selections, n.event), this.findOriginalHeaders();
  }
}
function MF(s, e, t) {
  return e = _F(e), e in s ? Object.defineProperty(s, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : s[e] = t, s;
}
function _F(s) {
  var e = IF(s, "string");
  return typeof e == "symbol" ? e : String(e);
}
function IF(s, e) {
  if (typeof s != "object" || s === null)
    return s;
  var t = s[Symbol.toPrimitive];
  if (t !== void 0) {
    var n = t.call(s, e || "default");
    if (typeof n != "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(s);
}
class ka {
  /**
   * @param {Walkontable} wotInstance The Walkontable instance. @TODO refactoring: check if can be deleted.
   * @param {FacadeGetter} facadeGetter Function which return proper facade.
   * @param {CLONE_TYPES_ENUM} type The overlay type name (clone name).
   * @param {Settings} wtSettings The Walkontable settings.
   * @param {DomBindings} domBindings Dom elements bound to the current instance.
   */
  constructor(e, t, n, o, r) {
    MF(this, "wtSettings", null), Jn(this, "wot", e, {
      writable: !1
    }), this.domBindings = r, this.facadeGetter = t, this.wtSettings = o;
    const {
      TABLE: a,
      hider: l,
      spreader: c,
      holder: h,
      wtRootElement: u
    } = this.wot.wtTable;
    this.instance = this.wot, this.type = n, this.mainTableScrollableElement = null, this.TABLE = a, this.hider = l, this.spreader = c, this.holder = h, this.wtRootElement = u, this.trimmingContainer = sr(this.hider.parentNode.parentNode), this.updateStateOfRendering(), this.clone = this.makeClone();
  }
  /**
   * Update internal state of object with an information about the need of full rendering of the overlay.
   *
   * @returns {boolean} Returns `true` if the state has changed since the last check.
   */
  updateStateOfRendering() {
    const e = this.needFullRender;
    this.needFullRender = this.shouldBeRendered();
    const t = e !== this.needFullRender;
    return t && !this.needFullRender && this.reset(), t;
  }
  /**
   * Checks if overlay should be fully rendered.
   *
   * @returns {boolean}
   */
  shouldBeRendered() {
    return !0;
  }
  /**
   * Update the trimming container.
   */
  updateTrimmingContainer() {
    this.trimmingContainer = sr(this.hider.parentNode.parentNode);
  }
  /**
   * Update the main scrollable element.
   */
  updateMainScrollableElement() {
    const {
      wtTable: e
    } = this.wot, {
      rootWindow: t
    } = this.domBindings;
    t.getComputedStyle(e.wtRootElement.parentNode).getPropertyValue("overflow") === "hidden" ? this.mainTableScrollableElement = this.wot.wtTable.holder : this.mainTableScrollableElement = vc(e.TABLE);
  }
  /**
   * Calculates coordinates of the provided element, relative to the root Handsontable element.
   * NOTE: The element needs to be a child of the overlay in order for the method to work correctly.
   *
   * @param {HTMLElement} element The cell element to calculate the position for.
   * @param {number} rowIndex Visual row index.
   * @param {number} columnIndex Visual column index.
   * @returns {{top: number, start: number}|undefined}
   */
  getRelativeCellPosition(e, t, n) {
    if (this.clone.wtTable.holder.contains(e) === !1) {
      pt(`The provided element is not a child of the ${this.type} overlay`);
      return;
    }
    const o = this.mainTableScrollableElement === this.domBindings.rootWindow, r = n < this.wtSettings.getSetting("fixedColumnsStart"), a = t < this.wtSettings.getSetting("fixedRowsTop"), l = t >= this.wtSettings.getSetting("totalRows") - this.wtSettings.getSetting("fixedRowsBottom"), c = this.clone.wtTable.spreader, h = {
      start: this.getRelativeStartPosition(c),
      top: c.offsetTop
    }, u = {
      start: this.getRelativeStartPosition(e),
      top: e.offsetTop
    };
    let f = null;
    return o ? f = this.getRelativeCellPositionWithinWindow(a, r, u, h) : f = this.getRelativeCellPositionWithinHolder(a, l, r, u, h), f;
  }
  /**
   * Get inline start value depending of direction.
   *
   * @param {HTMLElement} el Element.
   * @returns {number}
   */
  getRelativeStartPosition(e) {
    return this.isRtl() ? e.offsetParent.offsetWidth - e.offsetLeft - e.offsetWidth : e.offsetLeft;
  }
  /**
   * Calculates coordinates of the provided element, relative to the root Handsontable element within a table with window
   * as a scrollable element.
   *
   * @private
   * @param {boolean} onFixedRowTop `true` if the coordinates point to a place within the top fixed rows.
   * @param {boolean} onFixedColumn `true` if the coordinates point to a place within the fixed columns.
   * @param {number} elementOffset Offset position of the cell element.
   * @param {number} spreaderOffset Offset position of the spreader element.
   * @returns {{top: number, left: number}}
   */
  getRelativeCellPositionWithinWindow(e, t, n, o) {
    const r = this.wot.wtTable.wtRootElement.getBoundingClientRect();
    let a = 0, l = 0;
    if (!t)
      a = o.start;
    else {
      let c = r.left;
      this.isRtl() && (c = this.domBindings.rootWindow.innerWidth - (r.left + r.width + qt())), a = c <= 0 ? -1 * c : 0;
    }
    return e ? l = this.clone.wtTable.TABLE.getBoundingClientRect().top - r.top : l = o.top, {
      start: n.start + a,
      top: n.top + l
    };
  }
  /**
   * Calculates coordinates of the provided element, relative to the root Handsontable element within a table with window
   * as a scrollable element.
   *
   * @private
   * @param {boolean} onFixedRowTop `true` if the coordinates point to a place within the top fixed rows.
   * @param {boolean} onFixedRowBottom `true` if the coordinates point to a place within the bottom fixed rows.
   * @param {boolean} onFixedColumn `true` if the coordinates point to a place within the fixed columns.
   * @param {number} elementOffset Offset position of the cell element.
   * @param {number} spreaderOffset Offset position of the spreader element.
   * @returns {{top: number, left: number}}
   */
  getRelativeCellPositionWithinHolder(e, t, n, o, r) {
    const a = {
      horizontal: this.wot.wtOverlays.inlineStartOverlay.getScrollPosition(),
      vertical: this.wot.wtOverlays.topOverlay.getScrollPosition()
    };
    let l = 0, c = 0;
    if (n || (l = a.horizontal - r.start), t) {
      const h = this.wot.wtTable.wtRootElement.getBoundingClientRect();
      c = this.clone.wtTable.TABLE.getBoundingClientRect().top * -1 + h.top;
    } else
      e || (c = a.vertical - r.top);
    return {
      start: o.start - l,
      top: o.top - c
    };
  }
  /**
   * Make a clone of table for overlay.
   *
   * @returns {Clone}
   */
  makeClone() {
    if (pF.indexOf(this.type) === -1)
      throw new Error(`Clone type "${this.type}" is not supported.`);
    const {
      wtTable: e
    } = this.wot, {
      rootDocument: t,
      rootWindow: n
    } = this.domBindings, o = t.createElement("DIV"), r = t.createElement("TABLE"), a = e.wtRootElement.parentNode;
    o.className = `${wF.get(this.type)} handsontable`, o.setAttribute("dir", this.isRtl() ? "rtl" : "ltr"), o.style.position = "absolute", o.style.top = 0, o.style.overflow = "visible", this.isRtl() ? o.style.right = 0 : o.style.left = 0, r.className = e.TABLE.className, o.appendChild(r), a.appendChild(o);
    const l = this.wtSettings.getSetting("preventOverflow");
    return l === !0 || l === "horizontal" && this.type === eo || l === "vertical" && this.type === to ? this.mainTableScrollableElement = n : n.getComputedStyle(a).getPropertyValue("overflow") === "hidden" ? this.mainTableScrollableElement = e.holder : this.mainTableScrollableElement = vc(e.TABLE), new TF(r, this.wtSettings, {
      // todo ioc factory
      source: this.wot,
      overlay: this,
      viewport: this.wot.wtViewport,
      // todo ioc , or factor func if used only here
      event: this.wot.wtEvent,
      // todo ioc , or factory func if used only here
      selections: this.wot.selections
      // todo ioc , or factory func if used only here
    });
  }
  /**
   * Refresh/Redraw overlay.
   *
   * @param {boolean} [fastDraw=false] When `true`, try to refresh only the positions of borders without rerendering
   *                                   the data. It will only work if Table.draw() does not force
   *                                   rendering anyway.
   */
  refresh() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
    const t = this.shouldBeRendered();
    this.clone && (this.needFullRender || t) && this.clone.draw(e), this.needFullRender = t;
  }
  /**
   * Reset overlay styles to initial values.
   */
  reset() {
    if (!this.clone)
      return;
    const e = this.clone.wtTable.holder, t = this.clone.wtTable.hider, n = e.style, o = t.style, r = e.parentNode.style;
    D([n, o, r], (a) => {
      a.width = "", a.height = "";
    });
  }
  /**
   * Determine if Walkontable is running in RTL mode.
   *
   * @returns {boolean}
   */
  isRtl() {
    return this.wtSettings.getSetting("rtlMode");
  }
  /**
   * Destroy overlay instance.
   */
  destroy() {
    this.clone.eventManager.destroy();
  }
}
class OF extends ka {
  /**
   * @param {Walkontable} wotInstance The Walkontable instance. @TODO refactoring: check if can be deleted.
   * @param {FacadeGetter} facadeGetter Function which return proper facade.
   * @param {Settings} wtSettings The Walkontable settings.
   * @param {DomBindings} domBindings Dom elements bound to the current instance.
   * @param {BottomOverlay} bottomOverlay The instance of the Top overlay.
   * @param {InlineStartOverlay} inlineStartOverlay The instance of the InlineStart overlay.
   */
  constructor(e, t, n, o, r, a) {
    super(e, t, pi, n, o), this.bottomOverlay = r, this.inlineStartOverlay = a;
  }
  /**
   * Factory method to create a subclass of `Table` that is relevant to this overlay.
   *
   * @see Table#constructor
   * @param {...*} args Parameters that will be forwarded to the `Table` constructor.
   * @returns {BottomInlineStartCornerOverlayTable}
   */
  createTable() {
    for (var e = arguments.length, t = new Array(e), n = 0; n < e; n++)
      t[n] = arguments[n];
    return new mF(...t);
  }
  /**
   * Checks if overlay should be fully rendered.
   *
   * @returns {boolean}
   */
  shouldBeRendered() {
    return this.wtSettings.getSetting("shouldRenderBottomOverlay") && this.wtSettings.getSetting("shouldRenderInlineStartOverlay");
  }
  /**
   * Updates the corner overlay position.
   *
   * @returns {boolean}
   */
  resetFixedPosition() {
    const {
      wot: e
    } = this;
    if (this.updateTrimmingContainer(), !e.wtTable.holder.parentNode)
      return !1;
    const t = this.clone.wtTable.holder.parentNode;
    if (t.style.top = "", this.trimmingContainer === this.domBindings.rootWindow) {
      const r = this.inlineStartOverlay.getOverlayOffset(), a = this.bottomOverlay.getOverlayOffset();
      t.style[this.isRtl() ? "right" : "left"] = `${r}px`, t.style.bottom = `${a}px`;
    } else
      ah(t), this.repositionOverlay();
    let n = At(this.clone.wtTable.TABLE);
    const o = ht(this.clone.wtTable.TABLE);
    return this.wot.wtTable.hasDefinedSize() || (n = 0), t.style.height = `${n}px`, t.style.width = `${o}px`, !1;
  }
  /**
   * Reposition the overlay.
   */
  repositionOverlay() {
    const {
      wtTable: e,
      wtViewport: t
    } = this.wot, {
      rootDocument: n
    } = this.domBindings, o = this.clone.wtTable.holder.parentNode;
    let r = 0;
    t.hasVerticalScroll() || (r += t.getWorkspaceHeight() - e.getTotalHeight()), t.hasVerticalScroll() && t.hasHorizontalScroll() && (r += qt(n)), o.style.bottom = `${r}px`;
  }
}
const AF = "calculatedColumns", CR = {
  /**
   * Get the source index of the first rendered column. If no columns are rendered, returns an error code: -1.
   *
   * @returns {number}
   * @this Table
   */
  getFirstRenderedColumn() {
    const s = this.dataAccessObject.startColumnRendered;
    return s === null ? -1 : s;
  },
  /**
   * Get the source index of the first column fully visible in the viewport. If no columns are fully visible, returns an error code: -1.
   *
   * @returns {number}
   * @this Table
   */
  getFirstVisibleColumn() {
    const s = this.dataAccessObject.startColumnVisible;
    return s === null ? -1 : s;
  },
  /**
   * Get the source index of the last rendered column. If no columns are rendered, returns an error code: -1.
   *
   * @returns {number}
   * @this Table
   */
  getLastRenderedColumn() {
    const s = this.dataAccessObject.endColumnRendered;
    return s === null ? -1 : s;
  },
  /**
   * Get the source index of the last column fully visible in the viewport. If no columns are fully visible, returns an error code: -1.
   *
   * @returns {number}
   * @this Table
   */
  getLastVisibleColumn() {
    const s = this.dataAccessObject.endColumnVisible;
    return s === null ? -1 : s;
  },
  /**
   * Get the number of rendered columns.
   *
   * @returns {number}
   * @this Table
   */
  getRenderedColumnsCount() {
    return this.dataAccessObject.countColumnsRendered;
  },
  /**
   * Get the number of fully visible columns in the viewport.
   *
   * @returns {number}
   * @this Table
   */
  getVisibleColumnsCount() {
    return this.dataAccessObject.countColumnsVisible;
  }
};
Jn(CR, "MIXIN_NAME", AF, {
  writable: !1,
  enumerable: !1
});
const kg = CR;
class Ng extends dr {
  /**
   * @param {TableDao} dataAccessObject The data access object.
   * @param {FacadeGetter} facadeGetter Function which return proper facade.
   * @param {DomBindings} domBindings Bindings into DOM.
   * @param {Settings} wtSettings The Walkontable settings.
   */
  constructor(e, t, n, o) {
    super(e, t, n, o, Cn);
  }
}
ft(Ng, pR);
ft(Ng, kg);
const PF = Ng;
function DF(s, e, t) {
  return e = HF(e), e in s ? Object.defineProperty(s, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : s[e] = t, s;
}
function HF(s) {
  var e = kF(s, "string");
  return typeof e == "symbol" ? e : String(e);
}
function kF(s, e) {
  if (typeof s != "object" || s === null)
    return s;
  var t = s[Symbol.toPrimitive];
  if (t !== void 0) {
    var n = t.call(s, e || "default");
    if (typeof n != "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(s);
}
class NF extends ka {
  /**
   * @param {Walkontable} wotInstance The Walkontable instance. @TODO refactoring: check if can be deleted.
   * @param {FacadeGetter} facadeGetter Function which return proper facade.
   * @param {Settings} wtSettings The Walkontable settings.
   * @param {DomBindings} domBindings Dom elements bound to the current instance.
   */
  constructor(e, t, n, o) {
    super(e, t, Cn, n, o), DF(this, "cachedFixedRowsBottom", -1), this.cachedFixedRowsBottom = this.wtSettings.getSetting("fixedRowsBottom");
  }
  /**
   * Factory method to create a subclass of `Table` that is relevant to this overlay.
   *
   * @see Table#constructor
   * @param {...*} args Parameters that will be forwarded to the `Table` constructor.
   * @returns {BottomOverlayTable}
   */
  createTable() {
    for (var e = arguments.length, t = new Array(e), n = 0; n < e; n++)
      t[n] = arguments[n];
    return new PF(...t);
  }
  /**
   * Checks if overlay should be fully rendered.
   *
   * @returns {boolean}
   */
  shouldBeRendered() {
    return this.wtSettings.getSetting("shouldRenderBottomOverlay");
  }
  /**
   * Updates the top overlay position.
   *
   * @returns {boolean}
   */
  resetFixedPosition() {
    if (!this.needFullRender || !this.wot.wtTable.holder.parentNode)
      return !1;
    const {
      rootWindow: e
    } = this.domBindings, t = this.clone.wtTable.holder.parentNode;
    t.style.top = "";
    let n = 0;
    const o = this.wtSettings.getSetting("preventOverflow");
    this.trimmingContainer === e && (!o || o !== "vertical") ? (n = this.getOverlayOffset(), t.style.bottom = `${n}px`) : (n = this.getScrollPosition(), this.repositionOverlay());
    const r = this.adjustHeaderBordersPosition(n);
    return this.adjustElementsSize(), r;
  }
  /**
   * Updates the bottom overlay position.
   */
  repositionOverlay() {
    const {
      wtTable: e,
      wtViewport: t
    } = this.wot, {
      rootDocument: n
    } = this.domBindings, o = this.clone.wtTable.holder.parentNode;
    let r = 0;
    t.hasVerticalScroll() || (r += t.getWorkspaceHeight() - e.getTotalHeight()), t.hasVerticalScroll() && t.hasHorizontalScroll() && (r += qt(n)), o.style.bottom = `${r}px`;
  }
  /**
   * Sets the main overlay's vertical scroll position.
   *
   * @param {number} pos The scroll position.
   * @returns {boolean}
   */
  setScrollPosition(e) {
    const {
      rootWindow: t
    } = this.domBindings;
    let n = !1;
    return this.mainTableScrollableElement === t ? (t.scrollTo(tr(t), e), n = !0) : this.mainTableScrollableElement.scrollTop !== e && (this.mainTableScrollableElement.scrollTop = e, n = !0), n;
  }
  /**
   * Triggers onScroll hook callback.
   */
  onScroll() {
    this.wtSettings.getSetting("onScrollHorizontally");
  }
  /**
   * Calculates total sum cells height.
   *
   * @param {number} from Row index which calculates started from.
   * @param {number} to Row index where calculation is finished.
   * @returns {number} Height sum.
   */
  sumCellSizes(e, t) {
    const {
      wtTable: n,
      wtSettings: o
    } = this.wot, r = o.getSetting("defaultRowHeight");
    let a = e, l = 0;
    for (; a < t; ) {
      const c = n.getRowHeight(a);
      l += c === void 0 ? r : c, a += 1;
    }
    return l;
  }
  /**
   * Adjust overlay root element, childs and master table element sizes (width, height).
   *
   * @param {boolean} [force=false] When `true`, it adjusts the DOM nodes sizes for that overlay.
   */
  adjustElementsSize() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
    this.updateTrimmingContainer(), (this.needFullRender || e) && (this.adjustRootElementSize(), this.adjustRootChildrenSize());
  }
  /**
   * Adjust overlay root element size (width and height).
   */
  adjustRootElementSize() {
    const {
      wtTable: e,
      wtViewport: t
    } = this.wot, {
      rootDocument: n,
      rootWindow: o
    } = this.domBindings, r = qt(n), l = this.clone.wtTable.holder.parentNode.style, c = this.wtSettings.getSetting("preventOverflow");
    if (this.trimmingContainer !== o || c === "horizontal") {
      let u = t.getWorkspaceWidth();
      this.wot.wtOverlays.hasScrollbarRight && (u -= r), u = Math.min(u, e.wtRootElement.scrollWidth), l.width = `${u}px`;
    } else
      l.width = "";
    this.clone.wtTable.holder.style.width = l.width;
    let h = At(this.clone.wtTable.TABLE);
    this.wot.wtTable.hasDefinedSize() || (h = 0), l.height = `${h}px`;
  }
  /**
   * Adjust overlay root childs size.
   */
  adjustRootChildrenSize() {
    const {
      holder: e
    } = this.clone.wtTable;
    this.clone.wtTable.hider.style.width = this.hider.style.width, e.style.width = e.parentNode.style.width, e.style.height = e.parentNode.style.height;
  }
  /**
   * Adjust the overlay dimensions and position.
   */
  applyToDOM() {
    const e = this.wtSettings.getSetting("totalRows");
    if (typeof this.wot.wtViewport.rowsRenderCalculator.startPosition == "number")
      this.spreader.style.top = `${this.wot.wtViewport.rowsRenderCalculator.startPosition}px`;
    else if (e === 0)
      this.spreader.style.top = "0";
    else
      throw new Error("Incorrect value of the rowsRenderCalculator");
    this.spreader.style.bottom = "", this.needFullRender && this.syncOverlayOffset();
  }
  /**
   * Synchronize calculated left position to an element.
   */
  syncOverlayOffset() {
    const e = this.isRtl() ? "right" : "left", {
      spreader: t
    } = this.clone.wtTable;
    typeof this.wot.wtViewport.columnsRenderCalculator.startPosition == "number" ? t.style[e] = `${this.wot.wtViewport.columnsRenderCalculator.startPosition}px` : t.style[e] = "";
  }
  /**
   * Scrolls vertically to a row.
   *
   * @param {number} sourceRow Row index which you want to scroll to.
   * @param {boolean} [bottomEdge=false] If `true`, scrolls according to the bottom edge (top edge is by default).
   */
  scrollTo(e, t) {
    let n = this.getTableParentOffset();
    const r = (this.wot.cloneSource ? this.wot.cloneSource : this.wot).wtTable.holder;
    let a = 0;
    t && r.offsetHeight !== r.clientHeight && (a = qt(this.domBindings.rootDocument)), t ? (n += this.sumCellSizes(0, e + 1), n -= this.wot.wtViewport.getViewportHeight(), n += 1) : n += this.sumCellSizes(this.wtSettings.getSetting("fixedRowsBottom"), e), n += a, this.setScrollPosition(n);
  }
  /**
   * Gets table parent top position.
   *
   * @returns {number}
   */
  getTableParentOffset() {
    return this.mainTableScrollableElement === this.domBindings.rootWindow ? this.wot.wtTable.holderOffset.top : 0;
  }
  /**
   * Gets the main overlay's vertical scroll position.
   *
   * @returns {number} Main table's vertical scroll position.
   */
  getScrollPosition() {
    return Cc(this.mainTableScrollableElement, this.domBindings.rootWindow);
  }
  /**
   * Gets the main overlay's vertical overlay offset.
   *
   * @returns {number} Main table's vertical overlay offset.
   */
  getOverlayOffset() {
    const {
      rootWindow: e
    } = this.domBindings, t = this.wtSettings.getSetting("preventOverflow");
    let n = 0;
    if (this.trimmingContainer === e && (!t || t !== "vertical")) {
      const o = this.wot.wtTable.getTotalHeight(), r = this.clone.wtTable.getTotalHeight(), a = o - r, l = this.domBindings.rootDocument.documentElement.clientHeight;
      n = Math.max(this.getTableParentOffset() - this.getScrollPosition() - l + o, 0), n > a && (n = 0);
    }
    return n;
  }
  /**
   * Adds css classes to hide the header border's header (cell-selection border hiding issue).
   *
   * @param {number} position Header Y position if trimming container is window or scroll top if not.
   * @returns {boolean}
   */
  adjustHeaderBordersPosition(e) {
    const t = this.wtSettings.getSetting("fixedRowsBottom"), n = this.cachedFixedRowsBottom !== t, o = this.wtSettings.getSetting("columnHeaders");
    let r = !1;
    if ((n || t === 0) && o.length > 0) {
      const a = this.wot.wtTable.holder.parentNode, l = Ne(a, "innerBorderBottom");
      this.cachedFixedRowsBottom = this.wtSettings.getSetting("fixedRowsBottom"), e || this.wtSettings.getSetting("totalRows") === 0 ? (ie(a, "innerBorderBottom"), r = !l) : ($e(a, "innerBorderBottom"), r = l);
    }
    return r;
  }
}
const LF = "calculatedRows", vR = {
  /**
   * Get the source index of the first rendered row. If no rows are rendered, returns an error code: -1.
   *
   * @returns {number}
   * @this Table
   */
  getFirstRenderedRow() {
    const s = this.dataAccessObject.startRowRendered;
    return s === null ? -1 : s;
  },
  /**
   * Get the source index of the first row fully visible in the viewport. If no rows are fully visible, returns an error code: -1.
   *
   * @returns {number}
   * @this Table
   */
  getFirstVisibleRow() {
    const s = this.dataAccessObject.startRowVisible;
    return s === null ? -1 : s;
  },
  /**
   * Get the source index of the last rendered row. If no rows are rendered, returns an error code: -1.
   *
   * @returns {number}
   * @this Table
   */
  getLastRenderedRow() {
    const s = this.dataAccessObject.endRowRendered;
    return s === null ? -1 : s;
  },
  /**
   * Get the source index of the last row fully visible in the viewport. If no rows are fully visible, returns an error code: -1.
   *
   * @returns {number}
   * @this Table
   */
  getLastVisibleRow() {
    const s = this.dataAccessObject.endRowVisible;
    return s === null ? -1 : s;
  },
  /**
   * Get the number of rendered rows.
   *
   * @returns {number}
   * @this Table
   */
  getRenderedRowsCount() {
    return this.dataAccessObject.countRowsRendered;
  },
  /**
   * Get the number of fully visible rows in the viewport.
   *
   * @returns {number}
   * @this Table
   */
  getVisibleRowsCount() {
    return this.dataAccessObject.countRowsVisible;
  }
};
Jn(vR, "MIXIN_NAME", LF, {
  writable: !1,
  enumerable: !1
});
const yR = vR;
class Lg extends dr {
  /**
   * @param {TableDao} dataAccessObject The data access object.
   * @param {FacadeGetter} facadeGetter Function which return proper facade.
   * @param {DomBindings} domBindings Bindings into DOM.
   * @param {Settings} wtSettings The Walkontable settings.
   */
  constructor(e, t, n, o) {
    super(e, t, n, o, to);
  }
}
ft(Lg, yR);
ft(Lg, Pg);
const $F = Lg;
class FF extends ka {
  /**
   * @param {Walkontable} wotInstance The Walkontable instance. @TODO refactoring: check if can be deleted.
   * @param {FacadeGetter} facadeGetter Function which return proper facade.
   * @param {Settings} wtSettings The Walkontable settings.
   * @param {DomBindings} domBindings Dom elements bound to the current instance.
   */
  constructor(e, t, n, o) {
    super(e, t, to, n, o);
  }
  /**
   * Factory method to create a subclass of `Table` that is relevant to this overlay.
   *
   * @see Table#constructor
   * @param {...*} args Parameters that will be forwarded to the `Table` constructor.
   * @returns {InlineStartOverlayTable}
   */
  createTable() {
    for (var e = arguments.length, t = new Array(e), n = 0; n < e; n++)
      t[n] = arguments[n];
    return new $F(...t);
  }
  /**
   * Checks if overlay should be fully rendered.
   *
   * @returns {boolean}
   */
  shouldBeRendered() {
    return this.wtSettings.getSetting("shouldRenderInlineStartOverlay");
  }
  /**
   * Updates the left overlay position.
   *
   * @returns {boolean}
   */
  resetFixedPosition() {
    const {
      wtTable: e
    } = this.wot;
    if (!this.needFullRender || !e.holder.parentNode)
      return !1;
    const {
      rootWindow: t
    } = this.domBindings, n = this.clone.wtTable.holder.parentNode, o = this.wtSettings.getSetting("preventOverflow");
    let r = 0;
    this.trimmingContainer === t && (!o || o !== "horizontal") ? (r = this.getOverlayOffset() * (this.isRtl() ? -1 : 1), wg(n, `${r}px`, "0px")) : (r = this.getScrollPosition(), ah(n));
    const a = this.adjustHeaderBordersPosition(r);
    return this.adjustElementsSize(), a;
  }
  /**
   * Sets the main overlay's horizontal scroll position.
   *
   * @param {number} pos The scroll position.
   * @returns {boolean}
   */
  setScrollPosition(e) {
    const {
      rootWindow: t
    } = this.domBindings;
    let n = !1;
    return this.isRtl() && (e = -e), this.mainTableScrollableElement === t && t.scrollX !== e ? (t.scrollTo(e, fa(t)), n = !0) : this.mainTableScrollableElement.scrollLeft !== e && (this.mainTableScrollableElement.scrollLeft = e, n = !0), n;
  }
  /**
   * Triggers onScroll hook callback.
   */
  onScroll() {
    this.wtSettings.getSetting("onScrollVertically");
  }
  /**
   * Calculates total sum cells width.
   *
   * @param {number} from Column index which calculates started from.
   * @param {number} to Column index where calculation is finished.
   * @returns {number} Width sum.
   */
  sumCellSizes(e, t) {
    const n = this.wtSettings.getSetting("defaultColumnWidth");
    let o = e, r = 0;
    for (; o < t; )
      r += this.wot.wtTable.getStretchedColumnWidth(o) || n, o += 1;
    return r;
  }
  /**
   * Adjust overlay root element, childs and master table element sizes (width, height).
   *
   * @param {boolean} [force=false] When `true`, it adjusts the DOM nodes sizes for that overlay.
   */
  adjustElementsSize() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
    this.updateTrimmingContainer(), (this.needFullRender || e) && (this.adjustRootElementSize(), this.adjustRootChildrenSize());
  }
  /**
   * Adjust overlay root element size (width and height).
   */
  adjustRootElementSize() {
    const {
      wtTable: e
    } = this.wot, {
      rootDocument: t,
      rootWindow: n
    } = this.domBindings, o = qt(t), a = this.clone.wtTable.holder.parentNode.style, l = this.wtSettings.getSetting("preventOverflow");
    if (this.trimmingContainer !== n || l === "vertical") {
      let h = this.wot.wtViewport.getWorkspaceHeight();
      this.wot.wtOverlays.hasScrollbarBottom && (h -= o), h = Math.min(h, e.wtRootElement.scrollHeight), a.height = `${h}px`;
    } else
      a.height = "";
    this.clone.wtTable.holder.style.height = a.height;
    const c = ht(this.clone.wtTable.TABLE);
    a.width = `${c}px`;
  }
  /**
   * Adjust overlay root childs size.
   */
  adjustRootChildrenSize() {
    var e;
    const {
      holder: t
    } = this.clone.wtTable, {
      selections: n
    } = this.wot, o = this.facadeGetter(), r = Math.abs((e = n == null ? void 0 : n.getCell().getBorder(o).cornerCenterPointOffset) !== null && e !== void 0 ? e : 0);
    this.clone.wtTable.hider.style.height = this.hider.style.height, t.style.height = t.parentNode.style.height, t.style.width = `${parseInt(t.parentNode.style.width, 10) + r}px`;
  }
  /**
   * Adjust the overlay dimensions and position.
   */
  applyToDOM() {
    const e = this.wtSettings.getSetting("totalColumns"), t = this.isRtl() ? "right" : "left";
    if (typeof this.wot.wtViewport.columnsRenderCalculator.startPosition == "number")
      this.spreader.style[t] = `${this.wot.wtViewport.columnsRenderCalculator.startPosition}px`;
    else if (e === 0)
      this.spreader.style[t] = "0";
    else
      throw new Error("Incorrect value of the columnsRenderCalculator");
    this.isRtl() ? this.spreader.style.left = "" : this.spreader.style.right = "", this.needFullRender && this.syncOverlayOffset();
  }
  /**
   * Synchronize calculated top position to an element.
   */
  syncOverlayOffset() {
    typeof this.wot.wtViewport.rowsRenderCalculator.startPosition == "number" ? this.clone.wtTable.spreader.style.top = `${this.wot.wtViewport.rowsRenderCalculator.startPosition}px` : this.clone.wtTable.spreader.style.top = "";
  }
  /**
   * Scrolls horizontally to a column at the left edge of the viewport.
   *
   * @param {number} sourceCol  Column index which you want to scroll to.
   * @param {boolean} [beyondRendered]  If `true`, scrolls according to the right
   *                                    edge (left edge is by default).
   * @returns {boolean}
   */
  scrollTo(e, t) {
    let n = this.getTableParentOffset();
    const r = (this.wot.cloneSource ? this.wot.cloneSource : this.wot).wtTable.holder;
    let a = 0;
    if (t) {
      const l = this.wot.wtTable.getColumnWidth(e), c = this.wot.wtViewport.getViewportWidth();
      l > c && (t = !1);
    }
    return t && r.offsetWidth !== r.clientWidth && (a = qt(this.domBindings.rootDocument)), t ? (n += this.sumCellSizes(0, e + 1), n -= this.wot.wtViewport.getViewportWidth()) : n += this.sumCellSizes(this.wtSettings.getSetting("fixedColumnsStart"), e), n += a, this.setScrollPosition(n);
  }
  /**
   * Gets table parent left position.
   *
   * @returns {number}
   */
  getTableParentOffset() {
    const e = this.wtSettings.getSetting("preventOverflow");
    let t = 0;
    return !e && this.trimmingContainer === this.domBindings.rootWindow && (t = this.wot.wtTable.holderOffset.left), t;
  }
  /**
   * Gets the main overlay's horizontal scroll position.
   *
   * @returns {number} Main table's horizontal scroll position.
   */
  getScrollPosition() {
    return Math.abs(sf(this.mainTableScrollableElement, this.domBindings.rootWindow));
  }
  /**
   * Gets the main overlay's horizontal overlay offset.
   *
   * @returns {number} Main table's horizontal overlay offset.
   */
  getOverlayOffset() {
    const {
      rootWindow: e
    } = this.domBindings, t = this.wtSettings.getSetting("preventOverflow");
    let n = 0;
    if (this.trimmingContainer === e && (!t || t !== "horizontal")) {
      this.isRtl() ? n = Math.abs(Math.min(this.getTableParentOffset() - this.getScrollPosition(), 0)) : n = Math.max(this.getScrollPosition() - this.getTableParentOffset(), 0);
      const o = this.wot.wtTable.getTotalWidth(), r = this.clone.wtTable.getTotalWidth(), a = o - r;
      n > a && (n = 0);
    }
    return n;
  }
  /**
   * Adds css classes to hide the header border's header (cell-selection border hiding issue).
   *
   * @param {number} position Header X position if trimming container is window or scroll top if not.
   * @returns {boolean}
   */
  adjustHeaderBordersPosition(e) {
    const t = this.wot.wtTable.holder.parentNode, n = this.wtSettings.getSetting("rowHeaders"), o = this.wtSettings.getSetting("fixedColumnsStart");
    this.wtSettings.getSetting("totalRows") ? $e(t, "emptyRows") : ie(t, "emptyRows");
    let a = !1;
    if (o && !n.length)
      ie(t, "innerBorderLeft innerBorderInlineStart");
    else if (!o && n.length) {
      const l = Ne(t, "innerBorderInlineStart");
      e ? (ie(t, "innerBorderLeft innerBorderInlineStart"), a = !l) : ($e(t, "innerBorderLeft innerBorderInlineStart"), a = l);
    }
    return a;
  }
}
const VF = "stickyRowsTop", SR = {
  /**
   * Get the source index of the first rendered row. If no rows are rendered, returns an error code: -1.
   *
   * @returns {number}
   * @this Table
   */
  getFirstRenderedRow() {
    return this.wtSettings.getSetting("totalRows") === 0 ? -1 : 0;
  },
  /**
   * Get the source index of the first row fully visible in the viewport. If no rows are fully visible, returns an error code: -1.
   * Assumes that all rendered rows are fully visible.
   *
   * @returns {number}
   * @this Table
   */
  getFirstVisibleRow() {
    return this.getFirstRenderedRow();
  },
  /**
   * Get the source index of the last rendered row. If no rows are rendered, returns an error code: -1.
   *
   * @returns {number}
   * @this Table
   */
  getLastRenderedRow() {
    return this.getRenderedRowsCount() - 1;
  },
  /**
   * Get the source index of the last row fully visible in the viewport. If no rows are fully visible, returns an error code: -1.
   * Assumes that all rendered rows are fully visible.
   *
   * @returns {number}
   * @this Table
   */
  getLastVisibleRow() {
    return this.getLastRenderedRow();
  },
  /**
   * Get the number of rendered rows.
   *
   * @returns {number}
   * @this Table
   */
  getRenderedRowsCount() {
    const s = this.wtSettings.getSetting("totalRows");
    return Math.min(this.wtSettings.getSetting("fixedRowsTop"), s);
  },
  /**
   * Get the number of fully visible rows in the viewport.
   * Assumes that all rendered rows are fully visible.
   *
   * @returns {number}
   * @this Table
   */
  getVisibleRowsCount() {
    return this.getRenderedRowsCount();
  }
};
Jn(SR, "MIXIN_NAME", VF, {
  writable: !1,
  enumerable: !1
});
const bR = SR;
class $g extends dr {
  /**
   * @param {TableDao} dataAccessObject The data access object.
   * @param {FacadeGetter} facadeGetter Function which return proper facade.
   * @param {DomBindings} domBindings Bindings into DOM.
   * @param {Settings} wtSettings The Walkontable settings.
   */
  constructor(e, t, n, o) {
    super(e, t, n, o, so);
  }
}
ft($g, bR);
ft($g, Pg);
const BF = $g;
function qC(s, e, t) {
  return e = WF(e), e in s ? Object.defineProperty(s, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : s[e] = t, s;
}
function WF(s) {
  var e = UF(s, "string");
  return typeof e == "symbol" ? e : String(e);
}
function UF(s, e) {
  if (typeof s != "object" || s === null)
    return s;
  var t = s[Symbol.toPrimitive];
  if (t !== void 0) {
    var n = t.call(s, e || "default");
    if (typeof n != "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(s);
}
class zF extends ka {
  /**
   * @param {Walkontable} wotInstance The Walkontable instance. @TODO refactoring: check if can be deleted.
   * @param {FacadeGetter} facadeGetter Function which return proper facade.
   * @param {Settings} wtSettings The Walkontable settings.
   * @param {DomBindings} domBindings Dom elements bound to the current instance.
   * @param {TopOverlay} topOverlay The instance of the Top overlay.
   * @param {InlineStartOverlay} inlineStartOverlay The instance of the InlineStart overlay.
   */
  constructor(e, t, n, o, r, a) {
    super(e, t, so, n, o), qC(this, "topOverlay", void 0), qC(this, "inlineStartOverlay", void 0), this.topOverlay = r, this.inlineStartOverlay = a;
  }
  /**
   * Factory method to create a subclass of `Table` that is relevant to this overlay.
   *
   * @see Table#constructor
   * @param {...*} args Parameters that will be forwarded to the `Table` constructor.
   * @returns {TopInlineStartCornerOverlayTable}
   */
  createTable() {
    for (var e = arguments.length, t = new Array(e), n = 0; n < e; n++)
      t[n] = arguments[n];
    return new BF(...t);
  }
  /**
   * Checks if overlay should be fully rendered.
   *
   * @returns {boolean}
   */
  shouldBeRendered() {
    return this.wtSettings.getSetting("shouldRenderTopOverlay") && this.wtSettings.getSetting("shouldRenderInlineStartOverlay");
  }
  /**
   * Updates the corner overlay position.
   *
   * @returns {boolean}
   */
  resetFixedPosition() {
    if (this.updateTrimmingContainer(), !this.wot.wtTable.holder.parentNode)
      return !1;
    const e = this.clone.wtTable.holder.parentNode;
    if (this.trimmingContainer === this.domBindings.rootWindow) {
      const o = this.inlineStartOverlay.getOverlayOffset() * (this.isRtl() ? -1 : 1), r = this.topOverlay.getOverlayOffset();
      wg(e, `${o}px`, `${r}px`);
    } else
      ah(e);
    let t = At(this.clone.wtTable.TABLE);
    const n = ht(this.clone.wtTable.TABLE);
    return this.wot.wtTable.hasDefinedSize() || (t = 0), e.style.height = `${t}px`, e.style.width = `${n}px`, !1;
  }
}
class Fg extends dr {
  /**
   * @param {TableDao} dataAccessObject The data access object.
   * @param {FacadeGetter} facadeGetter Function which return proper facade.
   * @param {DomBindings} domBindings Bindings into DOM.
   * @param {Settings} wtSettings The Walkontable settings.
   */
  constructor(e, t, n, o) {
    super(e, t, n, o, eo);
  }
}
ft(Fg, bR);
ft(Fg, kg);
const YF = Fg;
function GF(s, e, t) {
  return e = jF(e), e in s ? Object.defineProperty(s, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : s[e] = t, s;
}
function jF(s) {
  var e = KF(s, "string");
  return typeof e == "symbol" ? e : String(e);
}
function KF(s, e) {
  if (typeof s != "object" || s === null)
    return s;
  var t = s[Symbol.toPrimitive];
  if (t !== void 0) {
    var n = t.call(s, e || "default");
    if (typeof n != "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(s);
}
class XF extends ka {
  /**
   * @param {Walkontable} wotInstance The Walkontable instance. @TODO refactoring: check if can be deleted.
   * @param {FacadeGetter} facadeGetter Function which return proper facade.
   * @param {Settings} wtSettings The Walkontable settings.
   * @param {DomBindings} domBindings Dom elements bound to the current instance.
   */
  constructor(e, t, n, o) {
    super(e, t, eo, n, o), GF(this, "cachedFixedRowsTop", -1), this.cachedFixedRowsTop = this.wtSettings.getSetting("fixedRowsTop");
  }
  /**
   * Factory method to create a subclass of `Table` that is relevant to this overlay.
   *
   * @see Table#constructor
   * @param {...*} args Parameters that will be forwarded to the `Table` constructor.
   * @returns {TopOverlayTable}
   */
  createTable() {
    for (var e = arguments.length, t = new Array(e), n = 0; n < e; n++)
      t[n] = arguments[n];
    return new YF(...t);
  }
  /**
   * Checks if overlay should be fully rendered.
   *
   * @returns {boolean}
   */
  shouldBeRendered() {
    return this.wtSettings.getSetting("shouldRenderTopOverlay");
  }
  /**
   * Updates the top overlay position.
   *
   * @returns {boolean}
   */
  resetFixedPosition() {
    if (!this.needFullRender || !this.wot.wtTable.holder.parentNode)
      return !1;
    const e = this.clone.wtTable.holder.parentNode, {
      rootWindow: t
    } = this.domBindings, n = this.wtSettings.getSetting("preventOverflow");
    let o = 0, r = !1;
    if (this.trimmingContainer === t && (!n || n !== "vertical")) {
      const {
        wtTable: l
      } = this.wot, c = l.hider.getBoundingClientRect(), h = Math.ceil(c.bottom), u = e.offsetHeight;
      r = h === u, o = this.getOverlayOffset(), wg(e, "0px", `${o}px`);
    } else
      o = this.getScrollPosition(), ah(e);
    const a = this.adjustHeaderBordersPosition(o, r);
    return this.adjustElementsSize(), a;
  }
  /**
   * Sets the main overlay's vertical scroll position.
   *
   * @param {number} pos The scroll position.
   * @returns {boolean}
   */
  setScrollPosition(e) {
    const t = this.domBindings.rootWindow;
    let n = !1;
    return this.mainTableScrollableElement === t && t.scrollY !== e ? (t.scrollTo(tr(t), e), n = !0) : this.mainTableScrollableElement.scrollTop !== e && (this.mainTableScrollableElement.scrollTop = e, n = !0), n;
  }
  /**
   * Triggers onScroll hook callback.
   */
  onScroll() {
    this.wtSettings.getSetting("onScrollHorizontally");
  }
  /**
   * Calculates total sum cells height.
   *
   * @param {number} from Row index which calculates started from.
   * @param {number} to Row index where calculation is finished.
   * @returns {number} Height sum.
   */
  sumCellSizes(e, t) {
    const n = this.wtSettings.getSetting("defaultRowHeight");
    let o = e, r = 0;
    for (; o < t; ) {
      const a = this.wot.wtTable.getRowHeight(o);
      r += a === void 0 ? n : a, o += 1;
    }
    return r;
  }
  /**
   * Adjust overlay root element, childs and master table element sizes (width, height).
   *
   * @param {boolean} [force=false] When `true`, it adjusts the DOM nodes sizes for that overlay.
   */
  adjustElementsSize() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
    this.updateTrimmingContainer(), (this.needFullRender || e) && (this.adjustRootElementSize(), this.adjustRootChildrenSize());
  }
  /**
   * Adjust overlay root element size (width and height).
   */
  adjustRootElementSize() {
    const {
      wtTable: e
    } = this.wot, {
      rootDocument: t,
      rootWindow: n
    } = this.domBindings, o = qt(t), a = this.clone.wtTable.holder.parentNode.style, l = this.wtSettings.getSetting("preventOverflow");
    if (this.trimmingContainer !== n || l === "horizontal") {
      let h = this.wot.wtViewport.getWorkspaceWidth();
      this.wot.wtOverlays.hasScrollbarRight && (h -= o), h = Math.min(h, e.wtRootElement.scrollWidth), a.width = `${h}px`;
    } else
      a.width = "";
    this.clone.wtTable.holder.style.width = a.width;
    let c = At(this.clone.wtTable.TABLE);
    this.wot.wtTable.hasDefinedSize() || (c = 0), a.height = `${c}px`;
  }
  /**
   * Adjust overlay root childs size.
   */
  adjustRootChildrenSize() {
    var e;
    const {
      holder: t
    } = this.clone.wtTable, {
      selections: n
    } = this.wot, o = this.facadeGetter(), r = Math.abs((e = n == null ? void 0 : n.getCell().getBorder(o).cornerCenterPointOffset) !== null && e !== void 0 ? e : 0);
    this.clone.wtTable.hider.style.width = this.hider.style.width, t.style.width = t.parentNode.style.width, t.style.height = `${parseInt(t.parentNode.style.height, 10) + r}px`;
  }
  /**
   * Adjust the overlay dimensions and position.
   */
  applyToDOM() {
    const e = this.wtSettings.getSetting("totalRows");
    if (typeof this.wot.wtViewport.rowsRenderCalculator.startPosition == "number")
      this.spreader.style.top = `${this.wot.wtViewport.rowsRenderCalculator.startPosition}px`;
    else if (e === 0)
      this.spreader.style.top = "0";
    else
      throw new Error("Incorrect value of the rowsRenderCalculator");
    this.spreader.style.bottom = "", this.needFullRender && this.syncOverlayOffset();
  }
  /**
   * Synchronize calculated left position to an element.
   */
  syncOverlayOffset() {
    const e = this.isRtl() ? "right" : "left", {
      spreader: t
    } = this.clone.wtTable;
    typeof this.wot.wtViewport.columnsRenderCalculator.startPosition == "number" ? t.style[e] = `${this.wot.wtViewport.columnsRenderCalculator.startPosition}px` : t.style[e] = "";
  }
  /**
   * Scrolls vertically to a row.
   *
   * @param {number} sourceRow Row index which you want to scroll to.
   * @param {boolean} [bottomEdge] If `true`, scrolls according to the bottom edge (top edge is by default).
   * @returns {boolean}
   */
  scrollTo(e, t) {
    const {
      wot: n,
      wtSettings: o
    } = this, a = (n.cloneSource ? n.cloneSource : n).wtTable.holder;
    let l = this.getTableParentOffset(), c = 0;
    if (t) {
      const h = this.wot.wtTable.getRowHeight(e), u = this.wot.wtViewport.getViewportHeight();
      h > u && (t = !1);
    }
    if (t && a.offsetHeight !== a.clientHeight && (c = qt(this.domBindings.rootDocument)), t) {
      const h = o.getSetting("fixedRowsBottom"), u = o.getSetting("totalRows");
      l += this.sumCellSizes(0, e + 1), l -= n.wtViewport.getViewportHeight() - this.sumCellSizes(u - h, u), l += 1;
    } else
      l += this.sumCellSizes(o.getSetting("fixedRowsTop"), e);
    return l += c, this.setScrollPosition(l);
  }
  /**
   * Gets table parent top position.
   *
   * @returns {number}
   */
  getTableParentOffset() {
    return this.mainTableScrollableElement === this.domBindings.rootWindow ? this.wot.wtTable.holderOffset.top : 0;
  }
  /**
   * Gets the main overlay's vertical scroll position.
   *
   * @returns {number} Main table's vertical scroll position.
   */
  getScrollPosition() {
    return Cc(this.mainTableScrollableElement, this.domBindings.rootWindow);
  }
  /**
   * Gets the main overlay's vertical overlay offset.
   *
   * @returns {number} Main table's vertical overlay offset.
   */
  getOverlayOffset() {
    const {
      rootWindow: e
    } = this.domBindings, t = this.wtSettings.getSetting("preventOverflow");
    let n = 0;
    if (this.trimmingContainer === e && (!t || t !== "vertical")) {
      const o = this.wot.wtTable.getTotalHeight(), r = this.clone.wtTable.getTotalHeight(), a = o - r;
      n = Math.max(this.getScrollPosition() - this.getTableParentOffset(), 0), n > a && (n = 0);
    }
    return n;
  }
  /**
   * Adds css classes to hide the header border's header (cell-selection border hiding issue).
   *
   * @param {number} position Header Y position if trimming container is window or scroll top if not.
   * @param {boolean} [skipInnerBorderAdjusting=false] If `true` the inner border adjusting will be skipped.
   * @returns {boolean}
   */
  adjustHeaderBordersPosition(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;
    const n = this.wot.wtTable.holder.parentNode;
    this.wtSettings.getSetting("totalColumns") ? $e(n, "emptyColumns") : ie(n, "emptyColumns");
    let r = !1;
    if (!t) {
      const a = this.wtSettings.getSetting("fixedRowsTop"), l = this.cachedFixedRowsTop !== a, c = this.wtSettings.getSetting("columnHeaders");
      if ((l || a === 0) && c.length > 0) {
        const h = Ne(n, "innerBorderTop");
        this.cachedFixedRowsTop = this.wtSettings.getSetting("fixedRowsTop"), e || this.wtSettings.getSetting("totalRows") === 0 ? (ie(n, "innerBorderTop"), r = !h) : ($e(n, "innerBorderTop"), r = h);
      }
    }
    return r;
  }
}
function An(s, e, t) {
  return e = qF(e), e in s ? Object.defineProperty(s, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : s[e] = t, s;
}
function qF(s) {
  var e = ZF(s, "string");
  return typeof e == "symbol" ? e : String(e);
}
function ZF(s, e) {
  if (typeof s != "object" || s === null)
    return s;
  var t = s[Symbol.toPrimitive];
  if (t !== void 0) {
    var n = t.call(s, e || "default");
    if (typeof n != "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(s);
}
class QF {
  /**
   * @param {Walkontable} wotInstance The Walkontable instance. @todo refactoring remove.
   * @param {FacadeGetter} facadeGetter Function which return proper facade.
   * @param {DomBindings} domBindings Bindings into DOM.
   * @param {Settings} wtSettings The Walkontable settings.
   * @param {EventManager} eventManager The walkontable event manager.
   * @param {MasterTable} wtTable The master table.
   */
  constructor(e, t, n, o, r, a) {
    An(this, "wot", null), An(this, "topOverlay", null), An(this, "bottomOverlay", null), An(this, "inlineStartOverlay", null), An(this, "topInlineStartCornerOverlay", null), An(this, "bottomInlineStartCornerOverlay", null), An(this, "browserLineHeight", void 0), An(this, "wtSettings", null), An(this, "resizeObserver", new ResizeObserver((u) => {
      Ag(() => {
        !Array.isArray(u) || !u.length || this.wtSettings.getSetting("onContainerElementResize");
      });
    })), this.wot = e, this.wtSettings = o, this.domBindings = n, this.facadeGetter = t, this.wtTable = a;
    const {
      rootDocument: l,
      rootWindow: c
    } = this.domBindings;
    this.instance = this.wot, this.eventManager = r, this.scrollbarSize = qt(l);
    const h = c.getComputedStyle(a.wtRootElement.parentNode).getPropertyValue("overflow") === "hidden";
    this.scrollableElement = h ? a.holder : vc(a.TABLE), this.initOverlays(), this.hasScrollbarBottom = !1, this.hasScrollbarRight = !1, this.destroyed = !1, this.keyPressed = !1, this.spreaderLastSize = {
      width: null,
      height: null
    }, this.verticalScrolling = !1, this.horizontalScrolling = !1, this.initBrowserLineHeight(), this.registerListeners(), this.lastScrollX = c.scrollX, this.lastScrollY = c.scrollY;
  }
  /**
   * Get the list of references to all overlays.
   *
   * @param {boolean} [includeMaster = false] If set to `true`, the list will contain the master table as the last
   * element.
   * @returns {(TopOverlay|TopInlineStartCornerOverlay|InlineStartOverlay|BottomOverlay|BottomInlineStartCornerOverlay)[]}
   */
  getOverlays() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
    const t = [this.topOverlay, this.topInlineStartCornerOverlay, this.inlineStartOverlay, this.bottomOverlay, this.bottomInlineStartCornerOverlay];
    return e && t.push(this.wtTable), t;
  }
  /**
   * Retrieve browser line height and apply its value to `browserLineHeight`.
   *
   * @private
   */
  initBrowserLineHeight() {
    const {
      rootWindow: e,
      rootDocument: t
    } = this.domBindings, n = e.getComputedStyle(t.body), o = parseInt(n.lineHeight, 10), r = parseInt(n.fontSize, 10) * 1.2;
    this.browserLineHeight = o || r;
  }
  /**
   * Prepare overlays based on user settings.
   *
   * @private
   */
  initOverlays() {
    const e = [this.wot, this.facadeGetter, this.wtSettings, this.domBindings];
    this.topOverlay = new XF(...e), this.bottomOverlay = new NF(...e), this.inlineStartOverlay = new FF(...e), this.topInlineStartCornerOverlay = new zF(...e, this.topOverlay, this.inlineStartOverlay), this.bottomInlineStartCornerOverlay = new OF(...e, this.bottomOverlay, this.inlineStartOverlay);
  }
  /**
   * Update state of rendering, check if changed.
   *
   * @package
   * @returns {boolean} Returns `true` if changes applied to overlay needs scroll synchronization.
   */
  updateStateOfRendering() {
    let e = this.topOverlay.updateStateOfRendering();
    return e = this.bottomOverlay.updateStateOfRendering() || e, e = this.inlineStartOverlay.updateStateOfRendering() || e, this.inlineStartOverlay.needFullRender && (this.topOverlay.needFullRender && (e = this.topInlineStartCornerOverlay.updateStateOfRendering() || e), this.bottomOverlay.needFullRender && (e = this.bottomInlineStartCornerOverlay.updateStateOfRendering() || e)), e;
  }
  /**
   * Refresh and redraw table.
   */
  refreshAll() {
    if (this.wot.drawn) {
      if (!this.wtTable.holder.parentNode) {
        this.destroy();
        return;
      }
      this.wot.draw(!0), this.verticalScrolling && this.inlineStartOverlay.onScroll(), this.horizontalScrolling && this.topOverlay.onScroll(), this.verticalScrolling = !1, this.horizontalScrolling = !1;
    }
  }
  /**
   * Register all necessary event listeners.
   */
  registerListeners() {
    const {
      rootDocument: e,
      rootWindow: t
    } = this.domBindings, {
      mainTableScrollableElement: n
    } = this.topOverlay, {
      mainTableScrollableElement: o
    } = this.inlineStartOverlay;
    this.eventManager.addEventListener(e.documentElement, "keydown", (f) => this.onKeyDown(f)), this.eventManager.addEventListener(e.documentElement, "keyup", () => this.onKeyUp()), this.eventManager.addEventListener(e, "visibilitychange", () => this.onKeyUp()), this.eventManager.addEventListener(n, "scroll", (f) => this.onTableScroll(f), {
      passive: !0
    }), n !== o && this.eventManager.addEventListener(o, "scroll", (f) => this.onTableScroll(f), {
      passive: !0
    });
    const r = t.devicePixelRatio && t.devicePixelRatio > 1, a = this.scrollableElement === t, l = this.wtSettings.getSetting("preventWheel"), c = {
      passive: a
    };
    (l || r || !zb()) && this.eventManager.addEventListener(this.wtTable.wtRootElement, "wheel", (f) => this.onCloneWheel(f, l), c), [this.topOverlay, this.bottomOverlay, this.inlineStartOverlay, this.topInlineStartCornerOverlay, this.bottomInlineStartCornerOverlay].forEach((f) => {
      if (f && f.needFullRender) {
        const {
          holder: g
        } = f.clone.wtTable;
        this.eventManager.addEventListener(g, "wheel", (m) => this.onCloneWheel(m, l), c);
      }
    });
    let u;
    this.eventManager.addEventListener(t, "resize", () => {
      clearTimeout(u), u = setTimeout(() => {
        this.wtSettings.getSetting("onWindowResize");
      }, 200);
    }), a || this.resizeObserver.observe(this.wtTable.wtRootElement.parentElement);
  }
  /**
   * Deregister all previously registered listeners.
   */
  deregisterListeners() {
    this.eventManager.clearEvents(!0);
  }
  /**
   * Scroll listener.
   *
   * @param {Event} event The mouse event object.
   */
  onTableScroll(e) {
    const t = this.domBindings.rootWindow, n = this.inlineStartOverlay.mainTableScrollableElement, o = this.topOverlay.mainTableScrollableElement, r = e.target;
    this.keyPressed && (o !== t && r !== t && !e.target.contains(o) || n !== t && r !== t && !e.target.contains(n)) || this.syncScrollPositions(e);
  }
  /**
   * Wheel listener for cloned overlays.
   *
   * @param {Event} event The mouse event object.
   * @param {boolean} preventDefault If `true`, the `preventDefault` will be called on event object.
   */
  onCloneWheel(e, t) {
    const {
      rootWindow: n
    } = this.domBindings, o = this.inlineStartOverlay.mainTableScrollableElement, r = this.topOverlay.mainTableScrollableElement, a = e.target, l = r !== n && a !== n && !a.contains(r), c = o !== n && a !== n && !a.contains(o);
    if (this.keyPressed && (l || c))
      return;
    const h = this.translateMouseWheelToScroll(e);
    (t || this.scrollableElement !== n && h) && e.preventDefault();
  }
  /**
   * Key down listener.
   *
   * @param {Event} event The keyboard event object.
   */
  onKeyDown(e) {
    this.keyPressed = pa(e.keyCode, "ARROW_UP|ARROW_RIGHT|ARROW_DOWN|ARROW_LEFT");
  }
  /**
   * Key up listener.
   */
  onKeyUp() {
    this.keyPressed = !1;
  }
  /**
   * Translate wheel event into scroll event and sync scroll overlays position.
   *
   * @private
   * @param {Event} event The mouse event object.
   * @returns {boolean}
   */
  translateMouseWheelToScroll(e) {
    let t = isNaN(e.deltaY) ? -1 * e.wheelDeltaY : e.deltaY, n = isNaN(e.deltaX) ? -1 * e.wheelDeltaX : e.deltaX;
    e.deltaMode === 1 && (n += n * this.browserLineHeight, t += t * this.browserLineHeight);
    const o = this.scrollVertically(t), r = this.scrollHorizontally(n);
    return o || r;
  }
  /**
   * Scrolls main scrollable element horizontally.
   *
   * @param {number} delta Relative value to scroll.
   * @returns {boolean}
   */
  scrollVertically(e) {
    const t = this.scrollableElement.scrollTop;
    return this.scrollableElement.scrollTop += e, t !== this.scrollableElement.scrollTop;
  }
  /**
   * Scrolls main scrollable element horizontally.
   *
   * @param {number} delta Relative value to scroll.
   * @returns {boolean}
   */
  scrollHorizontally(e) {
    const t = this.scrollableElement.scrollLeft;
    return this.scrollableElement.scrollLeft += e, t !== this.scrollableElement.scrollLeft;
  }
  /**
   * Synchronize scroll position between master table and overlay table.
   *
   * @private
   */
  syncScrollPositions() {
    if (this.destroyed)
      return;
    const {
      rootWindow: e
    } = this.domBindings, t = this.topOverlay.clone.wtTable.holder, n = this.inlineStartOverlay.clone.wtTable.holder, [o, r] = [this.scrollableElement.scrollLeft, this.scrollableElement.scrollTop];
    if (this.horizontalScrolling = t.scrollLeft !== o || this.lastScrollX !== e.scrollX, this.verticalScrolling = n.scrollTop !== r || this.lastScrollY !== e.scrollY, this.lastScrollX = e.scrollX, this.lastScrollY = e.scrollY, this.horizontalScrolling) {
      t.scrollLeft = o;
      const a = this.bottomOverlay.needFullRender ? this.bottomOverlay.clone.wtTable.holder : null;
      a && (a.scrollLeft = o);
    }
    this.verticalScrolling && (n.scrollTop = r), this.refreshAll();
  }
  /**
   * Synchronize overlay scrollbars with the master scrollbar.
   */
  syncScrollWithMaster() {
    const e = this.topOverlay.mainTableScrollableElement, {
      scrollLeft: t,
      scrollTop: n
    } = e;
    this.topOverlay.needFullRender && (this.topOverlay.clone.wtTable.holder.scrollLeft = t), this.bottomOverlay.needFullRender && (this.bottomOverlay.clone.wtTable.holder.scrollLeft = t), this.inlineStartOverlay.needFullRender && (this.inlineStartOverlay.clone.wtTable.holder.scrollTop = n);
  }
  /**
   * Update the main scrollable elements for all the overlays.
   */
  updateMainScrollableElements() {
    this.deregisterListeners(), this.inlineStartOverlay.updateMainScrollableElement(), this.topOverlay.updateMainScrollableElement(), this.bottomOverlay.needFullRender && this.bottomOverlay.updateMainScrollableElement();
    const {
      wtTable: e
    } = this, {
      rootWindow: t
    } = this.domBindings;
    t.getComputedStyle(e.wtRootElement.parentNode).getPropertyValue("overflow") === "hidden" ? this.scrollableElement = e.holder : this.scrollableElement = vc(e.TABLE), this.registerListeners();
  }
  /**
   *
   */
  destroy() {
    this.resizeObserver.disconnect(), this.eventManager.destroy(), this.topOverlay.destroy(), this.bottomOverlay.clone && this.bottomOverlay.destroy(), this.inlineStartOverlay.destroy(), this.topInlineStartCornerOverlay && this.topInlineStartCornerOverlay.destroy(), this.bottomInlineStartCornerOverlay && this.bottomInlineStartCornerOverlay.clone && this.bottomInlineStartCornerOverlay.destroy(), this.destroyed = !0;
  }
  /**
   * @param {boolean} [fastDraw=false] When `true`, try to refresh only the positions of borders without rerendering
   *                                   the data. It will only work if Table.draw() does not force
   *                                   rendering anyway.
   */
  refresh() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
    this.updateLastSpreaderSize() && this.adjustElementsSize(), this.bottomOverlay.clone && this.bottomOverlay.refresh(e), this.inlineStartOverlay.refresh(e), this.topOverlay.refresh(e), this.topInlineStartCornerOverlay && this.topInlineStartCornerOverlay.refresh(e), this.bottomInlineStartCornerOverlay && this.bottomInlineStartCornerOverlay.clone && this.bottomInlineStartCornerOverlay.refresh(e);
  }
  /**
   * Update the last cached spreader size with the current size.
   *
   * @returns {boolean} `true` if the lastSpreaderSize cache was updated, `false` otherwise.
   */
  updateLastSpreaderSize() {
    const e = this.wtTable.spreader, t = e.clientWidth, n = e.clientHeight, o = t !== this.spreaderLastSize.width || n !== this.spreaderLastSize.height;
    return o && (this.spreaderLastSize.width = t, this.spreaderLastSize.height = n), o;
  }
  /**
   * Adjust overlays elements size and master table size.
   *
   * @param {boolean} [force=false] When `true`, it adjust the DOM nodes sizes for all overlays.
   */
  adjustElementsSize() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
    const {
      wtViewport: t
    } = this.wot, {
      wtTable: n
    } = this, o = this.wtSettings.getSetting("totalColumns"), r = this.wtSettings.getSetting("totalRows"), a = t.getRowHeaderWidth(), l = t.getColumnHeaderHeight(), c = n.hider.style;
    if (c.width = `${a + this.inlineStartOverlay.sumCellSizes(0, o)}px`, c.height = `${l + this.topOverlay.sumCellSizes(0, r) + 1}px`, this.scrollbarSize > 0) {
      const {
        scrollHeight: h,
        scrollWidth: u
      } = n.wtRootElement, {
        scrollHeight: f,
        scrollWidth: g
      } = n.holder;
      this.hasScrollbarRight = h < f, this.hasScrollbarBottom = u < g, this.hasScrollbarRight && n.hider.scrollWidth + this.scrollbarSize > u ? this.hasScrollbarBottom = !0 : this.hasScrollbarBottom && n.hider.scrollHeight + this.scrollbarSize > h && (this.hasScrollbarRight = !0);
    }
    this.topOverlay.adjustElementsSize(e), this.inlineStartOverlay.adjustElementsSize(e), this.bottomOverlay.adjustElementsSize(e);
  }
  /**
   *
   */
  applyToDOM() {
    this.wtTable.isVisible() && (this.topOverlay.applyToDOM(), this.bottomOverlay.clone && this.bottomOverlay.applyToDOM(), this.inlineStartOverlay.applyToDOM());
  }
  /**
   * Get the parent overlay of the provided element.
   *
   * @param {HTMLElement} element An element to process.
   * @returns {object|null}
   */
  getParentOverlay(e) {
    if (!e)
      return null;
    const t = [this.topOverlay, this.inlineStartOverlay, this.bottomOverlay, this.topInlineStartCornerOverlay, this.bottomInlineStartCornerOverlay];
    let n = null;
    return D(t, (o) => {
      o && o.clone && o.clone.wtTable.TABLE.contains(e) && (n = o.clone);
    }), n;
  }
  /**
   * Synchronize the class names between the main overlay table and the tables on the other overlays.
   *
   */
  syncOverlayTableClassNames() {
    const e = this.wtTable.TABLE, t = [this.topOverlay, this.inlineStartOverlay, this.bottomOverlay, this.topInlineStartCornerOverlay, this.bottomInlineStartCornerOverlay];
    D(t, (n) => {
      n && (n.clone.wtTable.TABLE.className = e.className);
    });
  }
}
const JF = QF;
function ZC(s, e, t) {
  return e = eV(e), e in s ? Object.defineProperty(s, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : s[e] = t, s;
}
function eV(s) {
  var e = tV(s, "string");
  return typeof e == "symbol" ? e : String(e);
}
function tV(s, e) {
  if (typeof s != "object" || s === null)
    return s;
  var t = s[Symbol.toPrimitive];
  if (t !== void 0) {
    var n = t.call(s, e || "default");
    if (typeof n != "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(s);
}
class sV {
  /**
   * @param {SettingsPure} settings The user defined settings.
   */
  constructor(e) {
    ZC(this, "settings", {}), ZC(this, "defaults", Object.freeze(this.getDefaults())), je(this.defaults, (t, n) => {
      if (e[n] !== void 0)
        this.settings[n] = e[n];
      else {
        if (t === void 0)
          throw new Error(`A required setting "${n}" was not provided`);
        this.settings[n] = t;
      }
    });
  }
  /**
   * Generate defaults for a settings.
   * Void 0 means it is required, null means it can be empty.
   *
   * @private
   * @returns {SettingsPure}
   */
  getDefaults() {
    return {
      facade: void 0,
      table: void 0,
      // Determines whether the Walkontable instance is used as dataset viewer. When its instance is used as
      // a context menu, autocomplete list, etc, the returned value is `false`.
      isDataViewInstance: !0,
      // presentation mode
      externalRowCalculator: !1,
      stretchH: "none",
      // values: all, last, none
      currentRowClassName: null,
      currentColumnClassName: null,
      preventOverflow() {
        return !1;
      },
      preventWheel: !1,
      // data source
      data: void 0,
      freezeOverlays: !1,
      // Number of renderable columns for the left overlay.
      fixedColumnsStart: 0,
      // Number of renderable rows for the top overlay.
      fixedRowsTop: 0,
      // Number of renderable rows for the bottom overlay.
      fixedRowsBottom: 0,
      // Enable the inline start overlay when conditions are met (left for LTR and right for RTL document mode).
      shouldRenderInlineStartOverlay: () => this.getSetting("fixedColumnsStart") > 0 || this.getSetting("rowHeaders").length > 0,
      // Enable the top overlay when conditions are met.
      shouldRenderTopOverlay: () => this.getSetting("fixedRowsTop") > 0 || this.getSetting("columnHeaders").length > 0,
      // Enable the bottom overlay when conditions are met.
      shouldRenderBottomOverlay: () => this.getSetting("fixedRowsBottom") > 0,
      minSpareRows: 0,
      // this must be array of functions: [function (row, TH) {}]
      rowHeaders() {
        return [];
      },
      // this must be array of functions: [function (column, TH) {}]
      columnHeaders() {
        return [];
      },
      totalRows: void 0,
      totalColumns: void 0,
      cellRenderer: (e, t, n) => {
        const o = this.getSetting("data", e, t);
        Zi(n, o ?? "");
      },
      // columnWidth: 50,
      columnWidth() {
      },
      rowHeight() {
      },
      defaultRowHeight: 23,
      defaultColumnWidth: 50,
      selections: null,
      hideBorderOnMouseDownOver: !1,
      viewportRowCalculatorOverride: null,
      viewportColumnCalculatorOverride: null,
      // callbacks
      onCellMouseDown: null,
      onCellContextMenu: null,
      onCellMouseOver: null,
      onCellMouseOut: null,
      onCellMouseUp: null,
      //    onCellMouseOut: null,
      onCellDblClick: null,
      onCellCornerMouseDown: null,
      onCellCornerDblClick: null,
      beforeDraw: null,
      onDraw: null,
      onBeforeRemoveCellClassNames: null,
      onAfterDrawSelection: null,
      onBeforeDrawBorders: null,
      onScrollVertically: null,
      onScrollHorizontally: null,
      onBeforeTouchScroll: null,
      onAfterMomentumScroll: null,
      onBeforeStretchingColumnWidth: (e) => e,
      onModifyRowHeaderWidth: null,
      onModifyGetCellCoords: null,
      onBeforeHighlightingRowHeader: (e) => e,
      onBeforeHighlightingColumnHeader: (e) => e,
      onWindowResize: null,
      onContainerElementResize: null,
      renderAllRows: !1,
      groups: !1,
      rowHeaderWidth: null,
      columnHeaderHeight: null,
      headerClassName: null,
      rtlMode: !1
    };
  }
  /**
   * Update settings.
   *
   * @param {object} settings The singular settings to update or if passed as object to merge with.
   * @param {*} value The value to set if the first argument is passed as string.
   * @returns {Settings}
   */
  update(e, t) {
    return t === void 0 ? je(e, (n, o) => {
      this.settings[o] = n;
    }) : this.settings[e] = t, this;
  }
  /**
   * Get setting by name.
   *
   * @param {$Keys<SettingsPure>} key The settings key to retrieve.
   * @param {*} [param1] Additional parameter passed to the options defined as function.
   * @param {*} [param2] Additional parameter passed to the options defined as function.
   * @param {*} [param3] Additional parameter passed to the options defined as function.
   * @param {*} [param4] Additional parameter passed to the options defined as function.
   * @returns {*}
   */
  getSetting(e, t, n, o, r) {
    return typeof this.settings[e] == "function" ? this.settings[e](t, n, o, r) : t !== void 0 && Array.isArray(this.settings[e]) ? this.settings[e][t] : this.settings[e];
  }
  /**
   * Get a setting value without any evaluation.
   *
   * @param {string} key The settings key to retrieve.
   * @returns {*}
   */
  getSettingPure(e) {
    return this.settings[e];
  }
  /**
   * Checks if setting exists.
   *
   * @param {boolean} key The settings key to check.
   * @returns {boolean}
   */
  has(e) {
    return !!this.settings[e];
  }
}
class Vg extends dr {
  /**
   * @param {TableDao} dataAccessObject The data access object.
   * @param {FacadeGetter} facadeGetter Function which return proper facade.
   * @param {DomBindings} domBindings Bindings into DOM.
   * @param {Settings} wtSettings The Walkontable settings.
   */
  constructor(e, t, n, o) {
    super(e, t, n, o, "master");
  }
  alignOverlaysWithTrimmingContainer() {
    const e = sr(this.wtRootElement), {
      rootWindow: t
    } = this.domBindings;
    if (e === t)
      this.wtSettings.getSetting("preventOverflow") || (this.holder.style.overflow = "visible", this.wtRootElement.style.overflow = "visible");
    else {
      const n = e.parentElement, o = ga(e, "height", t), r = ga(e, "overflow", t), a = this.holder.style, {
        scrollWidth: l,
        scrollHeight: c
      } = e;
      let {
        width: h,
        height: u
      } = e.getBoundingClientRect();
      if (n && ["auto", "hidden", "scroll"].includes(r)) {
        const g = e.cloneNode(!1);
        g.style.overflow = "auto", g.style.position = "absolute", e.nextElementSibling ? n.insertBefore(g, e.nextElementSibling) : n.appendChild(g);
        const m = parseInt(Qi(g, t).height, 10);
        n.removeChild(g), m === 0 && (u = 0);
      }
      u = Math.min(u, c), a.height = o === "auto" ? "auto" : `${u}px`, h = Math.min(h, l), a.width = `${h}px`, a.overflow = "", this.hasTableHeight = a.height === "auto" ? !0 : u > 0, this.hasTableWidth = h > 0;
    }
    this.isTableVisible = da(this.TABLE);
  }
  markOversizedColumnHeaders() {
    const {
      wtSettings: e
    } = this, {
      wtViewport: t
    } = this.dataAccessObject, n = "master", r = e.getSetting("columnHeaders").length;
    if (r && !t.hasOversizedColumnHeadersMarked[n]) {
      const l = e.getSetting("rowHeaders").length, c = this.getRenderedColumnsCount();
      for (let h = 0; h < r; h++)
        for (let u = -1 * l; u < c; u++)
          this.markIfOversizedColumnHeader(u);
      t.hasOversizedColumnHeadersMarked[n] = !0;
    }
  }
}
ft(Vg, yR);
ft(Vg, kg);
const nV = Vg;
class iV {
  /**
   * @param {ViewportDao} dataAccessObject The Walkontable instance.
   * @param {DomBindings} domBindings Bindings into DOM.
   * @param {Settings} wtSettings The Walkontable settings.
   * @param {EventManager} eventManager The instance event manager.
   * @param {Table} wtTable The table.
   */
  constructor(e, t, n, o, r) {
    this.dataAccessObject = e, this.wot = e.wot, this.instance = this.wot, this.domBindings = t, this.wtSettings = n, this.wtTable = r, this.oversizedRows = [], this.oversizedColumnHeaders = [], this.hasOversizedColumnHeadersMarked = {}, this.clientHeight = 0, this.containerWidth = NaN, this.rowHeaderWidth = NaN, this.rowsVisibleCalculator = null, this.columnsVisibleCalculator = null, this.eventManager = o, this.eventManager.addEventListener(this.domBindings.rootWindow, "resize", () => {
      this.clientHeight = this.getWorkspaceHeight();
    });
  }
  /**
   * @returns {number}
   */
  getWorkspaceHeight() {
    const e = this.domBindings.rootDocument, t = this.dataAccessObject.topOverlayTrimmingContainer;
    let n = 0;
    return t === this.domBindings.rootWindow ? n = e.documentElement.clientHeight : n = At(t) > 0 && t.clientHeight > 0 ? t.clientHeight : 1 / 0, n;
  }
  getWorkspaceWidth() {
    const {
      wtSettings: e
    } = this, {
      rootDocument: t,
      rootWindow: n
    } = this.domBindings, o = this.dataAccessObject.inlineStartOverlayTrimmingContainer, r = t.documentElement.offsetWidth, a = e.getSetting("totalColumns"), l = e.getSetting("preventOverflow"), c = e.getSetting("rtlMode"), h = this.wtTable.TABLE.getBoundingClientRect(), u = c ? h.right - r : h.left, f = r - u;
    let g, m;
    if (l)
      return ht(this.wtTable.wtRootElement);
    if (e.getSetting("freezeOverlays") ? g = Math.min(f, r) : g = Math.min(this.getContainerFillWidth(), f, r), o === n && a > 0 && this.sumColumnWidths(0, a - 1) > g)
      return t.documentElement.clientWidth;
    if (o !== n && (m = ga(this.dataAccessObject.inlineStartOverlayTrimmingContainer, "overflow", n), m === "scroll" || m === "hidden" || m === "auto"))
      return Math.max(g, o.clientWidth);
    const w = e.getSetting("stretchH");
    return w === "none" || !w ? Math.max(g, ht(this.wtTable.TABLE)) : g;
  }
  /**
   * Checks if viewport has vertical scroll.
   *
   * @returns {boolean}
   */
  hasVerticalScroll() {
    return this.wtTable.hider.offsetHeight > this.getWorkspaceHeight();
  }
  /**
   * Checks if viewport has horizontal scroll.
   *
   * @returns {boolean}
   */
  hasHorizontalScroll() {
    return this.wtTable.hider.offsetWidth > this.getWorkspaceWidth();
  }
  /**
   * @param {number} from The visual column index from the width sum is start calculated.
   * @param {number} length The length of the column to traverse.
   * @returns {number}
   */
  sumColumnWidths(e, t) {
    let n = 0, o = e;
    for (; o < t; )
      n += this.wtTable.getColumnWidth(o), o += 1;
    return n;
  }
  /**
   * @returns {number}
   */
  getContainerFillWidth() {
    if (this.containerWidth)
      return this.containerWidth;
    const e = this.wtTable.holder, t = this.domBindings.rootDocument.createElement("div");
    t.style.width = "100%", t.style.height = "1px", e.appendChild(t);
    const n = t.offsetWidth;
    return this.containerWidth = n, e.removeChild(t), n;
  }
  /**
   * @returns {number}
   */
  getWorkspaceOffset() {
    return Wt(this.wtTable.TABLE);
  }
  /**
   * @returns {number}
   */
  getColumnHeaderHeight() {
    return this.wtSettings.getSetting("columnHeaders").length ? isNaN(this.columnHeaderHeight) && (this.columnHeaderHeight = At(this.wtTable.THEAD)) : this.columnHeaderHeight = 0, this.columnHeaderHeight;
  }
  /**
   * @returns {number}
   */
  getViewportHeight() {
    let e = this.getWorkspaceHeight();
    if (e === 1 / 0)
      return e;
    const t = this.getColumnHeaderHeight();
    return t > 0 && (e -= t), e;
  }
  /**
   * @returns {number}
   */
  getRowHeaderWidth() {
    const e = this.wtSettings.getSetting("rowHeaderWidth"), t = this.wtSettings.getSetting("rowHeaders");
    if (e) {
      this.rowHeaderWidth = 0;
      for (let n = 0, o = t.length; n < o; n++)
        this.rowHeaderWidth += e[n] || e;
    }
    if (isNaN(this.rowHeaderWidth))
      if (t.length) {
        let n = this.wtTable.TABLE.querySelector("TH");
        this.rowHeaderWidth = 0;
        for (let o = 0, r = t.length; o < r; o++)
          n ? (this.rowHeaderWidth += ht(n), n = n.nextSibling) : this.rowHeaderWidth += 50;
      } else
        this.rowHeaderWidth = 0;
    return this.rowHeaderWidth = this.wtSettings.getSetting("onModifyRowHeaderWidth", this.rowHeaderWidth) || this.rowHeaderWidth, this.rowHeaderWidth;
  }
  /**
   * @returns {number}
   */
  getViewportWidth() {
    const e = this.getWorkspaceWidth();
    if (e === 1 / 0)
      return e;
    const t = this.getRowHeaderWidth();
    return t > 0 ? e - t : e;
  }
  /**
   * Creates:
   * - rowsRenderCalculator (before draw, to qualify rows for rendering)
   * - rowsVisibleCalculator (after draw, to measure which rows are actually visible).
   *
   * @param {number} calculationType The render type ID, which determines for what type of
   *                                 calculation calculator is created.
   * @returns {ViewportRowsCalculator}
   */
  createRowsCalculator() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : Bi;
    const {
      wtSettings: t,
      wtTable: n
    } = this;
    let o, r, a;
    this.rowHeaderWidth = NaN, t.getSetting("renderAllRows") && e === Bi ? o = 1 / 0 : o = this.getViewportHeight();
    let l = this.dataAccessObject.topScrollPosition - this.dataAccessObject.topParentOffset;
    const c = t.getSetting("fixedRowsTop"), h = t.getSetting("fixedRowsBottom"), u = t.getSetting("totalRows");
    return c && l >= 0 && (a = this.dataAccessObject.topOverlay.sumCellSizes(0, c), l += a, o -= a), h && this.dataAccessObject.bottomOverlay.clone && (a = this.dataAccessObject.bottomOverlay.sumCellSizes(u - h, u), o -= a), n.holder.clientHeight === n.holder.offsetHeight ? r = 0 : r = qt(this.domBindings.rootDocument), new lR({
      viewportSize: o,
      scrollOffset: l,
      totalItems: t.getSetting("totalRows"),
      itemSizeFn: (f) => n.getRowHeight(f),
      overrideFn: t.getSettingPure("viewportRowCalculatorOverride"),
      calculationType: e,
      scrollbarHeight: r
    });
  }
  /**
   * Creates:
   * - columnsRenderCalculator (before draw, to qualify columns for rendering)
   * - columnsVisibleCalculator (after draw, to measure which columns are actually visible).
   *
   * @param {number} calculationType The render type ID, which determines for what type of
   *                                 calculation calculator is created.
   * @returns {ViewportColumnsCalculator}
   */
  createColumnsCalculator() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : Bi;
    const {
      wtSettings: t,
      wtTable: n
    } = this;
    let o = this.getViewportWidth(), r = Math.abs(this.dataAccessObject.inlineStartScrollPosition) - this.dataAccessObject.inlineStartParentOffset;
    this.columnHeaderHeight = NaN;
    const a = t.getSetting("fixedColumnsStart");
    if (a && r >= 0) {
      const l = this.dataAccessObject.inlineStartOverlay.sumCellSizes(0, a);
      r += l, o -= l;
    }
    return n.holder.clientWidth !== n.holder.offsetWidth && (o -= qt(this.domBindings.rootDocument)), new Tg({
      viewportSize: o,
      scrollOffset: r,
      totalItems: t.getSetting("totalColumns"),
      itemSizeFn: (l) => n.getColumnWidth(l),
      overrideFn: t.getSettingPure("viewportColumnCalculatorOverride"),
      calculationType: e,
      stretchMode: t.getSetting("stretchH"),
      stretchingItemWidthFn: (l, c) => t.getSetting("onBeforeStretchingColumnWidth", l, c),
      inlineStartOffset: this.dataAccessObject.inlineStartParentOffset
    });
  }
  /**
   * Creates rowsRenderCalculator and columnsRenderCalculator (before draw, to determine what rows and
   * cols should be rendered).
   *
   * @param {boolean} fastDraw If `true`, will try to avoid full redraw and only update the border positions.
   *                           If `false` or `undefined`, will perform a full redraw.
   * @returns {boolean} The fastDraw value, possibly modified.
   */
  createRenderCalculators() {
    let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
    if (t) {
      const n = this.createRowsCalculator(ss), o = this.createColumnsCalculator(ss);
      this.areAllProposedVisibleRowsAlreadyRendered(n) && this.areAllProposedVisibleColumnsAlreadyRendered(o) || (t = !1);
    }
    return t || (this.rowsRenderCalculator = this.createRowsCalculator(Bi), this.columnsRenderCalculator = this.createColumnsCalculator(Bi)), this.rowsVisibleCalculator = null, this.columnsVisibleCalculator = null, t;
  }
  /**
   * Creates rowsVisibleCalculator and columnsVisibleCalculator (after draw, to determine what are
   * the actually fully visible rows and columns).
   */
  createVisibleCalculators() {
    this.rowsVisibleCalculator = this.createRowsCalculator(ss), this.columnsVisibleCalculator = this.createColumnsCalculator(ss);
  }
  /**
   * Returns information whether proposedRowsVisibleCalculator viewport
   * is contained inside rows rendered in previous draw (cached in rowsRenderCalculator).
   *
   * @param {ViewportRowsCalculator} proposedRowsVisibleCalculator The instance of the viewport calculator to compare with.
   * @returns {boolean} Returns `true` if all proposed visible rows are already rendered (meaning: redraw is not needed).
   *                    Returns `false` if at least one proposed visible row is not already rendered (meaning: redraw is needed).
   */
  areAllProposedVisibleRowsAlreadyRendered(e) {
    if (!this.rowsVisibleCalculator)
      return !1;
    const {
      startRow: t,
      endRow: n,
      isVisibleInTrimmingContainer: o
    } = e;
    if (t === null && n === null)
      return !o;
    const {
      startRow: r,
      endRow: a
    } = this.rowsRenderCalculator;
    return t < r || t === r && t > 0 ? !1 : !(n > a || n === a && n < this.wtSettings.getSetting("totalRows") - 1);
  }
  /**
   * Returns information whether proposedColumnsVisibleCalculator viewport
   * is contained inside column rendered in previous draw (cached in columnsRenderCalculator).
   *
   * @param {ViewportRowsCalculator} proposedColumnsVisibleCalculator The instance of the viewport calculator to compare with.
   * @returns {boolean} Returns `true` if all proposed visible columns are already rendered (meaning: redraw is not needed).
   *                    Returns `false` if at least one proposed visible column is not already rendered (meaning: redraw is needed).
   */
  areAllProposedVisibleColumnsAlreadyRendered(e) {
    if (!this.columnsVisibleCalculator)
      return !1;
    const {
      startColumn: t,
      endColumn: n,
      isVisibleInTrimmingContainer: o
    } = e;
    if (t === null && n === null)
      return !o;
    const {
      startColumn: r,
      endColumn: a
    } = this.columnsRenderCalculator;
    return t < r || t === r && t > 0 ? !1 : !(n > a || n === a && n < this.wtSettings.getSetting("totalColumns") - 1);
  }
  /**
   * Resets values in keys of the hasOversizedColumnHeadersMarked object after updateSettings.
   */
  resetHasOversizedColumnHeadersMarked() {
    je(this.hasOversizedColumnHeadersMarked, (e, t, n) => {
      n[t] = void 0;
    });
  }
}
const oV = iV;
class rV extends Hg {
  /**
   * @param {HTMLTableElement} table Main table.
   * @param {SettingsPure} settings The Walkontable settings.
   */
  constructor(e, t) {
    super(e, new sV(t));
    const n = this.wtSettings.getSetting("facade", this);
    this.wtTable = new nV(this.getTableDao(), n, this.domBindings, this.wtSettings), this.wtViewport = new oV(this.getViewportDao(), this.domBindings, this.wtSettings, this.eventManager, this.wtTable), this.selections = this.wtSettings.getSetting("selections"), this.wtEvent = new dR(n, this.domBindings, this.wtSettings, this.eventManager, this.wtTable, this.selections), this.wtOverlays = new JF(
      // TODO create DAO and remove reference to the Walkontable instance.
      this,
      n,
      this.domBindings,
      this.wtSettings,
      this.eventManager,
      this.wtTable
    ), this.exportSettingsAsClassNames(), this.findOriginalHeaders();
  }
  /**
   * Export settings as class names added to the parent element of the table.
   */
  exportSettingsAsClassNames() {
    const e = {
      rowHeaders: "htRowHeaders",
      columnHeaders: "htColumnHeaders"
    }, t = [], n = [];
    je(e, (o, r) => {
      this.wtSettings.getSetting(r).length && n.push(o), t.push(o);
    }), $e(this.wtTable.wtRootElement.parentNode, t), ie(this.wtTable.wtRootElement.parentNode, n);
  }
  /**
   * @returns {ViewportDao}
   */
  getViewportDao() {
    const e = this;
    return {
      get wot() {
        return e;
      },
      get topOverlayTrimmingContainer() {
        return e.wtOverlays.topOverlay.trimmingContainer;
      },
      get inlineStartOverlayTrimmingContainer() {
        return e.wtOverlays.inlineStartOverlay.trimmingContainer;
      },
      get topScrollPosition() {
        return e.wtOverlays.topOverlay.getScrollPosition();
      },
      get topParentOffset() {
        return e.wtOverlays.topOverlay.getTableParentOffset();
      },
      get inlineStartScrollPosition() {
        return e.wtOverlays.inlineStartOverlay.getScrollPosition();
      },
      get inlineStartParentOffset() {
        return e.wtOverlays.inlineStartOverlay.getTableParentOffset();
      },
      get topOverlay() {
        return e.wtOverlays.topOverlay;
      },
      get inlineStartOverlay() {
        return e.wtOverlays.inlineStartOverlay;
      },
      get bottomOverlay() {
        return e.wtOverlays.bottomOverlay;
      }
    };
  }
}
class Bg {
  /**
   * @param {SettingsPure|Walkontable} settingsOrInstance The Walkontable settings.
   */
  constructor(e) {
    e instanceof Hg ? this._wot = e : this._initFromSettings(e);
  }
  _initFromSettings(e) {
    e.facade = (t) => {
      const n = new Bg(t);
      return () => n;
    }, this._wot = new rV(e.table, e);
  }
  get guid() {
    return this._wot.guid;
  }
  get rootDocument() {
    return this._wot.domBindings.rootDocument;
  }
  get rootWindow() {
    return this._wot.domBindings.rootWindow;
  }
  get wtSettings() {
    return this._wot.wtSettings;
  }
  get cloneSource() {
    return this._wot.cloneSource;
  }
  get cloneOverlay() {
    return this._wot.cloneOverlay;
  }
  get selections() {
    return this._wot.selections;
  }
  get wtViewport() {
    return this._wot.wtViewport;
  }
  get wtOverlays() {
    return this._wot.wtOverlays;
  }
  get wtTable() {
    return this._wot.wtTable;
  }
  get wtEvent() {
    return this._wot.wtEvent;
  }
  get wtScroll() {
    return this._wot.wtScroll;
  }
  get drawn() {
    return this._wot.drawn;
  }
  set drawn(e) {
    this._wot.drawn = e;
  }
  get drawInterrupted() {
    return this._wot.drawInterrupted;
  }
  set drawInterrupted(e) {
    this._wot.drawInterrupted = e;
  }
  get lastMouseOver() {
    return this._wot.lastMouseOver;
  }
  set lastMouseOver(e) {
    this._wot.lastMouseOver = e;
  }
  get momentumScrolling() {
    return this._wot.momentumScrolling;
  }
  set momentumScrolling(e) {
    this._wot.momentumScrolling = e;
  }
  get touchApplied() {
    return this._wot.touchApplied;
  }
  set touchApplied(e) {
    this._wot.touchApplied = e;
  }
  get domBindings() {
    return this._wot.domBindings;
  }
  get eventListeners() {
    return this._wot.eventListeners;
  }
  set eventListeners(e) {
    this._wot.eventListeners = e;
  }
  get eventManager() {
    return this._wot.eventManager;
  }
  createCellCoords(e, t) {
    return this._wot.createCellCoords(e, t);
  }
  createCellRange(e, t, n) {
    return this._wot.createCellRange(e, t, n);
  }
  draw() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
    return this._wot.draw(e), this;
  }
  getCell(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;
    return this._wot.getCell(e, t);
  }
  scrollViewport(e, t, n, o, r) {
    return this._wot.scrollViewport(e, t, n, o, r);
  }
  scrollViewportHorizontally(e, t, n) {
    return this._wot.scrollViewportHorizontally(e, t, n);
  }
  scrollViewportVertically(e, t, n) {
    return this._wot.scrollViewportVertically(e, t, n);
  }
  getViewport() {
    return this._wot.getViewport();
  }
  getOverlayName() {
    return this._wot.cloneOverlay ? this._wot.cloneOverlay.type : "master";
  }
  exportSettingsAsClassNames() {
    return this._wot.exportSettingsAsClassNames();
  }
  update(e, t) {
    return this._wot.wtSettings.update(e, t), this;
  }
  getSetting(e, t, n, o, r) {
    return this._wot.wtSettings.getSetting(e, t, n, o, r);
  }
  hasSetting(e) {
    return this._wot.wtSettings.hasSetting(e);
  }
  destroy() {
    this._wot.destroy();
  }
}
class aV {
  // TODO As this is an internal class, should be designed for using {Walkontable}. It uses the facade,
  // TODO Con. Because the class is created on place where the instance reference comes from external origin.
  // TODO Imho, the discrimination for handling both, facade and non-facade should be handled.
  /**
   * @param {WalkontableFacade} wotInstance The Walkontable instance.
   * @param {object} settings The border settings.
   */
  constructor(e, t) {
    t && (this.eventManager = e.eventManager, this.instance = e, this.wot = e, this.settings = t, this.mouseDown = !1, this.main = null, this.top = null, this.bottom = null, this.start = null, this.end = null, this.topStyle = null, this.bottomStyle = null, this.startStyle = null, this.endStyle = null, this.cornerDefaultStyle = {
      width: "6px",
      height: "6px",
      borderWidth: "1px",
      borderStyle: "solid",
      borderColor: "#FFF"
    }, this.cornerCenterPointOffset = -(parseInt(this.cornerDefaultStyle.width, 10) / 2), this.corner = null, this.cornerStyle = null, this.createBorders(t), this.registerListeners());
  }
  /**
   * Register all necessary events.
   */
  registerListeners() {
    const e = this.wot.rootDocument.body;
    this.eventManager.addEventListener(e, "mousedown", () => this.onMouseDown()), this.eventManager.addEventListener(e, "mouseup", () => this.onMouseUp());
    for (let t = 0, n = this.main.childNodes.length; t < n; t++) {
      const o = this.main.childNodes[t];
      this.eventManager.addEventListener(o, "mouseenter", (r) => this.onMouseEnter(r, this.main.childNodes[t]));
    }
  }
  /**
   * Mouse down listener.
   *
   * @private
   */
  onMouseDown() {
    this.mouseDown = !0;
  }
  /**
   * Mouse up listener.
   *
   * @private
   */
  onMouseUp() {
    this.mouseDown = !1;
  }
  /**
   * Mouse enter listener for fragment selection functionality.
   *
   * @private
   * @param {Event} event Dom event.
   * @param {HTMLElement} parentElement Part of border element.
   */
  onMouseEnter(e, t) {
    if (!this.mouseDown || !this.wot.getSetting("hideBorderOnMouseDownOver"))
      return;
    e.preventDefault(), Rn(e);
    const n = this, o = this.wot.rootDocument.body, r = t.getBoundingClientRect();
    t.style.display = "none";
    function a(c) {
      if (c.clientY < Math.floor(r.top) || c.clientY > Math.ceil(r.top + r.height) || c.clientX < Math.floor(r.left) || c.clientX > Math.ceil(r.left + r.width))
        return !0;
    }
    function l(c) {
      a(c) && (n.eventManager.removeEventListener(o, "mousemove", l), t.style.display = "block");
    }
    this.eventManager.addEventListener(o, "mousemove", l);
  }
  /**
   * Create border elements.
   *
   * @param {object} settings The border settings.
   */
  createBorders(e) {
    const {
      rootDocument: t
    } = this.wot;
    this.main = t.createElement("div");
    const n = ["top", "start", "bottom", "end", "corner"];
    let o = this.main.style;
    o.position = "absolute", o.top = 0, o.left = 0;
    for (let l = 0; l < 5; l++) {
      const c = n[l], h = t.createElement("div");
      h.className = `wtBorder ${this.settings.className || ""}`, this.settings[c] && this.settings[c].hide && (h.className += " hidden"), o = h.style, o.backgroundColor = this.settings[c] && this.settings[c].color ? this.settings[c].color : e.border.color, o.height = this.settings[c] && this.settings[c].width ? `${this.settings[c].width}px` : `${e.border.width}px`, o.width = this.settings[c] && this.settings[c].width ? `${this.settings[c].width}px` : `${e.border.width}px`, this.main.appendChild(h);
    }
    this.top = this.main.childNodes[0], this.start = this.main.childNodes[1], this.bottom = this.main.childNodes[2], this.end = this.main.childNodes[3], this.topStyle = this.top.style, this.startStyle = this.start.style, this.bottomStyle = this.bottom.style, this.endStyle = this.end.style, this.corner = this.main.childNodes[4], this.corner.className += " corner", this.cornerStyle = this.corner.style, this.cornerStyle.width = this.cornerDefaultStyle.width, this.cornerStyle.height = this.cornerDefaultStyle.height, this.cornerStyle.border = [this.cornerDefaultStyle.borderWidth, this.cornerDefaultStyle.borderStyle, this.cornerDefaultStyle.borderColor].join(" "), vn() && this.createMultipleSelectorHandles(), this.disappear();
    const {
      wtTable: r
    } = this.wot;
    let a = r.bordersHolder;
    a || (a = t.createElement("div"), a.className = "htBorders", r.bordersHolder = a, r.spreader.appendChild(a)), a.appendChild(this.main);
  }
  /**
   * Create multiple selector handler for mobile devices.
   */
  createMultipleSelectorHandles() {
    const {
      rootDocument: e
    } = this.wot;
    this.selectionHandles = {
      top: e.createElement("DIV"),
      topHitArea: e.createElement("DIV"),
      bottom: e.createElement("DIV"),
      bottomHitArea: e.createElement("DIV")
    };
    const t = 10, n = 40;
    this.selectionHandles.top.className = "topSelectionHandle topLeftSelectionHandle", this.selectionHandles.topHitArea.className = "topSelectionHandle-HitArea topLeftSelectionHandle-HitArea", this.selectionHandles.bottom.className = "bottomSelectionHandle bottomRightSelectionHandle", this.selectionHandles.bottomHitArea.className = "bottomSelectionHandle-HitArea bottomRightSelectionHandle-HitArea", this.selectionHandles.styles = {
      top: this.selectionHandles.top.style,
      topHitArea: this.selectionHandles.topHitArea.style,
      bottom: this.selectionHandles.bottom.style,
      bottomHitArea: this.selectionHandles.bottomHitArea.style
    };
    const o = {
      position: "absolute",
      height: `${n}px`,
      width: `${n}px`,
      "border-radius": `${parseInt(n / 1.5, 10)}px`
    };
    je(o, (a, l) => {
      this.selectionHandles.styles.bottomHitArea[l] = a, this.selectionHandles.styles.topHitArea[l] = a;
    });
    const r = {
      position: "absolute",
      height: `${t}px`,
      width: `${t}px`,
      "border-radius": `${parseInt(t / 1.5, 10)}px`,
      background: "#F5F5FF",
      border: "1px solid #4285c8"
    };
    je(r, (a, l) => {
      this.selectionHandles.styles.bottom[l] = a, this.selectionHandles.styles.top[l] = a;
    }), this.main.appendChild(this.selectionHandles.top), this.main.appendChild(this.selectionHandles.bottom), this.main.appendChild(this.selectionHandles.topHitArea), this.main.appendChild(this.selectionHandles.bottomHitArea);
  }
  /**
   * @param {number} row The visual row index.
   * @param {number} col The visual column index.
   * @returns {boolean}
   */
  isPartRange(e, t) {
    const n = this.wot.selections.createOrGetArea();
    return !!(n.cellRange && (e !== n.cellRange.to.row || t !== n.cellRange.to.col));
  }
  /**
   * @param {number} row The visual row index.
   * @param {number} col The visual column index.
   * @param {number} top The top position of the handler.
   * @param {number} left The left position of the handler.
   * @param {number} width The width of the handler.
   * @param {number} height The height of the handler.
   */
  updateMultipleSelectionHandlesPosition(e, t, n, o, r, a) {
    const c = this.wot.wtSettings.getSetting("rtlMode") ? "right" : "left", {
      top: h,
      topHitArea: u,
      bottom: f,
      bottomHitArea: g
    } = this.selectionHandles.styles, m = parseInt(h.borderWidth, 10), w = parseInt(h.width, 10), C = parseInt(u.width, 10), S = this.wot.wtTable.getWidth(), x = this.wot.wtTable.getHeight();
    h.top = `${parseInt(n - w - 1, 10)}px`, h[c] = `${parseInt(o - w - 1, 10)}px`, u.top = `${parseInt(n - C / 4 * 3, 10)}px`, u[c] = `${parseInt(o - C / 4 * 3, 10)}px`;
    const T = Math.min(parseInt(o + r, 10), S - w - m * 2), M = Math.min(parseInt(o + r - C / 4, 10), S - C - m * 2);
    f[c] = `${T}px`, g[c] = `${M}px`;
    const _ = Math.min(parseInt(n + a, 10), x - w - m * 2), P = Math.min(parseInt(n + a - C / 4, 10), x - C - m * 2);
    f.top = `${_}px`, g.top = `${P}px`, this.settings.border.cornerVisible && this.settings.border.cornerVisible() ? (h.display = "block", u.display = "block", this.isPartRange(e, t) ? (f.display = "none", g.display = "none") : (f.display = "block", g.display = "block")) : (h.display = "none", f.display = "none", u.display = "none", g.display = "none"), e === this.wot.wtSettings.getSetting("fixedRowsTop") || t === this.wot.wtSettings.getSetting("fixedColumnsStart") ? (h.zIndex = "9999", u.zIndex = "9999") : (h.zIndex = "", u.zIndex = "");
  }
  /**
   * Show border around one or many cells.
   *
   * @param {Array} corners The corner coordinates.
   */
  appear(e) {
    if (this.disabled)
      return;
    const {
      wtTable: t,
      rootDocument: n,
      rootWindow: o
    } = this.wot;
    let r, a, l, c, h, u;
    const f = t.getRenderedRowsCount();
    for (let R = 0; R < f; R += 1) {
      const d = t.rowFilter.renderedToSource(R);
      if (d >= e[0] && d <= e[2]) {
        r = d, h = e[0];
        break;
      }
    }
    for (let R = f - 1; R >= 0; R -= 1) {
      const d = t.rowFilter.renderedToSource(R);
      if (d >= e[0] && d <= e[2]) {
        a = d;
        break;
      }
    }
    const g = t.getRenderedColumnsCount();
    for (let R = 0; R < g; R += 1) {
      const d = t.columnFilter.renderedToSource(R);
      if (d >= e[1] && d <= e[3]) {
        l = d, u = e[1];
        break;
      }
    }
    for (let R = g - 1; R >= 0; R -= 1) {
      const d = t.columnFilter.renderedToSource(R);
      if (d >= e[1] && d <= e[3]) {
        c = d;
        break;
      }
    }
    if (r === void 0 || l === void 0) {
      this.disappear();
      return;
    }
    let m = t.getCell(this.wot.createCellCoords(r, l));
    const w = r !== a || l !== c, C = w ? t.getCell(this.wot.createCellCoords(a, c)) : m, S = Wt(m), x = w ? Wt(C) : S, T = Wt(t.TABLE), M = ht(t.TABLE), _ = S.top, P = S.left, j = this.wot.wtSettings.getSetting("rtlMode");
    let H = 0, Z = 0;
    if (j) {
      const R = ht(m), d = o.innerWidth - T.left - M;
      Z = P + R - x.left, H = o.innerWidth - P - R - d - 1;
    } else
      Z = x.left + ht(C) - P, H = P - T.left - 1;
    if (this.isEntireColumnSelected(r, a)) {
      const R = this.getDimensionsFromHeader("columns", l, c, h, T);
      let d = null;
      R && ([d, H, Z] = R), d && (m = d);
    }
    let X = _ - T.top - 1, F = x.top + At(C) - _;
    if (this.isEntireRowSelected(l, c)) {
      const R = this.getDimensionsFromHeader("rows", r, a, u, T);
      let d = null;
      R && ([d, X, F] = R), d && (m = d);
    }
    const z = Qi(m, o);
    parseInt(z.borderTopWidth, 10) > 0 && (X += 1, F = F > 0 ? F - 1 : 0), parseInt(z[j ? "borderRightWidth" : "borderLeftWidth"], 10) > 0 && (H += 1, Z = Z > 0 ? Z - 1 : 0);
    const ee = j ? "right" : "left";
    this.topStyle.top = `${X}px`, this.topStyle[ee] = `${H}px`, this.topStyle.width = `${Z}px`, this.topStyle.display = "block", this.startStyle.top = `${X}px`, this.startStyle[ee] = `${H}px`, this.startStyle.height = `${F}px`, this.startStyle.display = "block";
    const oe = Math.floor(this.settings.border.width / 2);
    this.bottomStyle.top = `${X + F - oe}px`, this.bottomStyle[ee] = `${H}px`, this.bottomStyle.width = `${Z}px`, this.bottomStyle.display = "block", this.endStyle.top = `${X}px`, this.endStyle[ee] = `${H + Z - oe}px`, this.endStyle.height = `${F + 1}px`, this.endStyle.display = "block";
    let fe = this.settings.border.cornerVisible;
    fe = typeof fe == "function" ? fe(this.settings.layerLevel) : fe;
    const Ae = this.wot.getSetting("onModifyGetCellCoords", a, c);
    let [Ze, He] = [a, c];
    if (Ae && Array.isArray(Ae) && ([, , Ze, He] = Ae), vn() || !fe || this.isPartRange(Ze, He))
      this.cornerStyle.display = "none";
    else {
      this.cornerStyle.top = `${X + F + this.cornerCenterPointOffset - 1}px`, this.cornerStyle[ee] = `${H + Z + this.cornerCenterPointOffset - 1}px`, this.cornerStyle.borderRightWidth = this.cornerDefaultStyle.borderWidth, this.cornerStyle.width = this.cornerDefaultStyle.width, this.cornerStyle.display = "none";
      let R = sr(t.TABLE);
      const d = R === o;
      d && (R = n.documentElement);
      const p = parseInt(this.cornerDefaultStyle.width, 10) / 2, v = parseInt(this.cornerDefaultStyle.height, 10) / 2;
      if (c === this.wot.getSetting("totalColumns") - 1) {
        const E = d ? C.getBoundingClientRect().left : C.offsetLeft;
        let I = !1, A = 0;
        j ? (A = E - parseInt(this.cornerDefaultStyle.width, 10) / 2, I = A < 0) : (A = E + ht(C) + parseInt(this.cornerDefaultStyle.width, 10) / 2, I = A >= Ql(R)), I && (this.cornerStyle[ee] = `${Math.floor(H + Z + this.cornerCenterPointOffset - p)}px`, this.cornerStyle[j ? "borderLeftWidth" : "borderRightWidth"] = 0);
      }
      a === this.wot.getSetting("totalRows") - 1 && (d ? C.getBoundingClientRect().top : C.offsetTop) + At(C) + parseInt(this.cornerDefaultStyle.height, 10) / 2 >= fi(R) && (this.cornerStyle.top = `${Math.floor(X + F + this.cornerCenterPointOffset - v)}px`, this.cornerStyle.borderBottomWidth = 0), this.cornerStyle.display = "block";
    }
    vn() && this.updateMultipleSelectionHandlesPosition(a, c, X, H, Z, F);
  }
  /**
   * Check whether an entire column of cells is selected.
   *
   * @private
   * @param {number} startRowIndex Start row index.
   * @param {number} endRowIndex End row index.
   * @returns {boolean}
   */
  isEntireColumnSelected(e, t) {
    return e === this.wot.wtTable.getFirstRenderedRow() && t === this.wot.wtTable.getLastRenderedRow();
  }
  /**
   * Check whether an entire row of cells is selected.
   *
   * @private
   * @param {number} startColumnIndex Start column index.
   * @param {number} endColumnIndex End column index.
   * @returns {boolean}
   */
  isEntireRowSelected(e, t) {
    return e === this.wot.wtTable.getFirstRenderedColumn() && t === this.wot.wtTable.getLastRenderedColumn();
  }
  /**
   * Get left/top index and width/height depending on the `direction` provided.
   *
   * @private
   * @param {string} direction `rows` or `columns`, defines if an entire column or row is selected.
   * @param {number} fromIndex Start index of the selection.
   * @param {number} toIndex End index of the selection.
   * @param {number} headerIndex The header index as negative value.
   * @param {number} containerOffset Offset of the container.
   * @returns {Array|boolean} Returns an array of [headerElement, left, width] or [headerElement, top, height], depending on `direction` (`false` in case of an error getting the headers).
   */
  getDimensionsFromHeader(e, t, n, o, r) {
    const {
      wtTable: a
    } = this.wot, l = a.wtRootElement.parentNode;
    let c = null, h = null, u = null, f = null, g = null, m = null, w = null, C = null;
    switch (e) {
      case "rows":
        c = function() {
          return a.getRowHeader(...arguments);
        }, h = function() {
          return At(...arguments);
        }, u = "ht__selection--rows", m = "top";
        break;
      case "columns":
        c = function() {
          return a.getColumnHeader(...arguments);
        }, h = function() {
          return ht(...arguments);
        }, u = "ht__selection--columns", m = "left";
        break;
    }
    if (l.classList.contains(u)) {
      const S = this.wot.getSetting("columnHeaders").length;
      if (w = c(t, S - o), C = c(n, S - o), !w || !C)
        return !1;
      const x = Wt(w), T = Wt(C);
      return w && C && (f = x[m] - r[m] - 1, g = T[m] + h(C) - x[m]), [w, f, g];
    }
    return !1;
  }
  /**
   * Change border style.
   *
   * @private
   * @param {string} borderElement Coordinate where add/remove border: top, bottom, start, end.
   * @param {object} border The border object descriptor.
   */
  changeBorderStyle(e, t) {
    const n = this[e].style, o = t[e];
    !o || o.hide ? ie(this[e], "hidden") : (Ne(this[e], "hidden") && $e(this[e], "hidden"), n.backgroundColor = o.color, (e === "top" || e === "bottom") && (n.height = `${o.width}px`), (e === "start" || e === "end") && (n.width = `${o.width}px`));
  }
  /**
   * Change border style to default.
   *
   * @private
   * @param {string} position The position type ("top", "bottom", "start", "end") to change.
   */
  changeBorderToDefaultStyle(e) {
    const t = {
      width: 1,
      color: "#000"
    }, n = this[e].style;
    n.backgroundColor = t.color, n.width = `${t.width}px`, n.height = `${t.width}px`;
  }
  /**
   * Toggle class 'hidden' to element.
   *
   * @private
   * @param {string} borderElement Coordinate where add/remove border: top, bottom, start, end.
   * @param {boolean} [remove] Defines type of the action to perform.
   */
  toggleHiddenClass(e, t) {
    this.changeBorderToDefaultStyle(e), t ? ie(this[e], "hidden") : $e(this[e], "hidden");
  }
  /**
   * Hide border.
   */
  disappear() {
    this.topStyle.display = "none", this.bottomStyle.display = "none", this.startStyle.display = "none", this.endStyle.display = "none", this.cornerStyle.display = "none", vn() && (this.selectionHandles.styles.top.display = "none", this.selectionHandles.styles.topHitArea.display = "none", this.selectionHandles.styles.bottom.display = "none", this.selectionHandles.styles.bottomHitArea.display = "none");
  }
  /**
   * Cleans up all the DOM state related to a Border instance. Call this prior to deleting a Border instance.
   */
  destroy() {
    this.eventManager.destroyWithOwnEventsOnly(), this.main.parentNode.removeChild(this.main);
  }
}
const lV = aV;
let cV = class {
  /**
   * @param {object} settings The selection settings object. @todo type.
   * @param {CellRange} cellRange The cell range instance.
   */
  constructor(e, t) {
    this.settings = e, this.cellRange = t || null, this.instanceBorders = {}, this.classNames = [this.settings.className], this.classNameGenerator = this.linearClassNameGenerator(this.settings.className, this.settings.layerLevel);
  }
  /**
   * Each Walkontable clone requires it's own border for every selection. This method creates and returns selection
   * borders per instance.
   *
   * @param {WalkontableFacade} wotInstance The Walkontable instance.
   * @returns {Border}
   */
  getBorder(e) {
    return this.instanceBorders[e.guid] || (this.instanceBorders[e.guid] = new lV(e, this.settings)), this.instanceBorders[e.guid];
  }
  /**
   * Checks if selection is empty.
   *
   * @returns {boolean}
   */
  isEmpty() {
    return this.cellRange === null;
  }
  /**
   * Adds a cell coords to the selection.
   *
   * @param {CellCoords} coords The cell coordinates to add.
   * @returns {Selection}
   */
  add(e) {
    return this.isEmpty() ? this.cellRange = this.settings.createCellRange(e) : this.cellRange.expand(e), this;
  }
  /**
   * If selection range from or to property equals oldCoords, replace it with newCoords. Return boolean
   * information about success.
   *
   * @param {CellCoords} oldCoords An old cell coordinates to replace.
   * @param {CellCoords} newCoords The new cell coordinates.
   * @returns {boolean}
   */
  replace(e, t) {
    if (!this.isEmpty()) {
      if (this.cellRange.from.isEqual(e))
        return this.cellRange.from = t, !0;
      if (this.cellRange.to.isEqual(e))
        return this.cellRange.to = t, !0;
    }
    return !1;
  }
  /**
   * Clears selection.
   *
   * @returns {Selection}
   */
  clear() {
    return this.cellRange = null, this;
  }
  /**
   * Returns the top left (or top right in RTL) and bottom right (or bottom left in RTL) selection coordinates.
   *
   * @returns {Array} Returns array of coordinates for example `[1, 1, 5, 5]`.
   */
  getCorners() {
    const e = this.cellRange.getOuterTopStartCorner(), t = this.cellRange.getOuterBottomEndCorner();
    return [e.row, e.col, t.row, t.col];
  }
  /**
   * Adds class name to cell element at given coords.
   *
   * @param {WalkontableFacade} wotInstance Walkontable instance.
   * @param {number} sourceRow Cell row coord.
   * @param {number} sourceColumn Cell column coord.
   * @param {string} className Class name.
   * @param {boolean} [markIntersections=false] If `true`, linear className generator will be used to add CSS classes
   *                                            in a continuous way.
   * @returns {Selection}
   */
  addClassAtCoords(e, t, n, o) {
    let r = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : !1;
    const a = e.wtTable.getCell(this.settings.createCellCoords(t, n));
    if (typeof a == "object") {
      let l = o;
      r && (l = this.classNameGenerator(a), this.classNames.includes(l) || this.classNames.push(l)), ie(a, l);
    }
    return this;
  }
  /**
   * Generate helper for calculating classNames based on previously added base className.
   * The generated className is always generated as a continuation of the previous className. For example, when
   * the currently checked element has 'area-2' className the generated new className will be 'area-3'. When
   * the element doesn't have any classNames than the base className will be returned ('area');.
   *
   * @param {string} baseClassName Base className to be used.
   * @param {number} layerLevelOwner Layer level which the instance of the Selection belongs to.
   * @returns {Function}
   */
  linearClassNameGenerator(e, t) {
    return function n(o) {
      let r = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : -1;
      if (t === 0 || r === 0)
        return e;
      let a = r >= 0 ? r : t, l = e;
      a -= 1;
      const c = a === 0 ? e : `${e}-${a}`;
      if (Ne(o, c)) {
        const h = a + 1;
        l = `${e}-${h}`;
      } else
        l = n(o, a);
      return l;
    };
  }
  /**
   * @param {WalkontableFacade} wotInstance The Walkontable instance.
   */
  draw(e) {
    if (this.isEmpty()) {
      this.settings.border && this.getBorder(e).disappear();
      return;
    }
    const t = e.wtTable.getRenderedRowsCount(), n = e.wtTable.getRenderedColumnsCount(), o = this.getCorners(), [r, a, l, c] = o, {
      highlightHeaderClassName: h,
      highlightColumnClassName: u,
      highlightRowClassName: f,
      highlightOnlyClosestHeader: g,
      selectionType: m
    } = this.settings, w = m === void 0 || ["active-header", "header"].includes(m);
    if (w && a !== null && c !== null) {
      let C = 0;
      for (let S = 0; S < n; S += 1) {
        const x = e.wtTable.columnFilter.renderedToSource(S);
        if (x >= a && x <= c) {
          let T = e.wtTable.getColumnHeaders(x);
          const M = T.length - 1;
          g && T.length > 1 && (T = [T[M]]);
          for (let _ = 0; _ < T.length; _ += 1) {
            const P = [];
            let j = T[_];
            h && P.push(h), u && P.push(u), _ = g ? M : _;
            const H = e.getSetting("onBeforeHighlightingColumnHeader", x, _, {
              selectionType: m,
              columnCursor: C,
              selectionWidth: c - a + 1,
              classNames: P
            });
            H !== x && (j = e.wtTable.getColumnHeader(H, _)), ie(j, P);
          }
          C += 1;
        }
      }
    }
    if (r !== null && l !== null) {
      let C = 0;
      for (let S = 0; S < t; S += 1) {
        const x = e.wtTable.rowFilter.renderedToSource(S);
        if (w && x >= r && x <= l) {
          let T = e.wtTable.getRowHeaders(x);
          const M = T.length - 1;
          g && T.length > 1 && (T = [T[M]]);
          for (let _ = 0; _ < T.length; _ += 1) {
            const P = [];
            let j = T[_];
            h && P.push(h), f && P.push(f), _ = g ? M : _;
            const H = e.getSetting("onBeforeHighlightingRowHeader", x, _, {
              selectionType: m,
              rowCursor: C,
              selectionHeight: l - r + 1,
              classNames: P
            });
            H !== x && (j = e.wtTable.getRowHeader(H, _)), ie(j, P);
          }
          C += 1;
        }
        if (a !== null && c !== null)
          for (let T = 0; T < n; T += 1) {
            const M = e.wtTable.columnFilter.renderedToSource(T);
            x >= r && x <= l && M >= a && M <= c ? this.settings.className && this.addClassAtCoords(e, x, M, this.settings.className, this.settings.markIntersections) : x >= r && x <= l ? f && this.addClassAtCoords(e, x, M, f) : M >= a && M <= c && u && this.addClassAtCoords(e, x, M, u);
            const _ = e.getSetting("onAfterDrawSelection", x, M, this.settings.layerLevel);
            typeof _ == "string" && this.addClassAtCoords(e, x, M, _);
          }
      }
    }
    e.getSetting("onBeforeDrawBorders", o, this.settings.className), this.settings.border && this.getBorder(e).appear(o);
  }
  /**
   * Cleans up all the DOM state related to a Selection instance. Call this prior to deleting a Selection instance.
   */
  destroy() {
    Object.values(this.instanceBorders).forEach((e) => e.destroy());
  }
};
const hV = cV;
function QC(s) {
  let {
    isShiftKey: e,
    isLeftClick: t,
    isRightClick: n,
    coords: o,
    selection: r,
    controller: a,
    cellCoordsFactory: l
  } = s;
  const c = r.isSelected() ? r.getSelectedRange().current() : null, h = r.isSelectedByCorner(), u = r.isSelectedByRowHeader();
  if (e && c)
    o.row >= 0 && o.col >= 0 && !a.cell ? r.setRangeEnd(o) : (h || u) && o.row >= 0 && o.col >= 0 && !a.cell ? r.setRangeEnd(l(o.row, o.col)) : h && o.row < 0 && !a.column ? r.setRangeEnd(l(c.to.row, o.col)) : u && o.col < 0 && !a.row ? r.setRangeEnd(l(o.row, c.to.col)) : (!h && !u && o.col < 0 || h && o.col < 0) && !a.row ? r.selectRows(Math.max(c.from.row, 0), o.row, o.col) : (!h && !u && o.row < 0 || u && o.row < 0) && !a.column && r.selectColumns(Math.max(c.from.col, 0), o.col, o.row);
  else {
    const f = !r.inInSelection(o), g = t || n && f;
    o.row < 0 && o.col >= 0 && !a.column ? g && r.selectColumns(o.col, o.col, o.row) : o.col < 0 && o.row >= 0 && !a.row ? g && r.selectRows(o.row, o.row, o.col) : o.col >= 0 && o.row >= 0 && !a.cell ? g && r.setRangeStart(o) : o.col < 0 && o.row < 0 && r.selectAll(!0, !0);
  }
}
function uV(s) {
  let {
    isLeftClick: e,
    coords: t,
    selection: n,
    controller: o,
    cellCoordsFactory: r
  } = s;
  if (!e)
    return;
  const a = n.isSelectedByRowHeader(), l = n.isSelectedByColumnHeader(), c = n.tableProps.countCols(), h = n.tableProps.countRows();
  l && !o.column ? n.setRangeEnd(r(h - 1, t.col)) : a && !o.row ? n.setRangeEnd(r(t.row, c - 1)) : o.cell || n.setRangeEnd(t);
}
const dV = /* @__PURE__ */ new Map([["mousedown", QC], ["mouseover", uV], ["touchstart", QC]]);
function JC(s, e) {
  let {
    coords: t,
    selection: n,
    controller: o,
    cellCoordsFactory: r
  } = e;
  dV.get(s.type)({
    coords: t,
    selection: n,
    controller: o,
    cellCoordsFactory: r,
    isShiftKey: s.shiftKey,
    isLeftClick: Sg(s) || s.type === "touchstart",
    isRightClick: Ji(s)
  });
}
const RR = /* @__PURE__ */ new WeakMap(), Wg = Symbol("rootInstance");
function fV(s) {
  RR.set(s, !0);
}
function gV(s) {
  return s === Wg;
}
function gf(s) {
  return RR.has(s);
}
function ev(s, e, t) {
  mV(s, e), e.set(s, t);
}
function mV(s, e) {
  if (e.has(s))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function ei(s, e, t) {
  return e = pV(e), e in s ? Object.defineProperty(s, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : s[e] = t, s;
}
function pV(s) {
  var e = wV(s, "string");
  return typeof e == "symbol" ? e : String(e);
}
function wV(s, e) {
  if (typeof s != "object" || s === null)
    return s;
  var t = s[Symbol.toPrimitive];
  if (t !== void 0) {
    var n = t.call(s, e || "default");
    if (typeof n != "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(s);
}
function tv(s, e) {
  var t = ER(s, e, "get");
  return CV(s, t);
}
function CV(s, e) {
  return e.get ? e.get.call(s) : e.value;
}
function sv(s, e, t) {
  var n = ER(s, e, "set");
  return vV(s, n, t), t;
}
function ER(s, e, t) {
  if (!e.has(s))
    throw new TypeError("attempted to " + t + " private field on non-instance");
  return e.get(s);
}
function vV(s, e, t) {
  if (e.set)
    e.set.call(s, t);
  else {
    if (!e.writable)
      throw new TypeError("attempted to set read only private field");
    e.value = t;
  }
}
const Oi = /* @__PURE__ */ new WeakMap();
var Tu = /* @__PURE__ */ new WeakMap(), Mu = /* @__PURE__ */ new WeakMap();
class yV {
  /**
   * @param {Hanstontable} instance Instance of {@link Handsontable}.
   */
  constructor(e) {
    ei(this, "instance", void 0), ei(this, "eventManager", void 0), ei(this, "settings", void 0), ei(this, "THEAD", void 0), ei(this, "TBODY", void 0), ei(this, "_wt", void 0), ei(this, "activeWt", void 0), ev(this, Tu, {
      writable: !0,
      value: 0
    }), ev(this, Mu, {
      writable: !0,
      value: 0
    }), ei(this, "postponedAdjustElementsSize", !1), this.instance = e, this.eventManager = new Dt(this.instance), this.settings = this.instance.getSettings(), Oi.set(this, {
      /**
       * Defines if the text should be selected during mousemove.
       *
       * @private
       * @type {boolean}
       */
      selectionMouseDown: !1,
      /**
       * @private
       * @type {boolean}
       */
      mouseDown: void 0,
      /**
       * Main <TABLE> element.
       *
       * @private
       * @type {HTMLTableElement}
       */
      table: void 0,
      /**
       * Cached width of the rootElement.
       *
       * @type {number}
       */
      lastWidth: 0,
      /**
       * Cached height of the rootElement.
       *
       * @type {number}
       */
      lastHeight: 0
    }), this.createElements(), this.registerEvents(), this.initializeWalkontable();
  }
  /**
   * Renders WalkontableUI.
   */
  render() {
    this.instance.isRenderSuspended() || (this.instance.runHooks("beforeRender", this.instance.forceFullRender), this.postponedAdjustElementsSize && (this.postponedAdjustElementsSize = !1, this.adjustElementsSize(!0)), this._wt.draw(!this.instance.forceFullRender), this.instance.runHooks("afterRender", this.instance.forceFullRender), this.instance.forceFullRender = !1, this.instance.renderCall = !1);
  }
  /**
   * Adjust overlays elements size and master table size.
   *
   * @param {boolean} [force=false] When `true`, it adjust the DOM nodes sizes for all overlays.
   */
  adjustElementsSize() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
    this.instance.isRenderSuspended() ? this.postponedAdjustElementsSize = !0 : this._wt.wtOverlays.adjustElementsSize(e);
  }
  /**
   * Returns td object given coordinates.
   *
   * @param {CellCoords} coords Renderable cell coordinates.
   * @param {boolean} topmost Indicates whether the cell should be calculated from the topmost.
   * @returns {HTMLTableCellElement|null}
   */
  getCellAtCoords(e, t) {
    const n = this._wt.getCell(e, t);
    return n < 0 ? null : n;
  }
  /**
   * Scroll viewport to a cell.
   *
   * @param {CellCoords} coords Renderable cell coordinates.
   * @param {boolean} [snapToTop] If `true`, viewport is scrolled to show the cell on the top of the table.
   * @param {boolean} [snapToRight] If `true`, viewport is scrolled to show the cell on the right side of the table.
   * @param {boolean} [snapToBottom] If `true`, viewport is scrolled to show the cell on the bottom side of the table.
   * @param {boolean} [snapToLeft] If `true`, viewport is scrolled to show the cell on the left side of the table.
   * @returns {boolean}
   */
  scrollViewport(e, t, n, o, r) {
    return this._wt.scrollViewport(e, t, n, o, r);
  }
  /**
   * Scroll viewport to a column.
   *
   * @param {number} column Renderable column index.
   * @param {boolean} [snapToRight] If `true`, viewport is scrolled to show the cell on the right side of the table.
   * @param {boolean} [snapToLeft] If `true`, viewport is scrolled to show the cell on the left side of the table.
   * @returns {boolean}
   */
  scrollViewportHorizontally(e, t, n) {
    return this._wt.scrollViewportHorizontally(e, t, n);
  }
  /**
   * Scroll viewport to a row.
   *
   * @param {number} row Renderable row index.
   * @param {boolean} [snapToTop] If `true`, viewport is scrolled to show the cell on the top of the table.
   * @param {boolean} [snapToBottom] If `true`, viewport is scrolled to show the cell on the bottom side of the table.
   * @returns {boolean}
   */
  scrollViewportVertically(e, t, n) {
    return this._wt.scrollViewportVertically(e, t, n);
  }
  /**
   * Prepares DOMElements and adds correct className to the root element.
   *
   * @private
   */
  createElements() {
    const e = Oi.get(this), {
      rootElement: t,
      rootDocument: n
    } = this.instance, o = t.getAttribute("style");
    o && t.setAttribute("data-originalstyle", o), ie(t, "handsontable"), e.table = n.createElement("TABLE"), ie(e.table, "htCore"), this.instance.getSettings().tableClassName && ie(e.table, this.instance.getSettings().tableClassName), this.THEAD = n.createElement("THEAD"), e.table.appendChild(this.THEAD), this.TBODY = n.createElement("TBODY"), e.table.appendChild(this.TBODY), this.instance.table = e.table, this.instance.container.insertBefore(e.table, this.instance.container.firstChild);
  }
  /**
   * Attaches necessary listeners.
   *
   * @private
   */
  registerEvents() {
    const e = Oi.get(this), {
      rootElement: t,
      rootDocument: n,
      selection: o
    } = this.instance, r = n.documentElement;
    this.eventManager.addEventListener(t, "mousedown", (a) => {
      if (e.selectionMouseDown = !0, !this.isTextSelectionAllowed(a.target)) {
        const {
          rootWindow: l
        } = this.instance;
        bC(l), a.preventDefault(), l.focus();
      }
    }), this.eventManager.addEventListener(t, "mouseup", () => {
      e.selectionMouseDown = !1;
    }), this.eventManager.addEventListener(t, "mousemove", (a) => {
      e.selectionMouseDown && !this.isTextSelectionAllowed(a.target) && (this.settings.fragmentSelection && bC(this.instance.rootWindow), a.preventDefault());
    }), this.eventManager.addEventListener(r, "keyup", (a) => {
      o.isInProgress() && !a.shiftKey && o.finish();
    }), this.eventManager.addEventListener(r, "mouseup", (a) => {
      o.isInProgress() && Sg(a) && o.finish(), e.mouseDown = !1, (Cg(n.activeElement) || !o.isSelected() && !o.isSelectedByAnyHeader() && !t.contains(a.target) && !Ji(a)) && this.instance.unlisten();
    }), this.eventManager.addEventListener(r, "contextmenu", (a) => {
      o.isInProgress() && Ji(a) && (o.finish(), e.mouseDown = !1);
    }), this.eventManager.addEventListener(r, "touchend", () => {
      o.isInProgress() && o.finish(), e.mouseDown = !1;
    }), this.eventManager.addEventListener(r, "mousedown", (a) => {
      const l = a.target, c = a.x || a.clientX, h = a.y || a.clientY;
      let u = a.target;
      if (e.mouseDown || !t || !this.instance.view)
        return;
      const {
        holder: f
      } = this.instance.view._wt.wtTable;
      if (u === f) {
        const m = qt(n);
        if (n.elementFromPoint(c + m, h) !== f || n.elementFromPoint(c, h + m) !== f)
          return;
      } else
        for (; u !== r; ) {
          if (u === null) {
            if (a.isTargetWebComponent)
              break;
            return;
          }
          if (u === t)
            return;
          u = u.parentNode;
        }
      (typeof this.settings.outsideClickDeselects == "function" ? this.settings.outsideClickDeselects(l) : this.settings.outsideClickDeselects) ? this.instance.deselectCell() : this.instance.destroyEditor(!1, !1);
    }), this.eventManager.addEventListener(e.table, "selectstart", (a) => {
      this.settings.fragmentSelection || yc(a.target) || a.preventDefault();
    });
  }
  /**
   * Translate renderable cell coordinates to visual coordinates.
   *
   * @param {CellCoords} coords The cell coordinates.
   * @returns {CellCoords}
   */
  translateFromRenderableToVisualCoords(e) {
    let {
      row: t,
      col: n
    } = e;
    return this.instance._createCellCoords(...this.translateFromRenderableToVisualIndex(t, n));
  }
  /**
   * Translate renderable row and column indexes to visual row and column indexes.
   *
   * @param {number} renderableRow Renderable row index.
   * @param {number} renderableColumn Renderable columnIndex.
   * @returns {number[]}
   */
  translateFromRenderableToVisualIndex(e, t) {
    let n = e >= 0 ? this.instance.rowIndexMapper.getVisualFromRenderableIndex(e) : e, o = t >= 0 ? this.instance.columnIndexMapper.getVisualFromRenderableIndex(t) : t;
    return n === null && (n = e), o === null && (o = t), [n, o];
  }
  /**
   * Returns the number of renderable indexes.
   *
   * @private
   * @param {IndexMapper} indexMapper The IndexMapper instance for specific axis.
   * @param {number} maxElements Maximum number of elements (rows or columns).
   *
   * @returns {number|*}
   */
  countRenderableIndexes(e, t) {
    const n = Math.min(e.getNotTrimmedIndexesLength(), t), o = e.getNearestNotHiddenIndex(n - 1, -1);
    return o === null ? 0 : e.getRenderableFromVisualIndex(o) + 1;
  }
  /**
   * Returns the number of renderable columns.
   *
   * @returns {number}
   */
  countRenderableColumns() {
    return this.countRenderableIndexes(this.instance.columnIndexMapper, this.settings.maxCols);
  }
  /**
   * Returns the number of renderable rows.
   *
   * @returns {number}
   */
  countRenderableRows() {
    return this.countRenderableIndexes(this.instance.rowIndexMapper, this.settings.maxRows);
  }
  /**
   * Returns number of not hidden row indexes counting from the passed starting index.
   * The counting direction can be controlled by `incrementBy` argument.
   *
   * @param {number} visualIndex The visual index from which the counting begins.
   * @param {number} incrementBy If `-1` then counting is backwards or forward when `1`.
   * @returns {number}
   */
  countNotHiddenRowIndexes(e, t) {
    return this.countNotHiddenIndexes(e, t, this.instance.rowIndexMapper, this.countRenderableRows());
  }
  /**
   * Returns number of not hidden column indexes counting from the passed starting index.
   * The counting direction can be controlled by `incrementBy` argument.
   *
   * @param {number} visualIndex The visual index from which the counting begins.
   * @param {number} incrementBy If `-1` then counting is backwards or forward when `1`.
   * @returns {number}
   */
  countNotHiddenColumnIndexes(e, t) {
    return this.countNotHiddenIndexes(e, t, this.instance.columnIndexMapper, this.countRenderableColumns());
  }
  /**
   * Returns number of not hidden indexes counting from the passed starting index.
   * The counting direction can be controlled by `incrementBy` argument.
   *
   * @param {number} visualIndex The visual index from which the counting begins.
   * @param {number} incrementBy If `-1` then counting is backwards or forward when `1`.
   * @param {IndexMapper} indexMapper The IndexMapper instance for specific axis.
   * @param {number} renderableIndexesCount Total count of renderable indexes for specific axis.
   * @returns {number}
   */
  countNotHiddenIndexes(e, t, n, o) {
    if (isNaN(e) || e < 0)
      return 0;
    const r = n.getNearestNotHiddenIndex(e, t), a = n.getRenderableFromVisualIndex(r);
    if (!Number.isInteger(a))
      return 0;
    let l = 0;
    return t < 0 ? l = a + 1 : t > 0 && (l = o - a), l;
  }
  /**
   * The function returns the number of not hidden column indexes that fit between the first and
   * last fixed column in the left (or right in RTL mode) overlay.
   *
   * @returns {number}
   */
  countNotHiddenFixedColumnsStart() {
    const e = this.instance.countCols(), t = Math.min(parseInt(this.settings.fixedColumnsStart, 10), e) - 1;
    return this.countNotHiddenColumnIndexes(t, -1);
  }
  /**
   * The function returns the number of not hidden row indexes that fit between the first and
   * last fixed row in the top overlay.
   *
   * @returns {number}
   */
  countNotHiddenFixedRowsTop() {
    const e = this.instance.countRows(), t = Math.min(parseInt(this.settings.fixedRowsTop, 10), e) - 1;
    return this.countNotHiddenRowIndexes(t, -1);
  }
  /**
   * The function returns the number of not hidden row indexes that fit between the first and
   * last fixed row in the bottom overlay.
   *
   * @returns {number}
   */
  countNotHiddenFixedRowsBottom() {
    const e = this.instance.countRows(), t = Math.max(e - parseInt(this.settings.fixedRowsBottom, 10), 0);
    return this.countNotHiddenRowIndexes(t, 1);
  }
  /**
   * Checks if at least one cell than belongs to the main table is not covered by the top, left or
   * bottom overlay.
   *
   * @returns {boolean}
   */
  isMainTableNotFullyCoveredByOverlays() {
    const e = this.countNotHiddenFixedRowsTop() + this.countNotHiddenFixedRowsBottom(), t = this.countNotHiddenFixedColumnsStart();
    return this.instance.countRenderedRows() > e && this.instance.countRenderedCols() > t;
  }
  /**
   * Defines default configuration and initializes WalkOnTable instance.
   *
   * @private
   */
  initializeWalkontable() {
    const e = Oi.get(this), t = {
      rtlMode: this.instance.isRtl(),
      externalRowCalculator: this.instance.getPlugin("autoRowSize") && this.instance.getPlugin("autoRowSize").isEnabled(),
      table: e.table,
      isDataViewInstance: () => gf(this.instance),
      preventOverflow: () => this.settings.preventOverflow,
      preventWheel: () => this.settings.preventWheel,
      stretchH: () => this.settings.stretchH,
      data: (a, l) => this.instance.getDataAtCell(...this.translateFromRenderableToVisualIndex(a, l)),
      totalRows: () => this.countRenderableRows(),
      totalColumns: () => this.countRenderableColumns(),
      // Number of renderable columns for the left overlay.
      fixedColumnsStart: () => this.countNotHiddenFixedColumnsStart(),
      // Number of renderable rows for the top overlay.
      fixedRowsTop: () => this.countNotHiddenFixedRowsTop(),
      // Number of renderable rows for the bottom overlay.
      fixedRowsBottom: () => this.countNotHiddenFixedRowsBottom(),
      // Enable the inline start overlay when conditions are met.
      shouldRenderInlineStartOverlay: () => this.settings.fixedColumnsStart > 0 || t.rowHeaders().length > 0,
      // Enable the top overlay when conditions are met.
      shouldRenderTopOverlay: () => this.settings.fixedRowsTop > 0 || t.columnHeaders().length > 0,
      // Enable the bottom overlay when conditions are met.
      shouldRenderBottomOverlay: () => this.settings.fixedRowsBottom > 0,
      minSpareRows: () => this.settings.minSpareRows,
      renderAllRows: this.settings.renderAllRows,
      rowHeaders: () => {
        const a = [];
        return this.instance.hasRowHeaders() && a.push((l, c) => {
          const h = l >= 0 ? this.instance.rowIndexMapper.getVisualFromRenderableIndex(l) : l;
          this.appendRowHeader(h, c);
        }), this.instance.runHooks("afterGetRowHeaderRenderers", a), sv(this, Mu, a.length), a;
      },
      columnHeaders: () => {
        const a = [];
        return this.instance.hasColHeaders() && a.push((l, c) => {
          const h = l >= 0 ? this.instance.columnIndexMapper.getVisualFromRenderableIndex(l) : l;
          this.appendColHeader(h, c);
        }), this.instance.runHooks("afterGetColumnHeaderRenderers", a), sv(this, Tu, a.length), a;
      },
      columnWidth: (a) => {
        const l = this.instance.columnIndexMapper.getVisualFromRenderableIndex(a);
        return this.instance.getColWidth(l === null ? a : l);
      },
      rowHeight: (a) => {
        const l = this.instance.rowIndexMapper.getVisualFromRenderableIndex(a);
        return this.instance.getRowHeight(l === null ? a : l);
      },
      cellRenderer: (a, l, c) => {
        const [h, u] = this.translateFromRenderableToVisualIndex(a, l), f = this.instance.runHooks("modifyGetCellCoords", h, u);
        let g = h, m = u;
        Array.isArray(f) && ([g, m] = f);
        const w = this.instance.getCellMeta(g, m), C = this.instance.colToProp(m);
        let S = this.instance.getDataAtRowProp(g, C);
        this.instance.hasHook("beforeValueRender") && (S = this.instance.runHooks("beforeValueRender", S, w)), this.instance.runHooks("beforeRenderer", c, h, u, C, S, w), this.instance.getCellRenderer(w)(this.instance, c, h, u, C, S, w), this.instance.runHooks("afterRenderer", c, h, u, C, S, w);
      },
      selections: this.instance.selection.highlight,
      hideBorderOnMouseDownOver: () => this.settings.fragmentSelection,
      onWindowResize: () => {
        this.instance && !this.instance.isDestroyed && this.instance.refreshDimensions();
      },
      onContainerElementResize: () => {
        this.instance && !this.instance.isDestroyed && this.instance.refreshDimensions();
      },
      onCellMouseDown: (a, l, c, h) => {
        const u = this.translateFromRenderableToVisualCoords(l), f = {
          row: !1,
          column: !1,
          cell: !1
        };
        this.instance.listen(), this.activeWt = h, e.mouseDown = !0, this.instance.runHooks("beforeOnCellMouseDown", a, u, c, f), !Vo(a) && (JC(a, {
          coords: u,
          selection: this.instance.selection,
          controller: f,
          cellCoordsFactory: (g, m) => this.instance._createCellCoords(g, m)
        }), this.instance.runHooks("afterOnCellMouseDown", a, u, c), this.activeWt = this._wt);
      },
      onCellContextMenu: (a, l, c, h) => {
        const u = this.translateFromRenderableToVisualCoords(l);
        this.activeWt = h, e.mouseDown = !1, this.instance.selection.isInProgress() && this.instance.selection.finish(), this.instance.runHooks("beforeOnCellContextMenu", a, u, c), !Vo(a) && (this.instance.runHooks("afterOnCellContextMenu", a, u, c), this.activeWt = this._wt);
      },
      onCellMouseOut: (a, l, c, h) => {
        const u = this.translateFromRenderableToVisualCoords(l);
        this.activeWt = h, this.instance.runHooks("beforeOnCellMouseOut", a, u, c), !Vo(a) && (this.instance.runHooks("afterOnCellMouseOut", a, u, c), this.activeWt = this._wt);
      },
      onCellMouseOver: (a, l, c, h) => {
        const u = this.translateFromRenderableToVisualCoords(l), f = {
          row: !1,
          column: !1,
          cell: !1
        };
        this.activeWt = h, this.instance.runHooks("beforeOnCellMouseOver", a, u, c, f), !Vo(a) && (e.mouseDown && JC(a, {
          coords: u,
          selection: this.instance.selection,
          controller: f,
          cellCoordsFactory: (g, m) => this.instance._createCellCoords(g, m)
        }), this.instance.runHooks("afterOnCellMouseOver", a, u, c), this.activeWt = this._wt);
      },
      onCellMouseUp: (a, l, c, h) => {
        const u = this.translateFromRenderableToVisualCoords(l);
        this.activeWt = h, this.instance.runHooks("beforeOnCellMouseUp", a, u, c), !(Vo(a) || this.instance.isDestroyed) && (this.instance.runHooks("afterOnCellMouseUp", a, u, c), this.activeWt = this._wt);
      },
      onCellCornerMouseDown: (a) => {
        a.preventDefault(), this.instance.runHooks("afterOnCellCornerMouseDown", a);
      },
      onCellCornerDblClick: (a) => {
        a.preventDefault(), this.instance.runHooks("afterOnCellCornerDblClick", a);
      },
      beforeDraw: (a, l) => this.beforeRender(a, l),
      onDraw: (a) => this.afterRender(a),
      onScrollVertically: () => this.instance.runHooks("afterScrollVertically"),
      onScrollHorizontally: () => this.instance.runHooks("afterScrollHorizontally"),
      onBeforeRemoveCellClassNames: () => this.instance.runHooks("beforeRemoveCellClassNames"),
      onBeforeHighlightingRowHeader: (a, l, c) => {
        const h = this.instance.rowIndexMapper, u = h.getVisualFromRenderableIndex(a), f = this.instance.runHooks("beforeHighlightingRowHeader", u, l, c);
        return h.getRenderableFromVisualIndex(h.getNearestNotHiddenIndex(f, 1));
      },
      onBeforeHighlightingColumnHeader: (a, l, c) => {
        const h = this.instance.columnIndexMapper, u = h.getVisualFromRenderableIndex(a), f = this.instance.runHooks("beforeHighlightingColumnHeader", u, l, c);
        return h.getRenderableFromVisualIndex(h.getNearestNotHiddenIndex(f, 1));
      },
      onAfterDrawSelection: (a, l, c) => {
        let h;
        const [u, f] = this.translateFromRenderableToVisualIndex(a, l), g = this.instance.selection.getSelectedRange(), m = g.size();
        if (m > 0) {
          const w = (c ?? 0) + 1 - m, C = g.peekByIndex(w);
          h = [C.from.row, C.from.col, C.to.row, C.to.col];
        }
        return this.instance.runHooks("afterDrawSelection", u, f, h, c);
      },
      onBeforeDrawBorders: (a, l) => {
        const [c, h, u, f] = a, g = [this.instance.rowIndexMapper.getVisualFromRenderableIndex(c), this.instance.columnIndexMapper.getVisualFromRenderableIndex(h), this.instance.rowIndexMapper.getVisualFromRenderableIndex(u), this.instance.columnIndexMapper.getVisualFromRenderableIndex(f)];
        return this.instance.runHooks("beforeDrawBorders", g, l);
      },
      onBeforeTouchScroll: () => this.instance.runHooks("beforeTouchScroll"),
      onAfterMomentumScroll: () => this.instance.runHooks("afterMomentumScroll"),
      onBeforeStretchingColumnWidth: (a, l) => {
        const c = this.instance.columnIndexMapper.getVisualFromRenderableIndex(l);
        return this.instance.runHooks("beforeStretchingColumnWidth", a, c);
      },
      onModifyRowHeaderWidth: (a) => this.instance.runHooks("modifyRowHeaderWidth", a),
      onModifyGetCellCoords: (a, l, c) => {
        const h = this.instance.rowIndexMapper, u = this.instance.columnIndexMapper, f = l >= 0 ? u.getVisualFromRenderableIndex(l) : l, g = a >= 0 ? h.getVisualFromRenderableIndex(a) : a, m = this.instance.runHooks("modifyGetCellCoords", g, f, c);
        if (Array.isArray(m)) {
          const [w, C, S, x] = m;
          return [w >= 0 ? h.getRenderableFromVisualIndex(h.getNearestNotHiddenIndex(w, 1)) : w, C >= 0 ? u.getRenderableFromVisualIndex(u.getNearestNotHiddenIndex(C, 1)) : C, S >= 0 ? h.getRenderableFromVisualIndex(h.getNearestNotHiddenIndex(S, -1)) : S, x >= 0 ? u.getRenderableFromVisualIndex(u.getNearestNotHiddenIndex(x, -1)) : x];
        }
      },
      viewportRowCalculatorOverride: (a) => {
        let l = this.settings.viewportRowRenderingOffset;
        if (l === "auto" && this.settings.fixedRowsTop && (l = 10), l > 0 || l === "auto") {
          const c = this.countRenderableRows(), h = a.startRow, u = a.endRow;
          if (typeof l == "number")
            a.startRow = Math.max(h - l, 0), a.endRow = Math.min(u + l, c - 1);
          else if (l === "auto") {
            const f = Math.ceil(u / c * 12);
            a.startRow = Math.max(h - f, 0), a.endRow = Math.min(u + f, c - 1);
          }
        }
        this.instance.runHooks("afterViewportRowCalculatorOverride", a);
      },
      viewportColumnCalculatorOverride: (a) => {
        let l = this.settings.viewportColumnRenderingOffset;
        if (l === "auto" && this.settings.fixedColumnsStart && (l = 10), l > 0 || l === "auto") {
          const c = this.countRenderableColumns(), h = a.startColumn, u = a.endColumn;
          if (typeof l == "number" && (a.startColumn = Math.max(h - l, 0), a.endColumn = Math.min(u + l, c - 1)), l === "auto") {
            const f = Math.ceil(u / c * 6);
            a.startColumn = Math.max(h - f, 0), a.endColumn = Math.min(u + f, c - 1);
          }
        }
        this.instance.runHooks("afterViewportColumnCalculatorOverride", a);
      },
      rowHeaderWidth: () => this.settings.rowHeaderWidth,
      columnHeaderHeight: () => {
        const a = this.instance.runHooks("modifyColumnHeaderHeight");
        return this.settings.columnHeaderHeight || a;
      }
    };
    this.instance.runHooks("beforeInitWalkontable", t), this._wt = new Bg(t), this.activeWt = this._wt;
    const n = this._wt.wtTable.spreader, {
      width: o,
      height: r
    } = this.instance.rootElement.getBoundingClientRect();
    this.setLastSize(o, r), this.eventManager.addEventListener(n, "mousedown", (a) => {
      a.target === n && a.which === 3 && a.stopPropagation();
    }), this.eventManager.addEventListener(n, "contextmenu", (a) => {
      a.target === n && a.which === 3 && a.stopPropagation();
    }), this.eventManager.addEventListener(this.instance.rootDocument.documentElement, "click", () => {
      this.settings.observeDOMVisibility && this._wt.drawInterrupted && (this.instance.forceFullRender = !0, this.render());
    });
  }
  /**
   * Checks if it's possible to create text selection in element.
   *
   * @private
   * @param {HTMLElement} el The element to check.
   * @returns {boolean}
   */
  isTextSelectionAllowed(e) {
    if (yc(e))
      return !0;
    const t = Ki(e, this.instance.view._wt.wtTable.spreader);
    return !!(this.settings.fragmentSelection === !0 && t || this.settings.fragmentSelection === "cell" && this.isSelectedOnlyCell() && t || !this.settings.fragmentSelection && this.isCellEdited() && this.isSelectedOnlyCell());
  }
  /**
   * Checks if user's been called mousedown.
   *
   * @private
   * @returns {boolean}
   */
  isMouseDown() {
    return Oi.get(this).mouseDown;
  }
  /**
   * Check if selected only one cell.
   *
   * @private
   * @returns {boolean}
   */
  isSelectedOnlyCell() {
    var e, t;
    return (e = (t = this.instance.getSelectedRangeLast()) === null || t === void 0 ? void 0 : t.isSingle()) !== null && e !== void 0 ? e : !1;
  }
  /**
   * Checks if active cell is editing.
   *
   * @private
   * @returns {boolean}
   */
  isCellEdited() {
    const e = this.instance.getActiveEditor();
    return e && e.isOpened();
  }
  /**
   * `beforeDraw` callback.
   *
   * @private
   * @param {boolean} force If `true` rendering was triggered by a change of settings or data or `false` if
   *                        rendering was triggered by scrolling or moving selection.
   * @param {object} skipRender Object with `skipRender` property, if it is set to `true ` the next rendering
   *                            cycle will be skipped.
   */
  beforeRender(e, t) {
    e && this.instance.runHooks("beforeViewRender", this.instance.forceFullRender, t);
  }
  /**
   * `afterRender` callback.
   *
   * @private
   * @param {boolean} force If `true` rendering was triggered by a change of settings or data or `false` if
   *                        rendering was triggered by scrolling or moving selection.
   */
  afterRender(e) {
    e && this.instance.runHooks("afterViewRender", this.instance.forceFullRender);
  }
  /**
   * Append row header to a TH element.
   *
   * @private
   * @param {number} visualRowIndex The visual row index.
   * @param {HTMLTableHeaderCellElement} TH The table header element.
   */
  appendRowHeader(e, t) {
    if (t.firstChild) {
      const n = t.firstChild;
      if (!Ne(n, "relative")) {
        bn(t), this.appendRowHeader(e, t);
        return;
      }
      this.updateCellHeader(n.querySelector(".rowHeader"), e, this.instance.getRowHeader);
    } else {
      const {
        rootDocument: n,
        getRowHeader: o
      } = this.instance, r = n.createElement("div"), a = n.createElement("span");
      r.className = "relative", a.className = "rowHeader", this.updateCellHeader(a, e, o), r.appendChild(a), t.appendChild(r);
    }
    this.instance.runHooks("afterGetRowHeader", e, t);
  }
  /**
   * Append column header to a TH element.
   *
   * @private
   * @param {number} visualColumnIndex Visual column index.
   * @param {HTMLTableCellElement} TH The table header element.
   * @param {Function} [label] The function that returns the header label.
   * @param {number} [headerLevel=0] The index of header level counting from the top (positive
   *                                 values counting from 0 to N).
   */
  appendColHeader(e, t) {
    let n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : this.instance.getColHeader, o = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0;
    if (t.firstChild) {
      const r = t.firstChild;
      Ne(r, "relative") ? this.updateCellHeader(r.querySelector(".colHeader"), e, n, o) : (bn(t), this.appendColHeader(e, t, n, o));
    } else {
      const {
        rootDocument: r
      } = this.instance, a = r.createElement("div"), l = r.createElement("span");
      a.className = "relative", l.className = "colHeader", this.updateCellHeader(l, e, n, o), a.appendChild(l), t.appendChild(a);
    }
    this.instance.runHooks("afterGetColHeader", e, t, o);
  }
  /**
   * Updates header cell content.
   *
   * @private
   * @param {HTMLElement} element Element to update.
   * @param {number} index Row index or column index.
   * @param {Function} content Function which should be returns content for this cell.
   * @param {number} [headerLevel=0] The index of header level counting from the top (positive
   *                                 values counting from 0 to N).
   */
  updateCellHeader(e, t, n) {
    let o = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0, r = t;
    const a = this._wt.wtOverlays.getParentOverlay(e) || this._wt;
    e.parentNode && (Ne(e, "colHeader") ? r = a.wtTable.columnFilter.sourceToRendered(t) : Ne(e, "rowHeader") && (r = a.wtTable.rowFilter.sourceToRendered(t))), r > -1 ? ur(e, n(t, o)) : (Zi(e, String.fromCharCode(160)), ie(e, "cornerHeader"));
  }
  /**
   * Given a element's left (or right in RTL mode) position relative to the viewport, returns maximum
   * element width until the right (or left) edge of the viewport (before scrollbar).
   *
   * @private
   * @param {number} inlineOffset The left (or right in RTL mode) offset.
   * @returns {number}
   */
  maximumVisibleElementWidth(e) {
    const n = this._wt.wtViewport.getWorkspaceWidth() - e;
    return n > 0 ? n : 0;
  }
  /**
   * Given a element's top position relative to the viewport, returns maximum element height until the bottom
   * edge of the viewport (before scrollbar).
   *
   * @private
   * @param {number} topOffset The top offset.
   * @returns {number}
   */
  maximumVisibleElementHeight(e) {
    const n = this._wt.wtViewport.getWorkspaceHeight() - e;
    return n > 0 ? n : 0;
  }
  /**
   * Sets new dimensions of the container.
   *
   * @param {number} width The table width.
   * @param {number} height The table height.
   */
  setLastSize(e, t) {
    const n = Oi.get(this);
    [n.lastWidth, n.lastHeight] = [e, t];
  }
  /**
   * Returns cached dimensions.
   *
   * @returns {object}
   */
  getLastSize() {
    const e = Oi.get(this);
    return {
      width: e.lastWidth,
      height: e.lastHeight
    };
  }
  /**
   * Returns the first fully visible row in the table viewport.
   *
   * @returns {number}
   */
  getFirstFullyVisibleRow() {
    return this.instance.rowIndexMapper.getVisualFromRenderableIndex(this.instance.view._wt.wtScroll.getFirstVisibleRow());
  }
  /**
   * Returns the last fully visible row in the table viewport.
   *
   * @returns {number}
   */
  getLastFullyVisibleRow() {
    return this.instance.rowIndexMapper.getVisualFromRenderableIndex(this.instance.view._wt.wtScroll.getLastVisibleRow());
  }
  /**
   * Returns the first fully visible column in the table viewport.
   *
   * @returns {number}
   */
  getFirstFullyVisibleColumn() {
    return this.instance.columnIndexMapper.getVisualFromRenderableIndex(this.instance.view._wt.wtScroll.getFirstVisibleColumn());
  }
  /**
   * Returns the last fully visible column in the table viewport.
   *
   * @returns {number}
   */
  getLastFullyVisibleColumn() {
    return this.instance.columnIndexMapper.getVisualFromRenderableIndex(this.instance.view._wt.wtScroll.getLastVisibleColumn());
  }
  /**
   * Returns the total count of the rendered column headers.
   *
   * @returns {number}
   */
  getColumnHeadersCount() {
    return tv(this, Tu);
  }
  /**
   * Returns the total count of the rendered row headers.
   *
   * @returns {number}
   */
  getRowHeadersCount() {
    return tv(this, Mu);
  }
  /**
   * Destroys internal WalkOnTable's instance. Detaches all of the bonded listeners.
   *
   * @private
   */
  destroy() {
    this._wt.destroy(), this.eventManager.destroy();
  }
}
const SV = yV, bV = "ABCDEFGHIJKLMNOPQRSTUVWXYZ", nv = bV.length;
function RV(s) {
  let e = s + 1, t = "", n;
  for (; e > 0; )
    n = (e - 1) % nv, t = String.fromCharCode(65 + n) + t, e = parseInt((e - n) / nv, 10);
  return t;
}
function iv(s) {
  let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, t = s;
  const n = [];
  return (!Array.isArray(s) || !Array.isArray(s[0])) && (t = [s]), t.forEach((o, r) => {
    Array.isArray(o) ? o.forEach((a, l) => {
      n.push([r + e, l, a]);
    }) : Object.keys(o).forEach((a) => {
      n.push([r + e, a, o[a]]);
    });
  }), n;
}
function xR(s) {
  let e = 0;
  return Array.isArray(s) && (s[0] && Array.isArray(s[0]) ? e = s[0].length : s[0] && Ge(s[0]) && (e = yg(s[0]))), e;
}
function EV(s) {
  return !!(Array.isArray(s) && s.length && s.every((e) => Array.isArray(e)));
}
function xV(s) {
  return !!(Array.isArray(s) && s.length && s.every((e) => typeof e == "object" && !Array.isArray(e) && e !== null));
}
class TV {
  constructor(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    this.hot = e, this.data = t, this.dataType = "array", this.colToProp = () => {
    }, this.propToCol = () => {
    };
  }
  /**
   * Run the `modifyRowData` hook and return either the modified or the source data for the provided row.
   *
   * @private
   * @param {number} rowIndex Row index.
   * @returns {Array|object} Source or modified row of data.
   */
  modifyRowData(e) {
    let t;
    return this.hot.hasHook("modifyRowData") && (t = this.hot.runHooks("modifyRowData", e)), t !== void 0 && !Number.isInteger(t) ? t : this.data[e];
  }
  /**
   * Get all data.
   *
   * @param {boolean} [toArray=false] If `true` return source data as an array of arrays even when source data was provided
   *                                  in another format.
   * @returns {Array}
   */
  getData() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
    return !this.data || this.data.length === 0 ? this.data : this.getByRange(null, null, e);
  }
  /**
   * Set new data source.
   *
   * @param {Array} data The new data.
   */
  setData(e) {
    this.data = e;
  }
  /**
   * Returns array of column values from the data source. `column` is the index of the row in the data source.
   *
   * @param {number} column Visual column index.
   * @returns {Array}
   */
  getAtColumn(e) {
    const t = [];
    return D(this.data, (n, o) => {
      const r = this.getAtCell(o, e);
      t.push(r);
    }), t;
  }
  /**
   * Returns a single row of the data or a subset of its columns. If a column range or `toArray` arguments are provided, it
   * operates only on the columns declared by the `columns` setting or the data schema.
   *
   * @param {number} row Physical row index.
   * @param {number} [startColumn] Starting index for the column range (optional).
   * @param {number} [endColumn] Ending index for the column range (optional).
   * @param {boolean} [toArray=false] `true` if the returned value should be forced to be presented as an array.
   * @returns {Array|object}
   */
  getAtRow(e, t, n) {
    let o = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : !1;
    const r = t === void 0 && n === void 0;
    let a = null, l = null;
    if (a = this.modifyRowData(e), Array.isArray(a))
      l = [], r ? a.forEach((c, h) => {
        l[h] = this.getAtPhysicalCell(e, h, a);
      }) : Se(t, n, (c) => {
        l[c - t] = this.getAtPhysicalCell(e, c, a);
      });
    else if (Ge(a) || mt(a))
      if (o ? l = [] : l = {}, !r || o) {
        const h = this.countFirstRowKeys() - 1;
        Se(0, h, (u) => {
          const f = this.colToProp(u);
          if (u >= (t || 0) && u <= (n || h) && !Number.isInteger(f)) {
            const g = this.getAtPhysicalCell(e, f, a);
            o ? l.push(g) : Cu(l, f, g);
          }
        });
      } else
        je(a, (c, h) => {
          Cu(l, h, this.getAtPhysicalCell(e, h, a));
        });
    return l;
  }
  /**
   * Set the provided value in the source data set at the provided coordinates.
   *
   * @param {number} row Physical row index.
   * @param {number|string} column Property name / physical column index.
   * @param {*} value The value to be set at the provided coordinates.
   */
  setAtCell(e, t, n) {
    if (!(e >= this.countRows() || t >= this.countFirstRowKeys())) {
      if (this.hot.hasHook("modifySourceData")) {
        const o = nr(n);
        this.hot.runHooks("modifySourceData", e, t, o, "set"), o.isTouched() && (n = o.value);
      }
      Number.isInteger(t) ? this.data[e][t] = n : Cu(this.data[e], t, n);
    }
  }
  /**
   * Get data from the source data set using the physical indexes.
   *
   * @private
   * @param {number} row Physical row index.
   * @param {string|number|Function} column Physical column index / property / function.
   * @param {Array|object} dataRow A representation of a data row.
   * @returns {*} Value at the provided coordinates.
   */
  getAtPhysicalCell(e, t, n) {
    let o = null;
    if (n && (typeof t == "string" ? o = bL(n, t) : typeof t == "function" ? o = t(n) : o = n[t]), this.hot.hasHook("modifySourceData")) {
      const r = nr(o);
      this.hot.runHooks("modifySourceData", e, t, r, "get"), r.isTouched() && (o = r.value);
    }
    return o;
  }
  /**
   * Returns a single value from the data.
   *
   * @param {number} row Physical row index.
   * @param {number} columnOrProp Visual column index or property.
   * @returns {*}
   */
  getAtCell(e, t) {
    const n = this.modifyRowData(e);
    return this.getAtPhysicalCell(e, this.colToProp(t), n);
  }
  /**
   * Returns source data by passed range.
   *
   * @param {object} [start] Object with physical `row` and `col` keys (or visual column index, if data type is an array of objects).
   * @param {object} [end] Object with physical `row` and `col` keys (or visual column index, if data type is an array of objects).
   * @param {boolean} [toArray=false] If `true` return source data as an array of arrays even when source data was provided
   *                                  in another format.
   * @returns {Array}
   */
  getByRange() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null, t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null, n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1, o = !1, r = null, a = null, l = null, c = null;
    e === null || t === null ? (o = !0, r = 0, l = this.countRows() - 1) : (r = Math.min(e.row, t.row), a = Math.min(e.col, t.col), l = Math.max(e.row, t.row), c = Math.max(e.col, t.col));
    const h = [];
    return Se(r, l, (u) => {
      h.push(o ? this.getAtRow(u, void 0, void 0, n) : this.getAtRow(u, a, c, n));
    }), h;
  }
  /**
   * Count number of rows.
   *
   * @returns {number}
   */
  countRows() {
    if (this.hot.hasHook("modifySourceLength")) {
      const e = this.hot.runHooks("modifySourceLength");
      if (Number.isInteger(e))
        return e;
    }
    return this.data.length;
  }
  /**
   * Count number of columns.
   *
   * @returns {number}
   */
  countFirstRowKeys() {
    return xR(this.data);
  }
  /**
   * Destroy instance.
   */
  destroy() {
    this.data = null, this.hot = null;
  }
}
const MV = TV, _V = "localHooks", TR = {
  /**
   * Internal hooks storage.
   */
  _localHooks: /* @__PURE__ */ Object.create(null),
  /**
   * Add hook to the collection.
   *
   * @param {string} key The hook name.
   * @param {Function} callback The hook callback.
   * @returns {object}
   */
  addLocalHook(s, e) {
    return this._localHooks[s] || (this._localHooks[s] = []), this._localHooks[s].push(e), this;
  },
  /**
   * Run hooks.
   *
   * @param {string} key The name of the hook to run.
   * @param {*} [arg1] An additional parameter passed to the callback function.
   * @param {*} [arg2] An additional parameter passed to the callback function.
   * @param {*} [arg3] An additional parameter passed to the callback function.
   * @param {*} [arg4] An additional parameter passed to the callback function.
   * @param {*} [arg5] An additional parameter passed to the callback function.
   * @param {*} [arg6] An additional parameter passed to the callback function.
   */
  runLocalHooks(s, e, t, n, o, r, a) {
    if (this._localHooks[s]) {
      const l = this._localHooks[s].length;
      for (let c = 0; c < l; c++)
        nf(this._localHooks[s][c], this, e, t, n, o, r, a);
    }
  },
  /**
   * Clear all added hooks.
   *
   * @returns {object}
   */
  clearLocalHooks() {
    return this._localHooks = {}, this;
  }
};
Jn(TR, "MIXIN_NAME", _V, {
  writable: !1,
  enumerable: !1
});
const Rs = TR;
class co {
  constructor() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
    this.indexedValues = [], this.initValueOrFn = e;
  }
  /**
   * Get full list of values for particular indexes.
   *
   * @returns {Array}
   */
  getValues() {
    return this.indexedValues;
  }
  /**
   * Get value for the particular index.
   *
   * @param {number} index Index for which value is got.
   * @returns {*}
   */
  getValueAtIndex(e) {
    const t = this.indexedValues;
    if (e < t.length)
      return t[e];
  }
  /**
   * Set new values for particular indexes.
   *
   * Note: Please keep in mind that `change` hook triggered by the method may not update cache of a collection immediately.
   *
   * @param {Array} values List of set values.
   */
  setValues(e) {
    this.indexedValues = e.slice(), this.runLocalHooks("change");
  }
  /**
   * Set new value for the particular index.
   *
   * @param {number} index The index.
   * @param {*} value The value to save.
   *
   * Note: Please keep in mind that it is not possible to set value beyond the map (not respecting already set
   * map's size). Please use the `setValues` method when you would like to extend the map.
   * Note: Please keep in mind that `change` hook triggered by the method may not update cache of a collection immediately.
   *
   * @returns {boolean}
   */
  setValueAtIndex(e, t) {
    return e < this.indexedValues.length ? (this.indexedValues[e] = t, this.runLocalHooks("change"), !0) : !1;
  }
  /**
   * Clear all values to the defaults.
   */
  clear() {
    this.setDefaultValues();
  }
  /**
   * Get length of the index map.
   *
   * @returns {number}
   */
  getLength() {
    return this.getValues().length;
  }
  /**
   * Set default values for elements from `0` to `n`, where `n` is equal to the handled variable.
   *
   * Note: Please keep in mind that `change` hook triggered by the method may not update cache of a collection immediately.
   *
   * @private
   * @param {number} [length] Length of list.
   */
  setDefaultValues() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.indexedValues.length;
    this.indexedValues.length = 0, mt(this.initValueOrFn) ? Se(e - 1, (t) => this.indexedValues.push(this.initValueOrFn(t))) : Se(e - 1, () => this.indexedValues.push(this.initValueOrFn)), this.runLocalHooks("change");
  }
  /**
   * Initialize list with default values for particular indexes.
   *
   * @private
   * @param {number} length New length of indexed list.
   * @returns {IndexMap}
   */
  init(e) {
    return this.setDefaultValues(e), this.runLocalHooks("init"), this;
  }
  /**
   * Add values to the list.
   *
   * Note: Please keep in mind that `change` hook triggered by the method may not update cache of a collection immediately.
   *
   * @private
   */
  insert() {
    this.runLocalHooks("change");
  }
  /**
   * Remove values from the list.
   *
   * Note: Please keep in mind that `change` hook triggered by the method may not update cache of a collection immediately.
   *
   * @private
   */
  remove() {
    this.runLocalHooks("change");
  }
  /**
   * Destroys the Map instance.
   */
  destroy() {
    this.clearLocalHooks(), this.indexedValues = null, this.initValueOrFn = null;
  }
}
ft(co, Rs);
function Ug(s, e, t, n) {
  const o = t.length ? t[0] : void 0;
  return [...s.slice(0, o), ...t.map((r, a) => mt(n) ? n(r, a) : n), ...o === void 0 ? [] : s.slice(o)];
}
function zg(s, e) {
  return Ws(s, (t, n) => e.includes(n) === !1);
}
class bi extends co {
  /**
   * Add values to list and reorganize.
   *
   * @private
   * @param {number} insertionIndex Position inside the list.
   * @param {Array} insertedIndexes List of inserted indexes.
   */
  insert(e, t) {
    this.indexedValues = Ug(this.indexedValues, e, t, this.initValueOrFn), super.insert(e, t);
  }
  /**
   * Remove values from the list and reorganize.
   *
   * @private
   * @param {Array} removedIndexes List of removed indexes.
   */
  remove(e) {
    this.indexedValues = zg(this.indexedValues, e), super.remove(e);
  }
}
class uh extends bi {
  constructor() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
    super(e);
  }
  /**
   * Get physical indexes which are hidden.
   *
   * Note: Indexes marked as hidden are included in a {@link DataMap}, but aren't rendered.
   *
   * @returns {Array}
   */
  getHiddenIndexes() {
    return cs(this.getValues(), (e, t, n) => (t && e.push(n), e), []);
  }
}
function Yg(s, e, t) {
  return [...s.slice(0, e), ...t, ...s.slice(e)];
}
function wa(s, e) {
  return Ws(s, (t) => e.includes(t) === !1);
}
function Gg(s, e) {
  return Ye(s, (t) => t - e.filter((n) => n < t).length);
}
function jg(s, e) {
  const t = e[0], n = e.length;
  return Ye(s, (o) => o >= t ? o + n : o);
}
function IV(s, e, t) {
  return e = OV(e), e in s ? Object.defineProperty(s, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : s[e] = t, s;
}
function OV(s) {
  var e = AV(s, "string");
  return typeof e == "symbol" ? e : String(e);
}
function AV(s, e) {
  if (typeof s != "object" || s === null)
    return s;
  var t = s[Symbol.toPrimitive];
  if (t !== void 0) {
    var n = t.call(s, e || "default");
    if (typeof n != "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(s);
}
class dh extends co {
  constructor() {
    super(...arguments), IV(this, "orderOfIndexes", []);
  }
  /**
   * Get full list of ordered values for particular indexes.
   *
   * @returns {Array}
   */
  getValues() {
    return this.orderOfIndexes.map((e) => this.indexedValues[e]);
  }
  /**
   * Set new values for particular indexes. Entries are linked and stored in a certain order.
   *
   * Note: Please keep in mind that `change` hook triggered by the method may not update cache of a collection immediately.
   *
   * @param {Array} values List of set values.
   */
  setValues(e) {
    this.orderOfIndexes = [...Array(e.length).keys()], super.setValues(e);
  }
  /**
   * Set value at index and add it to the linked list of entries. Entries are stored in a certain order.
   *
   * Note: Value will be added at the end of the queue.
   *
   * @param {number} index The index.
   * @param {*} value The value to save.
   * @param {number} position Position to which entry will be added.
   *
   * @returns {boolean}
   */
  setValueAtIndex(e, t) {
    let n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : this.orderOfIndexes.length;
    return e < this.indexedValues.length ? (this.indexedValues[e] = t, this.orderOfIndexes.includes(e) === !1 && this.orderOfIndexes.splice(n, 0, e), this.runLocalHooks("change"), !0) : !1;
  }
  /**
   * Clear value for particular index.
   *
   * @param {number} physicalIndex Physical index.
   */
  clearValue(e) {
    this.orderOfIndexes = wa(this.orderOfIndexes, [e]), mt(this.initValueOrFn) ? super.setValueAtIndex(e, this.initValueOrFn(e)) : super.setValueAtIndex(e, this.initValueOrFn);
  }
  /**
   * Get length of the index map.
   *
   * @returns {number}
   */
  getLength() {
    return this.orderOfIndexes.length;
  }
  /**
   * Set default values for elements from `0` to `n`, where `n` is equal to the handled variable.
   *
   * Note: Please keep in mind that `change` hook triggered by the method may not update cache of a collection immediately.
   *
   * @private
   * @param {number} [length] Length of list.
   */
  setDefaultValues() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.indexedValues.length;
    this.orderOfIndexes.length = 0, super.setDefaultValues(e);
  }
  /**
   * Add values to list and reorganize. It updates list of indexes related to ordered values.
   *
   * @private
   * @param {number} insertionIndex Position inside the list.
   * @param {Array} insertedIndexes List of inserted indexes.
   */
  insert(e, t) {
    this.indexedValues = Ug(this.indexedValues, e, t, this.initValueOrFn), this.orderOfIndexes = jg(this.orderOfIndexes, t), super.insert(e, t);
  }
  /**
   * Remove values from the list and reorganize. It updates list of indexes related to ordered values.
   *
   * @private
   * @param {Array} removedIndexes List of removed indexes.
   */
  remove(e) {
    this.indexedValues = zg(this.indexedValues, e), this.orderOfIndexes = wa(this.orderOfIndexes, e), this.orderOfIndexes = Gg(this.orderOfIndexes, e), super.remove(e);
  }
  /**
   * Get every entry containing index and value, respecting order of indexes.
   *
   * @returns {Array}
   */
  getEntries() {
    return this.orderOfIndexes.map((e) => [e, this.getValueAtIndex(e)]);
  }
}
class Na extends bi {
  constructor() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
    super(e);
  }
  /**
   * Get physical indexes which are trimmed.
   *
   * Note: Indexes marked as trimmed aren't included in a {@link DataMap} and aren't rendered.
   *
   * @returns {Array}
   */
  getTrimmedIndexes() {
    return cs(this.getValues(), (e, t, n) => (t && e.push(n), e), []);
  }
}
const ov = /* @__PURE__ */ new Map([["indexesSequence", {
  getListWithInsertedItems: Yg,
  getListWithRemovedItems: wa
}], ["physicallyIndexed", {
  getListWithInsertedItems: Ug,
  getListWithRemovedItems: zg
}]]), MR = (s) => {
  if (ov.has(s) === !1)
    throw new Error(`Alter strategy with ID '${s}' does not exist.`);
  return ov.get(s);
};
class _R extends co {
  constructor() {
    super((e) => e);
  }
  /**
   * Add values to list and reorganize.
   *
   * @private
   * @param {number} insertionIndex Position inside the list.
   * @param {Array} insertedIndexes List of inserted indexes.
   */
  insert(e, t) {
    const n = jg(this.indexedValues, t);
    this.indexedValues = Yg(n, e, t), super.insert(e, t);
  }
  /**
   * Remove values from the list and reorganize.
   *
   * @private
   * @param {Array} removedIndexes List of removed indexes.
   */
  remove(e) {
    const t = wa(this.indexedValues, e);
    this.indexedValues = Gg(t, e), super.remove(e);
  }
}
const rv = /* @__PURE__ */ new Map([["hiding", uh], ["index", co], ["linkedPhysicalIndexToValue", dh], ["physicalIndexToValue", bi], ["trimming", Na]]);
function PV(s) {
  let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
  if (!rv.has(s))
    throw new Error(`The provided map type ("${s}") does not exist.`);
  return new (rv.get(s))(e);
}
class Kg {
  constructor() {
    this.collection = /* @__PURE__ */ new Map();
  }
  /**
   * Register custom index map.
   *
   * @param {string} uniqueName Unique name of the index map.
   * @param {IndexMap} indexMap Index map containing miscellaneous (i.e. Meta data, indexes sequence), updated after remove and insert data actions.
   */
  register(e, t) {
    this.collection.has(e) === !1 && (this.collection.set(e, t), t.addLocalHook("change", () => this.runLocalHooks("change", t)));
  }
  /**
   * Unregister custom index map.
   *
   * @param {string} name Name of the index map.
   */
  unregister(e) {
    const t = this.collection.get(e);
    ue(t) && (t.destroy(), this.collection.delete(e), this.runLocalHooks("change", t));
  }
  /**
   * Unregisters and destroys all collected index map instances.
   */
  unregisterAll() {
    this.collection.forEach((e, t) => this.unregister(t)), this.collection.clear();
  }
  /**
   * Get index map for the provided name.
   *
   * @param {string} [name] Name of the index map.
   * @returns {Array|IndexMap}
   */
  get(e) {
    return wt(e) ? Array.from(this.collection.values()) : this.collection.get(e);
  }
  /**
   * Get collection size.
   *
   * @returns {number}
   */
  getLength() {
    return this.collection.size;
  }
  /**
   * Remove some indexes and corresponding mappings and update values of the others within all collection's index maps.
   *
   * @private
   * @param {Array} removedIndexes List of removed indexes.
   */
  removeFromEvery(e) {
    this.collection.forEach((t) => {
      t.remove(e);
    });
  }
  /**
   * Insert new indexes and corresponding mapping and update values of the others all collection's index maps.
   *
   * @private
   * @param {number} insertionIndex Position inside the actual list.
   * @param {Array} insertedIndexes List of inserted indexes.
   */
  insertToEvery(e, t) {
    this.collection.forEach((n) => {
      n.insert(e, t);
    });
  }
  /**
   * Set default values to index maps within collection.
   *
   * @param {number} length Destination length for all stored maps.
   */
  initEvery(e) {
    this.collection.forEach((t) => {
      t.init(e);
    });
  }
}
ft(Kg, Rs);
class av extends Kg {
  constructor(e, t) {
    super(), this.mergedValuesCache = [], this.aggregationFunction = e, this.fallbackValue = t;
  }
  /**
   * Get merged values for all indexes.
   *
   * @param {boolean} [readFromCache=true] Determine if read results from the cache.
   * @returns {Array}
   */
  getMergedValues() {
    if ((arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !0) === !0)
      return this.mergedValuesCache;
    if (this.getLength() === 0)
      return [];
    const t = Ye(this.get(), (r) => r.getValues()), n = [], o = ue(t[0]) && t[0].length || 0;
    for (let r = 0; r < o; r += 1) {
      const a = [];
      for (let l = 0; l < this.getLength(); l += 1)
        a.push(t[l][r]);
      n.push(a);
    }
    return Ye(n, this.aggregationFunction);
  }
  /**
   * Get merged value for particular index.
   *
   * @param {number} index Index for which we calculate single result.
   * @param {boolean} [readFromCache=true] Determine if read results from the cache.
   * @returns {*}
   */
  getMergedValueAtIndex(e, t) {
    const n = this.getMergedValues(t)[e];
    return ue(n) ? n : this.fallbackValue;
  }
  /**
   * Rebuild cache for the collection.
   */
  updateCache() {
    this.mergedValuesCache = this.getMergedValues(!1);
  }
}
function DV(s, e, t) {
  HV(s, e), e.set(s, t);
}
function HV(s, e) {
  if (e.has(s))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function kV(s, e, t) {
  var n = IR(s, e, "set");
  return NV(s, n, t), t;
}
function NV(s, e, t) {
  if (e.set)
    e.set.call(s, t);
  else {
    if (!e.writable)
      throw new TypeError("attempted to set read only private field");
    e.value = t;
  }
}
function LV(s, e) {
  var t = IR(s, e, "get");
  return $V(s, t);
}
function IR(s, e, t) {
  if (!e.has(s))
    throw new TypeError("attempted to " + t + " private field on non-instance");
  return e.get(s);
}
function $V(s, e) {
  return e.get ? e.get.call(s) : e.value;
}
var _u = /* @__PURE__ */ new WeakMap();
class OR {
  constructor() {
    DV(this, _u, {
      writable: !0,
      value: []
    });
  }
  /**
   * Subscribes to the observer.
   *
   * @param {Function} callback A function that will be called when the new changes will appear.
   * @returns {ChangesObserver}
   */
  subscribe(e) {
    return this.addLocalHook("change", e), this._write(LV(this, _u)), this;
  }
  /**
   * Unsubscribes all subscriptions. After the method call, the observer would not produce
   * any new events.
   *
   * @returns {ChangesObserver}
   */
  unsubscribe() {
    return this.runLocalHooks("unsubscribe"), this.clearLocalHooks(), this;
  }
  /**
   * The write method is executed by the ChangesObservable module. The module produces all
   * changes events that are distributed further by the observer.
   *
   * @private
   * @param {object} changes The chunk of changes produced by the ChangesObservable module.
   * @returns {ChangesObserver}
   */
  _write(e) {
    return e.length > 0 && this.runLocalHooks("change", e), this;
  }
  /**
   * The write method is executed by the ChangesObservable module. The module produces initial
   * changes that will be used to notify new subscribers.
   *
   * @private
   * @param {object} initialChanges The chunk of changes produced by the ChangesObservable module.
   */
  _writeInitialChanges(e) {
    kV(this, _u, e);
  }
}
ft(OR, Rs);
function lv(s, e) {
  const t = [];
  let n = 0, o = 0;
  for (; n < s.length && o < e.length; n++, o++)
    s[n] !== e[o] && t.push({
      op: "replace",
      index: o,
      oldValue: s[n],
      newValue: e[o]
    });
  for (; n < e.length; n++)
    t.push({
      op: "insert",
      index: n,
      oldValue: void 0,
      newValue: e[n]
    });
  for (; o < s.length; o++)
    t.push({
      op: "remove",
      index: o,
      oldValue: s[o],
      newValue: void 0
    });
  return t;
}
function Tr(s, e, t) {
  FV(s, e), e.set(s, t);
}
function FV(s, e) {
  if (e.has(s))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function ks(s, e) {
  var t = AR(s, e, "get");
  return VV(s, t);
}
function VV(s, e) {
  return e.get ? e.get.call(s) : e.value;
}
function al(s, e, t) {
  var n = AR(s, e, "set");
  return BV(s, n, t), t;
}
function AR(s, e, t) {
  if (!e.has(s))
    throw new TypeError("attempted to " + t + " private field on non-instance");
  return e.get(s);
}
function BV(s, e, t) {
  if (e.set)
    e.set.call(s, t);
  else {
    if (!e.writable)
      throw new TypeError("attempted to set read only private field");
    e.value = t;
  }
}
var ll = /* @__PURE__ */ new WeakMap(), Mr = /* @__PURE__ */ new WeakMap(), cl = /* @__PURE__ */ new WeakMap(), hl = /* @__PURE__ */ new WeakMap(), ul = /* @__PURE__ */ new WeakMap();
class WV {
  constructor() {
    let {
      initialIndexValue: e
    } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    Tr(this, ll, {
      writable: !0,
      value: /* @__PURE__ */ new Set()
    }), Tr(this, Mr, {
      writable: !0,
      value: []
    }), Tr(this, cl, {
      writable: !0,
      value: []
    }), Tr(this, hl, {
      writable: !0,
      value: !1
    }), Tr(this, ul, {
      writable: !0,
      value: !1
    }), al(this, ul, e ?? !1);
  }
  /* eslint-disable jsdoc/require-description-complete-sentence */
  /**
   * Creates and returns a new instance of the ChangesObserver object. The resource
   * allows subscribing to the index changes that during the code running may change.
   * Changes are emitted as an array of the index change. Each change is represented
   * separately as an object with `op`, `index`, `oldValue`, and `newValue` props.
   *
   * For example:
   * ```
   * [
   *   { op: 'replace', index: 1, oldValue: false, newValue: true },
   *   { op: 'replace', index: 3, oldValue: false, newValue: true },
   *   { op: 'insert', index: 4, oldValue: false, newValue: true },
   * ]
   * // or when the new index map changes have less indexes
   * [
   *   { op: 'replace', index: 1, oldValue: false, newValue: true },
   *   { op: 'remove', index: 4, oldValue: false, newValue: true },
   * ]
   * ```
   *
   * @returns {ChangesObserver}
   */
  /* eslint-enable jsdoc/require-description-complete-sentence */
  createObserver() {
    const e = new OR();
    return ks(this, ll).add(e), e.addLocalHook("unsubscribe", () => {
      ks(this, ll).delete(e);
    }), e._writeInitialChanges(lv(ks(this, Mr), ks(this, cl))), e;
  }
  /**
   * The method is an entry point for triggering new index map changes. Emitting the
   * changes triggers comparing algorithm which compares last saved state with a new
   * state. When there are some differences, the changes are sent to all subscribers.
   *
   * @param {Array} indexesState An array with index map state.
   */
  emit(e) {
    let t = ks(this, cl);
    (!ks(this, hl) || ks(this, Mr).length !== e.length) && (e.length === 0 ? e = new Array(t.length).fill(ks(this, ul)) : al(this, Mr, new Array(e.length).fill(ks(this, ul))), ks(this, hl) || (al(this, hl, !0), t = ks(this, Mr)));
    const n = lv(t, e);
    ks(this, ll).forEach((o) => o._write(n)), al(this, cl, e);
  }
}
class mf {
  constructor() {
    this.indexesSequence = new _R(), this.trimmingMapsCollection = new av((e) => e.some((t) => t === !0), !1), this.hidingMapsCollection = new av((e) => e.some((t) => t === !0), !1), this.variousMapsCollection = new Kg(), this.hidingChangesObservable = new WV({
      initialIndexValue: !1
    }), this.notTrimmedIndexesCache = [], this.notHiddenIndexesCache = [], this.isBatched = !1, this.indexesSequenceChanged = !1, this.indexesChangeSource = void 0, this.trimmedIndexesChanged = !1, this.hiddenIndexesChanged = !1, this.renderablePhysicalIndexesCache = [], this.fromPhysicalToVisualIndexesCache = /* @__PURE__ */ new Map(), this.fromVisualToRenderableIndexesCache = /* @__PURE__ */ new Map(), this.indexesSequence.addLocalHook("change", () => {
      this.indexesSequenceChanged = !0, this.updateCache(), this.runLocalHooks("indexesSequenceChange", this.indexesChangeSource), this.runLocalHooks("change", this.indexesSequence, null);
    }), this.trimmingMapsCollection.addLocalHook("change", (e) => {
      this.trimmedIndexesChanged = !0, this.updateCache(), this.runLocalHooks("change", e, this.trimmingMapsCollection);
    }), this.hidingMapsCollection.addLocalHook("change", (e) => {
      this.hiddenIndexesChanged = !0, this.updateCache(), this.runLocalHooks("change", e, this.hidingMapsCollection);
    }), this.variousMapsCollection.addLocalHook("change", (e) => {
      this.runLocalHooks("change", e, this.variousMapsCollection);
    });
  }
  /**
   * Suspends the cache update for this map. The method is helpful to group multiple
   * operations, which affects the cache. In this case, the cache will be updated once after
   * calling the `resumeOperations` method.
   */
  suspendOperations() {
    this.isBatched = !0;
  }
  /**
   * Resumes the cache update for this map. It recalculates the cache and restores the
   * default behavior where each map modification updates the cache.
   */
  resumeOperations() {
    this.isBatched = !1, this.updateCache();
  }
  /**
   * It creates and returns the new instance of the ChangesObserver object. The object
   * allows listening to the index changes that happen while the Handsontable is running.
   *
   * @param {string} indexMapType The index map type which we want to observe.
   *                              Currently, only the 'hiding' index map types are observable.
   * @returns {ChangesObserver}
   */
  createChangesObserver(e) {
    if (e !== "hiding")
      throw new Error(`Unsupported index map type "${e}".`);
    return this.hidingChangesObservable.createObserver();
  }
  /**
   * Creates and registers a new `IndexMap` for a specified `IndexMapper` instance.
   *
   * @param {string} indexName A unique index name.
   * @param {string} mapType The index map type (e.g., "hiding", "trimming", "physicalIndexToValue").
   * @param {*} [initValueOrFn] The initial value for the index map.
   * @returns {IndexMap}
   */
  createAndRegisterIndexMap(e, t, n) {
    return this.registerMap(e, PV(t, n));
  }
  /**
   * Register map which provide some index mappings. Type of map determining to which collection it will be added.
   *
   * @param {string} uniqueName Name of the index map. It should be unique.
   * @param {IndexMap} indexMap Registered index map updated on items removal and insertion.
   * @returns {IndexMap}
   */
  registerMap(e, t) {
    if (this.trimmingMapsCollection.get(e) || this.hidingMapsCollection.get(e) || this.variousMapsCollection.get(e))
      throw Error(`Map with name "${e}" has been already registered.`);
    t instanceof Na ? this.trimmingMapsCollection.register(e, t) : t instanceof uh ? this.hidingMapsCollection.register(e, t) : this.variousMapsCollection.register(e, t);
    const n = this.getNumberOfIndexes();
    return n > 0 && t.init(n), t;
  }
  /**
   * Unregister a map with given name.
   *
   * @param {string} name Name of the index map.
   */
  unregisterMap(e) {
    this.trimmingMapsCollection.unregister(e), this.hidingMapsCollection.unregister(e), this.variousMapsCollection.unregister(e);
  }
  /**
   * Unregisters all collected index map instances from all map collection types.
   */
  unregisterAll() {
    this.trimmingMapsCollection.unregisterAll(), this.hidingMapsCollection.unregisterAll(), this.variousMapsCollection.unregisterAll();
  }
  /**
   * Get a physical index corresponding to the given visual index.
   *
   * @param {number} visualIndex Visual index.
   * @returns {number|null} Returns translated index mapped by passed visual index.
   */
  getPhysicalFromVisualIndex(e) {
    const t = this.notTrimmedIndexesCache[e];
    return ue(t) ? t : null;
  }
  /**
   * Get a physical index corresponding to the given renderable index.
   *
   * @param {number} renderableIndex Renderable index.
   * @returns {null|number}
   */
  getPhysicalFromRenderableIndex(e) {
    const t = this.renderablePhysicalIndexesCache[e];
    return ue(t) ? t : null;
  }
  /**
   * Get a visual index corresponding to the given physical index.
   *
   * @param {number} physicalIndex Physical index to search.
   * @returns {number|null} Returns a visual index of the index mapper.
   */
  getVisualFromPhysicalIndex(e) {
    const t = this.fromPhysicalToVisualIndexesCache.get(e);
    return ue(t) ? t : null;
  }
  /**
   * Get a visual index corresponding to the given renderable index.
   *
   * @param {number} renderableIndex Renderable index.
   * @returns {null|number}
   */
  getVisualFromRenderableIndex(e) {
    return this.getVisualFromPhysicalIndex(this.getPhysicalFromRenderableIndex(e));
  }
  /**
   * Get a renderable index corresponding to the given visual index.
   *
   * @param {number} visualIndex Visual index.
   * @returns {null|number}
   */
  getRenderableFromVisualIndex(e) {
    const t = this.fromVisualToRenderableIndexesCache.get(e);
    return ue(t) ? t : null;
  }
  /**
   * Search for the nearest not-hidden row or column.
   *
   * @param {number} fromVisualIndex The visual index of the row or column from which the search starts.<br><br>
   * If the row or column from which the search starts is not hidden, the method simply returns the `fromVisualIndex` number.
   * @param {number} searchDirection The search direction.<br><br>`1`: search from `fromVisualIndex` to the end of the dataset.<br><br>
   * `-1`: search from `fromVisualIndex` to the beginning of the dataset (i.e., to the row or column at visual index `0`).
   * @param {boolean} searchAlsoOtherWayAround `true`: if a search in a first direction failed, try the opposite direction.<br><br>
   * `false`: search in one direction only.
   *
   * @returns {number|null} A visual index of a row or column, or `null`.
   */
  getNearestNotHiddenIndex(e, t) {
    let n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1;
    if (this.getPhysicalFromVisualIndex(e) === null)
      return null;
    if (this.fromVisualToRenderableIndexesCache.has(e))
      return e;
    const r = Array.from(this.fromVisualToRenderableIndexesCache.keys());
    let a = -1;
    return t > 0 ? a = r.findIndex((l) => l > e) : a = r.reverse().findIndex((l) => l < e), a === -1 ? n ? this.getNearestNotHiddenIndex(e, -t, !1) : null : r[a];
  }
  /**
   * Set default values for all indexes in registered index maps.
   *
   * @param {number} [length] Destination length for all stored index maps.
   */
  initToLength() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.getNumberOfIndexes();
    this.notTrimmedIndexesCache = [...new Array(e).keys()], this.notHiddenIndexesCache = [...new Array(e).keys()], this.suspendOperations(), this.indexesChangeSource = "init", this.indexesSequence.init(e), this.indexesChangeSource = void 0, this.trimmingMapsCollection.initEvery(e), this.resumeOperations(), this.suspendOperations(), this.hidingMapsCollection.initEvery(e), this.variousMapsCollection.initEvery(e), this.resumeOperations(), this.runLocalHooks("init");
  }
  /**
   * Trim/extend the mappers to fit the desired length.
   *
   * @param {number} length New mapper length.
   */
  fitToLength(e) {
    const t = this.getNumberOfIndexes();
    if (e < t) {
      const n = [...Array(this.getNumberOfIndexes() - e).keys()].map((o) => o + e);
      this.removeIndexes(n);
    } else
      this.insertIndexes(t, e - t);
  }
  /**
   * Get sequence of indexes.
   *
   * @returns {Array} Physical indexes.
   */
  getIndexesSequence() {
    return this.indexesSequence.getValues();
  }
  /**
   * Set completely new indexes sequence.
   *
   * @param {Array} indexes Physical indexes.
   */
  setIndexesSequence(e) {
    this.indexesChangeSource === void 0 && (this.indexesChangeSource = "update"), this.indexesSequence.setValues(e), this.indexesChangeSource === "update" && (this.indexesChangeSource = void 0);
  }
  /**
   * Get all NOT trimmed indexes.
   *
   * Note: Indexes marked as trimmed aren't included in a {@link DataMap} and aren't rendered.
   *
   * @param {boolean} [readFromCache=true] Determine if read indexes from cache.
   * @returns {Array} List of physical indexes. Index of this native array is a "visual index",
   * value of this native array is a "physical index".
   */
  getNotTrimmedIndexes() {
    return (arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !0) === !0 ? this.notTrimmedIndexesCache : this.getIndexesSequence().filter((n) => this.isTrimmed(n) === !1);
  }
  /**
   * Get length of all NOT trimmed indexes.
   *
   * Note: Indexes marked as trimmed aren't included in a {@link DataMap} and aren't rendered.
   *
   * @returns {number}
   */
  getNotTrimmedIndexesLength() {
    return this.getNotTrimmedIndexes().length;
  }
  /**
   * Get all NOT hidden indexes.
   *
   * Note: Indexes marked as hidden are included in a {@link DataMap}, but aren't rendered.
   *
   * @param {boolean} [readFromCache=true] Determine if read indexes from cache.
   * @returns {Array} List of physical indexes. Please keep in mind that index of this native array IS NOT a "visual index".
   */
  getNotHiddenIndexes() {
    return (arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !0) === !0 ? this.notHiddenIndexesCache : this.getIndexesSequence().filter((n) => this.isHidden(n) === !1);
  }
  /**
   * Get length of all NOT hidden indexes.
   *
   * Note: Indexes marked as hidden are included in a {@link DataMap}, but aren't rendered.
   *
   * @returns {number}
   */
  getNotHiddenIndexesLength() {
    return this.getNotHiddenIndexes().length;
  }
  /**
   * Get list of physical indexes (respecting the sequence of indexes) which may be rendered (when they are in a viewport).
   *
   * @param {boolean} [readFromCache=true] Determine if read indexes from cache.
   * @returns {Array} List of physical indexes. Index of this native array is a "renderable index",
   * value of this native array is a "physical index".
   */
  getRenderableIndexes() {
    return (arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !0) === !0 ? this.renderablePhysicalIndexesCache : this.getNotTrimmedIndexes().filter((n) => this.isHidden(n) === !1);
  }
  /**
   * Get length of all NOT trimmed and NOT hidden indexes.
   *
   * @returns {number}
   */
  getRenderableIndexesLength() {
    return this.getRenderableIndexes().length;
  }
  /**
   * Get number of all indexes.
   *
   * @returns {number}
   */
  getNumberOfIndexes() {
    return this.getIndexesSequence().length;
  }
  /**
   * Move indexes in the index mapper.
   *
   * @param {number|Array} movedIndexes Visual index(es) to move.
   * @param {number} finalIndex Visual index being a start index for the moved elements.
   */
  moveIndexes(e, t) {
    typeof e == "number" && (e = [e]);
    const n = Ye(e, (h) => this.getPhysicalFromVisualIndex(h)), o = this.getNotTrimmedIndexesLength(), r = e.length, a = wa(this.getIndexesSequence(), n), l = a.filter((h) => this.isTrimmed(h) === !1);
    let c = a.indexOf(l[l.length - 1]) + 1;
    if (t + r < o) {
      const h = l[t];
      c = a.indexOf(h);
    }
    this.indexesChangeSource = "move", this.setIndexesSequence(Yg(a, c, n)), this.indexesChangeSource = void 0;
  }
  /**
   * Get whether index is trimmed. Index marked as trimmed isn't included in a {@link DataMap} and isn't rendered.
   *
   * @param {number} physicalIndex Physical index.
   * @returns {boolean}
   */
  isTrimmed(e) {
    return this.trimmingMapsCollection.getMergedValueAtIndex(e);
  }
  /**
   * Get whether index is hidden. Index marked as hidden is included in a {@link DataMap}, but isn't rendered.
   *
   * @param {number} physicalIndex Physical index.
   * @returns {boolean}
   */
  isHidden(e) {
    return this.hidingMapsCollection.getMergedValueAtIndex(e);
  }
  /**
   * Insert new indexes and corresponding mapping and update values of the others, for all stored index maps.
   *
   * @private
   * @param {number} firstInsertedVisualIndex First inserted visual index.
   * @param {number} amountOfIndexes Amount of inserted indexes.
   */
  insertIndexes(e, t) {
    const n = this.getNotTrimmedIndexes()[e], o = ue(n) ? n : this.getNumberOfIndexes(), r = this.getIndexesSequence().includes(n) ? this.getIndexesSequence().indexOf(n) : this.getNumberOfIndexes(), a = Ye(new Array(t).fill(o), (l, c) => l + c);
    this.suspendOperations(), this.indexesChangeSource = "insert", this.indexesSequence.insert(r, a), this.indexesChangeSource = void 0, this.trimmingMapsCollection.insertToEvery(r, a), this.hidingMapsCollection.insertToEvery(r, a), this.variousMapsCollection.insertToEvery(r, a), this.resumeOperations();
  }
  /**
   * Remove some indexes and corresponding mappings and update values of the others, for all stored index maps.
   *
   * @private
   * @param {Array} removedIndexes List of removed indexes.
   */
  removeIndexes(e) {
    this.suspendOperations(), this.indexesChangeSource = "remove", this.indexesSequence.remove(e), this.indexesChangeSource = void 0, this.trimmingMapsCollection.removeFromEvery(e), this.hidingMapsCollection.removeFromEvery(e), this.variousMapsCollection.removeFromEvery(e), this.resumeOperations();
  }
  /**
   * Rebuild cache for some indexes. Every action on indexes sequence or indexes skipped in the process of rendering
   * by default reset cache, thus batching some index maps actions is recommended.
   *
   * @private
   * @param {boolean} [force=false] Determine if force cache update.
   */
  updateCache() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
    const t = this.indexesSequenceChanged || this.trimmedIndexesChanged || this.hiddenIndexesChanged;
    (e === !0 || this.isBatched === !1 && t === !0) && (this.trimmingMapsCollection.updateCache(), this.hidingMapsCollection.updateCache(), this.notTrimmedIndexesCache = this.getNotTrimmedIndexes(!1), this.notHiddenIndexesCache = this.getNotHiddenIndexes(!1), this.renderablePhysicalIndexesCache = this.getRenderableIndexes(!1), this.cacheFromPhysicalToVisualIndexes(), this.cacheFromVisualToRenderableIndexes(), this.hiddenIndexesChanged && this.hidingChangesObservable.emit(this.hidingMapsCollection.getMergedValues()), this.runLocalHooks("cacheUpdated", {
      indexesSequenceChanged: this.indexesSequenceChanged,
      trimmedIndexesChanged: this.trimmedIndexesChanged,
      hiddenIndexesChanged: this.hiddenIndexesChanged
    }), this.indexesSequenceChanged = !1, this.trimmedIndexesChanged = !1, this.hiddenIndexesChanged = !1);
  }
  /**
   * Update cache for translations from physical to visual indexes.
   *
   * @private
   */
  cacheFromPhysicalToVisualIndexes() {
    const e = this.getNotTrimmedIndexesLength();
    this.fromPhysicalToVisualIndexesCache.clear();
    for (let t = 0; t < e; t += 1) {
      const n = this.getPhysicalFromVisualIndex(t);
      this.fromPhysicalToVisualIndexesCache.set(n, t);
    }
  }
  /**
   * Update cache for translations from visual to renderable indexes.
   *
   * @private
   */
  cacheFromVisualToRenderableIndexes() {
    const e = this.getRenderableIndexesLength();
    this.fromVisualToRenderableIndexesCache.clear();
    for (let t = 0; t < e; t += 1) {
      const n = this.getPhysicalFromRenderableIndex(t), o = this.getVisualFromPhysicalIndex(n);
      this.fromVisualToRenderableIndexesCache.set(o, t);
    }
  }
}
ft(mf, Rs);
function UV(s, e) {
  return je(e, (t, n) => {
    wt(s[n]) && (s[n] = t);
  }), s;
}
function PR(s) {
  const t = /^([a-zA-Z]{2})-([a-zA-Z]{2})$/.exec(s);
  return t ? `${t[1].toLowerCase()}-${t[2].toUpperCase()}` : s;
}
function DR(s) {
  ue(s) && bg(ut`Language with code "${s}" was not found. You should register particular language\x20
    before using it. Read more about this issue at: https://docs.handsontable.com/i18n/missing-language-code.`);
}
function zV(s, e) {
  return Array.isArray(s) && Number.isInteger(e) ? s[e] : s;
}
const {
  register: YV,
  getValues: GV
} = Gs("phraseFormatters");
function jV(s, e) {
  YV(s, e);
}
function KV() {
  return GV();
}
jV("pluralize", zV);
const HR = "ContextMenu:items", Ve = HR, Xg = `${Ve}.noItems`, qg = `${Ve}.insertRowAbove`, Zg = `${Ve}.insertRowBelow`, Qg = `${Ve}.insertColumnOnTheLeft`, Jg = `${Ve}.insertColumnOnTheRight`, em = `${Ve}.removeRow`, tm = `${Ve}.removeColumn`, sm = `${Ve}.undo`, nm = `${Ve}.redo`, im = `${Ve}.readOnly`, om = `${Ve}.clearColumn`, rm = `${Ve}.copy`, am = `${Ve}.copyWithHeaders`, lm = `${Ve}.copyWithGroupHeaders`, cm = `${Ve}.copyHeadersOnly`, hm = `${Ve}.cut`, um = `${Ve}.freezeColumn`, dm = `${Ve}.unfreezeColumn`, fm = `${Ve}.mergeCells`, gm = `${Ve}.unmergeCells`, mm = `${Ve}.addComment`, pm = `${Ve}.editComment`, wm = `${Ve}.removeComment`, Cm = `${Ve}.readOnlyComment`, vm = `${Ve}.align`, ym = `${Ve}.align.left`, Sm = `${Ve}.align.center`, bm = `${Ve}.align.right`, Rm = `${Ve}.align.justify`, Em = `${Ve}.align.top`, xm = `${Ve}.align.middle`, Tm = `${Ve}.align.bottom`, Mm = `${Ve}.borders`, _m = `${Ve}.borders.top`, Im = `${Ve}.borders.right`, Om = `${Ve}.borders.bottom`, Am = `${Ve}.borders.left`, Pm = `${Ve}.borders.remove`, Dm = `${Ve}.nestedHeaders.insertChildRow`, Hm = `${Ve}.nestedHeaders.detachFromParent`, km = `${Ve}.hideColumn`, Nm = `${Ve}.showColumn`, Lm = `${Ve}.hideRow`, $m = `${Ve}.showRow`, ws = "Filters:", Ht = `${ws}conditions`, fh = `${Ht}.none`, Fm = `${Ht}.isEmpty`, Vm = `${Ht}.isNotEmpty`, Bm = `${Ht}.isEqualTo`, Wm = `${Ht}.isNotEqualTo`, Um = `${Ht}.beginsWith`, zm = `${Ht}.endsWith`, Ym = `${Ht}.contains`, Gm = `${Ht}.doesNotContain`, XV = `${Ht}.byValue`, jm = `${Ht}.greaterThan`, Km = `${Ht}.greaterThanOrEqualTo`, Xm = `${Ht}.lessThan`, qm = `${Ht}.lessThanOrEqualTo`, Zm = `${Ht}.isBetween`, Qm = `${Ht}.isNotBetween`, Jm = `${Ht}.after`, ep = `${Ht}.before`, tp = `${Ht}.today`, sp = `${Ht}.tomorrow`, np = `${Ht}.yesterday`, ip = `${ws}labels.filterByCondition`, op = `${ws}labels.filterByValue`, rp = `${ws}labels.conjunction`, gh = `${ws}labels.disjunction`, xc = `${ws}values.blankCells`, ap = `${ws}buttons.selectAll`, lp = `${ws}buttons.clear`, cp = `${ws}buttons.ok`, hp = `${ws}buttons.cancel`, up = `${ws}buttons.placeholder.search`, dp = `${ws}buttons.placeholder.value`, fp = `${ws}buttons.placeholder.secondValue`, qV = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  CONTEXTMENU_ITEMS_ADD_COMMENT: mm,
  CONTEXTMENU_ITEMS_ALIGNMENT: vm,
  CONTEXTMENU_ITEMS_ALIGNMENT_BOTTOM: Tm,
  CONTEXTMENU_ITEMS_ALIGNMENT_CENTER: Sm,
  CONTEXTMENU_ITEMS_ALIGNMENT_JUSTIFY: Rm,
  CONTEXTMENU_ITEMS_ALIGNMENT_LEFT: ym,
  CONTEXTMENU_ITEMS_ALIGNMENT_MIDDLE: xm,
  CONTEXTMENU_ITEMS_ALIGNMENT_RIGHT: bm,
  CONTEXTMENU_ITEMS_ALIGNMENT_TOP: Em,
  CONTEXTMENU_ITEMS_BORDERS: Mm,
  CONTEXTMENU_ITEMS_BORDERS_BOTTOM: Om,
  CONTEXTMENU_ITEMS_BORDERS_LEFT: Am,
  CONTEXTMENU_ITEMS_BORDERS_RIGHT: Im,
  CONTEXTMENU_ITEMS_BORDERS_TOP: _m,
  CONTEXTMENU_ITEMS_CLEAR_COLUMN: om,
  CONTEXTMENU_ITEMS_COPY: rm,
  CONTEXTMENU_ITEMS_COPY_COLUMN_HEADERS_ONLY: cm,
  CONTEXTMENU_ITEMS_COPY_WITH_COLUMN_GROUP_HEADERS: lm,
  CONTEXTMENU_ITEMS_COPY_WITH_COLUMN_HEADERS: am,
  CONTEXTMENU_ITEMS_CUT: hm,
  CONTEXTMENU_ITEMS_EDIT_COMMENT: pm,
  CONTEXTMENU_ITEMS_FREEZE_COLUMN: um,
  CONTEXTMENU_ITEMS_HIDE_COLUMN: km,
  CONTEXTMENU_ITEMS_HIDE_ROW: Lm,
  CONTEXTMENU_ITEMS_INSERT_LEFT: Qg,
  CONTEXTMENU_ITEMS_INSERT_RIGHT: Jg,
  CONTEXTMENU_ITEMS_MERGE_CELLS: fm,
  CONTEXTMENU_ITEMS_NESTED_ROWS_DETACH_CHILD: Hm,
  CONTEXTMENU_ITEMS_NESTED_ROWS_INSERT_CHILD: Dm,
  CONTEXTMENU_ITEMS_NO_ITEMS: Xg,
  CONTEXTMENU_ITEMS_READ_ONLY: im,
  CONTEXTMENU_ITEMS_READ_ONLY_COMMENT: Cm,
  CONTEXTMENU_ITEMS_REDO: nm,
  CONTEXTMENU_ITEMS_REMOVE_BORDERS: Pm,
  CONTEXTMENU_ITEMS_REMOVE_COLUMN: tm,
  CONTEXTMENU_ITEMS_REMOVE_COMMENT: wm,
  CONTEXTMENU_ITEMS_REMOVE_ROW: em,
  CONTEXTMENU_ITEMS_ROW_ABOVE: qg,
  CONTEXTMENU_ITEMS_ROW_BELOW: Zg,
  CONTEXTMENU_ITEMS_SHOW_COLUMN: Nm,
  CONTEXTMENU_ITEMS_SHOW_ROW: $m,
  CONTEXTMENU_ITEMS_UNDO: sm,
  CONTEXTMENU_ITEMS_UNFREEZE_COLUMN: dm,
  CONTEXTMENU_ITEMS_UNMERGE_CELLS: gm,
  CONTEXT_MENU_ITEMS_NAMESPACE: HR,
  FILTERS_BUTTONS_CANCEL: hp,
  FILTERS_BUTTONS_CLEAR: lp,
  FILTERS_BUTTONS_OK: cp,
  FILTERS_BUTTONS_PLACEHOLDER_SEARCH: up,
  FILTERS_BUTTONS_PLACEHOLDER_SECOND_VALUE: fp,
  FILTERS_BUTTONS_PLACEHOLDER_VALUE: dp,
  FILTERS_BUTTONS_SELECT_ALL: ap,
  FILTERS_CONDITIONS_AFTER: Jm,
  FILTERS_CONDITIONS_BEFORE: ep,
  FILTERS_CONDITIONS_BEGINS_WITH: Um,
  FILTERS_CONDITIONS_BETWEEN: Zm,
  FILTERS_CONDITIONS_BY_VALUE: XV,
  FILTERS_CONDITIONS_CONTAINS: Ym,
  FILTERS_CONDITIONS_EMPTY: Fm,
  FILTERS_CONDITIONS_ENDS_WITH: zm,
  FILTERS_CONDITIONS_EQUAL: Bm,
  FILTERS_CONDITIONS_GREATER_THAN: jm,
  FILTERS_CONDITIONS_GREATER_THAN_OR_EQUAL: Km,
  FILTERS_CONDITIONS_LESS_THAN: Xm,
  FILTERS_CONDITIONS_LESS_THAN_OR_EQUAL: qm,
  FILTERS_CONDITIONS_NAMESPACE: Ht,
  FILTERS_CONDITIONS_NONE: fh,
  FILTERS_CONDITIONS_NOT_BETWEEN: Qm,
  FILTERS_CONDITIONS_NOT_CONTAIN: Gm,
  FILTERS_CONDITIONS_NOT_EMPTY: Vm,
  FILTERS_CONDITIONS_NOT_EQUAL: Wm,
  FILTERS_CONDITIONS_TODAY: tp,
  FILTERS_CONDITIONS_TOMORROW: sp,
  FILTERS_CONDITIONS_YESTERDAY: np,
  FILTERS_DIVS_FILTER_BY_CONDITION: ip,
  FILTERS_DIVS_FILTER_BY_VALUE: op,
  FILTERS_LABELS_CONJUNCTION: rp,
  FILTERS_LABELS_DISJUNCTION: gh,
  FILTERS_NAMESPACE: ws,
  FILTERS_VALUES_BLANK_CELLS: xc
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @preserve
 * Authors: Handsoncode
 * Last updated: Nov 15, 2017
 *
 * Description: Definition file for English - United States language-country.
 */
const ZV = {
  languageCode: "en-US",
  [Xg]: "No available options",
  [qg]: "Insert row above",
  [Zg]: "Insert row below",
  [Qg]: "Insert column left",
  [Jg]: "Insert column right",
  [em]: ["Remove row", "Remove rows"],
  [tm]: ["Remove column", "Remove columns"],
  [sm]: "Undo",
  [nm]: "Redo",
  [im]: "Read only",
  [om]: "Clear column",
  [vm]: "Alignment",
  [ym]: "Left",
  [Sm]: "Center",
  [bm]: "Right",
  [Rm]: "Justify",
  [Em]: "Top",
  [xm]: "Middle",
  [Tm]: "Bottom",
  [um]: "Freeze column",
  [dm]: "Unfreeze column",
  [Mm]: "Borders",
  [_m]: "Top",
  [Im]: "Right",
  [Om]: "Bottom",
  [Am]: "Left",
  [Pm]: "Remove border(s)",
  [mm]: "Add comment",
  [pm]: "Edit comment",
  [wm]: "Delete comment",
  [Cm]: "Read-only comment",
  [fm]: "Merge cells",
  [gm]: "Unmerge cells",
  [rm]: "Copy",
  [am]: ["Copy with header", "Copy with headers"],
  [lm]: ["Copy with group header", "Copy with group headers"],
  [cm]: ["Copy header only", "Copy headers only"],
  [hm]: "Cut",
  [Dm]: "Insert child row",
  [Hm]: "Detach from parent",
  [km]: ["Hide column", "Hide columns"],
  [Nm]: ["Show column", "Show columns"],
  [Lm]: ["Hide row", "Hide rows"],
  [$m]: ["Show row", "Show rows"],
  [fh]: "None",
  [Fm]: "Is empty",
  [Vm]: "Is not empty",
  [Bm]: "Is equal to",
  [Wm]: "Is not equal to",
  [Um]: "Begins with",
  [zm]: "Ends with",
  [Ym]: "Contains",
  [Gm]: "Does not contain",
  [jm]: "Greater than",
  [Km]: "Greater than or equal to",
  [Xm]: "Less than",
  [qm]: "Less than or equal to",
  [Zm]: "Is between",
  [Qm]: "Is not between",
  [Jm]: "After",
  [ep]: "Before",
  [tp]: "Today",
  [sp]: "Tomorrow",
  [np]: "Yesterday",
  [xc]: "Blank cells",
  [ip]: "Filter by condition",
  [op]: "Filter by value",
  [rp]: "And",
  [gh]: "Or",
  [ap]: "Select all",
  [lp]: "Clear",
  [cp]: "OK",
  [hp]: "Cancel",
  [up]: "Search",
  [dp]: "Value",
  [fp]: "Second value"
}, kR = ZV, QV = qV, pf = kR.languageCode, {
  register: JV,
  getItem: NR,
  hasItem: eB,
  getValues: tB
} = Gs("languagesDictionaries");
LR(kR);
function LR(s, e) {
  let t = s, n = e;
  return Ge(s) && (n = s, t = n.languageCode), sB(t, n), JV(t, ms(n)), ms(n);
}
function sB(s, e) {
  s !== pf && UV(e, NR(pf));
}
function $R(s) {
  return gp(s) ? ms(NR(s)) : null;
}
function gp(s) {
  return eB(s);
}
function nB() {
  return tB();
}
function FR(s, e, t) {
  const n = $R(s);
  if (n === null)
    return null;
  const o = n[e];
  if (wt(o))
    return null;
  const r = iB(o, t);
  return Array.isArray(r) ? r[0] : r;
}
function iB(s, e) {
  let t = s;
  return D(KV(), (n) => {
    t = n(s, e);
  }), t;
}
function oB(s) {
  let e = PR(s);
  return gp(e) || (e = pf, DR(s)), e;
}
const mh = "active-header", ph = "area", Ca = "cell", mp = "fill", La = "header", pp = "custom-selection";
function rB(s, e, t) {
  return e = aB(e), e in s ? Object.defineProperty(s, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : s[e] = t, s;
}
function aB(s) {
  var e = lB(s, "string");
  return typeof e == "symbol" ? e : String(e);
}
function lB(s, e) {
  if (typeof s != "object" || s === null)
    return s;
  var t = s[Symbol.toPrimitive];
  if (t !== void 0) {
    var n = t.call(s, e || "default");
    if (typeof n != "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(s);
}
class cB extends hV {
  constructor(e, t) {
    super(e, null), rB(this, "visualCellRange", null), this.visualCellRange = t || null, this.commit();
  }
  /**
   * Adds a cell coords to the selection.
   *
   * @param {CellCoords} coords Visual coordinates of a cell.
   * @returns {VisualSelection}
   */
  add(e) {
    return this.visualCellRange === null ? this.visualCellRange = this.settings.createCellRange(e) : this.visualCellRange.expand(e), this;
  }
  /**
   * Clears visual and renderable selection.
   *
   * @returns {VisualSelection}
   */
  clear() {
    return this.visualCellRange = null, super.clear();
  }
  /**
   * Trims the passed cell range object by removing all coordinates that points to the hidden rows
   * or columns. The result is a new cell range object that points only to the visible indexes or `null`.
   *
   * @private
   * @param {CellRange} cellRange Cells range object to be trimmed.
   * @returns {CellRange} Visual non-hidden cells range coordinates.
   */
  trimToVisibleCellsRangeOnly(e) {
    let {
      from: t,
      to: n
    } = e, o = this.getNearestNotHiddenCoords(t, 1), r = this.getNearestNotHiddenCoords(n, -1);
    if (o === null || r === null)
      return null;
    if (o.row > r.row || o.col > r.col) {
      if (!(this.settings.type === "header" || this.settings.type === "active-header"))
        return null;
      o = t, r = n;
    }
    return this.settings.createCellRange(o, o, r);
  }
  /**
   * Gets nearest coordinates that points to the visible row and column indexes. If there are no visible
   * rows and/or columns the `null` value is returned.
   *
   * @private
   * @param {CellCoords} coords The coords object as starting point for finding the nearest visible coordinates.
   * @param {1|-1} rowSearchDirection The search direction. For value 1, it means searching from top to bottom for
   *                                  rows and from left to right for columns. For -1, it is the other way around.
   * @param {1|-1} columnSearchDirection The same as above but for rows.
   * @returns {CellCoords|null} Visual cell coordinates.
   */
  getNearestNotHiddenCoords(e, t) {
    let n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : t;
    const o = this.getNearestNotHiddenIndex(this.settings.rowIndexMapper(), e.row, t);
    if (o === null)
      return null;
    const r = this.getNearestNotHiddenIndex(this.settings.columnIndexMapper(), e.col, n);
    return r === null ? null : this.settings.createCellCoords(o, r);
  }
  /**
   * Gets nearest visual index. If there are no visible rows or columns the `null` value is returned.
   *
   * @private
   * @param {IndexMapper} indexMapper The IndexMapper instance for specific axis.
   * @param {number} visualIndex The index as starting point for finding the nearest visible index.
   * @param {1|-1} searchDirection The search direction. For value 1, it means searching from top to bottom for
   *                               rows and from left to right for columns. For -1, it is the other way around.
   * @returns {number|null} Visual row/column index.
   */
  getNearestNotHiddenIndex(e, t, n) {
    if (t < 0)
      return t;
    const o = e.getNearestNotHiddenIndex(t, n);
    return (this.settings.type === "header" || this.settings.type === "active-header") && o === null ? -1 : o;
  }
  /**
   * Override internally stored visual indexes added by the Selection's `add` function. It should be executed
   * at the end of process of adding visual selection coordinates.
   *
   * @returns {VisualSelection}
   */
  commit() {
    if (this.visualCellRange === null)
      return this;
    const e = this.trimToVisibleCellsRangeOnly(this.visualCellRange);
    return e === null ? this.cellRange = null : this.cellRange = this.createRenderableCellRange(e.from, e.to), this;
  }
  /**
   * Some selection may be a part of broader cell range. This function sync coordinates of current selection
   * and the broader cell range when needed (current selection can't be presented visually).
   *
   * @param {CellRange} broaderCellRange Visual range. Actual cell range may be contained in the broader cell range.
   * When there is no way to represent some cell range visually we try to find range containing just the first visible cell.
   *
   * Warn: Please keep in mind that this function may change coordinates of the handled broader range.
   *
   * @returns {VisualSelection}
   */
  syncWith(e) {
    const t = e.getVerticalDirection() === "N-S" ? 1 : -1, n = e.getHorizontalDirection() === "W-E" ? 1 : -1, o = this.getNearestNotHiddenCoords(e.from.clone().normalize(), t, n);
    if (o !== null && e.overlaps(o)) {
      if (this.cellRange === null) {
        const r = this.settings.visualToRenderableCoords(o);
        this.cellRange = this.settings.createCellRange(r);
      }
      return e.setHighlight(o), this;
    }
    return e.setHighlight(e.from), this;
  }
  /**
   * Returns the top left (TL) and bottom right (BR) selection coordinates (renderable indexes).
   * The method overwrites the original method to support header selection for hidden cells.
   * To make the header selection working, the CellCoords and CellRange have to support not
   * complete coordinates (`null` values for example, `row: null`, `col: 2`).
   *
   * @returns {Array} Returns array of coordinates for example `[1, 1, 5, 5]`.
   */
  getCorners() {
    const {
      from: e,
      to: t
    } = this.cellRange, n = e.row === null || t.row === null, o = e.col === null || t.col === null, r = this.settings.createCellCoords(n ? null : Math.min(e.row, t.row), o ? null : Math.min(e.col, t.col)), a = this.settings.createCellCoords(n ? null : Math.max(e.row, t.row), o ? null : Math.max(e.col, t.col));
    return [r.row, r.col, a.row, a.col];
  }
  /**
   * Returns the top left (or top right in RTL) and bottom right (or bottom left in RTL) selection
   * coordinates (visual indexes).
   *
   * @returns {Array} Returns array of coordinates for example `[1, 1, 5, 5]`.
   */
  getVisualCorners() {
    const e = this.settings.renderableToVisualCoords(this.cellRange.getTopStartCorner()), t = this.settings.renderableToVisualCoords(this.cellRange.getBottomEndCorner());
    return [e.row, e.col, t.row, t.col];
  }
  /**
   * Creates a new CellRange object based on visual coordinates which before object creation are
   * translated to renderable indexes.
   *
   * @param {CellCoords} visualFromCoords The CellCoords object which contains coordinates that
   *                                      points to the beginning of the selection.
   * @param {CellCoords} visualToCoords The CellCoords object which contains coordinates that
   *                                    points to the end of the selection.
   * @returns {CellRange}
   */
  createRenderableCellRange(e, t) {
    const n = this.settings.visualToRenderableCoords(e), o = this.settings.visualToRenderableCoords(t);
    return this.settings.createCellRange(n, n, o);
  }
}
const fr = cB;
function hB(s) {
  let {
    activeHeaderClassName: e,
    ...t
  } = s;
  return new fr({
    highlightHeaderClassName: e,
    ...t,
    selectionType: mh
  });
}
function uB(s) {
  let {
    layerLevel: e,
    areaCornerVisible: t,
    ...n
  } = s;
  return new fr({
    className: "area",
    markIntersections: !0,
    layerLevel: Math.min(e, 7),
    border: {
      width: 1,
      color: "#4b89ff",
      cornerVisible: t
    },
    ...n,
    selectionType: ph
  });
}
function dB(s) {
  let {
    cellCornerVisible: e,
    ...t
  } = s;
  return new fr({
    className: "current",
    border: {
      width: 2,
      color: "#4b89ff",
      cornerVisible: e
    },
    ...t,
    selectionType: Ca
  });
}
function fB(s) {
  let {
    border: e,
    visualCellRange: t,
    ...n
  } = s;
  return new fr({
    ...e,
    ...n,
    selectionType: pp
  }, t);
}
function gB(s) {
  let {
    ...e
  } = s;
  return new fr({
    className: "fill",
    border: {
      width: 1,
      color: "#ff0000"
    },
    ...e,
    selectionType: mp
  });
}
function mB(s) {
  let {
    headerClassName: e,
    rowClassName: t,
    columnClassName: n,
    ...o
  } = s;
  return new fr({
    className: "highlight",
    highlightHeaderClassName: e,
    highlightRowClassName: t,
    highlightColumnClassName: n,
    ...o,
    highlightOnlyClosestHeader: !0,
    selectionType: La
  });
}
const {
  register: gr,
  getItem: pB
} = Gs("highlight/types");
gr(mh, hB);
gr(ph, uB);
gr(Ca, dB);
gr(pp, fB);
gr(mp, gB);
gr(La, mB);
function bo(s, e) {
  return pB(s)({
    type: s,
    ...e
  });
}
class wB {
  constructor(e) {
    this.options = e, this.layerLevel = 0, this.cell = bo(Ca, e), this.fill = bo(mp, e), this.areas = /* @__PURE__ */ new Map(), this.headers = /* @__PURE__ */ new Map(), this.activeHeaders = /* @__PURE__ */ new Map(), this.customSelections = [];
  }
  /**
   * Check if highlight cell rendering is disabled for specified highlight type.
   *
   * @param {string} highlightType Highlight type. Possible values are: `cell`, `area`, `fill` or `header`.
   * @param {CellCoords} coords The CellCoords instance with defined visual coordinates.
   * @returns {boolean}
   */
  isEnabledFor(e, t) {
    let n = e;
    e === Ca && (n = "current");
    let o = this.options.disabledCellSelection(t.row, t.col);
    return typeof o == "string" && (o = [o]), o === !1 || Array.isArray(o) && !o.includes(n);
  }
  /**
   * Set a new layer level to make access to the desire `area` and `header` highlights.
   *
   * @param {number} [level=0] Layer level to use.
   * @returns {Highlight}
   */
  useLayerLevel() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
    return this.layerLevel = e, this;
  }
  /**
   * Get Walkontable Selection instance created for controlling highlight of the currently selected/edited cell.
   *
   * @returns {Selection}
   */
  getCell() {
    return this.cell;
  }
  /**
   * Get Walkontable Selection instance created for controlling highlight of the autofill functionality.
   *
   * @returns {Selection}
   */
  getFill() {
    return this.fill;
  }
  /**
   * Get or create (if not exist in the cache) Walkontable Selection instance created for controlling highlight
   * of the multiple selected cells.
   *
   * @returns {Selection}
   */
  createOrGetArea() {
    const e = this.layerLevel;
    let t;
    return this.areas.has(e) ? t = this.areas.get(e) : (t = bo(ph, {
      layerLevel: e,
      ...this.options
    }), this.areas.set(e, t)), t;
  }
  /**
   * Get all Walkontable Selection instances which describes the state of the visual highlight of the cells.
   *
   * @returns {Selection[]}
   */
  getAreas() {
    return [...this.areas.values()];
  }
  /**
   * Get or create (if not exist in the cache) Walkontable Selection instance created for controlling highlight
   * of the multiple selected header cells.
   *
   * @returns {Selection}
   */
  createOrGetHeader() {
    const e = this.layerLevel;
    let t;
    return this.headers.has(e) ? t = this.headers.get(e) : (t = bo(La, {
      ...this.options
    }), this.headers.set(e, t)), t;
  }
  /**
   * Get all Walkontable Selection instances which describes the state of the visual highlight of the headers.
   *
   * @returns {Selection[]}
   */
  getHeaders() {
    return [...this.headers.values()];
  }
  /**
   * Get or create (if not exist in the cache) Walkontable Selection instance created for controlling highlight
   * of the multiple selected active header cells.
   *
   * @returns {Selection}
   */
  createOrGetActiveHeader() {
    const e = this.layerLevel;
    let t;
    return this.activeHeaders.has(e) ? t = this.activeHeaders.get(e) : (t = bo(mh, {
      ...this.options
    }), this.activeHeaders.set(e, t)), t;
  }
  /**
   * Get all Walkontable Selection instances which describes the state of the visual highlight of the active headers.
   *
   * @returns {Selection[]}
   */
  getActiveHeaders() {
    return [...this.activeHeaders.values()];
  }
  /**
   * Get Walkontable Selection instance created for controlling highlight of the custom selection functionality.
   *
   * @returns {Selection}
   */
  getCustomSelections() {
    return [...this.customSelections.values()];
  }
  /**
   * Add selection to the custom selection instance. The new selection are added to the end of the selection collection.
   *
   * @param {object} selectionInstance The selection instance.
   */
  addCustomSelection(e) {
    this.customSelections.push(bo(pp, {
      ...this.options,
      ...e
    }));
  }
  /**
   * Perform cleaning visual highlights for the whole table.
   */
  clear() {
    this.cell.clear(), this.fill.clear(), D(this.areas.values(), (e) => void e.clear()), D(this.headers.values(), (e) => void e.clear()), D(this.activeHeaders.values(), (e) => void e.clear());
  }
  /**
   * This object can be iterate over using `for of` syntax or using internal `arrayEach` helper.
   *
   * @returns {Selection[]}
   */
  [Symbol.iterator]() {
    return [this.cell, this.fill, ...this.areas.values(), ...this.headers.values(), ...this.activeHeaders.values(), ...this.customSelections][Symbol.iterator]();
  }
}
const CB = wB;
class vB {
  constructor(e) {
    this.ranges = [], this.createCellRange = e;
  }
  /**
   * Check if selected range is empty.
   *
   * @returns {boolean}
   */
  isEmpty() {
    return this.size() === 0;
  }
  /**
   * Set coordinates to the class instance. It clears all previously added coordinates and push `coords`
   * to the collection.
   *
   * @param {CellCoords} coords The CellCoords instance with defined visual coordinates.
   * @returns {SelectionRange}
   */
  set(e) {
    return this.clear(), this.ranges.push(this.createCellRange(e)), this;
  }
  /**
   * Add coordinates to the class instance. The new coordinates are added to the end of the range collection.
   *
   * @param {CellCoords} coords The CellCoords instance with defined visual coordinates.
   * @returns {SelectionRange}
   */
  add(e) {
    return this.ranges.push(this.createCellRange(e)), this;
  }
  /**
   * Removes from the stack the last added coordinates.
   *
   * @returns {SelectionRange}
   */
  pop() {
    return this.ranges.pop(), this;
  }
  /**
   * Get last added coordinates from ranges, it returns a CellRange instance.
   *
   * @returns {CellRange|undefined}
   */
  current() {
    return this.peekByIndex(0);
  }
  /**
   * Get previously added coordinates from ranges, it returns a CellRange instance.
   *
   * @returns {CellRange|undefined}
   */
  previous() {
    return this.peekByIndex(-1);
  }
  /**
   * Returns `true` if coords is within selection coords. This method iterates through all selection layers to check if
   * the coords object is within selection range.
   *
   * @param {CellCoords} coords The CellCoords instance with defined visual coordinates.
   * @returns {boolean}
   */
  includes(e) {
    return this.ranges.some((t) => t.includes(e));
  }
  /**
   * Clear collection.
   *
   * @returns {SelectionRange}
   */
  clear() {
    return this.ranges.length = 0, this;
  }
  /**
   * Get count of added all coordinates added to the selection.
   *
   * @returns {number}
   */
  size() {
    return this.ranges.length;
  }
  /**
   * Peek the coordinates based on the offset where that coordinate resides in the collection.
   *
   * @param {number} [offset=0] An offset where the coordinate will be retrieved from.
   * @returns {CellRange|undefined}
   */
  peekByIndex() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
    const t = this.size() + e - 1;
    let n;
    return t >= 0 && (n = this.ranges[t]), n;
  }
  [Symbol.iterator]() {
    return this.ranges[Symbol.iterator]();
  }
}
const yB = vB;
class VR {
  constructor(e, t) {
    this.range = e, this.options = t;
  }
  /**
   * Selects cell relative to current cell (if possible).
   *
   * @param {number} rowDelta Rows number to move, value can be passed as negative number.
   * @param {number} colDelta Columns number to move, value can be passed as negative number.
   * @param {boolean} [force=false] If `true` the new rows/columns will be created if necessary. Otherwise, row/column will
   *                        be created according to `minSpareRows/minSpareCols` settings of Handsontable.
   * @returns {CellCoords} Visual coordinates after transformation.
   */
  transformStart(e, t) {
    let n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1;
    const o = this.options.createCellCoords(e, t), r = this.range.current().highlight, {
      row: a,
      col: l
    } = this.options.visualToRenderableCoords(r);
    let c = r, h = 0, u = 0;
    if (this.runLocalHooks("beforeTransformStart", o), a !== null && l !== null) {
      let f = this.options.countRows(), g = this.options.countCols();
      const m = this.options.fixedRowsBottom(), w = this.options.minSpareRows(), C = this.options.minSpareCols(), S = this.options.autoWrapRow(), x = this.options.autoWrapCol();
      a + e > f - 1 ? n && w > 0 && !(m && a >= f - m - 1) ? (this.runLocalHooks("insertRowRequire", f), f = this.options.countRows()) : x && (o.row = 1 - f, o.col = l + o.col === g - 1 ? 1 - g : 1) : x && a + o.row < 0 && l + o.col >= 0 && (o.row = f - 1, o.col = l + o.col === 0 ? g - 1 : -1), l + o.col > g - 1 ? n && C > 0 ? (this.runLocalHooks("insertColRequire", g), g = this.options.countCols()) : S && (o.row = a + o.row === f - 1 ? 1 - f : 1, o.col = 1 - g) : S && l + o.col < 0 && a + o.row >= 0 && (o.row = a + o.row === 0 ? f - 1 : -1, o.col = g - 1);
      const T = this.options.createCellCoords(a + o.row, l + o.col);
      h = 0, u = 0, T.row < 0 ? (h = -1, T.row = 0) : T.row > 0 && T.row >= f && (h = 1, T.row = f - 1), T.col < 0 ? (u = -1, T.col = 0) : T.col > 0 && T.col >= g && (u = 1, T.col = g - 1), c = this.options.renderableToVisualCoords(T);
    }
    return this.runLocalHooks("afterTransformStart", c, h, u), c;
  }
  /**
   * Sets selection end cell relative to current selection end cell (if possible).
   *
   * @param {number} rowDelta Rows number to move, value can be passed as negative number.
   * @param {number} colDelta Columns number to move, value can be passed as negative number.
   * @returns {CellCoords} Visual coordinates after transformation.
   */
  transformEnd(e, t) {
    const n = this.options.createCellCoords(e, t), o = this.range.current();
    let r = o.to, a = 0, l = 0;
    this.runLocalHooks("beforeTransformEnd", n);
    const {
      row: c,
      col: h
    } = this.options.visualToRenderableCoords(o.highlight);
    if (c !== null && h !== null) {
      const u = this.options.countRows(), f = this.options.countCols(), {
        row: g,
        col: m
      } = this.options.visualToRenderableCoords(o.to), w = this.options.createCellCoords(g + n.row, m + n.col);
      a = 0, l = 0, w.row < 0 ? (a = -1, w.row = 0) : w.row > 0 && w.row >= u && (a = 1, w.row = u - 1), w.col < 0 ? (l = -1, w.col = 0) : w.col > 0 && w.col >= f && (l = 1, w.col = f - 1), r = this.options.renderableToVisualCoords(w);
    }
    return this.runLocalHooks("afterTransformEnd", r, a, l), r;
  }
}
ft(VR, Rs);
const SB = VR, wh = 0, Ch = 1, BR = 2, wp = 3, bB = [wp, BR], RB = [["number"], ["number", "string"], ["number", "undefined"], ["number", "string", "undefined"]], Iu = Symbol("root"), cv = Symbol("child");
function ir(s) {
  let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : Iu;
  if (e !== Iu && e !== cv)
    throw new Error("The second argument is used internally only and cannot be overwritten.");
  const t = Array.isArray(s), n = e === Iu;
  let o = wh;
  if (t) {
    const r = s[0];
    s.length === 0 ? o = Ch : n && r instanceof Og ? o = wp : n && Array.isArray(r) ? o = ir(r, cv) : s.length >= 2 && s.length <= 4 && !s.some((l, c) => !RB[c].includes(typeof l)) && (o = BR);
  }
  return o;
}
function va(s) {
  let {
    keepDirection: e = !1,
    propToCol: t
  } = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  if (!bB.includes(s))
    throw new Error("Unsupported selection ranges schema type was provided.");
  return function(n) {
    const o = s === wp;
    let r = o ? n.from.row : n[0], a = o ? n.from.col : n[1], l = o ? n.to.row : n[2], c = o ? n.to.col : n[3];
    if (typeof t == "function" && (typeof a == "string" && (a = t(a)), typeof c == "string" && (c = t(c))), wt(l) && (l = r), wt(c) && (c = a), !e) {
      const h = r, u = a, f = l, g = c;
      r = Math.min(h, f), a = Math.min(u, g), l = Math.max(h, f), c = Math.max(u, g);
    }
    return [r, a, l, c];
  };
}
function EB(s) {
  const e = ir(s);
  if (e === wh || e === Ch)
    return [];
  const t = va(e), n = /* @__PURE__ */ new Set();
  D(s, (a) => {
    const [, l, , c] = t(a), h = Math.max(l, 0), u = c - h + 1;
    D(Array.from(new Array(u), (f, g) => h + g), (f) => {
      n.has(f) || n.add(f);
    });
  });
  const o = Array.from(n).sort((a, l) => a - l);
  return cs(o, (a, l, c, h) => (c !== 0 && l === h[c - 1] + 1 ? a[a.length - 1][1] += 1 : a.push([l, 1]), a), []);
}
function xB(s) {
  const e = ir(s);
  if (e === wh || e === Ch)
    return [];
  const t = va(e), n = /* @__PURE__ */ new Set();
  D(s, (a) => {
    const [l, , c] = t(a), h = Math.max(l, 0), u = c - h + 1;
    D(Array.from(new Array(u), (f, g) => h + g), (f) => {
      n.has(f) || n.add(f);
    });
  });
  const o = Array.from(n).sort((a, l) => a - l);
  return cs(o, (a, l, c, h) => (c !== 0 && l === h[c - 1] + 1 ? a[a.length - 1][1] += 1 : a.push([l, 1]), a), []);
}
function ti(s) {
  let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1 / 0;
  return typeof s == "number" && s >= 0 && s < e;
}
class WR {
  constructor(e, t) {
    var n = this;
    this.settings = e, this.tableProps = t, this.inProgress = !1, this.selectedByCorner = !1, this.selectedByRowHeader = /* @__PURE__ */ new Set(), this.selectedByColumnHeader = /* @__PURE__ */ new Set(), this.selectedRange = new yB((o, r, a) => this.tableProps.createCellRange(o, r, a)), this.highlight = new CB({
      headerClassName: e.currentHeaderClassName,
      activeHeaderClassName: e.activeHeaderClassName,
      rowClassName: e.currentRowClassName,
      columnClassName: e.currentColClassName,
      disabledCellSelection: (o, r) => this.tableProps.isDisabledCellSelection(o, r),
      cellCornerVisible: function() {
        return n.isCellCornerVisible(...arguments);
      },
      areaCornerVisible: function() {
        return n.isAreaCornerVisible(...arguments);
      },
      visualToRenderableCoords: (o) => this.tableProps.visualToRenderableCoords(o),
      renderableToVisualCoords: (o) => this.tableProps.renderableToVisualCoords(o),
      createCellCoords: (o, r) => this.tableProps.createCellCoords(o, r),
      createCellRange: (o, r, a) => this.tableProps.createCellRange(o, r, a),
      rowIndexMapper: () => this.tableProps.rowIndexMapper(),
      columnIndexMapper: () => this.tableProps.columnIndexMapper()
    }), this.transformation = new SB(this.selectedRange, {
      countRows: () => this.tableProps.countRowsTranslated(),
      countCols: () => this.tableProps.countColsTranslated(),
      visualToRenderableCoords: (o) => this.tableProps.visualToRenderableCoords(o),
      renderableToVisualCoords: (o) => this.tableProps.renderableToVisualCoords(o),
      createCellCoords: (o, r) => this.tableProps.createCellCoords(o, r),
      fixedRowsBottom: () => e.fixedRowsBottom,
      minSpareRows: () => e.minSpareRows,
      minSpareCols: () => e.minSpareCols,
      autoWrapRow: () => e.autoWrapRow,
      autoWrapCol: () => e.autoWrapCol
    }), this.transformation.addLocalHook("beforeTransformStart", function() {
      for (var o = arguments.length, r = new Array(o), a = 0; a < o; a++)
        r[a] = arguments[a];
      return n.runLocalHooks("beforeModifyTransformStart", ...r);
    }), this.transformation.addLocalHook("afterTransformStart", function() {
      for (var o = arguments.length, r = new Array(o), a = 0; a < o; a++)
        r[a] = arguments[a];
      return n.runLocalHooks("afterModifyTransformStart", ...r);
    }), this.transformation.addLocalHook("beforeTransformEnd", function() {
      for (var o = arguments.length, r = new Array(o), a = 0; a < o; a++)
        r[a] = arguments[a];
      return n.runLocalHooks("beforeModifyTransformEnd", ...r);
    }), this.transformation.addLocalHook("afterTransformEnd", function() {
      for (var o = arguments.length, r = new Array(o), a = 0; a < o; a++)
        r[a] = arguments[a];
      return n.runLocalHooks("afterModifyTransformEnd", ...r);
    }), this.transformation.addLocalHook("insertRowRequire", function() {
      for (var o = arguments.length, r = new Array(o), a = 0; a < o; a++)
        r[a] = arguments[a];
      return n.runLocalHooks("insertRowRequire", ...r);
    }), this.transformation.addLocalHook("insertColRequire", function() {
      for (var o = arguments.length, r = new Array(o), a = 0; a < o; a++)
        r[a] = arguments[a];
      return n.runLocalHooks("insertColRequire", ...r);
    });
  }
  /**
   * Get data layer for current selection.
   *
   * @returns {SelectionRange}
   */
  getSelectedRange() {
    return this.selectedRange;
  }
  /**
   * Indicate that selection process began. It sets internaly `.inProgress` property to `true`.
   */
  begin() {
    this.inProgress = !0;
  }
  /**
   * Indicate that selection process finished. It sets internaly `.inProgress` property to `false`.
   */
  finish() {
    this.runLocalHooks("afterSelectionFinished", Array.from(this.selectedRange)), this.inProgress = !1;
  }
  /**
   * Check if the process of selecting the cell/cells is in progress.
   *
   * @returns {boolean}
   */
  isInProgress() {
    return this.inProgress;
  }
  /**
   * Starts selection range on given coordinate object.
   *
   * @param {CellCoords} coords Visual coords.
   * @param {boolean} [multipleSelection] If `true`, selection will be worked in 'multiple' mode. This option works
   *                                      only when 'selectionMode' is set as 'multiple'. If the argument is not defined
   *                                      the default trigger will be used.
   * @param {boolean} [fragment=false] If `true`, the selection will be treated as a partial selection where the
   *                                   `setRangeEnd` method won't be called on every `setRangeStart` call.
   */
  setRangeStart(e, t) {
    let n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1;
    const o = this.settings.selectionMode === "multiple", r = wt(t) ? this.tableProps.getShortcutManager().isCtrlPressed() : t, a = e.row < 0, l = e.col < 0, c = a && l, h = e.clone();
    this.selectedByCorner = c, this.runLocalHooks(`beforeSetRangeStart${n ? "Only" : ""}`, h), (!o || o && !r && wt(t)) && this.selectedRange.clear(), this.selectedRange.add(h), this.getLayerLevel() === 0 && (this.selectedByRowHeader.clear(), this.selectedByColumnHeader.clear()), !c && l && this.selectedByRowHeader.add(this.getLayerLevel()), !c && a && this.selectedByColumnHeader.add(this.getLayerLevel()), n || this.setRangeEnd(e);
  }
  /**
   * Starts selection range on given coordinate object.
   *
   * @param {CellCoords} coords Visual coords.
   * @param {boolean} [multipleSelection] If `true`, selection will be worked in 'multiple' mode. This option works
   *                                      only when 'selectionMode' is set as 'multiple'. If the argument is not defined
   *                                      the default trigger will be used.
   */
  setRangeStartOnly(e, t) {
    this.setRangeStart(e, t, !0);
  }
  /**
   * Ends selection range on given coordinate object.
   *
   * @param {CellCoords} coords Visual coords.
   */
  setRangeEnd(e) {
    if (this.selectedRange.isEmpty())
      return;
    const t = e.clone();
    this.runLocalHooks("beforeSetRangeEnd", t), this.begin();
    const n = this.selectedRange.current();
    this.settings.selectionMode !== "single" && n.setTo(this.tableProps.createCellCoords(t.row, t.col)), this.highlight.getCell().clear(), this.highlight.isEnabledFor(Ca, n.highlight) && this.highlight.getCell().add(this.selectedRange.current().highlight).commit().syncWith(n);
    const o = this.getLayerLevel();
    o < this.highlight.layerLevel && (D(this.highlight.getAreas(), (c) => void c.clear()), D(this.highlight.getHeaders(), (c) => void c.clear()), D(this.highlight.getActiveHeaders(), (c) => void c.clear())), this.highlight.useLayerLevel(o);
    const r = this.highlight.createOrGetArea(), a = this.highlight.createOrGetHeader(), l = this.highlight.createOrGetActiveHeader();
    if (r.clear(), a.clear(), l.clear(), this.highlight.isEnabledFor(ph, n.highlight) && (this.isMultiple() || o >= 1) && (r.add(n.from).add(n.to).commit(), o === 1)) {
      const c = this.selectedRange.previous();
      this.highlight.useLayerLevel(o - 1).createOrGetArea().add(c.from).commit().syncWith(c), this.highlight.useLayerLevel(o);
    }
    if (this.highlight.isEnabledFor(La, n.highlight)) {
      const c = this.tableProps.countRowsTranslated() === 0, h = this.tableProps.countColsTranslated() === 0;
      let u = n;
      (c || h) && (u = n.clone()), c && (u.from.row = -1), h && (u.from.col = -1), this.settings.selectionMode === "single" ? (this.isSelectedByAnyHeader() && u.from.normalize(), a.add(u.from).commit()) : a.add(u.from).add(u.to).commit(), this.isEntireRowSelected() && this.tableProps.countCols() === n.getWidth() && l.add(this.tableProps.createCellCoords(n.from.row, -1)).add(this.tableProps.createCellCoords(n.to.row, -1)).commit(), this.isEntireColumnSelected() && this.tableProps.countRows() === n.getHeight() && l.add(this.tableProps.createCellCoords(-1, n.from.col)).add(this.tableProps.createCellCoords(-1, n.to.col)).commit();
    }
    this.runLocalHooks("afterSetRangeEnd", e);
  }
  /**
   * Returns information if we have a multiselection. This method check multiselection only on the latest layer of
   * the selection.
   *
   * @returns {boolean}
   */
  isMultiple() {
    const e = nr(!this.selectedRange.current().isSingle());
    return this.runLocalHooks("afterIsMultipleSelection", e), e.value;
  }
  /**
   * Selects cell relative to the current cell (if possible).
   *
   * @param {number} rowDelta Rows number to move, value can be passed as negative number.
   * @param {number} colDelta Columns number to move, value can be passed as negative number.
   * @param {boolean} [force=false] If `true` the new rows/columns will be created if necessary. Otherwise, row/column will
   *                        be created according to `minSpareRows/minSpareCols` settings of Handsontable.
   */
  transformStart(e, t) {
    let n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1;
    this.setRangeStart(this.transformation.transformStart(e, t, n));
  }
  /**
   * Sets selection end cell relative to the current selection end cell (if possible).
   *
   * @param {number} rowDelta Rows number to move, value can be passed as negative number.
   * @param {number} colDelta Columns number to move, value can be passed as negative number.
   */
  transformEnd(e, t) {
    this.setRangeEnd(this.transformation.transformEnd(e, t));
  }
  /**
   * Returns currently used layer level.
   *
   * @returns {number} Returns layer level starting from 0. If no selection was added to the table -1 is returned.
   */
  getLayerLevel() {
    return this.selectedRange.size() - 1;
  }
  /**
   * Returns `true` if currently there is a selection on the screen, `false` otherwise.
   *
   * @returns {boolean}
   */
  isSelected() {
    return !this.selectedRange.isEmpty();
  }
  /**
   * Returns `true` if the selection was applied by clicking to the row header. If the `layerLevel`
   * argument is passed then only that layer will be checked. Otherwise, it checks if any row header
   * was clicked on any selection layer level.
   *
   * @param {number} [layerLevel=this.getLayerLevel()] Selection layer level to check.
   * @returns {boolean}
   */
  isSelectedByRowHeader() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.getLayerLevel();
    return !this.isSelectedByCorner(e) && this.isEntireRowSelected(e);
  }
  /**
   * Returns `true` if the selection consists of entire rows (including their headers). If the `layerLevel`
   * argument is passed then only that layer will be checked. Otherwise, it checks the selection for all layers.
   *
   * @param {number} [layerLevel=this.getLayerLevel()] Selection layer level to check.
   * @returns {boolean}
   */
  isEntireRowSelected() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.getLayerLevel();
    return e === -1 ? this.selectedByRowHeader.size > 0 : this.selectedByRowHeader.has(e);
  }
  /**
   * Returns `true` if the selection was applied by clicking to the column header. If the `layerLevel`
   * argument is passed then only that layer will be checked. Otherwise, it checks if any column header
   * was clicked on any selection layer level.
   *
   * @param {number} [layerLevel=this.getLayerLevel()] Selection layer level to check.
   * @returns {boolean}
   */
  isSelectedByColumnHeader() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.getLayerLevel();
    return !this.isSelectedByCorner() && this.isEntireColumnSelected(e);
  }
  /**
   * Returns `true` if the selection consists of entire columns (including their headers). If the `layerLevel`
   * argument is passed then only that layer will be checked. Otherwise, it checks the selection for all layers.
   *
   * @param {number} [layerLevel=this.getLayerLevel()] Selection layer level to check.
   * @returns {boolean}
   */
  isEntireColumnSelected() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.getLayerLevel();
    return e === -1 ? this.selectedByColumnHeader.size > 0 : this.selectedByColumnHeader.has(e);
  }
  /**
   * Returns `true` if the selection was applied by clicking on the row or column header on any layer level.
   *
   * @returns {boolean}
   */
  isSelectedByAnyHeader() {
    return this.isSelectedByRowHeader(-1) || this.isSelectedByColumnHeader(-1) || this.isSelectedByCorner();
  }
  /**
   * Returns `true` if the selection was applied by clicking on the left-top corner overlay.
   *
   * @returns {boolean}
   */
  isSelectedByCorner() {
    return this.selectedByCorner;
  }
  /**
   * Returns `true` if coords is within selection coords. This method iterates through all selection layers to check if
   * the coords object is within selection range.
   *
   * @param {CellCoords} coords The CellCoords instance with defined visual coordinates.
   * @returns {boolean}
   */
  inInSelection(e) {
    return this.selectedRange.includes(e);
  }
  /**
   * Returns `true` if the cell corner should be visible.
   *
   * @private
   * @returns {boolean} `true` if the corner element has to be visible, `false` otherwise.
   */
  isCellCornerVisible() {
    return this.settings.fillHandle && !this.tableProps.isEditorOpened() && !this.isMultiple();
  }
  /**
   * Returns `true` if the area corner should be visible.
   *
   * @param {number} layerLevel The layer level.
   * @returns {boolean} `true` if the corner element has to be visible, `false` otherwise.
   */
  isAreaCornerVisible(e) {
    return Number.isInteger(e) && e !== this.getLayerLevel() ? !1 : this.settings.fillHandle && !this.tableProps.isEditorOpened() && this.isMultiple();
  }
  /**
   * Clear the selection by resetting the collected ranges and highlights.
   */
  clear() {
    this.selectedRange.clear(), this.highlight.clear();
  }
  /**
   * Deselects all selected cells.
   */
  deselect() {
    this.isSelected() && (this.inProgress = !1, this.clear(), this.runLocalHooks("afterDeselect"));
  }
  /**
   * Select all cells.
   *
   * @param {boolean} [includeRowHeaders=false] `true` If the selection should include the row headers, `false`
   * otherwise.
   * @param {boolean} [includeColumnHeaders=false] `true` If the selection should include the column headers, `false`
   * otherwise.
   */
  selectAll() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1, t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;
    const n = this.tableProps.countRows(), o = this.tableProps.countCols();
    if (!e && !t && (n === 0 || o === 0))
      return;
    const r = this.tableProps.createCellCoords(t ? -1 : 0, e ? -1 : 0), a = this.tableProps.createCellCoords(n - 1, o - 1);
    this.clear(), this.setRangeStartOnly(r), this.selectedByRowHeader.add(this.getLayerLevel()), this.selectedByColumnHeader.add(this.getLayerLevel()), this.setRangeEnd(a), this.finish();
  }
  /**
   * Make multiple, non-contiguous selection specified by `row` and `column` values or a range of cells
   * finishing at `endRow`, `endColumn`. The method supports two input formats, first as an array of arrays such
   * as `[[rowStart, columnStart, rowEnd, columnEnd]]` and second format as an array of CellRange objects.
   * If the passed ranges have another format the exception will be thrown.
   *
   * @param {Array[]|CellRange[]} selectionRanges The coordinates which define what the cells should be selected.
   * @returns {boolean} Returns `true` if selection was successful, `false` otherwise.
   */
  selectCells(e) {
    const t = ir(e);
    if (t === Ch)
      return !1;
    if (t === wh)
      throw new Error(ut`Unsupported format of the selection ranges was passed. To select cells pass\x20
        the coordinates as an array of arrays ([[rowStart, columnStart/columnPropStart, rowEnd,\x20
        columnEnd/columnPropEnd]]) or as an array of CellRange objects.`);
    const n = va(t, {
      propToCol: (l) => this.tableProps.propToCol(l),
      keepDirection: !0
    }), o = this.tableProps.countRows(), r = this.tableProps.countCols(), a = !e.some((l) => {
      const [c, h, u, f] = n(l);
      return !(ti(c, o) && ti(h, r) && ti(u, o) && ti(f, r));
    });
    return a && (this.clear(), D(e, (l) => {
      const [c, h, u, f] = n(l);
      this.setRangeStartOnly(this.tableProps.createCellCoords(c, h), !1), this.setRangeEnd(this.tableProps.createCellCoords(u, f)), this.finish();
    })), a;
  }
  /**
   * Select column specified by `startColumn` visual index or column property or a range of columns finishing at
   * `endColumn`.
   *
   * @param {number|string} startColumn Visual column index or column property from which the selection starts.
   * @param {number|string} [endColumn] Visual column index or column property from to the selection finishes.
   * @param {number} [headerLevel=-1] A row header index that triggers the column selection. The value can
   *                                  take -1 to -N, where -1 means the header closest to the cells.
   *
   * @returns {boolean} Returns `true` if selection was successful, `false` otherwise.
   */
  selectColumns(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : e, n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : -1;
    const o = typeof e == "string" ? this.tableProps.propToCol(e) : e, r = typeof t == "string" ? this.tableProps.propToCol(t) : t, a = this.tableProps.countCols(), l = this.tableProps.countRows(), c = ti(o, a) && ti(r, a);
    return c && (this.setRangeStartOnly(this.tableProps.createCellCoords(n, o)), this.setRangeEnd(this.tableProps.createCellCoords(l - 1, r)), this.finish()), c;
  }
  /**
   * Select row specified by `startRow` visual index or a range of rows finishing at `endRow`.
   *
   * @param {number} startRow Visual row index from which the selection starts.
   * @param {number} [endRow] Visual row index from to the selection finishes.
   * @param {number} [headerLevel=-1] A column header index that triggers the row selection.
   *                                  The value can take -1 to -N, where -1 means the header
   *                                  closest to the cells.
   * @returns {boolean} Returns `true` if selection was successful, `false` otherwise.
   */
  selectRows(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : e, n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : -1;
    const o = this.tableProps.countRows(), r = this.tableProps.countCols(), a = ti(e, o) && ti(t, o);
    return a && (this.setRangeStartOnly(this.tableProps.createCellCoords(e, n)), this.setRangeEnd(this.tableProps.createCellCoords(t, r - 1)), this.finish()), a;
  }
  /**
   * Rewrite the rendered state of the selection as visual selection may have a new representation in the DOM.
   */
  refresh() {
    if (this.highlight.getCustomSelections().forEach((o) => {
      o.commit();
    }), !this.isSelected())
      return;
    const t = this.highlight.getCell(), n = this.getLayerLevel();
    t.commit().syncWith(this.selectedRange.current());
    for (let o = 0; o < this.selectedRange.size(); o += 1) {
      this.highlight.useLayerLevel(o);
      const r = this.highlight.createOrGetArea(), a = this.highlight.createOrGetHeader(), l = this.highlight.createOrGetActiveHeader();
      r.commit(), a.commit(), l.commit();
    }
    this.highlight.useLayerLevel(n);
  }
}
ft(WR, Rs);
const TB = WR, hv = /^(\r\n|\n\r|\r|\n)/, MB = /^[^\t\r\n]+/, uv = /^\t/;
function _B(s) {
  const e = [[""]];
  if (s.length === 0)
    return e;
  let t = 0, n = 0, o;
  for (; s.length > 0 && o !== s.length; )
    if (o = s.length, s.match(uv))
      s = s.replace(uv, ""), t += 1, e[n][t] = "";
    else if (s.match(hv))
      s = s.replace(hv, ""), t = 0, n += 1, e[n] = [""];
    else {
      let r = "";
      if (s.startsWith('"')) {
        let a = 0, l = !0;
        for (; l; ) {
          const c = s.slice(0, 1);
          c === '"' && (a += 1), r += c, s = s.slice(1), (s.length === 0 || s.match(/^[\t\r\n]/) && a % 2 === 0) && (l = !1);
        }
        r = r.replace(/^"/, "").replace(/"$/, "").replace(/["]*/g, (c) => new Array(Math.floor(c.length / 2)).fill('"').join(""));
      } else {
        const a = s.match(MB);
        r = a ? a[0] : "", s = s.slice(r.length);
      }
      e[n][t] = r;
    }
  return e;
}
function Jr(s) {
  let e, t, n, o, r = "", a;
  for (e = 0, t = s.length; e < t; e += 1) {
    for (o = s[e].length, n = 0; n < o; n += 1)
      n > 0 && (r += "	"), a = s[e][n], typeof a == "string" ? a.indexOf(`
`) > -1 ? r += `"${a.replace(/"/g, '""')}"` : r += a : a == null ? r += "" : r += a;
    e !== t - 1 && (r += `
`);
  }
  return r;
}
class zo {
  /**
   * @type {number}
   */
  static get DESTINATION_RENDERER() {
    return 1;
  }
  /**
   * @type {number}
   */
  static get DESTINATION_CLIPBOARD_GENERATOR() {
    return 2;
  }
  /**
   * @param {object} instance Instance of Handsontable.
   * @param {Array} data Array of arrays or array of objects containing data.
   * @param {MetaManager} metaManager The meta manager instance.
   */
  constructor(e, t, n) {
    this.instance = e, this.metaManager = n, this.tableMeta = n.getTableMeta(), this.dataSource = t, this.duckSchema = this.createDuckSchema(), this.colToPropCache = void 0, this.propToColCache = void 0, this.createMap();
  }
  /**
   * Generates cache for property to and from column addressation.
   */
  createMap() {
    const e = this.getSchema();
    if (typeof e > "u")
      throw new Error("trying to create `columns` definition but you didn't provide `schema` nor `data`");
    const t = this.tableMeta.columns;
    let n;
    if (this.colToPropCache = [], this.propToColCache = /* @__PURE__ */ new Map(), t) {
      let o = 0, r = 0, a = !1;
      if (typeof t == "function") {
        const l = yg(e);
        o = l > 0 ? l : this.countFirstRowKeys(), a = !0;
      } else {
        const l = this.tableMeta.maxCols;
        o = Math.min(l, t.length);
      }
      for (n = 0; n < o; n++) {
        const l = a ? t(n) : t[n];
        if (Ge(l)) {
          if (typeof l.data < "u") {
            const c = a ? r : n;
            this.colToPropCache[c] = l.data, this.propToColCache.set(l.data, c);
          }
          r += 1;
        }
      }
    } else
      this.recursiveDuckColumns(e);
  }
  /**
   * Get the amount of physical columns in the first data row.
   *
   * @returns {number} Amount of physical columns in the first data row.
   */
  countFirstRowKeys() {
    return xR(this.dataSource);
  }
  /**
   * Generates columns' translation cache.
   *
   * @param {object} schema An object to generate schema from.
   * @param {number} lastCol The column index.
   * @param {number} parent The property cache for recursive calls.
   * @returns {number}
   */
  recursiveDuckColumns(e, t, n) {
    let o = t, r = n, a;
    return typeof o > "u" && (o = 0, r = ""), typeof e == "object" && !Array.isArray(e) && je(e, (l, c) => {
      l === null ? (a = r + c, this.colToPropCache.push(a), this.propToColCache.set(a, o), o += 1) : o = this.recursiveDuckColumns(l, o, `${c}.`);
    }), o;
  }
  /**
   * Returns property name that corresponds with the given column index.
   *
   * @param {string|number} column Visual column index or another passed argument.
   * @returns {string|number} Column property, physical column index or passed argument.
   */
  colToProp(e) {
    if (Number.isInteger(e) === !1)
      return e;
    const t = this.instance.toPhysicalColumn(e);
    return t === null ? e : this.colToPropCache && ue(this.colToPropCache[t]) ? this.colToPropCache[t] : t;
  }
  /**
   * Translates property into visual column index.
   *
   * @param {string|number} prop Column property which may be also a physical column index.
   * @returns {string|number} Visual column index or passed argument.
   */
  propToCol(e) {
    const t = this.propToColCache.get(e);
    if (ue(t))
      return this.instance.toVisualColumn(t);
    const n = this.instance.toVisualColumn(e);
    return n === null ? e : n;
  }
  /**
   * Returns data's schema.
   *
   * @returns {object}
   */
  getSchema() {
    const e = this.tableMeta.dataSchema;
    return e ? typeof e == "function" ? e() : e : this.duckSchema;
  }
  /**
   * Creates the duck schema based on the current dataset.
   *
   * @returns {Array|object}
   */
  createDuckSchema() {
    return this.dataSource && this.dataSource[0] ? ma(this.dataSource[0]) : {};
  }
  /**
   * Refresh the data schema.
   */
  refreshDuckSchema() {
    this.duckSchema = this.createDuckSchema();
  }
  /**
   * Creates row at the bottom of the data array.
   *
   * @param {number} [index] Physical index of the row before which the new row will be inserted.
   * @param {number} [amount=1] An amount of rows to add.
   * @param {object} [options] Additional options for created rows.
   * @param {string} [options.source] Source of method call.
   * @param {'above'|'below'} [options.mode] Sets where the row is inserted: above or below the passed index.
   * @fires Hooks#afterCreateRow
   * @returns {number} Returns number of created rows.
   */
  createRow(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1, {
      source: n,
      mode: o = "above"
    } = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    const r = this.instance.countSourceRows();
    let a = r, l = 0, c = e;
    if ((typeof c != "number" || c >= r) && (c = r), c < this.instance.countRows() && (a = this.instance.toPhysicalRow(c)), this.instance.runHooks("beforeCreateRow", c, t, n) === !1 || a === null)
      return {
        delta: 0
      };
    const u = this.tableMeta.maxRows, f = this.getSchema().length, g = [];
    for (; l < t && r + l < u; ) {
      let w = null;
      this.instance.dataType === "array" ? this.tableMeta.dataSchema ? w = ms(this.getSchema()) : (w = [], Se(f - 1, () => w.push(null))) : this.instance.dataType === "function" ? w = this.tableMeta.dataSchema(c + l) : (w = {}, lh(w, this.getSchema())), g.push(w), l += 1;
    }
    this.instance.rowIndexMapper.insertIndexes(c, l), o === "below" && (a = Math.min(a + 1, r)), this.spliceData(a, 0, g);
    const m = this.instance.toVisualRow(a);
    return this.instance.countSourceRows() === g.length && this.instance.columnIndexMapper.initToLength(this.instance.getInitialColumnCount()), l > 0 && (e == null ? this.metaManager.createRow(null, l) : n !== "auto" && this.metaManager.createRow(a, t)), this.instance.runHooks("afterCreateRow", m, l, n), this.instance.forceFullRender = !0, {
      delta: l,
      startPhysicalIndex: a
    };
  }
  /**
   * Creates column at the right of the data array.
   *
   * @param {number} [index] Visual index of the column before which the new column will be inserted.
   * @param {number} [amount=1] An amount of columns to add.
   * @param {object} [options] Additional options for created columns.
   * @param {string} [options.source] Source of method call.
   * @param {'start'|'end'} [options.mode] Sets where the column is inserted: at the start (left in [LTR](@/api/options.md#layoutdirection), right in [RTL](@/api/options.md#layoutdirection)) or at the end (right in LTR, left in LTR)
   * the passed index.
   * @fires Hooks#afterCreateCol
   * @returns {number} Returns number of created columns.
   */
  createCol(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1, {
      source: n,
      mode: o = "start"
    } = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    if (!this.instance.isColumnModificationAllowed())
      throw new Error("Cannot create new column. When data source in an object, you can only have as much columns as defined in first data row, data schema or in the 'columns' setting.If you want to be able to add new columns, you have to use array datasource.");
    const r = this.dataSource, a = this.tableMeta.maxCols, l = this.instance.countSourceCols();
    let c = e;
    if ((typeof c != "number" || c >= l) && (c = l), this.instance.runHooks("beforeCreateCol", c, t, n) === !1)
      return {
        delta: 0
      };
    let u = l;
    c < this.instance.countCols() && (u = this.instance.toPhysicalColumn(c));
    const f = this.instance.countSourceRows();
    let g = this.instance.countCols(), m = 0, w = u;
    o === "end" && (w = Math.min(w + 1, l));
    const C = w;
    for (; m < t && g < a; ) {
      if (typeof c != "number" || c >= g)
        if (f > 0)
          for (let x = 0; x < f; x += 1)
            typeof r[x] > "u" && (r[x] = []), r[x].push(null);
        else
          r.push([null]);
      else
        for (let x = 0; x < f; x++)
          r[x].splice(w, 0, null);
      m += 1, w += 1, g += 1;
    }
    this.instance.columnIndexMapper.insertIndexes(c, m), m > 0 && (e == null ? this.metaManager.createColumn(null, m) : n !== "auto" && this.metaManager.createColumn(C, t));
    const S = this.instance.toVisualColumn(C);
    return this.instance.runHooks("afterCreateCol", S, m, n), this.instance.forceFullRender = !0, this.refreshDuckSchema(), {
      delta: m,
      startPhysicalIndex: C
    };
  }
  /**
   * Removes row from the data array.
   *
   * @fires Hooks#beforeRemoveRow
   * @fires Hooks#afterRemoveRow
   * @param {number} [index] Visual index of the row to be removed. If not provided, the last row will be removed.
   * @param {number} [amount=1] Amount of the rows to be removed. If not provided, one row will be removed.
   * @param {string} [source] Source of method call.
   * @returns {boolean} Returns `false` when action was cancelled, otherwise `true`.
   */
  removeRow(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1, n = arguments.length > 2 ? arguments[2] : void 0, o = Number.isInteger(e) ? e : -t;
    const r = this.visualRowsToPhysical(o, t), a = this.instance.countSourceRows();
    if (o = (a + o) % a, this.instance.runHooks("beforeRemoveRow", o, r.length, r, n) === !1)
      return !1;
    const c = r.length;
    if (this.filterData(o, c, r), o < this.instance.countRows()) {
      this.instance.rowIndexMapper.removeIndexes(r);
      const u = ue(this.tableMeta.columns) || ue(this.tableMeta.dataSchema);
      this.instance.rowIndexMapper.getNotTrimmedIndexesLength() === 0 && u === !1 && this.instance.columnIndexMapper.setIndexesSequence([]);
    }
    return r.slice(0).sort((u, f) => f - u).forEach((u) => {
      this.metaManager.removeRow(u, 1);
    }), this.instance.runHooks("afterRemoveRow", o, c, r, n), this.instance.forceFullRender = !0, !0;
  }
  /**
   * Removes column from the data array.
   *
   * @fires Hooks#beforeRemoveCol
   * @fires Hooks#afterRemoveCol
   * @param {number} [index] Visual index of the column to be removed. If not provided, the last column will be removed.
   * @param {number} [amount=1] Amount of the columns to be removed. If not provided, one column will be removed.
   * @param {string} [source] Source of method call.
   * @returns {boolean} Returns `false` when action was cancelled, otherwise `true`.
   */
  removeCol(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1, n = arguments.length > 2 ? arguments[2] : void 0;
    if (this.instance.dataType === "object" || this.tableMeta.columns)
      throw new Error("cannot remove column with object data source or columns option specified");
    let o = typeof e != "number" ? -t : e;
    o = (this.instance.countCols() + o) % this.instance.countCols();
    const r = this.visualColumnsToPhysical(o, t), a = r.slice(0).sort((f, g) => g - f);
    if (this.instance.runHooks("beforeRemoveCol", o, t, r, n) === !1)
      return !1;
    let c = !0;
    const h = a.length, u = this.dataSource;
    for (let f = 0; f < h; f++)
      c && r[0] !== r[f] - f && (c = !1);
    if (c)
      for (let f = 0, g = this.instance.countSourceRows(); f < g; f++)
        u[f].splice(r[0], t), f === 0 && this.metaManager.removeColumn(r[0], t);
    else
      for (let f = 0, g = this.instance.countSourceRows(); f < g; f++)
        for (let m = 0; m < h; m++)
          u[f].splice(a[m], 1), f === 0 && this.metaManager.removeColumn(a[m], 1);
    return o < this.instance.countCols() && (this.instance.columnIndexMapper.removeIndexes(r), this.instance.columnIndexMapper.getNotTrimmedIndexesLength() === 0 && this.instance.rowIndexMapper.setIndexesSequence([])), this.instance.runHooks("afterRemoveCol", o, t, r, n), this.instance.forceFullRender = !0, this.refreshDuckSchema(), !0;
  }
  /**
   * Add/Removes data from the column.
   *
   * @param {number} col Physical index of column in which do you want to do splice.
   * @param {number} index Index at which to start changing the array. If negative, will begin that many elements from the end.
   * @param {number} amount An integer indicating the number of old array elements to remove. If amount is 0, no elements are removed.
   * @param {Array} [elements] The new columns to add.
   * @returns {Array} Returns removed portion of columns.
   */
  spliceCol(e, t, n) {
    const o = this.instance.getDataAtCol(e), r = o.slice(t, t + n), a = o.slice(t + n);
    for (var l = arguments.length, c = new Array(l > 3 ? l - 3 : 0), h = 3; h < l; h++)
      c[h - 3] = arguments[h];
    gC(c, a);
    let u = 0;
    for (; u < n; )
      c.push(null), u += 1;
    return UN(c), this.instance.populateFromArray(t, e, c, null, null, "spliceCol"), r;
  }
  /**
   * Add/Removes data from the row.
   *
   * @param {number} row Physical index of row in which do you want to do splice.
   * @param {number} index Index at which to start changing the array. If negative, will begin that many elements from the end.
   * @param {number} amount An integer indicating the number of old array elements to remove. If amount is 0, no elements are removed.
   * @param {Array} [elements] The new rows to add.
   * @returns {Array} Returns removed portion of rows.
   */
  spliceRow(e, t, n) {
    const o = this.instance.getSourceDataAtRow(e), r = o.slice(t, t + n), a = o.slice(t + n);
    for (var l = arguments.length, c = new Array(l > 3 ? l - 3 : 0), h = 3; h < l; h++)
      c[h - 3] = arguments[h];
    gC(c, a);
    let u = 0;
    for (; u < n; )
      c.push(null), u += 1;
    return this.instance.populateFromArray(e, t, [c], null, null, "spliceRow"), r;
  }
  /**
   * Add/remove row(s) to/from the data source.
   *
   * @param {number} index Physical index of the element to add/remove.
   * @param {number} deleteCount Number of rows to remove.
   * @param {Array<object>} elements Row elements to be added.
   */
  spliceData(e, t, n) {
    if (this.instance.runHooks("beforeDataSplice", e, t, n) !== !1) {
      const r = [...this.dataSource.slice(0, e), ...n, ...this.dataSource.slice(e)];
      this.dataSource.length = 0, r.forEach((a) => this.dataSource.push(a));
    }
  }
  /**
   * Filter unwanted data elements from the data source.
   *
   * @param {number} index Visual index of the element to remove.
   * @param {number} amount Number of rows to add/remove.
   * @param {number} physicalRows Physical row indexes.
   */
  filterData(e, t, n) {
    let o = this.instance.runHooks("filterData", e, t, n);
    Array.isArray(o) === !1 && (o = this.dataSource.filter((r, a) => n.indexOf(a) === -1)), this.dataSource.length = 0, Array.prototype.push.apply(this.dataSource, o);
  }
  /**
   * Returns single value from the data array.
   *
   * @param {number} row Visual row index.
   * @param {number} prop The column property.
   * @returns {*}
   */
  get(e, t) {
    const n = this.instance.toPhysicalRow(e);
    let o = this.dataSource[n];
    const r = this.instance.runHooks("modifyRowData", n);
    o = isNaN(r) ? r : o;
    let a = null;
    if (o && o.hasOwnProperty && Lt(o, t))
      a = o[t];
    else if (typeof t == "string" && t.indexOf(".") > -1) {
      const l = t.split(".");
      let c = o;
      if (!c)
        return null;
      for (let h = 0, u = l.length; h < u; h++)
        if (c = c[l[h]], typeof c > "u")
          return null;
      a = c;
    } else
      typeof t == "function" && (a = t(this.dataSource.slice(n, n + 1)[0]));
    if (this.instance.hasHook("modifyData")) {
      const l = nr(a);
      this.instance.runHooks("modifyData", n, this.propToCol(t), l, "get"), l.isTouched() && (a = l.value);
    }
    return a;
  }
  /**
   * Returns single value from the data array (intended for clipboard copy to an external application).
   *
   * @param {number} row Physical row index.
   * @param {number} prop The column property.
   * @returns {string}
   */
  getCopyable(e, t) {
    return this.instance.getCellMeta(e, this.propToCol(t)).copyable ? this.get(e, t) : "";
  }
  /**
   * Saves single value to the data array.
   *
   * @param {number} row Visual row index.
   * @param {number} prop The column property.
   * @param {string} value The value to set.
   */
  set(e, t, n) {
    const o = this.instance.toPhysicalRow(e);
    let r = n, a = this.dataSource[o];
    const l = this.instance.runHooks("modifyRowData", o);
    if (a = isNaN(l) ? l : a, this.instance.hasHook("modifyData")) {
      const c = nr(r);
      this.instance.runHooks("modifyData", o, this.propToCol(t), c, "set"), c.isTouched() && (r = c.value);
    }
    if (a && a.hasOwnProperty && Lt(a, t))
      a[t] = r;
    else if (typeof t == "string" && t.indexOf(".") > -1) {
      const c = t.split(".");
      let h = a, u = 0, f;
      for (u = 0, f = c.length - 1; u < f; u++)
        typeof h[c[u]] > "u" && (h[c[u]] = {}), h = h[c[u]];
      h[c[u]] = r;
    } else
      typeof t == "function" ? t(this.dataSource.slice(o, o + 1)[0], r) : a[t] = r;
  }
  /**
   * This ridiculous piece of code maps rows Id that are present in table data to those displayed for user.
   * The trick is, the physical row id (stored in settings.data) is not necessary the same
   * as the visual (displayed) row id (e.g. When sorting is applied).
   *
   * @param {number} index Visual row index.
   * @param {number} amount An amount of rows to translate.
   * @returns {number}
   */
  visualRowsToPhysical(e, t) {
    const n = this.instance.countSourceRows(), o = [];
    let r = (n + e) % n, a = t, l;
    for (; r < n && a; )
      l = this.instance.toPhysicalRow(r), o.push(l), a -= 1, r += 1;
    return o;
  }
  /**
   *
   * @param {number} index Visual column index.
   * @param {number} amount An amount of rows to translate.
   * @returns {Array}
   */
  visualColumnsToPhysical(e, t) {
    const n = this.instance.countCols(), o = [];
    let r = (n + e) % n, a = t;
    for (; r < n && a; ) {
      const l = this.instance.toPhysicalColumn(r);
      o.push(l), a -= 1, r += 1;
    }
    return o;
  }
  /**
   * Clears the data array.
   */
  clear() {
    for (let e = 0; e < this.instance.countSourceRows(); e++)
      for (let t = 0; t < this.instance.countCols(); t++)
        this.set(e, this.colToProp(t), "");
  }
  /**
   * Get data length.
   *
   * @returns {number}
   */
  getLength() {
    const e = this.tableMeta.maxRows;
    let t;
    e < 0 || e === 0 ? t = 0 : t = e || 1 / 0;
    const n = this.instance.rowIndexMapper.getNotTrimmedIndexesLength();
    return Math.min(n, t);
  }
  /**
   * Returns the data array.
   *
   * @returns {Array}
   */
  getAll() {
    const e = {
      row: 0,
      col: 0
    }, t = {
      row: Math.max(this.instance.countRows() - 1, 0),
      col: Math.max(this.instance.countCols() - 1, 0)
    };
    return e.row - t.row === 0 && !this.instance.countSourceRows() ? [] : this.getRange(e, t, zo.DESTINATION_RENDERER);
  }
  /**
   * Count the number of columns cached in the `colToProp` cache.
   *
   * @returns {number} Amount of cached columns.
   */
  countCachedColumns() {
    return this.colToPropCache.length;
  }
  /**
   * Returns data range as array.
   *
   * @param {object} [start] Start selection position. Visual indexes.
   * @param {object} [end] End selection position. Visual indexes.
   * @param {number} destination Destination of datamap.get.
   * @returns {Array}
   */
  getRange(e, t, n) {
    const o = [];
    let r, a, l;
    const c = this.tableMeta.maxRows, h = this.tableMeta.maxCols;
    if (c === 0 || h === 0)
      return [];
    const u = n === zo.DESTINATION_CLIPBOARD_GENERATOR ? this.getCopyable : this.get, f = Math.min(Math.max(c - 1, 0), Math.max(e.row, t.row)), g = Math.min(Math.max(h - 1, 0), Math.max(e.col, t.col));
    for (r = Math.min(e.row, t.row); r <= f; r++) {
      l = [];
      const m = r >= 0 ? this.instance.toPhysicalRow(r) : r;
      for (a = Math.min(e.col, t.col); a <= g && m !== null; a++)
        l.push(u.call(this, r, this.colToProp(a)));
      m !== null && o.push(l);
    }
    return o;
  }
  /**
   * Return data as text (tab separated columns).
   *
   * @param {object} [start] Start selection position. Visual indexes.
   * @param {object} [end] End selection position. Visual indexes.
   * @returns {string}
   */
  getText(e, t) {
    return Jr(this.getRange(e, t, zo.DESTINATION_RENDERER));
  }
  /**
   * Return data as copyable text (tab separated columns intended for clipboard copy to an external application).
   *
   * @param {object} [start] Start selection position. Visual indexes.
   * @param {object} [end] End selection position. Visual indexes.
   * @returns {string}
   */
  getCopyableText(e, t) {
    return Jr(this.getRange(e, t, zo.DESTINATION_CLIPBOARD_GENERATOR));
  }
  /**
   * Destroy instance.
   */
  destroy() {
    this.instance = null, this.metaManager = null, this.dataSource = null, this.duckSchema = null, this.colToPropCache.length = 0, this.propToColCache.clear(), this.propToColCache = void 0;
  }
}
const IB = zo, {
  register: OB,
  getItem: AB,
  hasItem: UR,
  getNames: $4,
  getValues: F4
} = Gs("cellTypes");
function PB(s) {
  if (!UR(s))
    throw Error(`You declared cell type "${s}" as a string that is not mapped to a known object.
                 Cell type must be an object or a string mapped to an object registered by
                 "Handsontable.cellTypes.registerCellType" method`);
  return AB(s);
}
function gn(s, e) {
  typeof s != "string" && (e = s, s = e.CELL_TYPE);
  const {
    editor: t,
    renderer: n,
    validator: o
  } = e;
  t && _s(s, t), n && $n(s, n), o && Ur(s, o), OB(s, e);
}
function DB(s, e) {
  var t;
  return s === "CELL_TYPE" ? !1 : ((t = e._automaticallyAssignedMetaProps) === null || t === void 0 ? void 0 : t.has(s)) || !Lt(e, s);
}
function vh(s, e) {
  let t = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : s;
  const n = typeof e.type == "string" ? PB(e.type) : e.type;
  if (s._automaticallyAssignedMetaProps && je(e, (r, a) => void s._automaticallyAssignedMetaProps.delete(a)), !Ge(n))
    return;
  t === s && !s._automaticallyAssignedMetaProps && (s._automaticallyAssignedMetaProps = /* @__PURE__ */ new Set());
  const o = {};
  je(n, (r, a) => {
    if (DB(a, t)) {
      var l;
      o[a] = r, (l = s._automaticallyAssignedMetaProps) === null || l === void 0 || l.add(a);
    }
  }), Ut(s, o);
}
function HB(s) {
  let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
  function t() {
  }
  Si(t, s);
  for (let n = 0; n < e.length; n++)
    t.prototype[e[n]] = void 0;
  return t;
}
function ec(s) {
  return Number.isInteger(s) && s >= 0;
}
function tc(s, e) {
  if (!s())
    throw new Error(`Assertion failed: ${e}`);
}
function dl(s) {
  return s == null;
}
const zR = () => ({
  /* eslint-disable jsdoc/require-description-complete-sentence */
  /**
   * Information on which of the meta properties were added automatically.
   * For example: setting the `renderer` property directly won't extend the `_automaticallyAssignedMetaProps`
   * entry, but setting a `type` will modify it to `Set(3) {'renderer', 'editor', 'validator', ...}`.
   *
   * @private
   * @type {Set}
   * @default undefined
   */
  _automaticallyAssignedMetaProps: void 0,
  /**
   * The `activeHeaderClassName` option lets you add a CSS class name
   * to every currently-active, currently-selected header (when a whole column or row is selected).
   *
   * Read more:
   * - [`currentRowClassName`](#currentRowClassName)
   * - [`currentColClassName`](#currentColClassName)
   * - [`currentHeaderClassName`](#currentHeaderClassName)
   * - [`invalidCellClassName`](#invalidCellClassName)
   * - [`readOnlyCellClassName`](#readOnlyCellClassName)
   * - [`commentedCellClassName`](#commentedCellClassName)
   * - [`noWordWrapClassName`](#noWordWrapClassName)
   * - [`TableClassName`](#TableClassName)
   * - [`className`](#className)
   *
   * @memberof Options#
   * @type {string}
   * @since 0.38.2
   * @default 'ht__active_highlight'
   * @category Core
   *
   * @example
   * ```js
   * // add an `ht__active_highlight` CSS class name
   * // to every currently-active, currently-selected header
   * activeHeaderClassName: 'ht__active_highlight',
   * ```
   */
  activeHeaderClassName: "ht__active_highlight",
  /**
   * The `allowEmpty` option determines whether Handsontable accepts the following values:
   * - `null`
   * - `undefined`
   * - `''`
   *
   * You can set the `allowEmpty` option to one of the following:
   *
   * | Setting          | Description                                                                                                                          |
   * | ---------------- | ------------------------------------------------------------------------------------------------------------------------------------ |
   * | `true` (default) | - Accept `null`, `undefined` and `''` values<br>- Mark cells that contain `null`, `undefined` or `''` values as `valid`              |
   * | `false`          | - Don't accept `null`, `undefined` and `''` values<br>- Mark cells that contain `null`, `undefined` or `''` values with as `invalid` |
   *
   * ::: tip
   * To use the [`allowEmpty`](#allowempty) option, you need to set the [`validator`](#validator) option (or the [`type`](#type) option).
   * :::
   *
   * @memberof Options#
   * @type {boolean}
   * @default true
   * @category Core
   *
   * @example
   * ```js
   * // allow empty values in each cell of the entire grid
   * allowEmpty: true,
   *
   * // or
   * columns: [
   *   {
   *     type: 'date',
   *     dateFormat: 'DD/MM/YYYY',
   *     // allow empty values in each cell of the 'date' column
   *     allowEmpty: true
   *   }
   * ],
   * ```
   */
  allowEmpty: !0,
  /**
   * The `allowHtml` option configures whether [`autocomplete`](@/guides/cell-types/autocomplete-cell-type.md)
   * and [`dropdown`](@/guides/cell-types/dropdown-cell-type.md) cells' [`source`](#source) data
   * is treated as HTML.
   *
   * You can set the `allowHtml` option to one of the following:
   *
   * | Setting           | Description                                         |
   * | ----------------- | --------------------------------------------------- |
   * | `false` (default) | The [`source`](#source) data is not treated as HTML |
   * | `true`            | The [`source`](#source) data is treated as HTML     |
   *
   * __Warning:__ Setting the `allowHtml` option to `true` can cause serious XSS vulnerabilities.
   *
   * Read more:
   * - [Autocomplete cell type](@/guides/cell-types/autocomplete-cell-type.md)
   * - [Dropdown cell type](@/guides/cell-types/dropdown-cell-type.md)
   * - [`source`](#source)
   *
   * @memberof Options#
   * @type {boolean}
   * @default false
   * @category Core
   *
   * @example
   * ```js
   * columns: [
   *   {
   *   // set the `type` of each cell in this column to `autocomplete`
   *   type: 'autocomplete',
   *   // set options available in every `autocomplete` cell of this column
   *   source: ['<strong>foo</strong>', '<strong>bar</strong>']
   *   // use HTML in the `source` list
   *   allowHtml: true,
   *   },
   * ],
   * ```
   */
  allowHtml: !1,
  /**
   * If set to `true`, the `allowInsertColumn` option adds the following menu items to the [context menu](@/guides/accessories-and-menus/context-menu.md):
   * - **Insert column left**
   * - **Insert column right**
   *
   * @memberof Options#
   * @type {boolean}
   * @default true
   * @category Core
   *
   * @example
   * ```js
   * // hide the 'Insert column left' and 'Insert column right' menu items from the context menu
   * allowInsertColumn: false,
   * ```
   */
  allowInsertColumn: !0,
  /**
   * If set to `true`, the `allowInsertRow` option adds the following menu items to the [context menu](@/guides/accessories-and-menus/context-menu.md):
   * - **Insert row above**
   * - **Insert row below**
   *
   * @memberof Options#
   * @type {boolean}
   * @default true
   * @category Core
   *
   * @example
   * ```js
   * // hide the 'Insert row above' and 'Insert row below' menu items from the context menu
   * allowInsertRow: false,
   * ```
   */
  allowInsertRow: !0,
  /**
   * The `allowInvalid` option determines whether Handsontable accepts values
   * that were marked as `invalid` by the [cell validator](@/guides/cell-functions/cell-validator.md).
   *
   * You can set the `allowInvalid` option to one of the following:
   *
   * | Setting          | Description                                                                                                                                                                        |
   * | ---------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
   * | `true` (default) | - Accept `invalid` values<br>- Allow the user to close the [cell editor](@/guides/cell-functions/cell-editor.md) with `invalid` values<br>- Save `invalid` values into the data source                   |
   * | `false`          | - Don't accept `invalid` values<br>- Don't allow the user to close the [cell editor](@/guides/cell-functions/cell-editor.md) with `invalid` values<br>- Don't save `invalid` values into the data source |
   *
   * Setting the `allowInvalid` option to `false` can be useful when used with the [Autocomplete strict mode](@/guides/cell-types/autocomplete-cell-type.md#autocomplete-strict-mode).
   *
   * Read more:
   * - [Cell validator](@/guides/cell-functions/cell-validator.md)
   * - [Cell editor](@/guides/cell-functions/cell-editor.md)
   * - [Autocomplete strict mode](@/guides/cell-types/autocomplete-cell-type.md#autocomplete-strict-mode)
   *
   * @memberof Options#
   * @type {boolean}
   * @default true
   * @category Core
   *
   * @example
   * ```js
   * // don't accept `invalid` values
   * // don't allow the user to close the cell editor
   * // don't save `invalid` values into the data source
   * allowInvalid: false,
   * ```
   */
  allowInvalid: !0,
  /**
   * If set to `true`, the `allowRemoveColumn` option adds the following menu items to the [context menu](@/guides/accessories-and-menus/context-menu.md):
   * - **Remove column**
   *
   * Read more:
   * - [Context menu](@/guides/accessories-and-menus/context-menu.md)
   *
   * @memberof Options#
   * @type {boolean}
   * @default true
   * @category Core
   *
   * @example
   * ```js
   * // hide the 'Remove column' menu item from the context menu
   * allowRemoveColumn: false,
   * ```
   */
  allowRemoveColumn: !0,
  /**
   * If set to `true`, the `allowRemoveRow` option adds the following menu items to the [context menu](@/guides/accessories-and-menus/context-menu.md):
   * - **Remove row**
   *
   * Read more:
   * - [Context menu](@/guides/accessories-and-menus/context-menu.md)
   *
   * @memberof Options#
   * @type {boolean}
   * @default true
   * @category Core
   *
   * @example
   * ```js
   * // hide the 'Remove row' menu item from the context menu
   * allowRemoveRow: false,
   * ```
   */
  allowRemoveRow: !0,
  /**
   * The `autoColumnSize` option configures the [`AutoColumnSize`](@/api/autoColumnSize.md) plugin.
   *
   * You can set the `autoColumnSize` option to one of the following:
   *
   * | Setting   | Description                                                                                  |
   * | --------- | -------------------------------------------------------------------------------------------- |
   * | `false`   | Disable the [`AutoColumnSize`](@/api/autoColumnSize.md) plugin                               |
   * | `true`    | Enable the [`AutoColumnSize`](@/api/autoColumnSize.md) plugin with the default configuration |
   * | An object | Enable the [`AutoColumnSize`](@/api/autoColumnSize.md) plugin and modify the plugin options  |
   *
   * If you set the `autoColumnSize` option to an object, you can set the following [`AutoColumnSize`](@/api/autoColumnSize.md) plugin options:
   *
   * | Property                | Possible values                 | Description                                                                                                    |
   * | ----------------------- | ------------------------------- | -------------------------------------------------------------------------------------------------------------- |
   * | `syncLimit`             | A number \| A percentage string | The number/percentage of columns to keep in sync<br>(default: `50`)                                            |
   * | `useHeaders`            | `true` \| `false`               | When calculating column widths:<br>`true`: use column headers<br>`false`: don't use column headers          |
   * | `samplingRatio`         | A number                        | The number of samples of the same length to be used in column width calculations                               |
   * | `allowSampleDuplicates` | `true` \| `false`               | When calculating column widths:<br>`true`: Allow duplicate samples<br>`false`: Don't allow duplicate samples |
   *
   * By default, the `autoColumnSize` option is set to `undefined`,
   * but the [`AutoColumnSize`](@/api/autoColumnSize.md) plugin acts as enabled.
   * To disable the [`AutoColumnSize`](@/api/autoColumnSize.md) plugin completely,
   * set the `autoColumnSize` option to `false`.
   *
   * Using the [`colWidths`](#colWidths) option forcibly disables the [`AutoColumnSize`](@/api/autoColumnSize.md) plugin.
   *
   * Read more:
   * - [Plugins: `AutoColumnSize`](@/api/autoColumnSize.md)
   *
   * @memberof Options#
   * @type {object|boolean}
   * @default undefined
   * @category AutoColumnSize
   *
   * @example
   * ```js
   * autoColumnSize: {
   *   // keep 40% of columns in sync (the rest of columns: async)
   *   syncLimit: '40%',
   *   // when calculating column widths, use column headers
   *   useHeaders: true,
   *   // when calculating column widths, use 10 samples of the same length
   *   samplingRatio: 10,
   *   // when calculating column widths, allow duplicate samples
   *   allowSampleDuplicates: true
   * },
   * ```
   */
  autoColumnSize: void 0,
  /**
   * The `autoRowSize` option configures the [`AutoRowSize`](@/api/autoRowSize.md) plugin.
   *
   * You can set the `autoRowSize` option to one of the following:
   *
   * | Setting   | Description                                                                            |
   * | --------- | -------------------------------------------------------------------------------------- |
   * | `false`   | Disable the [`AutoRowSize`](@/api/autoRowSize.md) plugin                               |
   * | `true`    | Enable the [`AutoRowSize`](@/api/autoRowSize.md) plugin with the default configuration |
   * | An object | Enable the [`AutoRowSize`](@/api/autoRowSize.md) plugin and modify the plugin options  |
   *
   * To give Handsontable's [scrollbar](https://handsontable.com/docs/8.0.0/demo-scrolling.html)
   * a proper size, set the `autoRowSize` option to `true`.
   *
   * If you set the `autoRowSize` option to an object, you can set the following [`AutoRowSize`](@/api/autoRowSize.md) plugin options:
   *
   * | Property    | Possible values                 | Description                                                       |
   * | ----------- | ------------------------------- | ----------------------------------------------------------------- |
   * | `syncLimit` | A number \| A percentage string | The number/percentage of rows to keep in sync<br>(default: `500`) |
   *
   * Using the [`rowHeights`](#rowHeights) option forcibly disables the [`AutoRowSize`](@/api/autoRowSize.md) plugin.
   *
   * Read more:
   * - [Plugins: `AutoRowSize`](@/api/autoRowSize.md)
   *
   * @memberof Options#
   * @type {object|boolean}
   * @default undefined
   * @category AutoRowSize
   *
   * @example
   * ```js
   * autoRowSize: {
   *   // keep 40% of rows in sync (the rest of rows: async)
   *   syncLimit: '40%'
   * },
   * ```
   */
  autoRowSize: void 0,
  /**
   * With [`autoWrapCol`](#autowrapcol) enabled:
   * - When you select a bottom-most cell, pressing <kbd>**↓**</kbd> takes you to the top-most cell of the next column.
   * - When you select a top-most cell, pressing <kbd>**↑**</kbd> takes you to the bottom-most cell of the previous column.
   *
   * You can set the [`autoWrapCol`](#autowrapcol) option to one of the following:
   *
   * | Setting           | Description                                                                                                                                                                                                                                  |
   * | ----------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
   * | `true`            | When you select a bottom-most cell, pressing <kbd>**↓**</kbd> takes you to the top-most cell of the next column.<br><br>When you select a top-most cell, pressing <kbd>**↑**</kbd> takes you to the bottom-most cell of the previous column. |
   * | `false` (default) | When you select a bottom-most cell, pressing <kbd>**↓**</kbd> doesn't do anything.<br><br>When you select a top-most cell, pressing <kbd>**↑**</kbd> doesn't do anything.                                                                    |
   *
   * @memberof Options#
   * @type {boolean}
   * @default false
   * @category Core
   *
   * @example
   * ```js
   * // when you select a bottom-most cell, pressing ⬇ doesn't do anything
   * // when you select a top-most cell, pressing ⬆ doesn't do anything
   * autoWrapCol: false, // default setting
   *
   * // when you select a bottom-most cell, pressing ⬇ takes you to the top-most cell of the next column
   * // when you select a top-most cell, pressing ⬆ takes you to the bottom-most cell of the previous column
   * autoWrapCol: true,
   * ```
   */
  autoWrapCol: !1,
  /**
   * With [`autoWrapRow`](#autoWrapRow) enabled:
   * - When you select the first cell of a row, pressing <kbd>**←**</kbd>* takes you to the last cell of the row above.
   * - When you select the last cell of a row, pressing <kbd>**→**</kbd>* takes you to the first cell of the row below.
   *
   * You can set the [`autoWrapRow`](#autoWrapRow) option to one of the following:
   *
   * | Setting           | Description                                                                                                                                                                                                                              |
   * | ----------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
   * | `true`            | When you select the first cell of a row, pressing <kbd>**←**</kbd>* takes you to the last cell of the row above.<br><br>When you select the last cell of a row, pressing <kbd>**→**</kbd>* takes you to the first cell of the row below. |
   * | `false` (default) | When you select the first cell of a row, pressing <kbd>**←**</kbd>* doesn't do anything.<br><br>When you select the last cell of a row, pressing <kbd>**→**</kbd>* doesn't do anything.                                                  |
   *
   * \* The exact key depends on your [`layoutDirection`](#layoutdirection) configuration.
   *
   * @memberof Options#
   * @type {boolean}
   * @default false
   * @category Core
   *
   * @example
   * ```js
   * // when you select the first cell of a row, pressing ⬅ doesn't do anything
   * // when you select the last cell of a row, pressing ➡️ doesn't do anything
   * autoWrapRow: false, // default setting
   *
   * // when you select the first cell of a row, pressing ⬅ takes you to the last cell of the row above
   * // when you select the last cell of a row, pressing ➡️ takes you to the first cell of the row below
   * autoWrapRow: true,
   * ```
   */
  autoWrapRow: !1,
  /**
   * @description
   * The `bindRowsWithHeaders` option configures the [`BindRowsWithHeaders`](@/api/bindRowsWithHeaders.md) plugin.
   *
   * You can set the `bindRowsWithHeaders` option to one of the following:
   *
   * | Setting | Description                                                                  |
   * | ------- | ---------------------------------------------------------------------------- |
   * | `false` | Disable the the [`BindRowsWithHeaders`](@/api/bindRowsWithHeaders.md) plugin |
   * | `true`  | Enable the the [`BindRowsWithHeaders`](@/api/bindRowsWithHeaders.md) plugin  |
   *
   * Read more:
   * - [Plugins: `BindRowsWithHeaders`](@/api/bindRowsWithHeaders.md)
   *
   * @memberof Options#
   * @type {boolean|string}
   * @default undefined
   * @category BindRowsWithHeaders
   *
   * @example
   * ```js
   * // enable the `BindRowsWithHeaders` plugin
   * bindRowsWithHeaders: true
   * ```
   */
  bindRowsWithHeaders: void 0,
  /**
   * The `cell` option lets you apply [configuration options](@/guides/getting-started/configuration-options.md) to individual cells.
   *
   * The `cell` option overwrites the [top-level grid options](@/guides/getting-started/configuration-options.md#set-grid-options),
   * and the [`columns`](#columns) options.
   *
   * Read more:
   * - [Configuration options: Setting cell options](@/guides/getting-started/configuration-options.md#set-cell-options)
   * - [`columns`](#columns)
   *
   * @memberof Options#
   * @type {Array[]}
   * @default []
   * @category Core
   *
   * @example
   * ```js
   * // set the `cell` option to an array of objects
   * cell: [
   *   // make the cell with coordinates (0, 0) read-only
   *   {
   *     row: 0,
   *     col: 0,
   *     readOnly: true
   *   }
   * ],
   * ```
   */
  cell: [],
  /**
   * @description
   * The `cells` option lets you apply any other [configuration options](@/guides/getting-started/configuration-options.md) to
   * individual grid elements (columns, rows, cells), based on any logic you implement.
   *
   * The `cells` option overwrites all other options (including options set by [`columns`](#columns) and [`cell`](#cell)).
   * It takes the following parameters:
   *
   * | Parameter | Required | Type             | Description                                                                                                                                                                                                                                                                                                                             |
   * | --------- | -------- | ---------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
   * | `row`     | Yes      | Number           | A physical row index                                                                                                                                                                                                                                                                                                                    |
   * | `column`  | Yes      | Number           | A physical column index                                                                                                                                                                                                                                                                                                                 |
   * | `prop`    | No       | String \| Number | If [`data`](#data) is set to an [array of arrays](@/guides/getting-started/binding-to-data.md#array-of-arrays), `prop` is the same number as `column`.<br><br>If [`data`](#data) is set to an [array of objects](@/guides/getting-started/binding-to-data.md#array-of-objects), `prop` is a property name for the column's data object. |
   *
   * Read more:
   * - [Configuration options: Implementing custom logic](@/guides/getting-started/configuration-options.md#implement-custom-logic)
   * - [Configuration options: Setting row options](@/guides/getting-started/configuration-options.md#set-row-options)
   * - [`columns`](#columns)
   * - [`cell`](#cell)
   *
   * @memberof Options#
   * @type {Function}
   * @default undefined
   * @category Core
   *
   * @example
   * ```js
   * // set the `cells` option to your custom function
   * cells(row, column, prop) {
   *   const cellProperties = { readOnly: false };
   *   const visualRowIndex = this.instance.toVisualRow(row);
   *   const visualColIndex = this.instance.toVisualColumn(column);
   *
   *   if (visualRowIndex === 0 && visualColIndex === 0) {
   *     cellProperties.readOnly = true;
   *   }
   *
   *   return cellProperties;
   * },
   * ```
   */
  cells: void 0,
  /**
   * The `checkedTemplate` option lets you configure what value
   * a checked [`checkbox`](@/guides/cell-types/checkbox-cell-type.md) cell has.
   *
   * You can set the `checkedTemplate` option to one of the following:
   *
   * | Setting          | Description                                                                                                                                                                              |
   * | ---------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
   * | `true` (default) | If a [`checkbox`](@/guides/cell-types/checkbox-cell-type.md) cell is checked,<br>the [`getDataAtCell`](@/api/core.md#getDataAtCell) method for this cell returns `true`                  |
   * | A string         | If a [`checkbox`](@/guides/cell-types/checkbox-cell-type.md) cell is checked,<br>the [`getDataAtCell`](@/api/core.md#getDataAtCell) method for this cell returns a string of your choice |
   *
   * Read more:
   * - [Checkbox cell type: Checkbox template](@/guides/cell-types/checkbox-cell-type.md#checkbox-template)
   * - [`getDataAtCell()`](@/api/core.md#getDataAtCell)
   * - [`uncheckedTemplate`](#uncheckedTemplate)
   *
   * @memberof Options#
   * @type {boolean|string|number}
   * @default true
   * @category Core
   *
   * @example
   * ```js
   * columns: [
   *   {
   *     // set the `type` of each cell in this column to `checkbox`
   *     // when checked, the cell's value is `true`
   *     // when unchecked, the cell's value is `false`
   *     type: 'checkbox',
   *   },
   *   {
   *     // set the `type` of each cell in this column to `checkbox`
   *     type: 'checkbox',
   *     // when checked, the cell's value is `'Yes'`
   *     checkedTemplate: 'Yes',
   *     // when unchecked, the cell's value is `'No'`
   *     uncheckedTemplate: 'No'
   *  }
   * ],
   * ```
   */
  checkedTemplate: void 0,
  /**
   * The `className` option lets you add CSS class names to every currently-selected element.
   *
   * You can set the `className` option to one of the following:
   *
   * | Setting             | Description                                                      |
   * | ------------------- | ---------------------------------------------------------------- |
   * | A string            | Add a single CSS class name to every currently-selected element  |
   * | An array of strings | Add multiple CSS class names to every currently-selected element |
   *
   * ::: tip
   * Don't change the `className` metadata of the [column summary](@/guides/columns/column-summary.md) row.
   * To style the summary row, use the class name assigned automatically by the [`ColumnSummary`](@/api/columnSummary.md) plugin: `columnSummaryResult`.
   * :::
   *
   * To apply different CSS class names on different levels, use Handsontable's [cascading configuration](@/guides/getting-started/configuration-options.md#cascading-configuration).
   *
   * Read more:
   * - [Configuration options: Cascading configuration](@/guides/getting-started/configuration-options.md#cascading-configuration)
   * - [`currentRowClassName`](#currentRowClassName)
   * - [`currentColClassName`](#currentColClassName)
   * - [`currentHeaderClassName`](#currentHeaderClassName)
   * - [`activeHeaderClassName`](#activeHeaderClassName)
   * - [`invalidCellClassName`](#invalidCellClassName)
   * - [`placeholderCellClassName`](#placeholderCellClassName)
   * - [`commentedCellClassName`](#commentedCellClassName)
   * - [`noWordWrapClassName`](#noWordWrapClassName)
   * - [`readOnlyCellClassName`](#readOnlyCellClassName)
   * - [`TableClassName`](#TableClassName)
   *
   * @memberof Options#
   * @type {string|string[]}
   * @default undefined
   * @category Core
   *
   * @example
   * ```js
   * // add a `your-class-name` CSS class name
   * // to every currently-selected element
   * className: 'your-class-name',
   *
   * // add `first-class-name` and `second-class-name` CSS class names
   * // to every currently-selected element
   * className: ['first-class-name', 'second-class-name'],
   * ```
   */
  className: void 0,
  /**
   * The `colHeaders` option configures your grid's column headers.
   *
   * You can set the `colHeaders` option to one of the following:
   *
   * | Setting  | Description                                                          |
   * | -------- | -------------------------------------------------------------------- |
   * | `true`   | Enable the default column headers ('A', 'B', 'C', ...)               |
   * | `false`  | Disable column headers                                               |
   * | An array | Define your own column headers (e.g. `['One', 'Two', 'Three', ...]`) |
   * | A function | Define your own column headers, using a function                     |
   *
   * Read more:
   * - [Column header](@/guides/columns/column-header.md)
   *
   * @memberof Options#
   * @type {boolean|string[]|Function}
   * @default null
   * @category Core
   *
   * @example
   * ```js
   * // enable the default column headers
   * colHeaders: true,
   *
   * // set your own column headers
   * colHeaders: ['One', 'Two', 'Three'],
   *
   * // set your own column headers, using a function
   * colHeaders: function(visualColumnIndex) {
   *   return `${visualColumnIndex} + : AB`;
   * },
   * ```
   */
  colHeaders: null,
  /**
   * @description
   * The `collapsibleColumns` option configures the [`CollapsibleColumns`](@/api/collapsibleColumns.md) plugin.
   *
   * You can set the `collapsibleColumns` option to one of the following:
   *
   * | Setting              | Description                                                                                       |
   * | -------------------- | ------------------------------------------------------------------------------------------------- |
   * | `false`              | Disable the [`CollapsibleColumns`](@/api/collapsibleColumns.md) plugin                            |
   * | `true`               | Enable the [`CollapsibleColumns`](@/api/collapsibleColumns.md) plugin                             |
   * | An array of objects  | Enable the [`CollapsibleColumns`](@/api/collapsibleColumns.md) plugin for selected column headers |
   *
   * Read more:
   * - [Plugins: `CollapsibleColumns`](@/api/collapsibleColumns.md)
   *
   * @memberof Options#
   * @type {boolean|object[]}
   * @default undefined
   * @category CollapsibleColumns
   *
   * @example
   * ```js
   * // enable column collapsing for all headers
   * collapsibleColumns: true,
   *
   * // enable column collapsing for selected headers
   * collapsibleColumns: [
   *   {row: -4, col: 1, collapsible: true},
   *   {row: -3, col: 5, collapsible: true}
   * ],
   * ```
   */
  collapsibleColumns: void 0,
  /**
   * @description
   * The `columnHeaderHeight` option configures the height of column headers.
   *
   * You can set the `columnHeaderHeight` option to one of the following:
   *
   * | Setting  | Description                                         |
   * | -------- | --------------------------------------------------- |
   * | A number | Set the same height for every column header         |
   * | An array | Set different heights for individual column headers |
   *
   * @memberof Options#
   * @type {number|number[]}
   * @default undefined
   * @category Core
   *
   * @example
   * ```js
   * // set the same height for every column header
   * columnHeaderHeight: 25,
   *
   * // set different heights for individual column headers
   * columnHeaderHeight: [25, 30, 55],
   * ```
   */
  columnHeaderHeight: void 0,
  /**
   * @description
   * The `columns` option lets you apply any other [configuration options](@/guides/getting-started/configuration-options.md) to individual columns (or ranges of columns).
   *
   * You can set the `columns` option to one of the following:
   * - An array of objects (each object represents one column)
   * - A function that returns an array of objects
   *
   * The `columns` option overwrites the [top-level grid options](@/guides/getting-started/configuration-options.md#set-grid-options).
   *
   * When you use `columns`, the [`startCols`](#startCols), [`minCols`](#minCols), and [`maxCols`](#maxCols) options are ignored.
   *
   * Read more:
   * - [Configuration options: Setting column options](@/guides/getting-started/configuration-options.md#set-column-options)
   * - [`startCols`](#startCols)
   * - [`minCols`](#minCols)
   * - [`maxCols`](#maxCols)
   * - [`data`](#data)
   *
   * @memberof Options#
   * @type {object[]|Function}
   * @default undefined
   * @category Core
   *
   * @example
   * ```js
   * // set the `columns` option to an array of objects
   * // each object represents one column
   * columns: [
   *   {
   *     // column options for the first (by physical index) column
   *     type: 'numeric',
   *     numericFormat: {
   *       pattern: '0,0.00 $'
   *     }
   *   },
   *   {
   *     // column options for the second (by physical index) column
   *     type: 'text',
   *     readOnly: true
   *   }
   * ],
   *
   * // or set the `columns` option to a function, based on physical indexes
   * columns(index) {
   *   return {
   *     type: index > 0 ? 'numeric' : 'text',
   *     readOnly: index < 1
   *   }
   * }
   * ```
   */
  columns: void 0,
  /**
   * @description
   * The `columnSorting` option configures the [`ColumnSorting`](@/api/columnSorting.md) plugin.
   *
   * You can set the `columnSorting` option to one of the following:
   *
   * | Setting    | Description                                                                                                                            |
   * | ---------- | -------------------------------------------------------------------------------------------------------------------------------------- |
   * | `true`     | Enable the [`ColumnSorting`](@/api/columnSorting.md) plugin with the default configuration                                             |
   * | `false`    | Disable the [`ColumnSorting`](@/api/columnSorting.md) plugin                                                                           |
   * | An object  | - Enable the [`ColumnSorting`](@/api/columnSorting.md) plugin<br>- Modify the [`ColumnSorting`](@/api/columnSorting.md) plugin options |
   *
   * If you set the `columnSorting` option to an object,
   * you can set the following [`ColumnSorting`](@/api/columnSorting.md) plugin options:
   *
   * | Option                   | Possible settings                                                                                                                                |
   * | ------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------ |
   * | `indicator`              | `true`: Display the arrow icon in the column header, to indicate a sortable column<br>`false`: Don't display the arrow icon in the column header  |
   * | `headerAction`           | `true`: Enable clicking on the column header to sort the column<br>`false`: Disable clicking on the column header to sort the column             |
   * | `sortEmptyCells`         | `true`: Sort empty cells as well<br>`false`: Place empty cells at the end                                                                        |
   * | `compareFunctionFactory` | A [custom compare function](@/guides/rows/rows-sorting.md#add-a-custom-comparator)                                                                |
   *
   * If you set the `columnSorting` option to an object,
   * you can also sort individual columns at Handsontable's initialization.
   * In the `columnSorting` object, add an object named `initialConfig`,
   * with the following properties:
   *
   * | Option      | Possible settings   | Description                                                      |
   * | ----------- | ------------------- | ---------------------------------------------------------------- |
   * | `column`    | A number            | The index of the column that you want to sort at initialization  |
   * | `sortOrder` | `'asc'` \| `'desc'` | The sorting order:<br>`'asc'`: ascending<br>`'desc'`: descending |
   *
   * Read more:
   * - [Rows sorting](@/guides/rows/rows-sorting.md)
   * - [Rows sorting: Custom compare functions](@/guides/rows/rows-sorting.md#add-a-custom-comparator)
   * - [`multiColumnSorting`](#multiColumnSorting)
   *
   * @memberof Options#
   * @type {boolean|object}
   * @default undefined
   * @category ColumnSorting
   *
   * @example
   * ```js
   * // enable the `ColumnSorting` plugin
   * columnSorting: true
   *
   * // enable the `ColumnSorting` plugin with custom configuration
   * columnSorting: {
   *   // sort empty cells as well
   *   sortEmptyCells: true,
   *   // display the arrow icon in the column header
   *   indicator: true,
   *   // disable clicking on the column header to sort the column
   *   headerAction: false,
   *   // add a custom compare function
   *   compareFunctionFactory(sortOrder, columnMeta) {
   *     return function(value, nextValue) {
   *       // some value comparisons which will return -1, 0 or 1...
   *     }
   *   }
   * }
   *
   * // enable the `ColumnSorting` plugin
   * columnSorting: {
   *   // at initialization, sort column 1 in ascending order
   *   initialConfig: {
   *     column: 1,
   *     sortOrder: 'asc'
   *   },
   *   // at initialization, sort column 2 in descending order
   *   initialConfig: {
   *     column: 2,
   *     sortOrder: 'desc'
   *   }
   * }
   * ```
   */
  columnSorting: void 0,
  /**
   * @description
   * The `columnSummary` option configures the [`ColumnSummary`](@/api/columnSummary.md) plugin.
   *
   * You can set the `columnSummary` option to an array of objects.
   * Each object configures a single column summary, using the following properties:
   *
   * | Property                 | Possible values                                                         | Description                                                                                                                  |
   * | ------------------------ | ----------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------- |
   * | `sourceColumn`           | A number                                                                | [Column to summarize](@/guides/columns/column-summary.md#step-2-select-cells-that-you-want-to-summarize)                     |
   * | `ranges`                 | An array                                                                | [Ranges of rows to summarize](@/guides/columns/column-summary.md#step-2-select-cells-that-you-want-to-summarize)             |
   * | `type`                   | `'sum'` \| `'min'` \| `'max'` \| `'count'` \| `'average'` \| `'custom'` | [Summary function](@/guides/columns/column-summary.md#step-3-calculate-your-summary)                                         |
   * | `destinationRow`         | A number                                                                | [Destination cell's row coordinate](@/guides/columns/column-summary.md#step-4-provide-the-destination-cell-s-coordinates)    |
   * | `destinationColumn`      | A number                                                                | [Destination cell's column coordinate](@/guides/columns/column-summary.md#step-4-provide-the-destination-cell-s-coordinates) |
   * | `forceNumeric`           | `true`  \| `false`                                                      | [Treat non-numerics as numerics](@/guides/columns/column-summary.md#force-numeric-values)                                  |
   * | `reversedRowCoords`      | `true`  \| `false`                                                      | [Reverse row coordinates](@/guides/columns/column-summary.md#step-5-make-room-for-the-destination-cell)                      |
   * | `suppressDataTypeErrors` | `true`  \| `false`                                                      | [Suppress data type errors](@/guides/columns/column-summary.md#throw-data-type-errors)                                    |
   * | `readOnly`               | `true`  \| `false`                                                      | Make summary cell read-only                                                                                                  |
   * | `roundFloat`             | `true`  \| `false`                                                      | [Round summary result](@/guides/columns/column-summary.md#round-a-column-summary-result)                                  |
   * | `customFunction`         | A function                                                              | [Custom summary function](@/guides/columns/column-summary.md#implement-a-custom-summary-function)                         |
   *
   * Read more:
   * - [Column summary](@/guides/columns/column-summary.md)
   * - [Plugins: `ColumnSummary`](@/api/columnSummary.md)
   *
   * @memberof Options#
   * @type {object[]|Function}
   * @default undefined
   * @category ColumnSummary
   *
   * @example
   * ```js
   * columnSummary: [
   *   {
   *     sourceColumn: 0,
   *     ranges: [
   *       [0, 2], [4], [6, 8]
   *     ],
   *     type: 'custom',
   *     destinationRow: 4,
   *     destinationColumn: 1,
   *     forceNumeric: true,
   *     reversedRowCoords: true,
   *     suppressDataTypeErrors: false,
   *     readOnly: true,
   *     roundFloat: false,
   *     customFunction(endpoint) {
   *        return 100;
   *     }
   *   }
   * ],
   * ```
   */
  columnSummary: void 0,
  /**
   * The `colWidths` option sets columns' widths, in pixels.
   *
   * The default column width is 50px. To change it, set the `colWidths` option to one of the following:
   *
   * | Setting     | Description                                                                                          | Example                                                           |
   * | ----------- | ---------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------- |
   * | A number    | Set the same width for every column                                                                  | `colWidths: 100`                                                  |
   * | A string    | Set the same width for every column                                                                  | `colWidths: '100px'`                                              |
   * | An array    | Set widths separately for each column                                                                | `colWidths: [100, 120, undefined]`                                |
   * | A function  | Set column widths dynamically,<br>on each render                                                     | `colWidths(visualColumnIndex) { return visualColumnIndex * 10; }` |
   * | `undefined` | Used by the [modifyColWidth](@/api/hooks.md#modifyColWidth) hook,<br>to detect column width changes. | `colWidths: undefined`                                            |
   *
   * Setting `colWidths` even for a single column disables the {@link AutoColumnSize} plugin
   * for all columns. For this reason, if you use `colWidths`, we recommend you set a width for each one
   * of your columns. Otherwise, every column with an undefined width defaults back to 50px,
   * which may cut longer columns names.
   *
   * Read more:
   * - [Column width](@/guides/columns/column-width.md)
   * - [Hooks: `modifyColWidth`](@/api/hooks.md#modifyColWidth)
   * - [`autoColumnSize`](#autoColumnSize)
   *
   * @memberof Options#
   * @type {number|number[]|string|string[]|Array<undefined>|Function}
   * @default undefined
   * @category Core
   *
   * @example
   * ```js
   * // set every column's width to 100px
   * colWidths: 100,
   *
   * // set every column's width to 100px
   * colWidths: '100px',
   *
   * // set the first (by visual index) column's width to 100
   * // set the second (by visual index) column's width to 120
   * // set the third (by visual index) column's width to `undefined`, so that it defaults to 50px
   * // set any other column's width to the default 50px (note that longer cell values and column names can get cut)
   * colWidths: [100, 120, undefined],
   *
   * // set each column's width individually, using a function
   * colWidths(visualColumnIndex) {
   *   return visualColumnIndex * 10;
   * },
   * ```
   */
  colWidths: void 0,
  /**
   * The `commentedCellClassName` option lets you add a CSS class name to cells
   * that have comments.
   *
   * Read more:
   * - [Comments](@/guides/cell-features/comments.md)
   * - [`comments`](#comments)
   * - [`readOnlyCellClassName`](#readOnlyCellClassName)
   * - [`currentRowClassName`](#currentRowClassName)
   * - [`currentHeaderClassName`](#currentHeaderClassName)
   * - [`activeHeaderClassName`](#activeHeaderClassName)
   * - [`invalidCellClassName`](#invalidCellClassName)
   * - [`placeholderCellClassName`](#placeholderCellClassName)
   * - [`readOnlyCellClassName`](#readOnlyCellClassName)
   * - [`noWordWrapClassName`](#noWordWrapClassName)
   * - [`TableClassName`](#TableClassName)
   * - [`className`](#className)
   *
   * @memberof Options#
   * @type {string}
   * @default 'htCommentCell'
   * @category Core
   *
   * @example
   * ```js
   * // add a `has-comment` CSS class name
   * // to each cell that has a comment
   * commentedCellClassName: 'has-comment',
   * ```
   */
  commentedCellClassName: "htCommentCell",
  /**
   * @description
   * The `comments` option configures the [`Comments`](@/api/comments.md) plugin.
   *
   * You can set the `comments` option to one of the following:
   *
   * | Setting   | Description                                                                                                                                                                           |
   * | --------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
   * | `true`    | - Enable the [`Comments`](@/api/comments.md) plugin<br>- Add comment menu items to the [context menu](@/guides/accessories-and-menus/context-menu.md)                                 |
   * | `false`   | Disable the [`Comments`](@/api/comments.md) plugin                                                                                                                                    |
   * | An object | - Enable the [`Comments`](@/api/comments.md) plugin<br>- Add comment menu items to the [context menu](@/guides/accessories-and-menus/context-menu.md)<br>- Configure comment settings |
   *
   * If you set the `comments` option to an object, you can configure the following comment options:
   *
   * | Option         | Possible settings           | Description                                         |
   * | -------------- | --------------------------- | --------------------------------------------------- |
   * | `displayDelay` | A number (default: `250`)   | Display comments after a delay (in milliseconds)    |
   * | `readOnly`     | `true` \| `false` (default) | `true`: Make comments read-only                     |
   * | `style`        | An object                   | Set comment boxes' `width` and `height` (in pixels) |
   *
   * Read more:
   * - [Comments](@/guides/cell-features/comments.md)
   * - [Context menu](@/guides/accessories-and-menus/context-menu.md)
   * - [`width`](#width)
   * - [`height`](#height)
   * - [`readOnly`](#readOnly)
   * - [`commentedCellClassName`](#commentedCellClassName)
   *
   * @memberof Options#
   * @type {boolean|object[]}
   * @default false
   * @category Comments
   *
   * @example
   * ```js
   * // enable the `Comments` plugin
   * comments: true,
   *
   * // enable the `Comments` plugin
   * // and configure its settings
   * comments: {
   *   // display all comments with a 1-second delay
   *   displayDelay: 1000,
   *   // make all comments read-only
   *   readOnly: true,
   *   // set the default size of all comment boxes
   *   style: {
   *     width: 300,
   *     height: 100
   *   }
   * }
   * ```
   */
  comments: !1,
  /**
   * @description
   * The `contextMenu` option configures the [`ContextMenu`](@/api/contextMenu.md) plugin.
   *
   * You can set the `contextMenu` option to one of the following:
   *
   * | Setting   | Description                                                                                                                                                                                             |
   * | --------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
   * | `false`   | Disable the [`ContextMenu`](@/api/contextMenu.md) plugin                                                                                                                                                |
   * | `true`    | - Enable the [`ContextMenu`](@/api/contextMenu.md) plugin<br>- Use the [default context menu options](@/guides/accessories-and-menus/context-menu.md#context-menu-with-default-options)                 |
   * | An array  | - Enable the [`ContextMenu`](@/api/contextMenu.md) plugin<br>- Modify [individual context menu options](@/guides/accessories-and-menus/context-menu.md#context-menu-with-specific-options)              |
   * | An object | - Enable the [`ContextMenu`](@/api/contextMenu.md) plugin<br>- Apply a [custom context menu configuration](@/guides/accessories-and-menus/context-menu.md#context-menu-with-a-fully-custom-configuration) |
   *
   * Read more:
   * - [Context menu](@/guides/accessories-and-menus/context-menu.md)
   * - [Context menu: Context menu with default options](@/guides/accessories-and-menus/context-menu.md#context-menu-with-default-options)
   * - [Context menu: Context menu with specific options](@/guides/accessories-and-menus/context-menu.md#context-menu-with-specific-options)
   * - [Context menu: Context menu with fully custom configuration options](@/guides/accessories-and-menus/context-menu.md#context-menu-with-a-fully-custom-configuration)
   * - [Plugins: `ContextMenu`](@/api/contextMenu.md)
   *
   * @memberof Options#
   * @type {boolean|string[]|object}
   * @default undefined
   * @category ContextMenu
   *
   * @example
   * ```js
   * // enable the `ContextMenu` plugin
   * // use the default context menu options
   * contextMenu: true,
   *
   * // enable the `ContextMenu` plugin
   * // and modify individual context menu options
   * contextMenu: ['row_above', 'row_below', '---------', 'undo', 'redo'],
   *
   * // enable the `ContextMenu` plugin
   * // and apply a custom context menu configuration
   * contextMenu: {
   *   items: {
   *     'option1': {
   *       name: 'Option 1'
   *     },
   *     'option2': {
   *       name: 'Option 2',
   *       submenu: {
   *         items: [
   *           {
   *             key: 'option2:suboption1',
   *             name: 'Suboption 1',
   *             callback: function(key, options) {
   *               ...
   *             }
   *           },
   *           ...
   *         ]
   *       }
   *     }
   *   }
   * },
   * ```
   */
  contextMenu: void 0,
  /**
   * @description
   * The `copyable` option determines whether a cell's value can be copied to the clipboard or not.
   *
   * You can set the `copyable` option to one of the following:
   *
   * | Setting                                                                                                        | Description                                                                                                            |
   * | -------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------- |
   * | `true` (default)                                                                                               | - On pressing <kbd>**Ctrl**</kbd>/<kbd>**Cmd**</kbd> + <kbd>**C**</kbd>, add the cell's value to the clipboard         |
   * | `false`<br>(default for the [`password`](@/guides/cell-types/password-cell-type.md) [cell type](#type))        | - On pressing <kbd>**Ctrl**</kbd>/<kbd>**Cmd**</kbd> + <kbd>**C**</kbd>, add an empty string (`""`) to the clipboard   |
   *
   * Read more:
   * - [Clipboard](@/guides/cell-features/clipboard.md)
   * - [Configuration options: Cascading configuration](@/guides/getting-started/configuration-options.md#cascading-configuration)
   * - [Password cell type](@/guides/cell-types/password-cell-type.md)
   *
   * @memberof Options#
   * @type {boolean}
   * @default true
   * @category Core
   *
   * @example
   * ```js
   * // enable copying for each cell of the entire grid
   * copyable: true,
   *
   * // enable copying for individual columns
   * columns: [
   *   {
   *     // enable copying for each cell of this column
   *     copyable: true
   *   },
   *   {
   *     // disable copying for each cell of this column
   *     copyable: false
   *   }
   * ]
   *
   * // enable copying for specific cells
   * cells: [
   *   {
   *     cell: 0,
   *     row: 0,
   *     // disable copying for cell (0, 0)
   *     copyable: false,
   *   }
   * ],
   * ```
   */
  copyable: !0,
  /**
   * The `copyPaste` option configures the [`CopyPaste`](@/api/copyPaste.md) plugin.
   *
   * You can set the `copyPaste` option to one of the following:
   *
   * | Setting           | Description                                                                                                            |
   * | ----------------- | ---------------------------------------------------------------------------------------------------------------------- |
   * | `true` (default)  | Enable the [`CopyPaste`](@/api/copyPaste.md) plugin with the default configuration                                     |
   * | `false`           | Disable the [`CopyPaste`](@/api/copyPaste.md) plugin                                                                   |
   * | An object         | - Enable the [`CopyPaste`](@/api/copyPaste.md) plugin<br>- Modify the [`CopyPaste`](@/api/copyPaste.md) plugin options |
   *
   * ##### copyPaste: Additional options
   *
   * If you set the `copyPaste` option to an object, you can set the following `CopyPaste` plugin options:
   *
   * | Option                   | Possible settings                                  | Description                                                                                                                                                                                         |
   * | ------------------------ | -------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
   * | `columnsLimit`           | A number (default: `Infinity`)                     | The maximum number of columns that can be copied                                                                                                                                                    |
   * | `rowsLimit`              | A number (default: `Infinity`)                     | The maximum number of columns that can be copied                                                                                                                                                    |
   * | `pasteMode`              | `'overwrite'` \| `'shift_down'` \| `'shift_right'` | When pasting:<br>`'overwrite'`: overwrite the currently-selected cells<br>`'shift_down'`: move the currently-selected cells down<br>`'shift_right'`: move the currently-selected cells to the right |
   * | `copyColumnHeaders`      | Boolean (default: `false`)                         | `true`: add a context menu option for copying cells along with their nearest column headers                                                                                                         |
   * | `copyColumnGroupHeaders` | Boolean (default: `false`)                         | `true`: add a context menu option for copying cells along with all their related columns headers                                                                                                    |
   * | `copyColumnHeadersOnly`  | Boolean (default: `false`)                         | `true`: add a context menu option for copying column headers nearest to the selected cells (without copying cells)                                                                    |
   * | `uiContainer`            | An HTML element                                    | The UI container for the secondary focusable element                                                                                                                                                |
   *
   * Read more:
   * - [Plugins: `CopyPaste`](@/api/copyPaste.md)
   * - [Guides: Clipboard](@/guides/cell-features/clipboard.md)
   *
   * @memberof Options#
   * @type {object|boolean}
   * @default true
   * @category CopyPaste
   *
   * @example
   * ```js
   * // enable the plugin with the default configuration
   * copyPaste: true // set by default
   *
   * // disable the plugin
   * copyPaste: false,
   *
   * // enable the plugin with a custom configuration
   * copyPaste: {
   *   // set a maximum number of columns that can be copied
   *   columnsLimit: 25,
   *
   *   // set a maximum number of rows that can be copied
   *   rowsLimit: 50,
   *
   *   // set the paste behavior
   *   pasteMode: 'shift_down',
   *
   *   // add the option to copy cells along with their nearest column headers
   *   copyColumnHeaders: true,
   *
   *   // add the option to copy cells along with all their related columns headers
   *   copyColumnGroupHeaders: true,
   *
   *   // add the option to copy just column headers (without copying cells)
   *   copyColumnHeadersOnly: true,
   *
   *   // set a UI container
   *   uiContainer: document.body,
   * },
   * ```
   */
  copyPaste: !0,
  /**
   * The `correctFormat` option configures whether incorrectly-formatted times and dates are amended or not.
   *
   * When the user enters dates and times, Handsontable can automatically adjust their format
   * to match the [`dateFormat`](#dateFormat) and [`timeFormat`](@/guides/cell-types/time-cell-type.md) settings.
   *
   * You can set the `correctFormat` option to one of the following:
   *
   * | Setting           | Description                                                                                                                                               |
   * | ----------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------- |
   * | `false` (default) | Don't correct the format of the entered date or time (treat the entered date or time as invalid)                                                          |
   * | `true`            | Correct the format of the entered date or time to match the [`dateFormat`](#dateFormat) or [`timeFormat`](@/guides/cell-types/time-cell-type.md) settings |
   *
   * Read more:
   * - [Date cell type](@/guides/cell-types/date-cell-type.md)
   * - [Time cell type](@/guides/cell-types/time-cell-type.md)
   * - [`dateFormat`](#dateFormat)
   *
   * @memberof Options#
   * @type {boolean}
   * @default false
   * @category Core
   *
   * @example
   * ```js
   * columns: [
   *   {
   *   // set the `type` of each cell in this column to `date`
   *   type: 'date',
   *   // for every `date` cell of this column, set the date format to `YYYY-MM-DD`
   *   dateFormat: 'YYYY-MM-DD',
   *   // enforce the `YYYY-MM-DD` date format
   *   correctFormat: true
   *   },
   *
   *   {
   *   // set the `type` of each cell in this column to `time`
   *   type: 'time',
   *   // for every `time` cell of this column, set the time format to `h:mm:ss a`
   *   timeFormat: 'h:mm:ss a',
   *   // enforce the `h:mm:ss a` time format
   *   correctFormat: true
   *   },
   * ],
   * ```
   */
  correctFormat: !1,
  /**
   * The `currentColClassName` option lets you add a CSS class name
   * to each cell of the currently-visible, currently-selected columns.
   *
   * Read more:
   * - [`currentRowClassName`](#currentRowClassName)
   * - [`currentHeaderClassName`](#currentHeaderClassName)
   * - [`activeHeaderClassName`](#activeHeaderClassName)
   * - [`invalidCellClassName`](#invalidCellClassName)
   * - [`placeholderCellClassName`](#placeholderCellClassName)
   * - [`readOnlyCellClassName`](#readOnlyCellClassName)
   * - [`commentedCellClassName`](#commentedCellClassName)
   * - [`noWordWrapClassName`](#noWordWrapClassName)
   * - [`TableClassName`](#TableClassName)
   * - [`className`](#className)
   *
   * @memberof Options#
   * @type {string}
   * @default undefined
   * @category Core
   *
   * @example
   * ```js
   * // add a `your-class-name` CSS class name
   * // to each cell of the currently-visible, currently-selected columns
   * currentColClassName: 'your-class-name',
   * ```
   */
  currentColClassName: void 0,
  /**
   * The `currentHeaderClassName` option lets you add a CSS class name
   * to every currently-visible, currently-selected header.
   *
   * Read more:
   * - [`currentRowClassName`](#currentRowClassName)
   * - [`currentColClassName`](#currentColClassName)
   * - [`activeHeaderClassName`](#activeHeaderClassName)
   * - [`invalidCellClassName`](#invalidCellClassName)
   * - [`readOnlyCellClassName`](#readOnlyCellClassName)
   * - [`commentedCellClassName`](#commentedCellClassName)
   * - [`noWordWrapClassName`](#noWordWrapClassName)
   * - [`TableClassName`](#TableClassName)
   * - [`className`](#className)
   *
   * @memberof Options#
   * @type {string}
   * @default 'ht__highlight'
   * @category Core
   *
   * @example
   * ```js
   * // add an `ht__highlight` CSS class name
   * // to every currently-visible, currently-selected header
   * currentHeaderClassName: 'ht__highlight',
   * ```
   */
  currentHeaderClassName: "ht__highlight",
  /**
   * The `currentRowClassName` option lets you add a CSS class name
   * to each cell of the currently-visible, currently-selected rows.
   *
   * Read more:
   * - [`currentColClassName`](#currentColClassName)
   * - [`currentHeaderClassName`](#currentHeaderClassName)
   * - [`activeHeaderClassName`](#activeHeaderClassName)
   * - [`invalidCellClassName`](#invalidCellClassName)
   * - [`placeholderCellClassName`](#placeholderCellClassName)
   * - [`readOnlyCellClassName`](#readOnlyCellClassName)
   * - [`commentedCellClassName`](#commentedCellClassName)
   * - [`noWordWrapClassName`](#noWordWrapClassName)
   * - [`TableClassName`](#TableClassName)
   * - [`className`](#className)
   *
   * @memberof Options#
   * @type {string}
   * @default undefined
   * @category Core
   *
   * @example
   * ```js
   * // add a `your-class-name` CSS class name
   * // to each cell of the currently-visible, currently-selected rows
   * currentRowClassName: 'your-class-name',
   * ```
   */
  currentRowClassName: void 0,
  /**
   * @description
   * The `customBorders` option configures the [`CustomBorders`](@/api/customBorders.md) plugin.
   *
   * To enable the [`CustomBorders`](@/api/customBorders.md) plugin
   * (and add its menu items to the [context menu](@/guides/accessories-and-menus/context-menu.md)),
   * set the `customBorders` option to `true`.
   *
   * To enable the [`CustomBorders`](@/api/customBorders.md) plugin
   * and add a predefined border around a particular cell,
   * set the `customBorders` option to an array of objects.
   * Each object represents a border configuration for one cell, and has the following properties:
   *
   * | Property | Sub-properties     | Types                              | Description                                                       |
   * | -------- | ------------------ | ---------------------------------- | ----------------------------------------------------------------- |
   * | `row`    | -                  | `row`: Number                      | The cell's row coordinate.                                        |
   * | `col`    | -                  | `col`: Number                      | The cell's column coordinate.                                     |
   * | `start`  | `width`<br>`color` | `width`: Number<br>`color`: String | If the [layout direction](@/guides/internationalization/layout-direction.md) is LTR (default): `start` sets the width (`width`) and color (`color`) of the left-hand border.<br><br>If the [layout direction](@/guides/internationalization/layout-direction.md) is RTL: `start` sets the width (`width`) and color (`color`) of the right-hand border. |
   * | `end`    | `width`<br>`color` | `width`: Number<br>`color`: String | If the [layout direction](@/guides/internationalization/layout-direction.md) is LTR (default): `end` sets the width (`width`) and color (`color`) of the right-hand border.<br><br>If the [layout direction](@/guides/internationalization/layout-direction.md) is RTL: `end` sets the width (`width`) and color (`color`) of the left-hand border. |
   * | `top`    | `width`<br>`color` | `width`: Number<br>`color`: String | Sets the width (`width`) and color (`color`) of the top border. |
   * | `bottom` | `width`<br>`color` | `width`: Number<br>`color`: String | Sets the width (`width`) and color (`color`) of the bottom border. |
   *
   * To enable the [`CustomBorders`](@/api/customBorders.md) plugin
   * and add a predefined border around a range of cells,
   * set the `customBorders` option to an array of objects.
   * Each object represents a border configuration for a single range of cells, and has the following properties:
   *
   * | Property | Sub-properties                               | Types                                                            | Description                                                                                  |
   * | -------- | -------------------------------------------- | ---------------------------------------------------------------- | -------------------------------------------------------------------------------------------- |
   * | `range`  | `from` {`row`, `col`}<br>`to` {`row`, `col`} | `from`: Object<br>`to`: Object<br>`row`: Number<br>`col`: Number | If the [layout direction](@/guides/internationalization/layout-direction.md) is LTR (default):<br>- `from` selects the range's top-left corner.<br>- `to` selects the range's bottom-right corner.<br><br>If the [layout direction](@/guides/internationalization/layout-direction.md) is RTL: <br>- `from` selects the range's top-right corner.<br>- `to` selects the range's bottom-left corner. |
   * | `start`  | `width`<br>`color` | `width`: Number<br>`color`: String | If the [layout direction](@/guides/internationalization/layout-direction.md) is LTR (default): `start` sets the width (`width`) and color (`color`) of the left-hand border.<br><br>If the [layout direction](@/guides/internationalization/layout-direction.md) is RTL: `start` sets the width (`width`) and color (`color`) of the right-hand border. |
   * | `end`    | `width`<br>`color` | `width`: Number<br>`color`: String | If the [layout direction](@/guides/internationalization/layout-direction.md) is LTR (default): `end` sets the width (`width`) and color (`color`) of the right-hand border.<br><br>If the [layout direction](@/guides/internationalization/layout-direction.md) is RTL: `end` sets the width (`width`) and color (`color`) of the left-hand border. |
   * | `top`    | `width`<br>`color`                           | `width`: Number<br>`color`: String                               | Sets the width (`width`) and color (`color`) of the top border. |
   * | `bottom` | `width`<br>`color`                           | `width`: Number<br>`color`: String                               | Sets the width (`width`) and color (`color`) of the bottom border. |
   *
   * Read more:
   * - [Formatting cells: Custom cell borders](@/guides/cell-features/formatting-cells.md#custom-cell-borders)
   * - [Context menu](@/guides/accessories-and-menus/context-menu.md)
   * - [Plugins: `CustomBorders`](@/api/customBorders.md)
   * - [Layout direction](@/guides/internationalization/layout-direction.md)
   * - [`layoutDirection`](#layoutDirection)
   *
   * @memberof Options#
   * @type {boolean|object[]}
   * @default false
   * @category CustomBorders
   *
   * @example
   * ```js
   * // enable the `CustomBorders` plugin
   * customBorders: true,
   *
   * // enable the `CustomBorders` plugin
   * // and add a predefined border for a particular cell
   * customBorders: [
   *   // add an object with a border configuration for one cell
   *   {
   *     // set the cell's row coordinate
   *     row: 2,
   *     // set the cell's column coordinate
   *     col: 2,
   *     // set the left/right border's width and color
   *     start: {
   *       width: 2,
   *       color: 'red'
   *     },
   *     // set the right/left border's width and color
   *     end: {
   *       width: 1,
   *       color: 'green'
   *     },
   *     // set the top border's width and color
   *     top: '',
   *     // set the bottom border's width and color
   *     bottom: ''
   *   }
   * ],
   *
   * // enable the `CustomBorders` plugin
   * // and add a predefined border for a range of cells
   * customBorders: [
   *   // add an object with a border configuration for one range of cells
   *   {
   *     // select a range of cells
   *     range: {
   *       // set the range's top-left corner
   *       from: {
   *         row: 1,
   *         col: 1
   *       },
   *       // set the range's bottom-right corner
   *       to: {
   *         row: 3,
   *         col: 4
   *       }
   *     },
   *     // set the left/right border's width and color
   *     start: {
   *       width: 2,
   *       color: 'red'
   *     },
   *     // set the right/left border's width and color
   *     end: {},
   *     // set the top border's width and color
   *     top: {},
   *     // set the bottom border's width and color
   *     bottom: {}
   *   }
   * ],
   * ```
   */
  customBorders: !1,
  /**
   * @description
   * The `data` option sets the initial [data](@/guides/getting-started/binding-to-data.md) of your Handsontable instance.
   *
   * Handsontable's data is bound to your source data by reference (i.e. when you edit Handsontable's data, your source data alters as well).
   *
   * You can set the `data` option:
   * - Either to an [array of arrays](@/guides/getting-started/binding-to-data.md#array-of-arrays).
   * - Or to an [array of objects](@/guides/getting-started/binding-to-data.md#array-of-objects).
   *
   * If you don't set the `data` option (or set it to `null`), Handsontable renders as an empty 5x5 grid by default.
   *
   * Read more:
   * - [Binding to data](@/guides/getting-started/binding-to-data.md)
   * - [`dataSchema`](#dataSchema)
   * - [`startRows`](#startRows)
   * - [`startCols`](#startCols)
   *
   * @memberof Options#
   * @type {Array[]|object[]}
   * @default undefined
   * @category Core
   *
   * @example
   * ```js
   * // as an array of arrays
   * data: [
   *   ['A', 'B', 'C'],
   *   ['D', 'E', 'F'],
   *   ['G', 'H', 'J']
   * ]
   *
   * // as an array of objects
   * data: [
   *   {id: 1, name: 'Ted Right'},
   *   {id: 2, name: 'Frank Honest'},
   *   {id: 3, name: 'Joan Well'},
   *   {id: 4, name: 'Gail Polite'},
   *   {id: 5, name: 'Michael Fair'},
   * ]
   * ```
   */
  data: void 0,
  /**
   * @description
   * When the [`data`](#data) option is set to an [array of objects](@/guides/getting-started/binding-to-data.md#array-of-objects)
   * (or is empty), the `dataSchema` option defines the structure of new rows.
   *
   * Using the `dataSchema` option, you can start out with an empty grid.
   *
   * You can set the `dataSchema` option to one of the following:
   * - An object
   * - A function
   *
   * Read more:
   * - [Binding to data: Array of objects with custom data schema](@/guides/getting-started/binding-to-data.md#array-of-objects-with-custom-data-schema)
   * - [Binding to data: Function data source and schema](@/guides/getting-started/binding-to-data.md#function-data-source-and-schema)
   * - [`data`](#data)
   *
   * @memberof Options#
   * @type {object|Function}
   * @default undefined
   * @category Core
   *
   * @example
   * ```js
   * // with `dataSchema`, you can start with an empty grid
   * data: null,
   * dataSchema: {id: null, name: {first: null, last: null}, address: null},
   * colHeaders: ['ID', 'First Name', 'Last Name', 'Address'],
   * columns: [
   *   {data: 'id'},
   *   {data: 'name.first'},
   *   {data: 'name.last'},
   *   {data: 'address'}
   * ],
   * startRows: 5,
   * minSpareRows: 1
   * ```
   */
  dataSchema: void 0,
  /**
   * The `dateFormat` option configures the date format accepted by [`date`](@/guides/cell-types/date-cell-type.md) cells.
   *
   * You can set the `dateFormat` option to a string with a proper date format. The default value is: `'DD/MM/YYYY'`.
   *
   * To automatically correct dates whose format doesn't match the `dateFormat` setting, use the [`correctFormat`](#correctFormat) option.
   *
   * Read more:
   * - [Date cell type](@/guides/cell-types/date-cell-type.md)
   * - [`correctFormat`](#correctFormat)
   * - [`defaultDate`](#defaultDate)
   *
   * @memberof Options#
   * @type {string}
   * @default 'DD/MM/YYYY'
   * @category Core
   *
   * @example
   * ```js
   * columns: [
   *   {
   *   // set the `type` of each cell in this column to `date`
   *   type: 'date',
   *   // for every `date` cell of this column, set the date format to `YYYY-MM-DD`
   *   dateFormat: 'YYYY-MM-DD',
   *   },
   * ],
   * ```
   */
  dateFormat: "DD/MM/YYYY",
  /**
   * The `datePickerConfig` option configures the `date` [cell editor](@/guides/cell-functions/cell-editor.md)'s date picker, which uses an external dependency: [Pikaday](https://github.com/Pikaday/Pikaday/tree/1.8.2).
   *
   * You can set the `datePickerConfig` option to an object with any of the available [Pikaday options](https://github.com/Pikaday/Pikaday/tree/1.8.2#configuration),
   * except for the following, which are always overwritten by the `date` [cell editor](@/guides/cell-functions/cell-editor.md):
   * - `bound`
   * - `container`
   * - `field`
   * - `trigger`
   *
   * If the `datePickerConfig` option is not defined, the `date` [cell editor](@/guides/cell-functions/cell-editor.md) overwrites the following [Pikaday options](https://github.com/Pikaday/Pikaday/tree/1.8.2#configuration) as well:
   *
   * | Pikaday option       | Handsontable's setting |
   * | -------------------- | ---------------------- |
   * | `format`             | `'DD/MM/YYYY'`         |
   * | `reposition`         | `false`                |
   *
   * Read more:
   * - [`editor`](#editor)
   * - [`dateFormat`](#dateFormat)
   * - [Cell editor](@/guides/cell-functions/cell-editor.md)
   * - [All Pikaday options &#8594;](https://github.com/Pikaday/Pikaday/tree/1.8.2#configuration)
   *
   * @memberof Options#
   * @type {object}
   * @default undefined
   * @category Core
   */
  datePickerConfig: void 0,
  /**
   * The `defaultDate` option configures the date displayed
   * in empty [`date`](@/guides/cell-types/date-cell-type.md) cells.
   *
   * You can set the `defaultDate` option to a string.
   *
   * Read more:
   * - [Date cell type](@/guides/cell-types/date-cell-type.md)
   * - [`dateFormat`](#dateFormat)
   *
   * @memberof Options#
   * @type {string}
   * @default undefined
   * @category Core
   *
   * @example
   * ```js
   * columns: [
   *   {
   *     // set the `type` of each cell in this column to `date`
   *     type: 'date',
   *     // in every empty `date` cell of this column, display `2015-02-02`
   *     defaultDate: '2015-02-02'
   *   }
   * ],
   * ```
   */
  defaultDate: void 0,
  /**
   * @description
   * The `disableVisualSelection` option configures how
   * [selection](@/guides/cell-features/selection.md) is shown.
   *
   * You can set the `disableVisualSelection` option to one of the following:
   *
   * | Setting           | Description                                                                                         |
   * | ----------------- | --------------------------------------------------------------------------------------------------- |
   * | `false` (default) | - Show single-cell selection<br>- Show range selection<br>- Show header selection                   |
   * | `true`            | - Don't show single-cell selection<br>- Don't show range selection<br>- Don't show header selection |
   * | `'current'`       | - Don't show single-cell selection<br>- Show range selection<br>- Show header selection             |
   * | `'area'`          | - Show single-cell selection<br>- Don't show range selection<br>- Show header selection             |
   * | `'header'`        | - Show single-cell selection<br>- Show range selection<br>- Don't show header selection             |
   * | An array          | A combination of `'current'`, `'area'`, and/or `'header'`                                           |
   *
   * Read more:
   * - [Selection](@/guides/cell-features/selection.md)
   *
   * @memberof Options#
   * @type {boolean|string|string[]}
   * @default false
   * @category Core
   *
   * @example
   * ```js
   * // don't show single-cell selection
   * // don't show range selection
   * // don't show header selection
   * disableVisualSelection: true,
   *
   * // don't show single-cell selection
   * // show range selection
   * // show header selection
   * disableVisualSelection: 'current',
   *
   * // don't show single-cell selection
   * // don't show range selection
   * // show header selection
   * disableVisualSelection: ['current', 'area'],
   * ```
   */
  disableVisualSelection: !1,
  /**
   * @description
   * The `dragToScroll` option configures the [`DragToScroll`](@/api/dragToScroll.md) plugin.
   *
   * You can set the `dragToScroll` option to one of the following:
   *
   * | Setting          | Description                                                                 |
   * | ---------------- | --------------------------------------------------------------------------- |
   * | `true` (default) | When selection reaches the edge of the grid's viewport, scroll the viewport |
   * | `false`          | Don't scroll the viewport                                                   |
   *
   * Read more:
   * - [Plugins: `DragToScroll`](@/api/dragToScroll.md)
   *
   * @memberof Options#
   * @type {boolean}
   * @default true
   * @category DragToScroll
   *
   * @example
   * ```js
   * // when selection reaches the edge of the grid's viewport, scroll the viewport
   * dragToScroll: true,
   * ```
   */
  dragToScroll: !0,
  /**
   * The `dropdownMenu` option configures the [`DropdownMenu`](@/api/dropdownMenu.md) plugin.
   *
   * You can set the `dropdownMenu` option to one of the following:
   *
   * | Setting   | Description                                                                                                                                                                                  |
   * | --------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
   * | `false`   | Disable the [`DropdownMenu`](@/api/dropdownMenu.md) plugin                                                                                                                                   |
   * | `true`    | - Enable the [`DropdownMenu`](@/api/dropdownMenu.md) plugin<br>- Use the [default context menu options](@/guides/accessories-and-menus/context-menu.md#context-menu-with-default-options)    |
   * | An array  | - Enable the [`DropdownMenu`](@/api/dropdownMenu.md) plugin<br>- Modify [individual context menu options](@/guides/accessories-and-menus/context-menu.md#context-menu-with-specific-options) |
   * | An object | - Enable the [`DropdownMenu`](@/api/dropdownMenu.md) plugin<br>- Apply a custom dropdown menu configuration                                                                                  |
   *
   * Read more:
   * - [Context menu](@/guides/accessories-and-menus/context-menu.md)
   * - [Plugins: `DropdownMenu`](@/api/dropdownMenu.md)
   *
   * @memberof Options#
   * @type {boolean|object|string[]}
   * @default undefined
   * @category DropdownMenu
   *
   * @example
   * ```js
   * // enable the `DropdownMenu` plugin
   * // use the default context menu options
   * dropdownMenu: true,
   *
   * // enable the `DropdownMenu` plugin
   * // and modify individual context menu options
   * dropdownMenu: ['row_above', 'row_below', '---------', 'undo', 'redo'],
   *
   * // enable the `DropdownMenu` plugin
   * // and apply a custom dropdown menu configuration
   * dropdownMenu: {
   *   items: {
   *     'option1': {
   *       name: 'Option 1'
   *     },
   *     'option2': {
   *       name: 'Option 2',
   *       submenu: {
   *         items: [
   *           {
   *             key: 'option2:suboption1',
   *             name: 'Suboption 1',
   *             callback(key, options) {
   *               ...
   *             }
   *           },
   *           ...
   *         ]
   *       }
   *     }
   *   }
   * },
   * ```
   */
  dropdownMenu: void 0,
  /**
   * The `editor` option sets a [cell editor](@/guides/cell-functions/cell-editor.md) for a cell.
   *
   * You can set the `editor` option to one of the following [cell editor aliases](@/guides/cell-functions/cell-editor.md):
   *
   * | Alias               | Cell editor function                                                       |
   * | ------------------- | -------------------------------------------------------------------------- |
   * | A custom alias      | Your [custom cell editor](@/guides/cell-functions/cell-editor.md) function |
   * | `'autocomplete'`    | `AutocompleteEditor`                                                       |
   * | `'base'`            | `BaseEditor`                                                               |
   * | `'checkbox'`        | `CheckboxEditor`                                                           |
   * | `'date'`            | `DateEditor`                                                               |
   * | `'dropdown'`        | `DropdownEditor`                                                           |
   * | `'handsontable'`    | `HandsontableEditor`                                                       |
   * | `'numeric'`         | `NumericEditor`                                                            |
   * | `'password'`        | `PasswordEditor`                                                           |
   * | `'select'`          | `SelectEditor`                                                             |
   * | `'text'`            | `TextEditor`                                                               |
   * | `'time'`            | `TimeEditor`                                                               |
   *
   * To disable editing cells through cell editors,
   * set the `editor` option to `false`.
   * You'll still be able to change cells' content through Handsontable's API
   * or through plugins (e.g. [`CopyPaste`](@/api/copyPaste.md)), though.
   *
   * To set the [`editor`](#editor), [`renderer`](#renderer), and [`validator`](#validator)
   * options all at once, use the [`type`](#type) option.
   *
   * Read more:
   * - [Cell editor](@/guides/cell-functions/cell-editor.md)
   * - [Cell type](@/guides/cell-types/cell-type.md)
   * - [Configuration options: Cascading configuration](@/guides/getting-started/configuration-options.md#cascading-configuration)
   * - [`type`](#type)
   *
   * @memberof Options#
   * @type {string|Function|boolean}
   * @default undefined
   * @category Core
   *
   * @example
   * ```js
   * // use the `numeric` editor for each cell of the entire grid
   * editor: 'numeric',
   *
   * // apply the `editor` option to individual columns
   * columns: [
   *   {
   *     // use the `autocomplete` editor for each cell of this column
   *     editor: 'autocomplete'
   *   },
   *   {
   *     // disable editing cells through cell editors for each cell of this column
   *     editor: false
   *   }
   * ]
   * ```
   */
  editor: void 0,
  /**
   * The `enterBeginsEditing` option configures the action of the <kbd>**Enter**</kbd> key.
   *
   * You can set the `enterBeginsEditing` option to one of the following:
   *
   * | Setting          | Description                                                                                                                                                                                               |
   * | ---------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
   * | `true` (default) | - On pressing <kbd>**Enter**</kbd> once, enter the editing mode of the active cell<br>- On pressing <kbd>**Enter**</kbd> twice, move to another cell,<br>as configured by the [`enterMoves`](#enterMoves) setting |
   * | `false`          | - On pressing <kbd>**Enter**</kbd> once, move to another cell,<br>as configured by the [`enterMoves`](#enterMoves) setting                                                                                    |
   *
   * Read more:
   * - [`enterMoves`](#enterMoves)
   *
   * @memberof Options#
   * @type {boolean}
   * @default true
   * @category Core
   *
   * @example
   * ```js
   * // press Enter once to start editing
   * // press Enter twice to move to another cell
   * enterBeginsEditing: true,
   *
   * // press Enter once to move to another cell
   * enterBeginsEditing: false,
   * ```
   */
  enterBeginsEditing: !0,
  /**
   * The `enterMoves` option configures the action of the <kbd>**Enter**</kbd> key.
   *
   * If the [`enterBeginsEditing`](#enterBeginsEditing) option is set to `true`,
   * the `enterMoves` setting applies to the **second** pressing of the <kbd>**Enter**</kbd> key.
   *
   * If the [`enterBeginsEditing`](#enterBeginsEditing) option is set to `false`,
   * the `enterMoves` setting applies to the **first** pressing of the <kbd>**Enter**</kbd> key.
   *
   * You can set the `enterMoves` option to an object with the following properties
   * (or to a function that returns such an object):
   *
   * | Property | Type   | Description                                                                                                                                              |
   * | -------- | ------ | -------------------------------------------------------------------------------------------------------------------------------------------------------- |
   * | `col`    | Number | - On pressing <kbd>**Enter**</kbd>, move selection `col` columns right<br>- On pressing <kbd>**Shift**</kbd> + <kbd>**Enter**</kbd>, move selection `col` columns left |
   * | `row`    | Number | - On pressing <kbd>**Enter**</kbd>, move selection `row` rows down<br>- On pressing <kbd>**Shift**</kbd> + <kbd>**Enter**</kbd>, move selection `row` rows up          |
   *
   * Read more:
   * - [`enterBeginsEditing`](#enterBeginsEditing)
   *
   * @memberof Options#
   * @type {object|Function}
   * @default {col: 0, row: 1}
   * @category Core
   *
   * @example
   * ```js
   * // on pressing Enter, move selection 1 column right and 1 row down
   * // on pressing Shift+Enter, move selection 1 column left and 1 row up
   * enterMoves: {col: 1, row: 1},
   *
   * // the same setting, as a function
   * // `event` is a DOM Event object received on pressing Enter
   * // you can use it to check whether the user pressed Enter or Shift+Enter
   * enterMoves(event) {
   *   return {col: 1, row: 1};
   * },
   * ```
   */
  enterMoves: {
    col: 0,
    row: 1
  },
  /**
   * The `fillHandle` option configures the [Autofill](@/api/autofill.md) plugin.
   *
   * You can set the `fillHandle` option to one the following:
   *
   * | Setting        | Description                                                                |
   * | -------------- | -------------------------------------------------------------------------- |
   * | `true`         | - Enable autofill in all directions<br>- Add the fill handle               |
   * | `false`        | Disable autofill                                                           |
   * | `'vertical'`   | - Enable vertical autofill<br>- Add the fill handle                        |
   * | `'horizontal'` | - Enable horizontal autofill<br>- Add the fill handle                      |
   * | An object      | - Enable autofill<br>- Add the fill handle<br>- Configure autofill options |
   *
   * If you set the `fillHandle` option to an object, you can configure the following autofill options:
   *
   * | Option          | Possible settings              | Description                                                                                               |
   * | --------------- | ------------------------------ | --------------------------------------------------------------------------------------------------------- |
   * | `autoInsertRow` | `true` (default) \| `false`    | `true`: When you reach the grid's bottom, add new rows<br>`false`: When you reach the grid's bottom, stop |
   * | `direction`     | `'vertical'` \| `'horizontal'` | `'vertical'`: Enable vertical autofill<br>`'horizontal'`: Enable horizontal autofill                      |
   *
   * Read more:
   * - [AutoFill values](@/guides/cell-features/autofill-values.md)
   *
   * @memberof Options#
   * @type {boolean|string|object}
   * @default true
   * @category Core
   *
   * @example
   * ```js
   * // enable autofill in all directions
   * // with `autoInsertRow` enabled
   * fillHandle: true,
   *
   * // enable vertical autofill
   * // with `autoInsertRow` enabled
   * fillHandle: 'vertical',
   *
   * // enable horizontal autofill
   * // with `autoInsertRow` enabled
   * fillHandle: 'horizontal',
   *
   * // enable autofill in all directions
   * // with `autoInsertRow` disabled
   * fillHandle: {
   *   autoInsertRow: false,
   * },
   *
   * // enable vertical autofill
   * // with `autoInsertRow` disabled
   * fillHandle: {
   *   autoInsertRow: false,
   *   direction: 'vertical'
   * },
   * ```
   */
  fillHandle: {
    autoInsertRow: !1
  },
  /**
   * The `filter` option configures whether [`autocomplete`](@/guides/cell-types/autocomplete-cell-type.md) cells'
   * lists are updated by the end user's input.
   *
   * You can set the `filter` option to one of the following:
   *
   * | Setting          | Description                                                                                                           |
   * | ---------------- | --------------------------------------------------------------------------------------------------------------------- |
   * | `true` (default) | When the end user types into the input area, only options matching the input are displayed                            |
   * | `false`          | When the end user types into the input area, all options are displayed<br>(options matching the input are put in bold |
   *
   * Read more:
   * - [Autocomplete cell type](@/guides/cell-types/autocomplete-cell-type.md)
   * - [`source`](#source)
   * - [`filteringCaseSensitive`](#filteringCaseSensitive)
   *
   * @memberof Options#
   * @type {boolean}
   * @default true
   * @category Core
   *
   * @example
   * ```js
   * columns: [{
   *   // set the `type` of each cell in this column to `autocomplete`
   *   type: 'autocomplete',
   *   // set options available in every `autocomplete` cell of this column
   *   source: ['A', 'B', 'C'],
   *   // when the end user types in `A`, display only the A option
   *   // when the end user types in `B`, display only the B option
   *   // when the end user types in `C`, display only the C option
   *   filter: true
   * }],
   * ```
   */
  filter: !0,
  /**
   * The `filteringCaseSensitive` option configures whether [`autocomplete`](@/guides/cell-types/autocomplete-cell-type.md) cells'
   * input is case-sensitive.
   *
   * You can set the `filteringCaseSensitive` option to one of the following:
   *
   * | Setting           | Description                                                                                        |
   * | ----------------- | -------------------------------------------------------------------------------------------------- |
   * | `false` (default) | [`autocomplete`](@/guides/cell-types/autocomplete-cell-type.md) cells' input is not case-sensitive |
   * | `true`            | [`autocomplete`](@/guides/cell-types/autocomplete-cell-type.md) cells' input is case-sensitive     |
   *
   * Read more:
   * - [Autocomplete cell type](@/guides/cell-types/autocomplete-cell-type.md)
   * - [`source`](#source)
   * - [`filter`](#filter)
   *
   * @memberof Options#
   * @type {boolean}
   * @default false
   * @category Core
   *
   * @example
   * ```js
   * columns: [
   *   {
   *     type: 'autocomplete',
   *     source: [ ... ],
   *     // match case while searching autocomplete options
   *     filteringCaseSensitive: true
   *   }
   * ],
   * ```
   */
  filteringCaseSensitive: !1,
  /**
   * The `filters` option configures the [`Filters`](@/api/filters.md) plugin.
   *
   * You can set the `filters` option to one of the following:
   *
   * | Setting | Description                                      |
   * | ------- | ------------------------------------------------ |
   * | `false` | Disable the [`Filters`](@/api/filters.md) plugin |
   * | `true`  | Enable the [`Filters`](@/api/filters.md) plugin  |
   *
   * Read more:
   * - [Column filter](@/guides/columns/column-filter.md)
   * - [Plugins: `Filters`](@/api/filters.md)
   * - [`dropdownMenu`](#dropdownMenu)
   *
   * @memberof Options#
   * @type {boolean}
   * @default undefined
   * @category Filters
   *
   * @example
   * ```js
   * // enable the `Filters` plugin
   * filters: true,
   * ```
   */
  filters: void 0,
  /**
   * `fixedColumnsLeft` is a legacy option.
   *
   * If your grid's [layout direction](@/guides/internationalization/layout-direction.md) is LTR (default), `fixedColumnsLeft` acts like the [`fixedColumnsStart`](#fixedColumnsStart) option.
   *
   * If your grid's [layout direction](@/guides/internationalization/layout-direction.md) is RTL, using `fixedColumnsLeft` throws an error.
   *
   * Use [`fixedColumnsStart`](#fixedColumnsStart), which works in any layout direction.
   *
   * Read more:
   * - [`fixedColumnsStart`](#fixedcolumnsstart)
   *
   * @memberof Options#
   * @type {number}
   * @default 0
   * @category Core
   *
   * @example
   * ```js
   * // freeze the first 3 columns from the left
   * fixedColumnsLeft: 3,
   * ```
   */
  fixedColumnsLeft: 0,
  /**
   * If your grid's [layout direction](@/guides/internationalization/layout-direction.md) is LTR (default), the `fixedColumnsStart` option sets the number of [frozen columns](@/guides/columns/column-freezing.md) at the left-hand edge of the grid.
   *
   * If your grid's [layout direction](@/guides/internationalization/layout-direction.md) is RTL, the `fixedColumnsStart` option sets the number of [frozen columns](@/guides/columns/column-freezing.md) at the right-hand edge of the grid.
   *
   * Read more:
   * - [Column freezing](@/guides/columns/column-freezing.md)
   * - [Layout direction](@/guides/internationalization/layout-direction.md)
   * - [`fixedColumnsLeft`](#fixedcolumnsleft)
   * - [`layoutDirection`](#layoutDirection)
   *
   * @memberof Options#
   * @type {number}
   * @default 0
   * @category Core
   *
   * @example
   * ```js
   * // when `layoutDirection` is set to `inherit` (default)
   * // freeze the first 3 columns from the left or from the right
   * // depending on your HTML document's `dir` attribute
   * layoutDirection: 'inherit',
   * fixedColumnsStart: 3,
   *
   * // when `layoutDirection` is set to `rtl`
   * // freeze the first 3 columns from the right
   * // regardless of your HTML document's `dir` attribute
   * layoutDirection: 'rtl',
   * fixedColumnsStart: 3,
   *
   * // when `layoutDirection` is set to `ltr`
   * // freeze the first 3 columns from the left
   * // regardless of your HTML document's `dir` attribute
   * layoutDirection: 'ltr',
   * fixedColumnsStart: 3,
   * ```
   */
  fixedColumnsStart: 0,
  /**
   * The `fixedRowsBottom` option sets the number of [frozen rows](@/guides/rows/row-freezing.md)
   * at the bottom of the grid.
   *
   * Read more:
   * - [Row freezing](@/guides/rows/row-freezing.md)
   *
   * @memberof Options#
   * @type {number}
   * @default 0
   * @category Core
   *
   * @example
   * ```js
   * // freeze the bottom 3 rows
   * fixedRowsBottom: 3,
   * ```
   */
  fixedRowsBottom: 0,
  /**
   * The `fixedRowsTop` option sets the number of [frozen rows](@/guides/rows/row-freezing.md) at the top of the grid.
   *
   * Read more:
   * - [Row freezing](@/guides/rows/row-freezing.md)
   *
   * @memberof Options#
   * @type {number}
   * @default 0
   * @category Core
   *
   * @example
   * ```js
   * // freeze the top 3 rows
   * fixedRowsTop: 3,
   * ```
   */
  fixedRowsTop: 0,
  /**
   * The `formulas` option configures the [`Formulas`](@/api/formulas.md) plugin.
   *
   * The [`Formulas`](@/api/formulas.md) plugin uses the [HyperFormula](https://handsontable.github.io/hyperformula/) calculation engine.
   * To install [HyperFormula](https://handsontable.github.io/hyperformula/), read the following:
   * - [Formula calculation: Initialization methods](@/guides/formulas/formula-calculation.md#initialization-methods)
   *
   * You can set the `formulas` option to an object with the following properties:
   *
   * | Property    | Possible values                                                                                                                                                                                                        |
   * | ----------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
   * | `engine`    | `HyperFormula` \|<br>A [HyperFormula](https://handsontable.github.io/hyperformula/) instance \|<br>A [HyperFormula configuration](https://handsontable.github.io/hyperformula/api/interfaces/configparams.html) object |
   * | `sheetId`   | A number                                                                                                                                                                                                               |
   * | `sheetName` | A string                                                                                                                                                                                                               |
   *
   * Read more:
   * - [Plugins: `Formulas`](@/api/formulas.md)
   * - [Formula calculation](@/guides/formulas/formula-calculation.md)
   * - [HyperFormula documentation: Client-side installation](https://handsontable.github.io/hyperformula/guide/client-side-installation)
   * - [HyperFormula documentation: Configuration options](https://handsontable.github.io/hyperformula/api/interfaces/configparams.html)
   *
   * @memberof Options#
   * @type {object}
   * @default undefined
   * @category Formulas
   *
   * @example
   * ```js
   * // either add the `HyperFormula` class
   * formulas: {
   *   // set `engine` to `HyperFormula`
   *   engine: HyperFormula,
   *   sheetId: 1,
   *   sheetName: 'Sheet 1'
   * }
   *
   * // or, add a HyperFormula instance
   * // initialized with the `'internal-use-in-handsontable'` license key
   * const hyperformulaInstance = HyperFormula.buildEmpty({
   *   licenseKey: 'internal-use-in-handsontable',
   * });
   *
   * formulas: {
   *   // set `engine` to a HyperFormula instance
   *   engine: hyperFormulaInstance,
   *   sheetId: 1,
   *   sheetName: 'Sheet 1'
   * }
   *
   * // or, add a HyperFormula configuration object
   * formulas: {
   *   // set `engine` to a HyperFormula configuration object
   *   engine: {
   *     hyperformula: HyperFormula // or `engine: hyperFormulaInstance`
   *     leapYear1900: false,       // this option comes from HyperFormula
   *     // add more HyperFormula configuration options
   *   },
   *   sheetId: 1,
   *   sheetName: 'Sheet 1'
   * }
   *
   * // use the same HyperFormula instance in multiple Handsontable instances
   *
   * // a Handsontable instance `hot1`
   * formulas: {
   *   engine: HyperFormula,
   *   sheetId: 1,
   *   sheetName: 'Sheet 1'
   * }
   *
   * // a Handsontable instance `hot2`
   * formulas: {
   *   engine: hot1.getPlugin('formulas').engine,
   *   sheetId: 1,
   *   sheetName: 'Sheet 1'
   * }
   * ```
   */
  formulas: void 0,
  /**
   * The `fragmentSelection` option configures text selection settings.
   *
   * You can set the `fragmentSelection` option to one of the following:
   *
   * | Setting           | Decription                                        |
   * | ----------------- | ------------------------------------------------- |
   * | `false` (default) | Disable text selection                            |
   * | `true`            | Enable text selection in multiple cells at a time |
   * | `'cell'`          | Enable text selection in one cell at a time       |
   *
   * @memberof Options#
   * @type {boolean|string}
   * @default false
   * @category Core
   *
   * @example
   * ```js
   * // enable text selection in multiple cells at a time
   * fragmentSelection: true,
   *
   * // enable text selection in one cell a time
   * fragmentSelection: 'cell',
   * ```
   */
  fragmentSelection: !1,
  /**
   * The `height` option configures the height of your grid.
   *
   * You can set `height` option to one of the following:
   *
   * | Setting                                                                    | Example                    |
   * | -------------------------------------------------------------------------- | -------------------------- |
   * | A number of pixels                                                         | `height: 500`              |
   * | A string with a [CSS unit](https://www.w3schools.com/cssref/css_units.asp) | `height: '75vw'`           |
   * | A function that returns a valid number or string                           | `height() { return 500; }` |
   *
   * Read more:
   * - [Grid size](@/guides/getting-started/grid-size.md)
   *
   * @memberof Options#
   * @type {number|string|Function}
   * @default undefined
   * @category Core
   *
   * @example
   * ```js
   * // set the grid's height to 500px
   * height: 500,
   *
   * // set the grid's height to 75vh
   * height: '75vh',
   *
   * // set the grid's height to 500px, using a function
   * height() {
   *   return 500;
   * },
   * ```
   */
  height: void 0,
  /**
   * The `hiddenColumns` option configures the [`HiddenColumns`](@/api/hiddenColumns.md) plugin.
   *
   * You can set the `hiddenColumns` option to one of the following:
   *
   * | Setting   | Description                                                                                  |
   * | --------- | -------------------------------------------------------------------------------------------- |
   * | `false`   | Disable the [`HiddenColumns`](@/api/hiddenColumns.md) plugin                                 |
   * | `true`    | Enable the [`HiddenColumns`](@/api/hiddenColumns.md) plugin with the default plugin options  |
   * | An object | - Enable the [`HiddenColumns`](@/api/hiddenColumns.md) plugin<br>- Modify the plugin options |
   *
   * If you set the `hiddenColumns` to an object, you can set the following [`HiddenColumns`](@/api/hiddenColumns.md) plugin options:
   *
   * | Property           | Possible values     | Description                                                                                                                                             |
   * | ------------------ | ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------- |
   * | `columns`          | An array of indexes | An array of indexes of columns that are hidden at initialization                                                                                        |
   * | `copyPasteEnabled` | `true` \| `false`   | `true`: when copying or pasting data, take hidden columns into account<br>`false`: when copying or pasting data, don't take hidden columns into account |
   * | `indicators`       | `true` \| `false`   | `true`: display UI markers to indicate the presence of hidden columns<br>`false`: display UI markers                                                    |
   *
   * Read more:
   * - [Plugins: `HiddenColumns`](@/api/hiddenColumns.md)
   * - [Column hiding](@/guides/columns/column-hiding.md)
   *
   * @memberof Options#
   * @type {boolean|object}
   * @default undefined
   * @category HiddenColumns
   *
   * @example
   * ```js
   * // enable the `HiddenColumns` plugin
   * hiddenColumns: true,
   *
   * // enable `HiddenColumns` plugin, and modify the plugin options
   * hiddenColumns: {
   *   // set columns that are hidden by default
   *   columns: [5, 10, 15],
   *   // when copying or pasting data, take hidden columns into account
   *   copyPasteEnabled: true,
   *   // show where hidden columns are
   *   indicators: true
   * }
   * ```
   */
  hiddenColumns: void 0,
  /**
   * The `hiddenRows` option configures the [`HiddenRows`](@/api/hiddenRows.md) plugin.
   *
   * You can set the `hiddenRows` option to one of the following:
   *
   * | Setting   | Description                                                                            |
   * | --------- | -------------------------------------------------------------------------------------- |
   * | `false`   | Disable the [`HiddenRows`](@/api/hiddenRows.md) plugin                                 |
   * | `true`    | Enable the [`HiddenRows`](@/api/hiddenRows.md) plugin with the default plugin options  |
   * | An object | - Enable the [`HiddenRows`](@/api/hiddenRows.md) plugin<br>- Modify the plugin options |
   *
   * If you set the `hiddenRows` to an object, you can set the following [`HiddenRows`](@/api/hiddenRows.md) plugin options:
   *
   * | Property           | Possible values     | Description                                                                                                                                       |
   * | ------------------ | ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------- |
   * | `rows   `          | An array of indexes | An array of indexes of rows that are hidden at initialization                                                                                     |
   * | `copyPasteEnabled` | `true` \| `false`   | `true`: when copying or pasting data, take hidden rows into account<br>`false`: when copying or pasting data, don't take hidden rows into account |
   * | `indicators`       | `true` \| `false`   | `true`: display UI markers to indicate the presence of hidden rows<br>`false`: display UI markers                                                 |
   *
   * Read more:
   * - [Plugins: `HiddenRows`](@/api/hiddenRows.md)
   * - [Row hiding](@/guides/rows/row-hiding.md)
   *
   * @memberof Options#
   * @type {boolean|object}
   * @default undefined
   * @category HiddenRows
   *
   * @example
   * ```js
   * // enable the `HiddenRows` plugin
   * hiddenRows: true,
   *
   * // enable `HiddenRows` plugin, and modify the plugin options
   * hiddenRows: {
   *   // set rows that are hidden by default
   *   rows: [5, 10, 15],
   *   // when copying or pasting data, take hidden rows into account
   *   copyPasteEnabled: true,
   *   // show where hidden rows are
   *   indicators: true
   * }
   * ```
   */
  hiddenRows: void 0,
  /**
   * The `invalidCellClassName` option lets you add a CSS class name to cells
   * that were marked as `invalid` by the [cell validator](@/guides/cell-functions/cell-validator.md).
   *
   * Read more:
   * - [Cell validator](@/guides/cell-functions/cell-validator.md)
   * - [`currentRowClassName`](#currentRowClassName)
   * - [`currentHeaderClassName`](#currentHeaderClassName)
   * - [`activeHeaderClassName`](#activeHeaderClassName)
   * - [`currentColClassName`](#currentColClassName)
   * - [`readOnlyCellClassName`](#readOnlyCellClassName)
   * - [`commentedCellClassName`](#commentedCellClassName)
   * - [`noWordWrapClassName`](#noWordWrapClassName)
   * - [`TableClassName`](#TableClassName)
   * - [`className`](#className)
   *
   * @memberof Options#
   * @type {string}
   * @default 'htInvalid'
   * @category Core
   *
   * @example
   * ```js
   * // add a `highlight-error` CSS class name
   * // to every `invalid` cell`
   * invalidCellClassName: 'highlight-error',
   * ```
   */
  invalidCellClassName: "htInvalid",
  /**
   * The `isEmptyCol` option lets you define your own custom method
   * for checking if a column at a given visual index is empty.
   *
   * The `isEmptyCol` setting overwrites the built-in [`isEmptyCol`](@/api/core.md#isEmptyCol) method.
   *
   * @memberof Options#
   * @type {Function}
   * @param {number} col Visual column index.
   * @returns {boolean}
   * @category Core
   *
   * @example
   * ```js
   * // overwrite the built-in `isEmptyCol` method
   * isEmptyCol(visualColumnIndex) {
   *    // your custom method
   *    ...
   * },
   * ```
   */
  isEmptyCol(s) {
    let e, t, n;
    for (e = 0, t = this.countRows(); e < t; e++)
      if (n = this.getDataAtCell(e, s), Gt(n) === !1)
        return !1;
    return !0;
  },
  /**
   * The `isEmptyRow` option lets you define your own custom method
   * for checking if a row at a given visual index is empty.
   *
   * The `isEmptyRow` setting overwrites the built-in [`isEmptyRow`](@/api/core.md#isEmptyRow) method.
   *
   * @memberof Options#
   * @type {Function}
   * @param {number} row Visual row index.
   * @returns {boolean}
   * @category Core
   *
   * @example
   * ```js
   * // overwrite the built-in `isEmptyRow` method
   * isEmptyRow(visualRowIndex) {
   *    // your custom method
   *    ...
   * },
   * ```
   */
  isEmptyRow(s) {
    let e, t, n, o;
    for (e = 0, t = this.countCols(); e < t; e++)
      if (n = this.getDataAtCell(s, e), Gt(n) === !1)
        return typeof n == "object" ? (o = this.getCellMeta(s, e), vg(this.getSchema()[o.prop], n)) : !1;
    return !0;
  },
  /**
   * @description
   * The `label` option configures [`checkbox`](@/guides/cell-types/checkbox-cell-type.md) cells` labels.
   *
   * You can set the `label` option to an object with the following properties:
   *
   * | Property    | Possible values                   | Description                                                                                                                                                                                                             |
   * | ----------- | --------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
   * | `position`  | `'after'` (default) \| `'before'` | `'after'`: place the label to the right of the checkbox<br>`'before'`: place the label to the left of the checkbox                                                                                                      |
   * | `value`     | A string \| A function            | The label's text                                                                                                                                                                                                        |
   * | `separated` | `false` (default) \| `true`       | `false`: don't separate the label from the checkbox<br>`true`: separate the label from the checkbox                                                                                                                     |
   * | `property`  | A string                          | - A [`data`](#data) object property name that's used as the label's text <br>- Works only when the [`data`](#data) option is set to an [array of objects](@/guides/getting-started/binding-to-data.md#array-of-objects) |
   *
   * Read more:
   * - [Checkbox cell type: Checkbox labels](@/guides/cell-types/checkbox-cell-type.md#checkbox-labels)
   *
   * @memberof Options#
   * @type {object}
   * @default undefined
   * @category Core
   *
   * @example
   * ```js
   * columns: [{
   *   type: 'checkbox',
   *   // add 'My label:' after the checkbox
   *   label: { position: 'after', value: 'My label: ', separated: true }
   * }],
   * ```
   */
  label: void 0,
  /**
   * The `language` option configures Handsontable's [language](@/guides/internationalization/language.md) settings.
   *
   * You can set the `language` option to one of the following:
   *
   * | Setting             | Description                 |
   * | ------------------- | --------------------------- |
   * | `'en-US'` (default) | English - United States     |
   * | `'ar-AR'`           | Arabic - Global.<br><br>To properly render this language, set the [layout direction](@/guides/internationalization/layout-direction.md) to RTL. |
   * | `'cs-CZ'`           | Czech - Czech Republic      |
   * | `'de-CH'`           | German - Switzerland        |
   * | `'de-DE'`           | German - Germany            |
   * | `'es-MX'`           | Spanish - Mexico            |
   * | `'fr-FR'`           | French - France             |
   * | `'it-IT'`           | Italian - Italy             |
   * | `'ja-JP'`           | Japanese - Japan            |
   * | `'ko-KR'`           | Korean - Korea              |
   * | `'lv-LV'`           | Latvian - Latvia            |
   * | `'nb-NO'`           | Norwegian (Bokmål) - Norway |
   * | `'nl-NL'`           | Dutch - Netherlands         |
   * | `'pl-PL'`           | Polish - Poland             |
   * | `'pt-BR'`           | Portuguese - Brazil         |
   * | `'ru-RU'`           | Russian - Russia            |
   * | `'sr-SP'`           | Serbian (Latin) - Serbia    |
   * | `'zh-CN'`           | Chinese - China             |
   * | `'zh-TW'`           | Chinese - Taiwan            |
   *
   * Read more:
   * - [Language](@/guides/internationalization/language.md)
   * - [`locale`](#locale)
   * - [`layoutDirection`](#layoutdirection)
   *
   * @memberof Options#
   * @type {string}
   * @default 'en-US'
   * @category Core
   *
   * @example
   * ```js
   * // set Handsontable's language to Polish
   * language: 'pl-PL',
   * ```
   */
  language: "en-US",
  /**
   * The `layoutDirection` option configures whether Handsontable renders from the left to the right, or from the right to the left.
   *
   * You can set the layout direction only at Handsontable's [initialization](@/guides/getting-started/installation.md#initialize-handsontable). Any change of the `layoutDirection` option after the initialization (e.g. using the [`updateSettings()`](@/api/core.md#updatesettings) method) is ignored.
   *
   * You can set the `layoutDirection` option only [for the entire grid](@/guides/getting-started/configuration-options.md#set-grid-options).
   * You can't set it for individual columns, rows, or cells.
   *
   * You can set the `layoutDirection` option to one of the following strings:
   *
   * | Setting             | Description                                                                                                                                                                                  |
   * | ------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
   * | `inherit` (default) | Set Handsontable's layout direction automatically,<br>based on the value of your HTML document's [`dir`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir) attribute  |
   * | `rtl`               | Render Handsontable from the right to the left,<br>even when your HTML document's [`dir`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir) attribute is set to `ltr` |
   * | `ltr`               | Render Handsontable from the left to the right,<br>even when your HTML document's [`dir`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir) attribute is set to `rtl` |
   *
   * Read more:
   * - [Layout direction](@/guides/internationalization/layout-direction.md)
   * - [Language](@/guides/internationalization/language.md)
   * - [`language`](#language)
   * - [`locale`](#locale)
   * - [`fixedColumnsStart`](#fixedcolumnsstart)
   * - [`customBorders`](#customBorders)
   *
   * @memberof Options#
   * @type {string}
   * @default 'inherit'
   * @category Core
   *
   * @example
   * ```js
   * // inherit Handsontable's layout direction
   * // from the value of your HTML document's `dir` attribute
   * layoutDirection: 'inherit',
   *
   * // render Handsontable from the right to the left
   * // regardless of your HTML document's `dir`
   * layoutDirection: 'rtl',
   *
   * // render Handsontable from the left to the right
   * // regardless of your HTML document's `dir`
   * layoutDirection: 'ltr',
   * ```
   */
  layoutDirection: "inherit",
  /**
   * The `licenseKey` option sets your Handsontable license key.
   *
   * You can set the `licenseKey` option to one of the following:
   *
   * | Setting                                                                                                 | Description                                                                                       |
   * | ------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------- |
   * | A string with your [commercial license key](@/guides/getting-started/license-key.md#commercial-license) | For [commercial use](@/guides/technical-specification/software-license.md#commercial-use)         |
   * | `'non-commercial-and-evaluation'`                                                                       | For [non-commercial use](@/guides/technical-specification/software-license.md#non-commercial-use) |
   *
   * Read more:
   * - [License key](@/guides/getting-started/license-key.md)
   *
   * @memberof Options#
   * @type {string}
   * @default undefined
   * @category Core
   *
   * @example
   * ```js
   * // for commercial use
   * licenseKey: 'xxxxx-xxxxx-xxxxx-xxxxx-xxxxx', // your commercial license key
   *
   * // for non-commercial use
   * licenseKey: 'non-commercial-and-evaluation',
   * ```
   */
  licenseKey: void 0,
  /**
   * The `locale` option configures Handsontable's [locale](@/guides/internationalization/locale.md) settings.
   *
   * You can set the `locale` option to any valid and canonicalized Unicode BCP 47 locale tag,
   * both for the [entire grid](@/guides/internationalization/locale.md#set-the-grid-s-locale),
   * and for [individual columns](@/guides/internationalization/locale.md#set-a-column-s-locale).
   *
   * Read more:
   * - [Locale](@/guides/internationalization/locale.md)
   * - [`language`](#language)
   * - [`layoutDirection`](#layoutdirection)
   *
   * @memberof Options#
   * @type {string}
   * @default 'en-US'
   * @category Core
   *
   * @example
   * ```js
   * // set the entire grid's locale to Polish
   * locale: 'pl-PL',
   *
   * // set individual columns' locales
   * columns: [
   *   {
   *     // set the first column's locale to Polish
   *     locale: 'pl-PL',
   *   },
   *   {
   *     // set the second column's locale to German
   *     locale: 'de-DE',
   *   },
   * ],
   * ```
   */
  locale: "en-US",
  /**
   * The `manualColumnFreeze` option configures the [`ManualColumnFreeze`](@/api/manualColumnFreeze.md) plugin.
   *
   * You can set the `manualColumnFreeze` option to one of the following:
   *
   * | Setting  | Description                                                            |
   * | -------- | ---------------------------------------------------------------------- |
   * | `true`   | Enable the [`ManualColumnFreeze`](@/api/manualColumnFreeze.md) plugin  |
   * | `false`  | Disable the [`ManualColumnFreeze`](@/api/manualColumnFreeze.md) plugin |
   *
   * Read more:
   * - [Column freezing](@/guides/columns/column-freezing.md#user-triggered-freeze)
   *
   * @memberof Options#
   * @type {boolean}
   * @default undefined
   * @category ManualColumnFreeze
   *
   * @example
   * ```js
   * // enable the `ManualColumnFreeze` plugin
   * manualColumnFreeze: true,
   * ```
   */
  manualColumnFreeze: void 0,
  /**
   * The `manualColumnMove` option configures the [`ManualColumnMove`](@/api/manualColumnMove.md) plugin.
   *
   * You can set the `manualColumnMove` option to one of the following:
   *
   * | Setting  | Description                                                                                                        |
   * | -------- | ------------------------------------------------------------------------------------------------------------------ |
   * | `true`   | Enable the [`ManualColumnMove`](@/api/manualColumnMove.md) plugin                                                  |
   * | `false`  | Disable the [`ManualColumnMove`](@/api/manualColumnMove.md) plugin                                                 |
   * | An array | - Enable the [`ManualColumnMove`](@/api/manualColumnMove.md) plugin<br>- Move individual columns at initialization |
   *
   * Read more:
   * - [Column moving](@/guides/columns/column-moving.md)
   *
   * @memberof Options#
   * @type {boolean|number[]}
   * @default undefined
   * @category ManualColumnMove
   *
   * @example
   * ```js
   * // enable the `ManualColumnMove` plugin
   * manualColumnMove: true,
   *
   * // enable the `ManualColumnMove` plugin
   * // at initialization, move column 0 to 1
   * // at initialization, move column 1 to 4
   * // at initialization, move column 2 to 6
   * manualColumnMove: [1, 4, 6],
   * ```
   */
  manualColumnMove: void 0,
  /**
   * @description
   * The `manualColumnResize` option configures the [`ManualColumnResize`](@/api/manualColumnResize.md) plugin.
   *
   * You can set the `manualColumnResize` option to one of the following:
   *
   * | Setting  | Description                                                                                                           |
   * | -------- | --------------------------------------------------------------------------------------------------------------------- |
   * | `true`   | Enable the [`ManualColumnResize`](@/api/manualColumnResize.md) plugin                                                 |
   * | `false`  | Disable the [`ManualColumnResize`](@/api/manualColumnResize.md) plugin                                                |
   * | An array | - Enable the [`ManualColumnResize`](@/api/manualColumnResize.md) plugin<br>- Set initial widths of individual columns |
   *
   * Read more:
   * - [Column width: Column stretching](@/guides/columns/column-width.md#column-stretching)
   *
   * @memberof Options#
   * @type {boolean|number[]}
   * @default undefined
   * @category ManualColumnResize
   *
   * @example
   * ```js
   * // enable the `manualColumnResize` plugin
   * manualColumnResize: true,
   *
   * // enable the `manualColumnResize` plugin
   * // set the initial width of column 0 to 40 pixels
   * // set the initial width of column 1 to 50 pixels
   * // set the initial width of column 2 to 60 pixels
   * manualColumnResize: [40, 50, 60],
   * ```
   */
  manualColumnResize: void 0,
  /**
   * @description
   * The `manualRowMove` option configures the [`ManualRowMove`](@/api/manualRowMove.md) plugin.
   *
   * You can set the `manualRowMove` option to one of the following:
   *
   * | Setting  | Description                                                                                               |
   * | -------- | --------------------------------------------------------------------------------------------------------- |
   * | `true`   | Enable the [`ManualRowMove`](@/api/manualRowMove.md) plugin                                               |
   * | `false`  | Disable the [`ManualRowMove`](@/api/manualRowMove.md) plugin                                              |
   * | An array | - Enable the [`ManualRowMove`](@/api/manualRowMove.md) plugin<br>- Move individual rows at initialization |
   *
   * Read more:
   * - [Row moving](@/guides/rows/row-moving.md)
   *
   * @memberof Options#
   * @type {boolean|number[]}
   * @default undefined
   * @category ManualRowMove
   *
   * @example
   * ```js
   * // enable the `ManualRowMove` plugin
   * manualRowMove: true,
   *
   * // enable the `ManualRowMove` plugin
   * // at initialization, move row 0 to 1
   * // at initialization, move row 1 to 4
   * // at initialization, move row 2 to 6
   * manualColumnMove: [1, 4, 6],
   * ```
   */
  manualRowMove: void 0,
  /**
   * @description
   * The `manualRowResize` option configures the [`ManualRowResize`](@/api/manualRowResize.md) plugin.
   *
   * You can set the `manualRowResize` option to one of the following:
   *
   * | Setting  | Description                                                                                                   |
   * | -------- | ------------------------------------------------------------------------------------------------------------- |
   * | `true`   | Enable the [`ManualRowResize`](@/api/manualRowResize.md) plugin                                               |
   * | `false`  | Disable the [`ManualRowResize`](@/api/manualRowResize.md) plugin                                              |
   * | An array | - Enable the [`ManualRowResize`](@/api/manualRowResize.md) plugin<br>- Set initial heights of individual rows |
   *
   * Read more:
   * - [Row height: Adjust the row height manually](@/guides/rows/row-height.md#adjust-the-row-height-manually)
   *
   * @memberof Options#
   * @type {boolean|number[]}
   * @default undefined
   * @category ManualRowResize
   *
   * @example
   * ```js
   * // enable the `ManualRowResize` plugin
   * manualRowResize: true,
   *
   * // enable the `ManualRowResize` plugin
   * // set the initial height of row 0 to 40 pixels
   * // set the initial height of row 1 to 50 pixels
   * // set the initial height of row 2 to 60 pixels
   * manualRowResize: [40, 50, 60],
   * ```
   */
  manualRowResize: void 0,
  /**
   * The `maxCols` option sets a maximum number of columns.
   *
   * The `maxCols` option is used:
   * - At initialization: if the `maxCols` value is lower than the initial number of columns,
   * Handsontable trims columns from the right.
   * - At runtime: for example, when inserting columns.
   *
   * @memberof Options#
   * @type {number}
   * @default Infinity
   * @category Core
   *
   * @example
   * ```js
   * // set the maximum number of columns to 300
   * maxCols: 300,
   * ```
   */
  maxCols: 1 / 0,
  /**
   * The `maxRows` option sets a maximum number of rows.
   *
   * The `maxRows` option is used:
   * - At initialization: if the `maxRows` value is lower than the initial number of rows,
   * Handsontable trims rows from the bottom.
   * - At runtime: for example, when inserting rows.
   *
   * @memberof Options#
   * @type {number}
   * @default Infinity
   * @category Core
   *
   * @example
   * ```js
   * // set the maximum number of rows to 300
   * maxRows: 300,
   * ```
   */
  maxRows: 1 / 0,
  /**
   * @description
   * The `mergeCells` option configures the [`MergeCells`](@/api/mergeCells.md) plugin.
   *
   * You can set the `mergeCells` option to one of the following:
   *
   * | Setting             | Description                                                                                         |
   * | ------------------- | --------------------------------------------------------------------------------------------------- |
   * | `true`              | Enable the [`MergeCells`](@/api/mergeCells.md) plugin                                               |
   * | `false`             | Disable the [`MergeCells`](@/api/mergeCells.md) plugin                                              |
   * | An array of objects | - Enable the [`MergeCells`](@/api/mergeCells.md) plugin<br>- Merge specific cells at initialization |
   *
   * To merge specific cells at Handsontable's initialization,
   * set the `mergeCells` option to an array of objects, with the following properties:
   *
   * | Property  | Description                                                |
   * | --------- | ---------------------------------------------------------- |
   * | `row`     | The row index of the merged section's beginning            |
   * | `col`     | The column index of the merged section's beginning         |
   * | `rowspan` | The width (as a number of rows) of the merged section      |
   * | `colspan` | The height (as a number of columns ) of the merged section |
   *
   * Read more:
   * - [Merge cells](@/guides/cell-features/merge-cells.md)
   *
   * @memberof Options#
   * @type {boolean|object[]}
   * @default false
   * @category MergeCells
   *
   * @example
   * ```js
   * // enable the `MergeCells` plugin
   * mergeCells: true,
   *
   * // enable the `MergeCells` plugin
   * // and merge specific cells at initialization
   * mergeCells: [
   *   // merge cells from cell (1,1) to cell (3,3)
   *   {row: 1, col: 1, rowspan: 3, colspan: 3},
   *   // merge cells from cell (3,4) to cell (2,2)
   *   {row: 3, col: 4, rowspan: 2, colspan: 2},
   *   // merge cells from cell (5,6) to cell (3,3)
   *   {row: 5, col: 6, rowspan: 3, colspan: 3}
   * ],
   * ```
   */
  mergeCells: !1,
  /**
   * The `minCols` option sets a minimum number of columns.
   *
   * The `minCols` option is used:
   * - At initialization: if the `minCols` value is higher than the initial number of columns,
   * Handsontable adds empty columns to the right.
   * - At runtime: for example, when removing columns.
   *
   * The `minCols` option works only when your [`data`](#data) is an [array of arrays](@/guides/getting-started/binding-to-data.md#array-of-arrays).
   * When your [`data`](#data) is an [array of objects](@/guides/getting-started/binding-to-data.md#array-of-objects),
   * you can only have as many columns as defined in:
   * - The first data row
   * - The [`dataSchema`](#dataSchema) option
   * - The [`columns`](#columns) option
   *
   * @memberof Options#
   * @type {number}
   * @default 0
   * @category Core
   *
   * @example
   * ```js
   * // set the minimum number of columns to 10
   * minCols: 10,
   * ```
   */
  minCols: 0,
  /**
   * The `minRows` option sets a minimum number of rows.
   *
   * The `minRows` option is used:
   * - At initialization: if the `minRows` value is higher than the initial number of rows,
   * Handsontable adds empty rows at the bottom.
   * - At runtime: for example, when removing rows.
   *
   * @memberof Options#
   * @type {number}
   * @default 0
   * @category Core
   *
   * @example
   * ```js
   * // set the minimum number of rows to 10
   * minRows: 10,
   * ```
   */
  minRows: 0,
  /**
   * The `minSpareCols` option sets a minimum number of empty columns
   * at the grid's right-hand end.
   *
   * If there already are other empty columns at the grid's right-hand end,
   * they are counted into the `minSpareCols` value.
   *
   * The total number of columns can't exceed the [`maxCols`](#maxCols) value.
   *
   * The `minSpareCols` option works only when your [`data`](#data) is an [array of arrays](@/guides/getting-started/binding-to-data.md#array-of-arrays).
   * When your [`data`](#data) is an [array of objects](@/guides/getting-started/binding-to-data.md#array-of-objects),
   * you can only have as many columns as defined in:
   * - The first data row
   * - The [`dataSchema`](#dataSchema) option
   * - The [`columns`](#columns) option
   *
   * @memberof Options#
   * @type {number}
   * @default 0
   * @category Core
   *
   * @example
   * ```js
   * // at Handsontable's initialization, add at least 3 empty columns on the right
   * minSpareCols: 3,
   * ```
   */
  minSpareCols: 0,
  /**
   * The `minSpareRows` option sets a minimum number of empty rows
   * at the bottom of the grid.
   *
   * If there already are other empty rows at the bottom,
   * they are counted into the `minSpareRows` value.
   *
   * The total number of rows can't exceed the [`maxRows`](#maxRows) value.
   *
   * @memberof Options#
   * @type {number}
   * @default 0
   * @category Core
   *
   * @example
   * ```js
   * // at Handsontable's initialization, add at least 3 empty rows at the bottom
   * minSpareRows: 3,
   * ```
   */
  minSpareRows: 0,
  /**
   * @description
   * The `multiColumnSorting` option configures the [`MultiColumnSorting`](@/api/columnSorting.md) plugin.
   *
   * You can set the `multiColumnSorting` option to one of the following:
   *
   * | Setting    | Description                                                                                                                                                |
   * | ---------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
   * | `true`     | Enable the [`MultiColumnSorting`](@/api/multiColumnSorting.md) plugin with the default configuration                                                       |
   * | `false`    | Disable the [`MultiColumnSorting`](@/api/multiColumnSorting.md) plugin                                                                                     |
   * | An object  | - Enable the [`MultiColumnSorting`](@/api/multiColumnSorting.md) plugin<br>- Modify the [`MultiColumnSorting`](@/api/multiColumnSorting.md) plugin options |
   *
   * If you set the `multiColumnSorting` option to an object,
   * you can set the following [`MultiColumnSorting`](@/api/multiColumnSorting.md) plugin options:
   *
   * | Option                   | Possible settings                                                                                                                                |
   * | ------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------ |
   * | `indicator`              | `true`: Display the arrow icon in the column header, to indicate a sortable column<br>`false`: Don't display the arrow icon in the column header |
   * | `headerAction`           | `true`: Enable clicking on the column header to sort the column<br>`false`: Disable clicking on the column header to sort the column             |
   * | `sortEmptyCells`         | `true`: Sort empty cells as well<br>`false`: Place empty cells at the end                                                                        |
   * | `compareFunctionFactory` | A [custom compare function](@/guides/rows/rows-sorting.md#add-a-custom-comparator)                                                               |
   *
   * If you set the `multiColumnSorting` option to an object,
   * you can also sort individual columns at Handsontable's initialization.
   * In the `multiColumnSorting` object, add an object named `initialConfig`,
   * with the following properties:
   *
   * | Option      | Possible settings   | Description                                                      |
   * | ----------- | ------------------- | ---------------------------------------------------------------- |
   * | `column`    | A number            | The index of the column that you want to sort at initialization  |
   * | `sortOrder` | `'asc'` \| `'desc'` | The sorting order:<br>`'asc'`: ascending<br>`'desc'`: descending |
   *
   * Read more:
   * - [Rows sorting](@/guides/rows/rows-sorting.md)
   * - [`columnSorting`](#columnSorting)
   *
   * @memberof Options#
   * @type {boolean|object}
   * @default undefined
   * @category MultiColumnSorting
   *
   * @example
   * ```js
   * // enable the `MultiColumnSorting` plugin
   * multiColumnSorting: true
   *
   * // enable the `MultiColumnSorting` plugin with custom configuration
   * multiColumnSorting: {
   *   // sort empty cells as well
   *   sortEmptyCells: true,
   *   // display the arrow icon in the column header
   *   indicator: true,
   *   // disable clicking on the column header to sort the column
   *   headerAction: false,
   *   // add a custom compare function
   *   compareFunctionFactory(sortOrder, columnMeta) {
   *     return function(value, nextValue) {
   *       // some value comparisons which will return -1, 0 or 1...
   *     }
   *   }
   * }
   *
   * // enable the `MultiColumnSorting` plugin
   * multiColumnSorting: {
   *   // at initialization, sort column 1 in ascending order
   *   initialConfig: {
   *     column: 1,
   *     sortOrder: 'asc'
   *   },
   *   // at initialization, sort column 2 in descending order
   *   initialConfig: {
   *     column: 2,
   *     sortOrder: 'desc'
   *   }
   * }
   * ```
   */
  multiColumnSorting: void 0,
  /**
   * @description
   * The `nestedHeaders` option configures the [`NestedHeaders`](@/api/nestedHeaders.md) plugin.
   *
   * You can set the `nestedHeaders` option to one of the following:
   *
   * | Setting           | Description                                                                                                                           |
   * | ----------------- | ------------------------------------------------------------------------------------------------------------------------------------- |
   * | `false` (default) | Disable the [`NestedHeaders`](@/api/nestedHeaders.md) plugin                                                                          |
   * | `true`            | - Enable the [`NestedHeaders`](@/api/nestedHeaders.md) plugin<br>- Don't configure any nested headers                                 |
   * | Array of arrays   | - Enable the [`NestedHeaders`](@/api/nestedHeaders.md) plugin<br>- Configure headers that are nested on Handsontable's initialization |
   *
   * If you set the `nestedHeaders` option to an array of arrays, each array configures one set of nested headers.
   *
   * Each array element configures one header, and can be one of the following:
   *
   * | Array element | Description                                                                                  |
   * | ------------- | -------------------------------------------------------------------------------------------- |
   * | A string      | The header's label                                                                           |
   * | An object     | Properties:<br>`label` (string): the header's label<br>`colspan` (integer): the column width |
   *
   * Read more:
   * - [Plugins: `NestedHeaders`](@/api/nestedHeaders.md)
   * - [Column groups: Nested headers](@/guides/columns/column-groups.md#nested-headers)
   *
   * @memberof Options#
   * @type {boolean|Array[]}
   * @default undefined
   * @category NestedHeaders
   *
   * @example
   * ```js
   * nestedHeaders: [
   *   ['A', {label: 'B', colspan: 8}, 'C'],
   *   ['D', {label: 'E', colspan: 4}, {label: 'F', colspan: 4}, 'G'],
   *   ['H', 'I', 'J', 'K', 'L', 'M', 'N', 'R', 'S', 'T']
   * ],
   * ```
   */
  nestedHeaders: void 0,
  /**
   * @description
   * The `nestedRows` option configures the [`NestedRows`](@/api/nestedRows.md) plugin.
   *
   * You can set the `nestedRows` option to one of the following:
   *
   * | Setting           | Description                                            |
   * | ----------------- | ------------------------------------------------------ |
   * | `false` (default) | Disable the [`NestedRows`](@/api/nestedRows.md) plugin |
   * | `true`            | Enable the [`NestedRows`](@/api/nestedRows.md) plugin  |
   *
   * Read more:
   * - [Plugins: `NestedRows`](@/api/nestedRows.md)
   *
   * @example
   * ```js
   * // enable the `NestedRows` plugin
   * nestedRows: true,
   * ```
   *
   * @memberof Options#
   * @type {boolean}
   * @default false
   * @category NestedRows
   */
  nestedRows: void 0,
  /**
   * The `noWordWrapClassName` option lets you add a CSS class name
   * to each cell that has the [`wordWrap`](#wordWrap) option set to `false`.
   *
   * Read more:
   * - [`wordWrap`](#wordWrap)
   * - [`currentRowClassName`](#currentRowClassName)
   * - [`currentColClassName`](#currentColClassName)
   * - [`currentHeaderClassName`](#currentHeaderClassName)
   * - [`invalidCellClassName`](#invalidCellClassName)
   * - [`readOnlyCellClassName`](#readOnlyCellClassName)
   * - [`commentedCellClassName`](#commentedCellClassName)
   * - [`noWordWrapClassName`](#noWordWrapClassName)
   * - [`TableClassName`](#TableClassName)
   * - [`className`](#className)
   *
   * @memberof Options#
   * @type {string}
   * @default 'htNoWrap'
   * @category Core
   *
   * @example
   * ```js
   * // add an `is-noWrapCell` CSS class name
   * // to each cell that doesn't wrap content
   * noWordWrapClassName: 'is-noWrapCell',
   * ```
   */
  noWordWrapClassName: "htNoWrap",
  /**
   * The `numericFormat` option configures the number format and the currency format
   * of [`numeric`](@/guides/cell-types/numeric-cell-type.md) cells` displayed output
   * in the numeric cell renderer.
   *
   * You can set the `numericFormat` option to an object with the following properties:
   *
   * | Property    | Possible values                                                               | Description     |
   * | ----------- | ----------------------------------------------------------------------------- | --------------- |
   * | `pattern`   | All [`numbro.js` number formats](https://numbrojs.com/format.html#numbers)    | Number format   |
   * | `culture`   | All [`numbro.js` currency formats](https://numbrojs.com/format.html#currency) | Currency format |
   *
   * The `numericFormat` option as no effect on the numeric cell editor.
   *
   * In the source data, numeric data is stored as JavaScript numbers.
   *
   * Read more:
   * - [Numeric cell type](@/guides/cell-types/numeric-cell-type.md)
   * - [Third-party licenses](@/guides/technical-specification/third-party-licenses.md)
   *
   * @memberof Options#
   * @since 0.35.0
   * @type {object}
   * @default undefined
   * @category Core
   *
   * @example
   * ```js
   * columns: [
   *   {
   *     // set the `type` of each cell in this column to `numeric`
   *     type: 'numeric',
   *     // set the `numericFormat` option for every `numeric` cell of this column
   *     numericFormat: {
   *       // set the number format
   *       pattern: '0,00',
   *       // set the currency format
   *       culture: 'en-US'
   *     }
   *   }
   * ],
   * ```
   */
  numericFormat: void 0,
  /**
   * If the `observeDOMVisibility` option is set to `true`,
   * Handsontable rerenders every time it detects that the grid was made visible in the DOM.
   *
   * @memberof Options#
   * @type {boolean}
   * @default true
   * @category Core
   *
   * @example
   * ```js
   * // don't rerender the grid on visibility changes
   * observeDOMVisibility: false,
   * ```
   */
  observeDOMVisibility: !0,
  /**
   * The `outsideClickDeselects` option determines what happens to the current [selection](@/guides/cell-features/selection.md)
   * when you click outside of the grid.
   *
   * You can set the `outsideClickDeselects` option to one of the following:
   *
   * | Setting          | Description                                                                                              |
   * | ---------------- | -------------------------------------------------------------------------------------------------------- |
   * | `true` (default) | On a mouse click outside of the grid, clear the current [selection](@/guides/cell-features/selection.md) |
   * | `false`          | On a mouse click outside of the grid, keep the current [selection](@/guides/cell-features/selection.md)  |
   * | A function       | A function that takes the click event target and returns a boolean                                       |
   *
   * @memberof Options#
   * @type {boolean|Function}
   * @default true
   * @category Core
   *
   * @example
   * ```js
   * // on a mouse click outside of the grid, clear the current selection
   * outsideClickDeselects: true,
   *
   * // on a mouse click outside of the grid, keep the current selection
   * outsideClickDeselects: false,
   *
   * // take the click event target and return `false`
   * outsideClickDeselects(event) {
   *   return false;
   * }
   *
   * // take the click event target and return `true`
   * outsideClickDeselects(event) {
   *   return false;
   * }
   * ```
   */
  outsideClickDeselects: !0,
  /**
   * @description
   * The `persistentState` option configures the [`PersistentState`](@/api/persistentState.md) plugin.
   *
   * You can set the `persistentState` to one of the following:
   *
   * | Setting           | Description                                                      |
   * | ----------------- | ---------------------------------------------------------------- |
   * | `false` (default) | Disable the [`PersistentState`](@/api/persistentState.md) plugin |
   * | `true`            | Enable the [`PersistentState`](@/api/persistentState.md) plugin  |
   *
   * Read more:
   * - [Saving data: Saving data locally](@/guides/getting-started/saving-data.md#save-data-locally)
   * - [Plugins: `PersistentState`](@/api/persistentState.md)
   *
   * @memberof Options#
   * @type {boolean}
   * @default false
   * @category PersistentState
   *
   * @example
   * ```js
   * // enable the `PersistentState` plugin
   * persistentState: true,
   * ```
   */
  persistentState: void 0,
  /**
   * The `placeholder` option lets you display placeholder text in every empty cell.
   *
   * You can set the `placeholder` option to one of the following:
   *
   * | Setting            | Example        | Description                                                           |
   * | ------------------ | -------------- | --------------------------------------------------------------------- |
   * | A non-empty string | `'Empty cell'` | Display `Empty cell` text in empty cells                              |
   * | A non-string value | `000`          | Display `000` text in empty cells (non-string values get stringified) |
   *
   * Read more:
   * - [`placeholderCellClassName`](#placeholderCellClassName)
   *
   * @memberof Options#
   * @type {string}
   * @default undefined
   * @category Core
   *
   * @example
   * ```js
   * // display 'Empty cell' text
   * // in every empty cell of the entire grid
   * placeholder: 'Empty cell',
   *
   * // or
   * columns: [
   *   {
   *     data: 'date',
   *     dateFormat: 'DD/MM/YYYY',
   *     // display 'Empty date cell' text
   *     // in every empty cell of the `date` column
   *     placeholder: 'Empty date cell'
   *   }
   * ],
   * ```
   */
  placeholder: void 0,
  /**
   * The `placeholderCellClassName` option lets you add a CSS class name to cells
   * that contain [`placeholder`](#placeholder) text.
   *
   * Read more:
   * - [Cell validator](@/guides/cell-functions/cell-validator.md)
   * - [`placeholder`](#placeholder)
   * - [`currentRowClassName`](#currentRowClassName)
   * - [`currentHeaderClassName`](#currentHeaderClassName)
   * - [`activeHeaderClassName`](#activeHeaderClassName)
   * - [`currentColClassName`](#currentColClassName)
   * - [`readOnlyCellClassName`](#readOnlyCellClassName)
   * - [`commentedCellClassName`](#commentedCellClassName)
   * - [`noWordWrapClassName`](#noWordWrapClassName)
   * - [`TableClassName`](#TableClassName)
   * - [`className`](#className)
   *
   * @memberof Options#
   * @type {string}
   * @default 'htPlaceholder'
   * @category Core
   *
   * @example
   * ```js
   * // add a `has-placeholder` CSS class name
   * // to each cell that contains `placeholder` text
   * placeholderCellClassName: 'has-placeholder',
   * ```
   */
  placeholderCellClassName: "htPlaceholder",
  /**
   * The `preventOverflow` option configures preventing Handsontable
   * from overflowing outside of its parent element.
   *
   * You can set the `preventOverflow` option to one of the following:
   *
   * | Setting           | Description                      |
   * | ----------------- | -------------------------------- |
   * | `false` (default) | Don't prevent overflowing        |
   * | `'horizontal'`      | Prevent horizontal overflowing |
   * | `'vertical'`        | Prevent vertical overflowing   |
   *
   * @memberof Options#
   * @type {string|boolean}
   * @default false
   * @category Core
   *
   * @example
   * ```js
   * // prevent horizontal overflowing
   * preventOverflow: 'horizontal',
   * ```
   */
  preventOverflow: !1,
  /**
   * The `preventWheel` option configures preventing the `wheel` event's default action
   * on overlays.
   *
   * You can set the `preventWheel` option to one of the following:
   *
   * | Setting           | Description                                      |
   * | ----------------- | ------------------------------------------------ |
   * | `false` (default) | Don't prevent the `wheel` event's default action |
   * | `true`            | Prevent the `wheel` event's default action       |
   *
   * @memberof Options#
   * @private
   * @type {boolean}
   * @default false
   * @category Core
   *
   * @example
   * ```js
   * // don't prevent the `wheel` event's default action
   * preventWheel: false,
   * ```
   */
  preventWheel: !1,
  /**
   * @description
   * The `readOnly` option determines whether a cell, column or comment is editable or not.
   *
   * You can set the `readOnly` option to one of the following:
   *
   * | Setting           | Decription                                                                                                                |
   * | ----------------- | ------------------------------------------------------------------------------------------------------------------------- |
   * | `false` (default) | Set as editable                                                                                                           |
   * | `true`            | - Set as read-only<br>- Add the [`readOnlyCellClassName`](#readOnlyCellClassName) CSS class name (by default: `htDimmed`) |
   *
   * `readOnly` cells can't be changed by the [`populateFromArray()`](@/api/core.md#populatefromarray) method.
   *
   * Read more:
   * - [Configuration options: Cascading configuration](@/guides/getting-started/configuration-options.md#cascading-configuration)
   *
   * @memberof Options#
   * @type {boolean}
   * @default false
   * @category Core
   *
   * @example
   * ```js
   * // set as read-only
   * readOnly: true,
   * ```
   */
  readOnly: !1,
  /**
   * The `readOnlyCellClassName` option lets you add a CSS class name to [read-only](#readOnly) cells.
   *
   * Read more:
   * - [`currentRowClassName`](#currentRowClassName)
   * - [`currentColClassName`](#currentColClassName)
   * - [`currentHeaderClassName`](#currentHeaderClassName)
   * - [`activeHeaderClassName`](#activeHeaderClassName)
   * - [`invalidCellClassName`](#invalidCellClassName)
   * - [`placeholderCellClassName`](#placeholderCellClassName)
   * - [`commentedCellClassName`](#commentedCellClassName)
   * - [`noWordWrapClassName`](#noWordWrapClassName)
   * - [`readOnlyCellClassName`](#readOnlyCellClassName)
   * - [`TableClassName`](#TableClassName)
   *
   * @memberof Options#
   * @type {string}
   * @default 'htDimmed'
   * @category Core
   *
   * @example
   * ```js
   * // add a `is-readOnly` CSS class name
   * // to every read-only cell
   * readOnlyCellClassName: 'is-readOnly',
   * ```
   */
  readOnlyCellClassName: "htDimmed",
  /**
   * The `renderAllRows` option configures Handsontable's [row virtualization](@/guides/rows/row-virtualization.md).
   *
   * You can set the `renderAllRows` option to one of the following:
   *
   * | Setting           | Description                                                                                        |
   * | ----------------- | -------------------------------------------------------------------------------------------------- |
   * | `false` (default) | Enable [row virtualization](@/guides/rows/row-virtualization.md)                                   |
   * | `true`            | Disable [row virtualization](@/guides/rows/row-virtualization.md)<br>(render all rows of the grid) |
   *
   * Read more:
   * - [Row virtualization](@/guides/rows/row-virtualization.md)
   *
   * @memberof Options#
   * @type {boolean}
   * @default undefined
   * @category Core
   *
   * @example
   * ```js
   * // disable row virtualization
   * renderAllRows: true,
   * ```
   */
  renderAllRows: void 0,
  /**
   * @description
   * The `renderer` option sets a [cell renderer](@/guides/cell-functions/cell-renderer.md) for a cell.
   *
   * You can set the `renderer` option to one of the following:
   * - A custom renderer function
   * - One of the following [cell renderer aliases](@/guides/cell-functions/cell-renderer.md):
   *
   * | Alias               | Cell renderer function                                                         |
   * | ------------------- | ------------------------------------------------------------------------------ |
   * | A custom alias      | Your [custom cell renderer](@/guides/cell-functions/cell-renderer.md) function |
   * | `'autocomplete'`    | `AutocompleteRenderer`                                                         |
   * | `'base'`            | `BaseRenderer`                                                                 |
   * | `'checkbox'`        | `CheckboxRenderer`                                                             |
   * | `'date'`            | `DateRenderer`                                                                 |
   * | `'dropdown'`        | `DropdownRenderer`                                                             |
   * | `'html'`            | `HtmlRenderer`                                                                 |
   * | `'numeric'`         | `NumericRenderer`                                                              |
   * | `'password'`        | `PasswordRenderer`                                                             |
   * | `'text'`            | `TextRenderer`                                                                 |
   * | `'time'`            | `TimeRenderer`                                                                 |
   *
   * To set the [`renderer`](#renderer), [`editor`](#editor), and [`validator`](#validator)
   * options all at once, use the [`type`](#type) option.
   *
   * Read more:
   * - [Cell renderer](@/guides/cell-functions/cell-renderer.md)
   * - [Cell type](@/guides/cell-types/cell-type.md)
   * - [Configuration options: Cascading configuration](@/guides/getting-started/configuration-options.md#cascading-configuration)
   * - [`type`](#type)
   *
   * @memberof Options#
   * @type {string|Function}
   * @default undefined
   * @category Core
   *
   * @example
   * ```js
   * // use the `numeric` renderer for each cell of the entire grid
   * renderer: `'numeric'`,
   *
   * // add a custom renderer function
   * renderer(hotInstance, td, row, column, prop, value, cellProperties) {
   *   // your custom renderer's logic
   *   ...
   * }
   *
   * // apply the `renderer` option to individual columns
   * columns: [
   *   {
   *     // use the `autocomplete` renderer for each cell of this column
   *     renderer: 'autocomplete'
   *   },
   *   {
   *     // use the `myCustomRenderer` renderer for each cell of this column
   *     renderer: 'myCustomRenderer'
   *   }
   * ]
   * ```
   */
  renderer: void 0,
  /**
   * The `rowHeaders` option configures your grid's row headers.
   *
   * You can set the `rowHeaders` option to one of the following:
   *
   * | Setting    | Description                                                       |
   * | ---------- | ----------------------------------------------------------------- |
   * | `true`     | Enable the default row headers ('1', '2', '3', ...)               |
   * | `false`    | Disable row headers                                               |
   * | An array   | Define your own row headers (e.g. `['One', 'Two', 'Three', ...]`) |
   * | A function | Define your own row headers, using a function                     |
   *
   * Read more:
   * - [Row header](@/guides/rows/row-header.md)
   *
   * @memberof Options#
   * @type {boolean|string[]|Function}
   * @default undefined
   * @category Core
   *
   * @example
   * ```js
   * // enable the default row headers
   * rowHeaders: true,
   *
   * // set your own row headers
   * rowHeaders: ['One', 'Two', 'Three'],
   *
   * // set your own row headers, using a function
   * rowHeaders: function(visualRowIndex) {
   *   return `${visualRowIndex}: AB`;
   * },
   * ```
   */
  rowHeaders: void 0,
  /**
   * @description
   * The `rowHeaderWidth` option configures the width of row headers.
   *
   * You can set the `rowHeaderWidth` option to one of the following:
   *
   * | Setting  | Description                                     |
   * | -------- | ----------------------------------------------- |
   * | A number | Set the same width for every row header         |
   * | An array | Set different widths for individual row headers |
   *
   * @memberof Options#
   * @type {number|number[]}
   * @default undefined
   * @category Core
   *
   * @example
   * ```js
   * // set the same width for every row header
   * rowHeaderWidth: 25,
   *
   * // set different widths for individual row headers
   * rowHeaderWidth: [25, 30, 55],
   * ```
   */
  rowHeaderWidth: void 0,
  /**
   * The `rowHeights` option sets rows' heights, in pixels.
   *
   * In the rendering process, the default row height is 23 px (22 px + 1 px of the row's bottom border).
   * You can change it to equal or greater than 23px, by setting the `rowHeights` option to one of the following:
   *
   * | Setting     | Description                                                                                         | Example                                                      |
   * | ----------- | --------------------------------------------------------------------------------------------------- | ------------------------------------------------------------ |
   * | A number    | Set the same height for every row                                                                   | `rowHeights: 100`                                            |
   * | A string    | Set the same height for every row                                                                   | `rowHeights: '100px'`                                        |
   * | An array    | Set heights separately for each row                                                                 | `rowHeights: [100, 120, undefined]`                          |
   * | A function  | Set row heights dynamically,<br>on each render                                                      | `rowHeights(visualRowIndex) { return visualRowIndex * 10; }` |
   * | `undefined` | Used by the [modifyRowHeight](@/api/hooks.md#modifyRowHeight) hook,<br>to detect row height changes | `rowHeights: undefined`                                      |
   *
   * The `rowHeights` option also sets the minimum row height that can be set
   * via the {@link ManualRowResize} and {@link AutoRowSize} plugins (if they are enabled).
   *
   * Read more:
   * - [Row height](@/guides/rows/row-height.md)
   *
   * @memberof Options#
   * @type {number|number[]|string|string[]|Array<undefined>|Function}
   * @default undefined
   * @category Core
   *
   * @example
   * ```js
   * // set every row's height to 100px
   * rowHeights: 100,
   *
   * // set every row's height to 100px
   * rowHeights: '100px',
   *
   * // set the first (by visual index) row's height to 100
   * // set the second (by visual index) row's height to 120
   * // set the third (by visual index) row's height to `undefined`
   * // set any other row's height to the default 23px
   * rowHeights: [100, 120, undefined],
   *
   * // set each row's height individually, using a function
   * rowHeights(visualRowIndex) {
   *   return visualRowIndex * 10;
   * },
   * ```
   */
  rowHeights: void 0,
  /**
   * @description
   * The `search` option configures the [`Search`](@/api/search.md) plugin.
   *
   * You can set the `search` option to one of the following:
   *
   * | Setting           | Description                                                                          |
   * | ----------------- | ------------------------------------------------------------------------------------ |
   * | `false` (default) | Disable the [`Search`](@/api/search.md) plugin                                       |
   * | `true`            | Enable the [`Search`](@/api/search.md) plugin with the default configuration         |
   * | An object         | - Enable the [`Search`](@/api/search.md) plugin<br>- Apply your custom configuration |
   *
   * If you set the `search` option to an object, you can configure the following search options:
   *
   * | Option              | Possible settings | Description                                                                                          |
   * | ------------------- | ----------------- | ---------------------------------------------------------------------------------------------------- |
   * | `searchResultClass` | A string          | Add a custom CSS class name to search results                                                        |
   * | `queryMethod`       | A function        | Add a [custom query method](@/guides/accessories-and-menus/searching-values.md#custom-query-method)  |
   * | `callback`          | A function        | Add a [custom callback function](@/guides/accessories-and-menus/searching-values.md#custom-callback) |
   *
   * Read more:
   * - [Searching values](@/guides/accessories-and-menus/searching-values.md)
   * - [Searching values: Custom query method](@/guides/accessories-and-menus/searching-values.md#custom-query-method)
   * - [Searching values: Custom callback](@/guides/accessories-and-menus/searching-values.md#custom-callback)
   *
   * @memberof Options#
   * @type {boolean|object}
   * @default false
   * @category Search
   *
   * @example
   * ```js
   * // enable the `Search` plugin with the default configuration
   * search: true,
   *
   * // enable the `Search` plugin with a custom configuration
   * search: {
   *   // add a `customClass` CSS class name to search results
   *   searchResultClass: 'customClass',
   *   // add a custom query method
   *   queryMethod(queryStr, value) {
   *     ...
   *   },
   *   // add a custom callback function
   *   callback(instance, row, column, value, result) {
   *     ...
   *   }
   * }
   * ```
   */
  search: !1,
  /**
   * @description
   * The `selectionMode` option configures how [selection](@/guides/cell-features/selection.md) works.
   *
   * You can set the `selectionMode` option to one of the following:
   *
   * | Setting      | Description                                                  |
   * | ------------ | ------------------------------------------------------------ |
   * | `'single'`   | Allow the user to select only one cell at a time.            |
   * | `'range'`    | Allow the user to select one range of cells at a time.       |
   * | `'multiple'` | Allow the user to select multiple ranges of cells at a time. |
   *
   * Read more:
   * - [Selection: Selecting ranges](@/guides/cell-features/selection.md#select-ranges)
   *
   * @memberof Options#
   * @type {string}
   * @default 'multiple'
   * @category Core
   *
   * @example
   * ```js
   * // you can only select one cell at at a time
   * selectionMode: 'single',
   *
   * // you can select one range of cells at a time
   * selectionMode: 'range',
   *
   * // you can select multiple ranges of cells at a time
   * selectionMode: 'multiple',
   * ```
   */
  selectionMode: "multiple",
  /**
   * The `selectOptions` option configures options that the end user can choose from in [`select`](@/guides/cell-types/select-cell-type.md) cells.
   *
   * You can set the `selectOptions` option to one of the following:
   *
   * | Setting                         | Description                                                                   |
   * | ------------------------------- | ----------------------------------------------------------------------------- |
   * | An array of strings             | Each string is one option's value and label                                   |
   * | An object with key-string pairs | - Each key is one option's value<br>- The key's string is that option's label |
   * | A function                      | A function that returns an object with key-string pairs                       |
   *
   * Read more:
   * - [Select cell type](@/guides/cell-types/select-cell-type.md)
   *
   * @memberof Options#
   * @type {string[]|object|Function}
   * @default undefined
   * @category Core
   *
   * @example
   * ```js
   * columns: [
   *   {
   *     // set the `type` of each cell in this column to `select`
   *     type: 'select',
   *     // set the first option's value and label to `A`
   *     // set the second option's value and label to `B`
   *     // set the third option's value and label to `C`
   *     selectOptions: ['A', 'B', 'C'],
   *   },
   *   {
   *     // set the `type` of each cell in this column to `select`
   *     type: 'select',
   *     selectOptions: {
   *       // set the first option's value to `value1` and label to `Label 1`
   *       value1: 'Label 1',
   *       // set the second option's value to `value2` and label to `Label 2`
   *       value2: 'Label 2',
   *       // set the third option's value to `value3` and label to `Label 3`
   *       value3: 'Label 3',
   *     },
   *   },
   *   {
   *     // set the `type` of each cell in this column to `select`
   *     type: 'select',
   *     // set `selectOption` to a function that returns available options as an object
   *     selectOptions(visualRow, visualColumn, prop) {
   *       return {
   *         value1: 'Label 1',
   *         value2: 'Label 2',
   *         value3: 'Label 3',
   *       };
   *   },
   * ],
   * ```
   */
  selectOptions: void 0,
  /**
   * @description
   * The `skipColumnOnPaste` option determines whether you can paste data into a given column.
   *
   * You can only apply the `skipColumnOnPaste` option to an entire column, using the [`columns`](#columns) option.
   *
   * You can set the `skipColumnOnPaste` option to one of the following:
   *
   * | Setting           | Description                                                                                           |
   * | ----------------- | ----------------------------------------------------------------------------------------------------- |
   * | `false` (default) | Enable pasting data into this column                                                                  |
   * | `true`            | - Disable pasting data into this column<br>- On pasting, paste data into the next column to the right |
   *
   * Read more:
   * - [Configuration options: Setting column options](@/guides/getting-started/configuration-options.md#set-column-options)
   *
   * @memberof Options#
   * @type {boolean}
   * @default false
   * @category Core
   *
   * @example
   * ```js
   * columns: [
   *   {
   *     // disable pasting data into this column
   *     skipColumnOnPaste: true
   *   }
   * ],
   * ```
   */
  skipColumnOnPaste: !1,
  /**
   * @description
   *
   * The `skipRowOnPaste` option determines whether you can paste data into a given row.
   *
   * You can only apply the `skipRowOnPaste` option to an entire row, using the [`cells`](#cells) option.
   *
   * You can set the `skipRowOnPaste` option to one of the following:
   *
   * | Setting           | Description                                                                         |
   * | ----------------- | ----------------------------------------------------------------------------------- |
   * | `false` (default) | Enable pasting data into this row                                                   |
   * | `true`            | - Disable pasting data into this row<br>- On pasting, paste data into the row below |
   *
   * Read more:
   * - [Configuration options: Setting row options](@/guides/getting-started/configuration-options.md#set-row-options)
   *
   * @memberof Options#
   * @type {boolean}
   * @default false
   * @category Core
   *
   * @example
   * ```js
   * cells(row, column) {
   *  const cellProperties = {};
   *
   *  // disable pasting data into row 1
   *  if (row === 1) {
   *    cellProperties.skipRowOnPaste = true;
   *  }
   *
   *  return cellProperties;
   * }
   * ```
   */
  skipRowOnPaste: !1,
  /**
   * The `sortByRelevance` option configures whether [`autocomplete`](@/guides/cell-types/autocomplete-cell-type.md) cells'
   * lists are sorted in the same order as provided in the [`source`](#source) option.
   *
   * You can set the `sortByRelevance` option to one of the following:
   *
   * | Setting          | Description                                                                  |
   * | ---------------- | ---------------------------------------------------------------------------- |
   * | `true` (default) | Sort options in the same order as provided in the [`source`](#source) option |
   * | `false`          | Sort options alphabetically                                                  |
   *
   * Read more:
   * - [`source`](#source)
   * - [Autocomplete cell type](@/guides/cell-types/autocomplete-cell-type.md)
   *
   * @memberof Options#
   * @type {boolean}
   * @default true
   * @category Core
   *
   * @example
   * ```js
   * columns: [{
   *   // set the `type` of each cell in this column to `autocomplete`
   *   type: 'autocomplete',
   *   // set options available in every `autocomplete` cell of this column
   *   source: ['D', 'C', 'B', 'A'],
   *   // sort the `autocomplete` option in this order: D, C, B, A
   *   sortByRelevance: true
   * }],
   * ```
   */
  sortByRelevance: !0,
  /**
   * The `source` option sets options available in [`autocomplete`](@/guides/cell-types/autocomplete-cell-type.md)
   * and [`dropdown`](@/guides/cell-types/dropdown-cell-type.md) cells.
   *
   * You can set the `source` option to one of the following:
   *
   * - An array
   * - A function
   *
   * Read more:
   * - [Autocomplete cell type](@/guides/cell-types/autocomplete-cell-type.md)
   * - [Dropdown cell type](@/guides/cell-types/dropdown-cell-type.md)
   * - [`strict`](#strict)
   * - [`allowHtml`](#allowHtml)
   * - [`filter`](#filter)
   * - [`sortByRelevance`](#sortByRelevance)
   *
   * @memberof Options#
   * @type {Array|Function}
   * @default undefined
   * @category Core
   *
   * @example
   * ```js
   * // set `source` to an array
   * columns: [{
   *   // set the `type` of each cell in this column to `autocomplete`
   *   type: 'autocomplete',
   *   // set options available in every `autocomplete` cell of this column
   *   source: ['A', 'B', 'C', 'D']
   * }],
   *
   * // set `source` to a function
   * columns: [{
   *   // set the `type` of each cell in this column to `autocomplete`
   *   type: 'autocomplete',
   *   // for every `autocomplete` cell in this column, fetch data from an external source
   *   source(query, callback) {
   *     fetch('https://example.com/query?q=' + query, function(response) {
   *       callback(response.items);
   *     })
   *   }
   * }],
   * ```
   */
  source: void 0,
  /**
   * @description
   * If the [`data`](#data) option is not set, the `startCols` option sets the initial number of empty columns.
   *
   * The `startCols` option works only in Handsontable's constructor.
   *
   * @memberof Options#
   * @type {number}
   * @default 5
   * @category Core
   *
   * @example
   * ```js
   * // start with 15 empty columns
   * startCols: 15,
   * ```
   */
  startCols: 5,
  /**
   * @description
   * If the [`data`](#data) option is not set, the `startRows` option sets the initial number of empty rows.
   *
   * The `startRows` option works only in Handsontable's constructor.
   *
   * @memberof Options#
   * @type {number}
   * @default 5
   * @category Core
   *
   * @example
   * ```js
   * // start with 15 empty rows
   * startRows: 15,
   * ```
   */
  startRows: 5,
  /**
   * @description
   * The `stretchH` option determines what happens when the declared grid width
   * is different from the calculated sum of all column widths.
   *
   * You can set the `stretchH` option to one of the following:
   *
   * | Setting            | Description                                                       |
   * | ------------------ | ----------------------------------------------------------------- |
   * | `'none'` (default) | Don't fit the grid to the container (disable column stretching)   |
   * | `'last'`           | Fit the grid to the container, by stretching only the last column |
   * | `'all'`            | Fit the grid to the container, by stretching all columns evenly   |
   *
   * Read more:
   * - [Column width: Column stretching](@/guides/columns/column-width.md#column-stretching)
   *
   * @memberof Options#
   * @type {string}
   * @default 'none'
   * @category Core
   *
   * @example
   * ```js
   * // fit the grid to the container
   * // by stretching all columns evenly
   * stretchH: 'all',
   * ```
   */
  stretchH: "none",
  /**
   * The `strict` option configures the behavior of [`autocomplete`](@/guides/cell-types/autocomplete-cell-type.md) cells.
   *
   * You can set the `strict` option to one of the following:
   *
   * | Setting | Mode                                                                                          | Description                                                                                |
   * | ------- | --------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------ |
   * | `true`  | [Strict mode](@/guides/cell-types/autocomplete-cell-type.md#autocomplete-strict-mode)         | The end user:<br>- Can only choose one of suggested values<br>- Can't enter a custom value |
   * | `false` | [Flexible mode](@/guides/cell-types/autocomplete-cell-type.md#autocomplete-flexible-mode)     | The end user:<br>- Can choose one of suggested values<br>- Can enter a custom value        |
   *
   * Read more:
   * - [Autocomplete cell type](@/guides/cell-types/autocomplete-cell-type.md)
   * - [`source`](#source)
   *
   * @memberof Options#
   * @type {boolean}
   * @default undefined
   * @category Core
   *
   * @example
   * ```js
   * columns: [
   *   {
   *   // set the `type` of each cell in this column to `autocomplete`
   *   type: 'autocomplete',
   *   // set options available in every `autocomplete` cell of this column
   *   source: ['A', 'B', 'C'],
   *   // values entered must match `A`, `B`, or `C`
   *   strict: true
   *   },
   * ],
   * ```
   */
  strict: void 0,
  /**
   * The `tableClassName` option lets you add CSS class names
   * to every Handsontable instance inside the `container` element.
   *
   * You can set the `tableClassName` option to one of the following:
   *
   * | Setting             | Description                                                                                |
   * | ------------------- | ------------------------------------------------------------------------------------------ |
   * | A string            | Add a single CSS class name to every Handsontable instance inside the `container` element  |
   * | An array of strings | Add multiple CSS class names to every Handsontable instance inside the `container` element |
   *
   * Read more:
   * - [`currentRowClassName`](#currentRowClassName)
   * - [`currentColClassName`](#currentColClassName)
   * - [`currentHeaderClassName`](#currentHeaderClassName)
   * - [`activeHeaderClassName`](#activeHeaderClassName)
   * - [`invalidCellClassName`](#invalidCellClassName)
   * - [`placeholderCellClassName`](#placeholderCellClassName)
   * - [`readOnlyCellClassName`](#readOnlyCellClassName)
   * - [`noWordWrapClassName`](#noWordWrapClassName)
   * - [`commentedCellClassName`](#commentedCellClassName)
   * - [`className`](#className)
   *
   * @memberof Options#
   * @type {string|string[]}
   * @default undefined
   * @category Core
   *
   * @example
   * ```js
   * // add a `your-class-name` CSS class name
   * // to every Handsontable instance inside the `container` element
   * tableClassName: 'your-class-name',
   *
   * // add `first-class-name` and `second-class-name` CSS class names
   * // to every Handsontable instance inside the `container` element
   * tableClassName: ['first-class-name', 'second-class-name'],
   * ```
   */
  tableClassName: void 0,
  /**
   * The `tabMoves` option configures the action of the <kbd>**Tab**</kbd> key.
   *
   * You can set the `tabMoves` option to an object with the following properties
   * (or to a function that returns such an object):
   *
   * | Property | Type   | Description                                                                                                                                              |
   * | -------- | ------ | -------------------------------------------------------------------------------------------------------------------------------------------------------- |
   * | `row`    | Number | - On pressing <kbd>**Tab**</kbd>, move selection `row` rows down<br>- On pressing <kbd>**Shift**</kbd> + <kbd>**Tab**</kbd>, move selection `row` rows up              |
   * | `col`    | Number | - On pressing <kbd>**Tab**</kbd>, move selection `col` columns right<br>- On pressing <kbd>**Shift**</kbd> + <kbd>**Tab**</kbd>, move selection `col` columns left     |
   *
   * @memberof Options#
   * @type {object|Function}
   * @default {row: 0, col: 1}
   * @category Core
   *
   * @example
   * ```js
   * // on pressing Tab, move selection 2 rows down and 2 columns right
   * // on pressing Shift+Tab, move selection 2 rows up and 2 columns left
   * tabMoves: {row: 2, col: 2},
   *
   * // the same setting, as a function
   * // `event` is a DOM Event object received on pressing Tab
   * // you can use it to check whether the user pressed Tab or Shift+Tab
   * tabMoves(event) {
   *   return {row: 2, col: 2};
   * },
   * ```
   */
  tabMoves: {
    row: 0,
    col: 1
  },
  /**
   * @description
   * The `title` option configures [column header](@/guides/columns/column-header.md) names.
   *
   * You can set the `title` option to a string.
   *
   * Read more:
   * - [Column header](@/guides/columns/column-header.md)
   * - [`columns`](#columns)
   *
   * @memberof Options#
   * @type {string}
   * @default undefined
   * @category Core
   *
   * @example
   * ```js
   * columns: [
   *   {
   *     // set the first column header name to `First name`
   *     title: 'First name',
   *     type: 'text',
   *   },
   *   {
   *     // set the second column header name to `Last name`
   *     title: 'Last name',
   *     type: 'text',
   *   }
   * ],
   * ```
   */
  title: void 0,
  /**
   * The `trimDropdown` option configures the width of the [`autocomplete`](@/guides/cell-types/autocomplete-cell-type.md)
   * and [`dropdown`](@/guides/cell-types/dropdown-cell-type.md) lists.
   *
   * You can set the `trimDropdown` option to one of the following:
   *
   * | Setting          | Description                                                                     |
   * | ---------------- | ------------------------------------------------------------------------------- |
   * | `true` (default) | Make the dropdown/autocomplete list's width the same as the edited cell's width |
   * | `false`          | Scale the dropdown/autocomplete list's width to the list's content              |
   *
   * Read more:
   * - [Autocomplete cell type](@/guides/cell-types/autocomplete-cell-type.md)
   * - [Dropdown cell type](@/guides/cell-types/dropdown-cell-type.md)
   *
   * @memberof Options#
   * @type {boolean}
   * @default true
   * @category Core
   *
   * @example
   * ```js
   * columns: [
   *   {
   *     type: 'autocomplete',
   *     // for each cell of this column
   *     // make the `autocomplete` list's width the same as the edited cell's width
   *     trimDropdown: true,
   *   },
   *   {
   *     type: 'dropdown',
   *     // for each cell of this column
   *     // scale the `dropdown` list's width to the list's content
   *     trimDropdown: false,
   *   }
   * ],
   * ```
   */
  trimDropdown: !0,
  /**
   * @description
   * The `trimRows` option configures the [`TrimRows`](@/api/trimRows.md) plugin.
   *
   * You can set the `trimRows` option to one of the following:
   *
   * | Setting                          | Description                                                                                   |
   * | -------------------------------- | --------------------------------------------------------------------------------------------- |
   * | `false`                          | Disable the [`TrimRows`](@/api/trimRows.md) plugin                                            |
   * | `true`                           | Enable the [`TrimRows`](@/api/trimRows.md) plugin                                             |
   * | An array of physical row indexes | - Enable the [`TrimRows`](@/api/trimRows.md) plugin<br>- Trim selected rows at initialization |
   *
   * Read more:
   * - [Plugins: `TrimRows`](@/api/trimRows.md)
   * - [Row trimming](@/guides/rows/row-trimming.md)
   *
   * @memberof Options#
   * @type {boolean|number[]}
   * @default undefined
   * @category TrimRows
   *
   * @example
   * ```js
   * // enable the `TrimRows` plugin
   * trimRows: true,
   *
   * // enable the `TrimRows` plugin
   * // at Handsontable's initialization, trim rows 5, 10, and 15
   * trimRows: [5, 10, 15],
   * ```
   */
  trimRows: void 0,
  /**
   * The `trimWhitespace` option configures automatic whitespace removal. This option
   * affects the cell renderer and the cell editor.
   *
   * You can set the `trimWhitespace` option to one of the following:
   *
   * | Setting          | Description                                                     |
   * | ---------------- | --------------------------------------------------------------- |
   * | `true` (default) | Remove whitespace at the beginning and at the end of each cell |
   * | `false`          | Don't remove whitespace                                         |
   *
   * @memberof Options#
   * @type {boolean}
   * @default true
   * @category Core
   *
   * @example
   * ```js
   * columns: [
   *   {
   *     // don't remove whitespace
   *     // from any cell of this column
   *     trimWhitespace: false
   *   }
   * ]
   * ```
   */
  trimWhitespace: !0,
  /**
   * @description
   * The `type` option lets you set the [`renderer`](#renderer), [`editor`](#editor), and [`validator`](#validator)
   * options all at once, by selecting a [cell type](@/guides/cell-types/cell-type.md).
   *
   * You can set the `type` option to one of the following:
   *
   * | Cell type                                                         | Renderer, editor & validator                                                                                                                                                                                                                       |
   * | ----------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
   * | A [custom cell type](@/guides/cell-types/cell-type.md)            | Renderer: your [custom cell renderer](@/guides/cell-functions/cell-renderer.md)<br>Editor: your [custom cell editor](@/guides/cell-functions/cell-editor.md)<br>Validator: your [custom cell validator](@/guides/cell-functions/cell-validator.md) |
   * | [`'autocomplete'`](@/guides/cell-types/autocomplete-cell-type.md) | Renderer: `AutocompleteRenderer`<br>Editor: `AutocompleteEditor`<br>Validator: `AutocompleteValidator`                                                                         |
   * | [`'checkbox'`](@/guides/cell-types/checkbox-cell-type.md)         | Renderer: `CheckboxRenderer`<br>Editor: `CheckboxEditor`<br>Validator: -                                                                                                                               |
   * | [`'date'`](@/guides/cell-types/date-cell-type.md)                 | Renderer: `DateRenderer`<br>Editor: `DateEditor`<br>Validator: `DateValidator`                                                                                                 |
   * | [`'dropdown'`](@/guides/cell-types/dropdown-cell-type.md)         | Renderer: `DropdownRenderer`<br>Editor: `DropdownEditor`<br>Validator: `DropdownValidator`                                                                                     |
   * | [`'handsontable'`](@/guides/cell-types/handsontable-cell-type.md) | Renderer: `AutocompleteRenderer`<br>Editor: `HandsontableEditor`<br>Validator: -                                                                                                                       |
   * | [`'numeric'`](@/guides/cell-types/numeric-cell-type.md)           | Renderer: `NumericRenderer`<br>Editor: `NumericEditor`<br>Validator: `NumericValidator`                                                                                        |
   * | [`'password'`](@/guides/cell-types/password-cell-type.md)         | Renderer: `PasswordRenderer`<br>Editor: `PasswordEditor`<br>Validator: -                                                                                                                               |
   * | `'text'`                                                          | Renderer: `TextRenderer`<br>Editor: `TextEditor`<br>Validator: -                                                                                                                                       |
   * | [`'time`'](@/guides/cell-types/time-cell-type.md)                 | Renderer: `TimeRenderer`<br>Editor: `TimeEditor`<br>Validator: `TimeValidator`                                                                                                 |
   *
   * Read more:
   * - [Cell type](@/guides/cell-types/cell-type.md)
   * - [Cell renderer](@/guides/cell-functions/cell-renderer.md)
   * - [Cell editor](@/guides/cell-functions/cell-editor.md)
   * - [Cell validator](@/guides/cell-functions/cell-validator.md)
   * - [Configuration options: Cascading configuration](@/guides/getting-started/configuration-options.md#cascading-configuration)
   * - [`renderer`](#renderer)
   * - [`editor`](#editor)
   * - [`validator`](#validator)
   *
   * @memberof Options#
   * @type {string}
   * @default 'text'
   * @category Core
   *
   * @example
   * ```js
   * // set the `numeric` cell type for each cell of the entire grid
   * type: `'numeric'`,
   *
   * // apply the `type` option to individual columns
   * columns: [
   *   {
   *     // set the `autocomplete` cell type for each cell of this column
   *     type: 'autocomplete'
   *   },
   *   {
   *     // set the `myCustomCellType` cell type for each cell of this column
   *     type: 'myCustomCellType'
   *   }
   * ]
   * ```
   */
  type: "text",
  /**
   * The `uncheckedTemplate` option lets you configure what value
   * an unchecked [`checkbox`](@/guides/cell-types/checkbox-cell-type.md) cell has.
   *
   * You can set the `uncheckedTemplate` option to one of the following:
   *
   * | Setting           | Description                                                                                                                                                                                |
   * | ----------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
   * | `false` (default) | If a [`checkbox`](@/guides/cell-types/checkbox-cell-type.md) cell is unchecked,<br>the [`getDataAtCell`](@/api/core.md#getDataAtCell) method for this cell returns `false`                 |
   * | A string          | If a [`checkbox`](@/guides/cell-types/checkbox-cell-type.md) cell is unchecked,<br>the [`getDataAtCell`](@/api/core.md#getDataAtCell) method for this cell returns a string of your choice |
   *
   * Read more:
   * - [Checkbox cell type: Checkbox template](@/guides/cell-types/checkbox-cell-type.md#checkbox-template)
   * - [`getDataAtCell()`](@/api/core.md#getDataAtCell)
   * - [`checkedTemplate`](#checkedTemplate)
   *
   * @memberof Options#
   * @type {boolean|string|number}
   * @default false
   * @category Core
   *
   * @example
   * ```js
   * columns: [
   *   {
   *     // set the `type` of each cell in this column to `checkbox`
   *     // when unchecked, the cell's value is `false`
   *     // when checked, the cell's value is `true`
   *     type: 'checkbox',
   *   },
   *   {
   *     // set the `type` of each cell in this column to `checkbox`
   *     // when unchecked, the cell's value is `'No'`
   *     // when checked, the cell's value is `'Yes'`
   *     type: 'checkbox',
   *     uncheckedTemplate: 'No'
   *     checkedTemplate: 'Yes',
   *  }
   * ],
   * ```
   */
  uncheckedTemplate: void 0,
  /**
   * The `undo` option configures the [`UndoRedo`](@/api/undoRedo.md) plugin.
   *
   * You can set the `undo` option to one of the following:
   *
   * | Setting | Description                                        |
   * | ------- | -------------------------------------------------- |
   * | `true`  | Enable the [`UndoRedo`](@/api/undoRedo.md) plugin  |
   * | `false` | Disable the [`UndoRedo`](@/api/undoRedo.md) plugin |
   *
   * By default, the `undo` option is set to `undefined`,
   * but the [`UndoRedo`](@/api/undoRedo.md) plugin acts as enabled.
   * To disable the [`UndoRedo`](@/api/undoRedo.md) plugin completely,
   * set the `undo` option to `false`.
   *
   * Read more:
   * - [Undo and redo](@/guides/accessories-and-menus/undo-redo.md)
   *
   * @memberof Options#
   * @type {boolean}
   * @default undefined
   * @category UndoRedo
   *
   * @example
   * ```js
   * // enable the `UndoRedo` plugin
   * undo: true,
   * ```
   */
  undo: void 0,
  /**
   * @description
   * The `validator` option sets a [cell validator](@/guides/cell-functions/cell-validator.md) for a cell.
   *
   * You can set the `validator` option to one of the following:
   *
   * | Setting              | Description                                                                      |
   * | -------------------- | -------------------------------------------------------------------------------- |
   * | A string             | A [cell validator alias](@/guides/cell-functions/cell-validator.md)              |
   * | A function           | Your [custom cell validator function](@/guides/cell-functions/cell-validator.md) |
   * | A regular expression | A regular expression used for cell validation                                    |
   *
   * By setting the `validator` option to a string,
   * you can use one of the following [cell validator aliases](@/guides/cell-functions/cell-validator.md):
   *
   * | Alias               | Cell validator function                                                 |
   * | ------------------- | ----------------------------------------------------------------------- |
   * | A custom alias      | Your [custom cell validator](@/guides/cell-functions/cell-validator.md) |
   * | `'autocomplete'`    | `AutocompleteValidator`                                                 |
   * | `'date'`            | `DateValidator`                                                         |
   * | `'dropdown'`        | `DropdownValidator`                                                     |
   * | `'numeric'`         | `NumericValidator`                                                      |
   * | `'time'`            | `TimeValidator`                                                         |
   *
   * To set the [`editor`](#editor), [`renderer`](#renderer), and [`validator`](#validator)
   * options all at once, use the [`type`](#type) option.
   *
   * Read more:
   * - [Cell validator](@/guides/cell-functions/cell-validator.md)
   * - [Cell type](@/guides/cell-types/cell-type.md)
   * - [Configuration options: Cascading configuration](@/guides/getting-started/configuration-options.md#cascading-configuration)
   * - [`type`](#type)
   *
   * @memberof Options#
   * @type {Function|RegExp|string}
   * @default undefined
   * @category Core
   *
   * @example
   * ```js
   * columns: [
   *    {
   *      // use a built-in `numeric` cell validator
   *      validator: 'numeric'
   *    },
   *    {
   *      // validate against a regular expression
   *      validator: /^[0-9]$/
   *    },
   *    {
   *      // add a custom cell validator function
   *      validator(value, callback) {
   *          ...
   *      }
   *    },
   * ],
   * ```
   */
  validator: void 0,
  /**
   * @description
   * The `viewportColumnRenderingOffset` option configures the number of columns
   * to be rendered outside of the grid's viewport.
   *
   * You can set the `viewportColumnRenderingOffset` option to one of the following:
   *
   * | Setting            | Description                                             |
   * | ------------------ | ------------------------------------------------------- |
   * | `auto` (default)   | Use the offset calculated automatically by Handsontable |
   * | A number           | Set the offset manually                                 |
   *
   * Read more:
   * - [Performance: Define the number of pre-rendered rows and columns](@/guides/optimization/performance.md#define-the-number-of-pre-rendered-rows-and-columns)
   *
   * @memberof Options#
   * @type {number|string}
   * @default 'auto'
   * @category Core
   *
   * @example
   * ```js
   * // render 70 columns outside of the grid's viewport
   * viewportColumnRenderingOffset: 70,
   * ```
   */
  viewportColumnRenderingOffset: "auto",
  /**
   * @description
   * The `viewportRowRenderingOffset` option configures the number of rows
   * to be rendered outside of the grid's viewport.
   *
   * You can set the `viewportRowRenderingOffset` option to one of the following:
   *
   * | Setting            | Description                                             |
   * | ------------------ | ------------------------------------------------------- |
   * | `auto` (default)   | Use the offset calculated automatically by Handsontable |
   * | A number           | Set the offset manually                                 |
   *
   * Read more:
   * - [Performance: Define the number of pre-rendered rows and columns](@/guides/optimization/performance.md#define-the-number-of-pre-rendered-rows-and-columns)
   * - [Column virtualization](@/guides/columns/column-virtualization.md)
   *
   * @memberof Options#
   * @type {number|string}
   * @default 'auto'
   * @category Core
   *
   * @example
   * ```js
   * // render 70 rows outside of the grid's viewport
   * viewportRowRenderingOffset: 70,
   * ```
   */
  viewportRowRenderingOffset: "auto",
  /**
   * The `visibleRows` option sets the height of the [`autocomplete`](@/guides/cell-types/autocomplete-cell-type.md)
   * and [`dropdown`](@/guides/cell-types/dropdown-cell-type.md) lists.
   *
   * When the number of list options exceeds the `visibleRows` number, a scrollbar appears.
   *
   * Read more:
   * - [Autocomplete cell type](@/guides/cell-types/autocomplete-cell-type.md)
   * - [Dropdown cell type](@/guides/cell-types/dropdown-cell-type.md)
   *
   * @memberof Options#
   * @type {number}
   * @default 10
   * @category Core
   *
   * @example
   * ```js
   * columns: [
   *   {
   *     type: 'autocomplete',
   *     // set the `autocomplete` list's height to 15 options
   *     // for each cell of this column
   *     visibleRows: 15,
   *   },
   *   {
   *     type: 'dropdown',
   *     // set the `dropdown` list's height to 5 options
   *     // for each cell of this column
   *     visibleRows: 5,
   *   }
   * ],
   * ```
   */
  visibleRows: 10,
  /**
   * The `width` option configures the width of your grid.
   *
   * You can set the `width` option to one of the following:
   *
   * | Setting                                                                    | Example                   |
   * | -------------------------------------------------------------------------- | ------------------------- |
   * | A number of pixels                                                         | `width: 500`              |
   * | A string with a [CSS unit](https://www.w3schools.com/cssref/css_units.asp) | `width: '75vw'`           |
   * | A function that returns a valid number or string                           | `width() { return 500; }` |
   *
   * Read more:
   * - [Grid size](@/guides/getting-started/grid-size.md)
   *
   * @memberof Options#
   * @type {number|string|Function}
   * @default undefined
   * @category Core
   *
   * @example
   * ```js
   * // set the grid's width to 500px
   * width: 500,
   *
   * // set the grid's width to 75vw
   * width: '75vw',
   *
   * // set the grid's width to 500px, using a function
   * width() {
   *   return 500;
   * },
   * ```
   */
  width: void 0,
  /**
   * The `wordWrap` option configures whether content that exceeds a column's width is wrapped or not.
   *
   * You can set the `wordWrap` option to one of the following:
   *
   * | Setting          | Description                                             |
   * | ---------------- | ------------------------------------------------------- |
   * | `true` (default) | If content exceeds the column's width, wrap the content |
   * | `false`          | Don't wrap content                                      |
   *
   * To style cells that don't wrap content, use the [`noWordWrapClassName`](#noWordWrapClassName) option.
   *
   * Read more:
   * - [`noWordWrapClassName`](#noWordWrapClassName)
   *
   * @memberof Options#
   * @type {boolean}
   * @default true
   * @category Core
   *
   * @example
   * ```js
   * // set column width for every column of the entire grid
   * colWidths: 100,
   *
   * columns: [
   *   {
   *     // don't wrap content in this column
   *     wordWrap: false,
   *   },
   *   {
   *     // if content exceeds this column's width, wrap the content
   *     wordWrap: true,
   *   }
   * ],
   * ```
   */
  wordWrap: !0
  /* eslint-enable jsdoc/require-description-complete-sentence */
});
function kB() {
  return class {
  };
}
class NB {
  constructor(e) {
    this.metaCtor = kB(), this.meta = this.metaCtor.prototype, Ut(this.meta, zR()), this.meta.instance = e;
  }
  /**
   * Gets constructor of the global meta object. Necessary for inheritance for creating the next meta layers.
   *
   * @returns {Function}
   */
  getMetaConstructor() {
    return this.metaCtor;
  }
  /**
   * Gets settings object for this layer.
   *
   * @returns {object}
   */
  getMeta() {
    return this.meta;
  }
  /**
   * Updates global settings object by merging settings with the current state.
   *
   * @param {object} settings An object to merge with.
   */
  updateMeta(e) {
    var t;
    Ut(this.meta, e), vh(this.meta, {
      ...e,
      type: (t = e.type) !== null && t !== void 0 ? t : this.meta.type
    }, e);
  }
}
class LB {
  constructor(e) {
    const t = e.getMetaConstructor();
    this.meta = new t();
  }
  /**
   * Gets settings object for this layer.
   *
   * @returns {TableMeta}
   */
  getMeta() {
    return this.meta;
  }
  /**
   * Updates table settings object by merging settings with the current state.
   *
   * @param {object} settings An object to merge with.
   */
  updateMeta(e) {
    Ut(this.meta, e), vh(this.meta, e, e);
  }
}
class wf {
  constructor(e) {
    this.valueFactory = e, this.data = [], this.index = [], this.holes = /* @__PURE__ */ new Set();
  }
  /**
   * Gets or if data not exist creates and returns new data.
   *
   * @param {number} key The item key as zero-based index.
   * @returns {*}
   */
  obtain(e) {
    tc(() => ec(e), "Expecting an unsigned number.");
    const t = this._getStorageIndexByKey(e);
    let n;
    if (t >= 0)
      n = this.data[t], n === void 0 && (n = this.valueFactory(e), this.data[t] = n);
    else if (n = this.valueFactory(e), this.holes.size > 0) {
      const o = this.holes.values().next().value;
      this.holes.delete(o), this.data[o] = n, this.index[e] = o;
    } else
      this.data.push(n), this.index[e] = this.data.length - 1;
    return n;
  }
  /**
   * Inserts an empty data to the map. This method creates an empty space for obtaining
   * new data.
   *
   * @param {number} key The key as volatile zero-based index at which to begin inserting space for new data.
   * @param {number} [amount=1] Ammount of data to insert.
   */
  insert(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
    tc(() => ec(e) || dl(e), "Expecting an unsigned number or null/undefined argument.");
    const n = [], o = this.data.length;
    for (let a = 0; a < t; a++)
      n.push(o + a), this.data.push(void 0);
    const r = dl(e) ? this.index.length : e;
    this.index = [...this.index.slice(0, r), ...n, ...this.index.slice(r)];
  }
  /**
   * Removes (soft remove) data from "index" and according to the amount of data.
   *
   * @param {number} key The key as volatile zero-based index at which to begin removing the data.
   * @param {number} [amount=1] Ammount data to remove.
   */
  remove(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
    tc(() => ec(e) || dl(e), "Expecting an unsigned number or null/undefined argument.");
    const n = this.index.splice(dl(e) ? this.index.length - t : e, t);
    for (let o = 0; o < n.length; o++) {
      const r = n[o];
      typeof r == "number" && this.holes.add(r);
    }
  }
  /**
   * Returns the size of the data which this map holds.
   *
   * @returns {number}
   */
  size() {
    return this.data.length - this.holes.size;
  }
  /**
   * Returns a new Iterator object that contains the values for each item in the LazyMap object.
   *
   * @returns {Iterator}
   */
  values() {
    return Ws(this.data, (e, t) => !this.holes.has(t))[Symbol.iterator]();
  }
  /**
   * Returns a new Iterator object that contains an array of `[index, value]` for each item in the LazyMap object.
   *
   * @returns {Iterator}
   */
  entries() {
    const e = [];
    for (let n = 0; n < this.data.length; n++) {
      const o = this._getKeyByStorageIndex(n);
      o !== -1 && e.push([o, this.data[n]]);
    }
    let t = 0;
    return {
      next: () => {
        if (t < e.length) {
          const n = e[t];
          return t += 1, {
            value: n,
            done: !1
          };
        }
        return {
          done: !0
        };
      }
    };
  }
  /**
   * Clears the map.
   */
  clear() {
    this.data = [], this.index = [], this.holes.clear();
  }
  /**
   * Gets storage index calculated from the key associated with the specified value.
   *
   * @param {number} key Volatile zero-based index.
   * @returns {number} Returns index 0-N or -1 if no storage index found.
   */
  _getStorageIndexByKey(e) {
    return this.index.length > e ? this.index[e] : -1;
  }
  /**
   * Gets the key associated with the specified value calculated from storage index.
   *
   * @param {number} dataIndex Zero-based storage index.
   * @returns {number} Returns index 0-N or -1 if no key found.
   */
  _getKeyByStorageIndex(e) {
    return this.index.indexOf(e);
  }
  /**
   * Makes this object iterable.
   *
   * @returns {Iterator}
   */
  [Symbol.iterator]() {
    return this.entries();
  }
}
const $B = ["data", "width"];
class FB {
  constructor(e) {
    this.globalMeta = e, this.metas = new wf(() => this._createMeta());
  }
  /**
   * Updates column meta object by merging settings with the current state.
   *
   * @param {number} physicalColumn The physical column index which points what column meta object is updated.
   * @param {object} settings An object to merge with.
   */
  updateMeta(e, t) {
    const n = this.getMeta(e);
    Ut(n, t), vh(n, t);
  }
  /**
   * Creates one or more columns at specific position.
   *
   * @param {number} physicalColumn The physical column index which points from what position the column is added.
   * @param {number} amount An amount of columns to add.
   */
  createColumn(e, t) {
    this.metas.insert(e, t);
  }
  /**
   * Removes one or more columns from the collection.
   *
   * @param {number} physicalColumn The physical column index which points from what position the column is removed.
   * @param {number} amount An amount columns to remove.
   */
  removeColumn(e, t) {
    this.metas.remove(e, t);
  }
  /**
   * Gets settings object for this layer.
   *
   * @param {number} physicalColumn The physical column index.
   * @returns {object}
   */
  getMeta(e) {
    return this.metas.obtain(e);
  }
  /**
   * Gets constructor of the column meta object. Necessary for inheritance - creating the next meta layers.
   *
   * @param {number} physicalColumn The physical column index.
   * @returns {Function}
   */
  getMetaConstructor(e) {
    return this.metas.obtain(e).constructor;
  }
  /**
   * Clears all saved column meta objects.
   */
  clearCache() {
    this.metas.clear();
  }
  /**
   * Creates and returns new column meta object with properties inherited from the global meta layer.
   *
   * @private
   * @returns {object}
   */
  _createMeta() {
    return HB(this.globalMeta.getMetaConstructor(), $B).prototype;
  }
}
class VB {
  constructor(e) {
    this.columnMeta = e, this.metas = new wf(() => this._createRow());
  }
  /**
   * Updates cell meta object by merging settings with the current state.
   *
   * @param {number} physicalRow The physical row index which points what cell meta object is updated.
   * @param {number} physicalColumn The physical column index which points what cell meta object is updated.
   * @param {object} settings An object to merge with.
   */
  updateMeta(e, t, n) {
    const o = this.getMeta(e, t);
    Ut(o, n), vh(o, n);
  }
  /**
   * Creates one or more rows at specific position.
   *
   * @param {number} physicalRow The physical row index which points from what position the row is added.
   * @param {number} amount An amount of rows to add.
   */
  createRow(e, t) {
    this.metas.insert(e, t);
  }
  /**
   * Creates one or more columns at specific position.
   *
   * @param {number} physicalColumn The physical column index which points from what position the column is added.
   * @param {number} amount An amount of columns to add.
   */
  createColumn(e, t) {
    for (let n = 0; n < this.metas.size(); n++)
      this.metas.obtain(n).insert(e, t);
  }
  /**
   * Removes one or more rows from the collection.
   *
   * @param {number} physicalRow The physical row index which points from what position the row is removed.
   * @param {number} amount An amount of rows to remove.
   */
  removeRow(e, t) {
    this.metas.remove(e, t);
  }
  /**
   * Removes one or more columns from the collection.
   *
   * @param {number} physicalColumn The physical column index which points from what position the column is removed.
   * @param {number} amount An amount of columns to remove.
   */
  removeColumn(e, t) {
    for (let n = 0; n < this.metas.size(); n++)
      this.metas.obtain(n).remove(e, t);
  }
  /**
   * Gets settings object for this layer.
   *
   * @param {number} physicalRow The physical row index.
   * @param {number} physicalColumn The physical column index.
   * @param {string} [key] If the key exists its value will be returned, otherwise the whole cell meta object.
   * @returns {object}
   */
  getMeta(e, t, n) {
    const o = this.metas.obtain(e).obtain(t);
    return n === void 0 ? o : o[n];
  }
  /**
   * Sets settings object for this layer defined by "key" property.
   *
   * @param {number} physicalRow The physical row index.
   * @param {number} physicalColumn The physical column index.
   * @param {string} key The property name to set.
   * @param {*} value Value to save.
   */
  setMeta(e, t, n, o) {
    var r;
    const a = this.metas.obtain(e).obtain(t);
    (r = a._automaticallyAssignedMetaProps) === null || r === void 0 || r.delete(n), a[n] = o;
  }
  /**
   * Removes a property defined by the "key" argument from the cell meta object.
   *
   * @param {number} physicalRow The physical row index.
   * @param {number} physicalColumn The physical column index.
   * @param {string} key The property name to remove.
   */
  removeMeta(e, t, n) {
    const o = this.metas.obtain(e).obtain(t);
    delete o[n];
  }
  /**
   * Returns all cell meta objects that were created during the Handsontable operation. As cell meta
   * objects are created lazy, the length of the returned collection depends on how and when the
   * table has asked for access to that meta objects.
   *
   * @returns {object[]}
   */
  getMetas() {
    const e = [], t = Array.from(this.metas.values());
    for (let n = 0; n < t.length; n++)
      e.push(...t[n].values());
    return e;
  }
  /**
   * Returns all cell meta objects that were created during the Handsontable operation but for
   * specific row index.
   *
   * @param {number} physicalRow The physical row index.
   * @returns {object[]}
   */
  getMetasAtRow(e) {
    tc(() => ec(e), "Expecting an unsigned number.");
    const t = new Map(this.metas);
    return t.has(e) ? Array.from(t.get(e).values()) : [];
  }
  /**
   * Clears all saved cell meta objects.
   */
  clearCache() {
    this.metas.clear();
  }
  /**
   * Creates and returns new structure for cell meta objects stored in columnar axis.
   *
   * @private
   * @returns {object}
   */
  _createRow() {
    return new wf((e) => this._createMeta(e));
  }
  /**
   * Creates and returns new cell meta object with properties inherited from the column meta layer.
   *
   * @private
   * @param {number} physicalColumn The physical column index.
   * @returns {object}
   */
  _createMeta(e) {
    const t = this.columnMeta.getMetaConstructor(e);
    return new t();
  }
}
class YR {
  constructor(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];
    this.hot = e, this.globalMeta = new NB(e), this.tableMeta = new LB(this.globalMeta), this.columnMeta = new FB(this.globalMeta), this.cellMeta = new VB(this.columnMeta), n.forEach((o) => new o(this)), this.globalMeta.updateMeta(t);
  }
  /**
   * Gets the global meta object that is a root of all default settings, which are recognizable by Handsontable.
   * Other layers inherites all properties from this. Adding, removing, or changing property in that
   * object has a direct reflection to all layers.
   *
   * @returns {object}
   */
  getGlobalMeta() {
    return this.globalMeta.getMeta();
  }
  /**
   * Updates global settings object by merging settings with the current state.
   *
   * @param {object} settings An object to merge with.
   */
  updateGlobalMeta(e) {
    this.globalMeta.updateMeta(e);
  }
  /**
   * Gets settings object that was passed in the Handsontable constructor. That layer contains all
   * default settings inherited from the GlobalMeta layer merged with settings passed by the developer.
   * Adding, removing, or changing property in that object has no direct reflection on any other layers.
   *
   * @returns {TableMeta}
   */
  getTableMeta() {
    return this.tableMeta.getMeta();
  }
  /**
   * Updates table settings object by merging settings with the current state.
   *
   * @param {object} settings An object to merge with.
   */
  updateTableMeta(e) {
    this.tableMeta.updateMeta(e);
  }
  /**
   * Gets column meta object that is a root of all settings defined in the column property of the Handsontable
   * settings. Each column in the Handsontable is associated with a unique meta object which identified by
   * the physical column index. Adding, removing, or changing property in that object has a direct reflection
   * only for the CellMeta layer. The reflection will be visible only if the property doesn't exist in the lower
   * layers (prototype lookup).
   *
   * @param {number} physicalColumn The physical column index.
   * @returns {object}
   */
  getColumnMeta(e) {
    return this.columnMeta.getMeta(e);
  }
  /**
   * Updates column meta object by merging settings with the current state.
   *
   * @param {number} physicalColumn The physical column index which points what column meta object is updated.
   * @param {object} settings An object to merge with.
   */
  updateColumnMeta(e, t) {
    this.columnMeta.updateMeta(e, t);
  }
  /**
   * Gets the cell meta object that is a root of all settings defined for the specific cell rendered by
   * the Handsontable. Each cell meta inherits settings from higher layers. When a property doesn't
   * exist in that layer, it is looked up through a prototype to the highest layer. Starting
   * from CellMeta -> ColumnMeta and ending to GlobalMeta, which stores default settings. Adding,
   * removing, or changing property in that object has no direct reflection on any other layers.
   *
   * @param {number} physicalRow The physical row index.
   * @param {number} physicalColumn The physical column index.
   * @param {object} options Additional options that are used to extend the cell meta object.
   * @param {number} options.visualRow The visual row index of the currently requested cell meta object.
   * @param {number} options.visualColumn The visual column index of the currently requested cell meta object.
   * @returns {object}
   */
  getCellMeta(e, t, n) {
    let {
      visualRow: o,
      visualColumn: r
    } = n;
    const a = this.cellMeta.getMeta(e, t);
    return a.visualRow = o, a.visualCol = r, a.row = e, a.col = t, this.runLocalHooks("afterGetCellMeta", a), a;
  }
  /**
   * Gets a value (defined by the `key` property) from the cell meta object.
   *
   * @param {number} physicalRow The physical row index.
   * @param {number} physicalColumn The physical column index.
   * @param {string} key Defines the value that will be returned from the cell meta object.
   * @returns {*}
   */
  getCellMetaKeyValue(e, t, n) {
    if (typeof n != "string")
      throw new Error("The passed cell meta object key is not a string");
    return this.cellMeta.getMeta(e, t, n);
  }
  /**
   * Sets settings object for cell meta object defined by "key" property.
   *
   * @param {number} physicalRow The physical row index.
   * @param {number} physicalColumn The physical column index.
   * @param {string} key The property name to set.
   * @param {*} value Value to save.
   */
  setCellMeta(e, t, n, o) {
    this.cellMeta.setMeta(e, t, n, o);
  }
  /**
   * Updates cell meta object by merging settings with the current state.
   *
   * @param {number} physicalRow The physical row index which points what cell meta object is updated.
   * @param {number} physicalColumn The physical column index which points what cell meta object is updated.
   * @param {object} settings An object to merge with.
   */
  updateCellMeta(e, t, n) {
    this.cellMeta.updateMeta(e, t, n);
  }
  /**
   * Removes a property defined by the "key" argument from the cell meta object.
   *
   * @param {number} physicalRow The physical row index.
   * @param {number} physicalColumn The physical column index.
   * @param {string} key The property name to remove.
   */
  removeCellMeta(e, t, n) {
    this.cellMeta.removeMeta(e, t, n);
  }
  /**
   * Returns all cell meta objects that were created during the Handsontable operation. As cell meta
   * objects are created lazy, the length of the returned collection depends on how and when the
   * table has asked for access to that meta objects.
   *
   * @returns {object[]}
   */
  getCellsMeta() {
    return this.cellMeta.getMetas();
  }
  /**
   * Returns all cell meta objects that were created during the Handsontable operation but for
   * specyfic row index.
   *
   * @param {number} physicalRow The physical row index.
   * @returns {object[]}
   */
  getCellsMetaAtRow(e) {
    return this.cellMeta.getMetasAtRow(e);
  }
  /**
   * Creates one or more rows at specific position.
   *
   * @param {number} physicalRow The physical row index which points from what position the row is added.
   * @param {number} [amount=1] An amount of rows to add.
   */
  createRow(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
    this.cellMeta.createRow(e, t);
  }
  /**
   * Removes one or more rows from the collection.
   *
   * @param {number} physicalRow The physical row index which points from what position the row is removed.
   * @param {number} [amount=1] An amount rows to remove.
   */
  removeRow(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
    this.cellMeta.removeRow(e, t);
  }
  /**
   * Creates one or more columns at specific position.
   *
   * @param {number} physicalColumn The physical column index which points from what position the column is added.
   * @param {number} [amount=1] An amount of columns to add.
   */
  createColumn(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
    this.cellMeta.createColumn(e, t), this.columnMeta.createColumn(e, t);
  }
  /**
   * Removes one or more columns from the collection.
   *
   * @param {number} physicalColumn The physical column index which points from what position the column is removed.
   * @param {number} [amount=1] An amount of columns to remove.
   */
  removeColumn(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
    this.cellMeta.removeColumn(e, t), this.columnMeta.removeColumn(e, t);
  }
  /**
   * Clears all saved cell meta objects. It keeps column meta, table meta, and global meta intact.
   */
  clearCellsCache() {
    this.cellMeta.clearCache();
  }
  /**
   * Clears all saved cell and columns meta objects.
   */
  clearCache() {
    this.cellMeta.clearCache(), this.columnMeta.clearCache();
  }
}
ft(YR, Rs);
function dv(s, e, t, n) {
  const {
    hotInstance: o,
    dataMap: r,
    dataSource: a,
    internalSource: l,
    source: c,
    metaManager: h,
    firstRun: u
  } = n, f = Js(l), g = o.getSettings();
  Array.isArray(g.dataSchema) ? o.dataType = "array" : mt(g.dataSchema) ? o.dataType = "function" : o.dataType = "object", r && r.destroy(), s = o.runHooks(`before${f}`, s, u, c);
  const m = new IB(o, s, h);
  if (e(m), typeof s == "object" && s !== null)
    s.push && s.splice || (s = [s]);
  else if (s === null) {
    const w = m.getSchema();
    s = [];
    let C, S = 0, x = 0;
    for (S = 0, x = g.startRows; S < x; S++)
      if ((o.dataType === "object" || o.dataType === "function") && g.dataSchema)
        C = ms(w), s.push(C);
      else if (o.dataType === "array")
        C = ms(w[0]), s.push(C);
      else {
        C = [];
        for (let T = 0, M = g.startCols; T < M; T++)
          C.push(null);
        s.push(C);
      }
  } else
    throw new Error(`${l} only accepts array of objects or array of arrays (${typeof s} given)`);
  Array.isArray(s[0]) && (o.dataType = "array"), g.data = s, m.dataSource = s, a.data = s, a.dataType = o.dataType, a.colToProp = m.colToProp.bind(m), a.propToCol = m.propToCol.bind(m), a.countCachedColumns = m.countCachedColumns.bind(m), t(m), o.runHooks(`after${f}`, s, u, c), u || (o.runHooks("afterChange", null, l), o.render());
}
class BB {
  constructor(e) {
    this.metaManager = e, this.metaSyncMemo = /* @__PURE__ */ new Map(), e.addLocalHook("afterGetCellMeta", (t) => this.extendCellMeta(t)), me.getSingleton().add("beforeRender", (t) => {
      t && this.metaSyncMemo.clear();
    }, this.metaManager.hot);
  }
  /**
   * Extends the cell meta object by user-specific properties.
   *
   * The cell meta object can be extended dynamically,
   * either by Handsontable's hooks (`beforeGetCellMeta` and`afterGetCellMeta`),
   * or by Handsontable's `cells` option.
   *
   * To boost performance, the extending process is triggered only once per one slow Handsontable render cycle.
   *
   * @param {object} cellMeta The cell meta object.
   */
  extendCellMeta(e) {
    var t;
    const {
      row: n,
      col: o
    } = e;
    if ((t = this.metaSyncMemo.get(n)) !== null && t !== void 0 && t.has(o))
      return;
    const {
      visualRow: r,
      visualCol: a
    } = e, l = this.metaManager.hot, c = l.colToProp(a);
    e.prop = c, l.runHooks("beforeGetCellMeta", r, a, e);
    const h = Lt(e, "type") ? e.type : null;
    let u = mt(e.cells) ? e.cells(n, o, c) : null;
    if (h)
      if (u) {
        var f;
        u.type = (f = u.type) !== null && f !== void 0 ? f : h;
      } else
        u = {
          type: h
        };
    u && this.metaManager.updateCellMeta(n, o, u), l.runHooks("afterGetCellMeta", r, a, e), this.metaSyncMemo.has(n) || this.metaSyncMemo.set(n, /* @__PURE__ */ new Set()), this.metaSyncMemo.get(n).add(o);
  }
}
class WB {
  constructor(e) {
    this.metaManager = e, this.usageTracker = /* @__PURE__ */ new Set(), this.propDescriptors = /* @__PURE__ */ new Map([["fixedColumnsLeft", {
      target: "fixedColumnsStart",
      onChange(t) {
        if (this.metaManager.hot.isRtl() && t === "fixedColumnsLeft")
          throw new Error("The `fixedColumnsLeft` is not supported for RTL. Please use option `fixedColumnsStart`.");
        if (this.usageTracker.has("fixedColumnsLeft") && this.usageTracker.has("fixedColumnsStart"))
          throw new Error("The `fixedColumnsLeft` and `fixedColumnsStart` should not be used together. Please use only the option `fixedColumnsStart`.");
      }
    }], ["layoutDirection", {
      onChange(t, n, o) {
        if (!o)
          throw new Error(`The \`${t}\` option can not be updated after the Handsontable is initialized.`);
      }
    }]]), this.extendMetaProps();
  }
  /**
   * Extends the meta options based on the object descriptors from the `propDescriptors` list.
   */
  extendMetaProps() {
    this.propDescriptors.forEach((e, t) => {
      const {
        target: n,
        onChange: o = () => {
        }
      } = e, r = typeof n == "string", a = r ? n : t, l = `_${a}`;
      this.metaManager.globalMeta.meta[l] = this.metaManager.globalMeta.meta[a], this.installPropWatcher(t, l, o), r && this.installPropWatcher(n, l, o);
    });
  }
  /**
   * Installs the property watcher to the `propName` option and forwards getter and setter to
   * the new one.
   *
   * @param {string} propName The property to watch.
   * @param {string} origProp The property from/to the value is forwarded.
   * @param {Function} onChange The callback.
   */
  installPropWatcher(e, t, n) {
    const o = this;
    Object.defineProperty(this.metaManager.globalMeta.meta, e, {
      get() {
        return this[t];
      },
      set(r) {
        const a = !o.usageTracker.has(e);
        o.usageTracker.add(e), n.call(o, e, r, a), this[t] = r;
      },
      enumerable: !0,
      configurable: !0
    });
  }
}
const fv = /* @__PURE__ */ new Map([
  [" ", "space"],
  // custom mapping
  ["spacebar", "space"],
  ["scroll", "scrolllock"],
  ["del", "delete"],
  ["esc", "escape"],
  ["medianexttrack", "mediatracknext"],
  ["mediaprevioustrack", "mediatrackprevious"],
  ["volumeup", "audiovolumeup"],
  ["volumedown", "audiovolumedown"],
  ["volumemute", "audiovolumemute"],
  ["multiply", "*"],
  ["add", "+"],
  ["divide", "/"],
  ["subtract", "-"],
  ["left", "arrowleft"],
  ["right", "arrowright"],
  ["up", "arrowup"],
  ["down", "arrowdown"]
]), fl = (s) => s.map((e) => {
  const t = e.toLowerCase();
  return fv.has(t) ? fv.get(t) : t;
}).sort().join("+"), UB = (s) => s.split("+"), gv = (s) => s.toLowerCase(), zB = (s) => {
  const e = hh({
    errorIdExists: (c) => `The "${c}" shortcut is already registered in the "${s}" context.`
  }), t = function() {
    let {
      keys: c,
      callback: h,
      group: u,
      runOnlyIf: f = () => !0,
      captureCtrl: g = !1,
      preventDefault: m = !0,
      stopPropagation: w = !1,
      relativeToGroup: C,
      position: S
    } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    if (wt(u))
      throw new Error("You need to define the shortcut's group.");
    if (mt(h) === !1)
      throw new Error("The shortcut's callback needs to be a function.");
    if (Array.isArray(c) === !1)
      throw new Error(ut`Pass the shortcut\'s keys as an array of arrays,\x20
      using the KeyboardEvent.key properties:\x20
      https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values.`);
    const x = {
      callback: h,
      group: u,
      runOnlyIf: f,
      captureCtrl: g,
      preventDefault: m,
      stopPropagation: w
    };
    ue(C) && ([x.relativeToGroup, x.position] = [C, S]), c.forEach((T) => {
      const M = fl(T);
      if (e.hasItem(M)) {
        const P = e.getItem(M);
        let j = P.findIndex((H) => H.group === C);
        j !== -1 ? S === "before" ? j -= 1 : j += 1 : j = P.length, P.splice(j, 0, x);
      } else
        e.addItem(M, [x]);
    });
  }, n = function(c) {
    let h = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    c.forEach((u) => {
      je(h, (f, g) => {
        Object.prototype.hasOwnProperty.call(u, g) === !1 && (u[g] = h[g]);
      }), t(u);
    });
  }, o = (c) => {
    const h = fl(c);
    e.removeItem(h);
  };
  return {
    addShortcut: t,
    addShortcuts: n,
    getShortcuts: (c) => {
      const h = fl(c), u = e.getItem(h);
      return ue(u) ? u.slice() : [];
    },
    hasShortcut: (c) => {
      const h = fl(c);
      return e.hasItem(h);
    },
    removeShortcutsByKeys: o,
    removeShortcutsByGroup: (c) => {
      e.getItems().forEach((u) => {
        let [f, g] = u;
        const m = g.filter((w) => w.group !== c);
        m.length === 0 ? o(UB(f)) : (g.length = 0, g.push(...m));
      });
    }
  };
};
function YB() {
  const s = /* @__PURE__ */ new Set();
  return {
    /**
     * Press a key.
     *
     * @param {string} key Names of the shortcut's keys,
     * (coming from [`KeyboardEvent.key`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values)),
     * in lowercase or uppercase, unified across browsers
     */
    press(e) {
      s.add(e);
    },
    /**
     * Release a pressed key.
     *
     * @param {string} key Names of the shortcut's keys,
     * (coming from [`KeyboardEvent.key`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values)),
     * in lowercase or uppercase, unified across browsers
     */
    release(e) {
      s.delete(e);
    },
    /**
     * Release all pressed keys.
     */
    releaseAll() {
      s.clear();
    },
    /**
     * Check if a key is pressed.
     *
     * @param {string} key Names of the shortcut's keys,
     * (coming from [`KeyboardEvent.key`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values)),
     * in lowercase or uppercase, unified across browsers
     * @returns {boolean}
     */
    isPressed(e) {
      return s.has(e);
    }
  };
}
const GB = ["meta", "alt", "shift", "control"], _r = YB();
function jB(s, e, t, n, o) {
  const r = (g) => GB.includes(g), a = function(g) {
    let m = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;
    const w = [];
    return g.altKey && w.push("alt"), m && (g.ctrlKey || g.metaKey) ? w.push("control/meta") : (g.ctrlKey && w.push("control"), g.metaKey && w.push("meta")), g.shiftKey && w.push("shift"), w;
  }, l = (g) => {
    if (e(g) === !1)
      return;
    const m = t(g);
    if (g.keyCode === 229 || m === !1 || Vo(g))
      return;
    const w = gv(g.key);
    let C = [];
    r(w) ? _r.press(w) : C = a(g);
    const S = [w].concat(C);
    !o(g, S) && (HC() && C.includes("meta") || !HC() && C.includes("control")) && o(g, [w].concat(a(g, !0))), n(g);
  }, c = (g) => {
    if (e(g) === !1)
      return;
    const m = gv(g.key);
    r(m) !== !1 && _r.release(m);
  }, h = () => {
    _r.releaseAll();
  };
  return {
    mount: () => {
      let g = s;
      for (; g; )
        g.document.documentElement.addEventListener("keydown", l), g.document.documentElement.addEventListener("keyup", c), g.document.documentElement.addEventListener("blur", h), g = wc(g);
    },
    unmount: () => {
      let g = s;
      for (; g; )
        g.document.documentElement.removeEventListener("keydown", l), g.document.documentElement.removeEventListener("keyup", c), g.document.documentElement.removeEventListener("blur", h), g = wc(g);
    },
    isPressed: (g) => _r.isPressed(g),
    releasePressedKeys: () => _r.releaseAll()
  };
}
const KB = (s) => {
  let {
    ownerWindow: e,
    handleEvent: t,
    beforeKeyDown: n,
    afterKeyDown: o
  } = s;
  const r = hh({
    errorIdExists: (m) => `The "${m}" context name is already registered.`
  });
  let a = "grid";
  const l = (m) => {
    const w = zB(m);
    return r.addItem(m, w), w;
  }, c = () => a, h = (m) => r.getItem(m), u = (m) => {
    a = m;
  };
  let f = !1;
  const g = jB(e, t, n, o, (m, w) => {
    const C = h(c());
    let S = !1;
    if (!C.hasShortcut(w))
      return S;
    const x = C.getShortcuts(w);
    for (let T = 0; T < x.length; T++) {
      const {
        callback: M,
        runOnlyIf: _,
        preventDefault: P,
        stopPropagation: j,
        captureCtrl: H
      } = x[T];
      if (_(m) !== !1 && (f = H, S = M(m, w) === !1, f = !1, P && m.preventDefault(), j && m.stopPropagation(), S))
        break;
    }
    return S;
  });
  return g.mount(), {
    addContext: l,
    getActiveContextName: c,
    getContext: h,
    setActiveContextName: u,
    /**
     * Returns whether `control` or `meta` keys are pressed.
     *
     * @memberof ShortcutManager#
     * @type {Function}
     * @returns {boolean}
     */
    isCtrlPressed: () => !f && (g.isPressed("control") || g.isPressed("meta")),
    /**
     * Release every previously pressed key.
     *
     * @type {Function}
     * @memberof ShortcutManager#
     */
    releasePressedKeys: () => g.releasePressedKeys(),
    /**
     * Destroy a context manager instance.
     *
     * @type {Function}
     * @memberof ShortcutManager#
     */
    destroy: () => g.unmount()
  };
}, XB = "gridDefault";
let Ou = null;
function Cp(s, e) {
  var t;
  let n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1, o = !1, r = this;
  const a = new Dt(r);
  let l, c, h, u, f = !0;
  gV(n) && fV(this), this.rootElement = s, this.rootDocument = s.ownerDocument, this.rootWindow = this.rootDocument.defaultView, this.isDestroyed = !1, this.renderSuspendedCounter = 0, this.executionSuspendedCounter = 0;
  const g = (t = e == null ? void 0 : e.layoutDirection) !== null && t !== void 0 ? t : "inherit", m = ["rtl", "ltr"].includes(g) ? g : this.rootWindow.getComputedStyle(this.rootElement).direction;
  this.rootElement.setAttribute("dir", m), this.isRtl = function() {
    return m === "rtl";
  }, this.isLtr = function() {
    return !r.isRtl();
  }, this.getDirectionFactor = function() {
    return r.isLtr() ? 1 : -1;
  }, e.language = oB(e.language);
  const w = new YR(r, e, [BB, WB]), C = w.getTableMeta(), S = w.getGlobalMeta(), x = hh();
  this.container = this.rootDocument.createElement("div"), this.renderCall = !1, s.insertBefore(this.container, s.firstChild), gf(this) && jN(e.licenseKey, s), this.guid = `ht_${Ab()}`, this.columnIndexMapper = new mf(), this.rowIndexMapper = new mf(), this.columnIndexMapper.addLocalHook("indexesSequenceChange", (d) => {
    r.runHooks("afterColumnSequenceChange", d);
  }), this.rowIndexMapper.addLocalHook("indexesSequenceChange", (d) => {
    r.runHooks("afterRowSequenceChange", d);
  }), c = new MV(r), (!this.rootElement.id || this.rootElement.id.substring(0, 3) === "ht_") && (this.rootElement.id = this.guid);
  const T = (d) => {
    const {
      row: p,
      col: v
    } = d;
    return r._createCellCoords(
      // We just store indexes for rows and columns without headers.
      p >= 0 ? r.rowIndexMapper.getRenderableFromVisualIndex(p) : p,
      v >= 0 ? r.columnIndexMapper.getRenderableFromVisualIndex(v) : v
    );
  }, M = (d) => {
    const {
      row: p,
      col: v
    } = d;
    return r._createCellCoords(
      // We just store indexes for rows and columns without headers.
      p >= 0 ? r.rowIndexMapper.getVisualFromRenderableIndex(p) : p,
      v >= 0 ? r.columnIndexMapper.getVisualFromRenderableIndex(v) : v
      // eslint-disable-line max-len
    );
  };
  let _ = new TB(C, {
    rowIndexMapper: () => r.rowIndexMapper,
    columnIndexMapper: () => r.columnIndexMapper,
    countCols: () => r.countCols(),
    countRows: () => r.countRows(),
    propToCol: (d) => l.propToCol(d),
    isEditorOpened: () => r.getActiveEditor() ? r.getActiveEditor().isOpened() : !1,
    countColsTranslated: () => this.view.countRenderableColumns(),
    countRowsTranslated: () => this.view.countRenderableRows(),
    getShortcutManager: () => r.getShortcutManager(),
    createCellCoords: (d, p) => r._createCellCoords(d, p),
    createCellRange: (d, p, v) => r._createCellRange(d, p, v),
    visualToRenderableCoords: T,
    renderableToVisualCoords: M,
    isDisabledCellSelection: (d, p) => r.getCellMeta(d, p).disableVisualSelection
  });
  this.selection = _;
  const P = (d) => {
    let {
      hiddenIndexesChanged: p
    } = d;
    p && this.selection.refresh();
  };
  this.columnIndexMapper.addLocalHook("cacheUpdated", P), this.rowIndexMapper.addLocalHook("cacheUpdated", P), this.selection.addLocalHook("beforeSetRangeStart", (d) => {
    this.runHooks("beforeSetRangeStart", d);
  }), this.selection.addLocalHook("beforeSetRangeStartOnly", (d) => {
    this.runHooks("beforeSetRangeStartOnly", d);
  }), this.selection.addLocalHook("beforeSetRangeEnd", (d) => {
    this.runHooks("beforeSetRangeEnd", d), d.row < 0 && (d.row = this.view._wt.wtTable.getFirstVisibleRow()), d.col < 0 && (d.col = this.view._wt.wtTable.getFirstVisibleColumn());
  }), this.selection.addLocalHook("afterSetRangeEnd", (d) => {
    const p = nr(!1), v = this.selection.getSelectedRange(), {
      from: E,
      to: I
    } = v.current(), A = v.size() - 1;
    this.runHooks("afterSelection", E.row, E.col, I.row, I.col, p, A), this.runHooks("afterSelectionByProp", E.row, r.colToProp(E.col), I.row, r.colToProp(I.col), p, A);
    const K = this.selection.isSelectedByAnyHeader(), U = this.selection.selectedRange.current();
    let J = !0;
    o && (J = !1), p.isTouched() && (J = !p.value);
    const ne = this.selection.isSelectedByRowHeader(), Q = this.selection.isSelectedByColumnHeader();
    J !== !1 && (K ? ne ? this.view.scrollViewportVertically(r.rowIndexMapper.getRenderableFromVisualIndex(d.row)) : Q && this.view.scrollViewportHorizontally(r.columnIndexMapper.getRenderableFromVisualIndex(d.col)) : U && !this.selection.isMultiple() ? this.view.scrollViewport(T(U.from)) : this.view.scrollViewport(T(d))), ne && Q ? ie(this.rootElement, ["ht__selection--rows", "ht__selection--columns"]) : ne ? ($e(this.rootElement, "ht__selection--columns"), ie(this.rootElement, "ht__selection--rows")) : Q ? ($e(this.rootElement, "ht__selection--rows"), ie(this.rootElement, "ht__selection--columns")) : $e(this.rootElement, ["ht__selection--rows", "ht__selection--columns"]), this._refreshBorders(null);
  }), this.selection.addLocalHook("afterSelectionFinished", (d) => {
    const p = d.length - 1, {
      from: v,
      to: E
    } = d[p];
    this.runHooks("afterSelectionEnd", v.row, v.col, E.row, E.col, p), this.runHooks("afterSelectionEndByProp", v.row, r.colToProp(v.col), E.row, r.colToProp(E.col), p);
  }), this.selection.addLocalHook("afterIsMultipleSelection", (d) => {
    const p = this.runHooks("afterIsMultipleSelection", d.value);
    d.value && (d.value = p);
  }), this.selection.addLocalHook("beforeModifyTransformStart", (d) => {
    this.runHooks("modifyTransformStart", d);
  }), this.selection.addLocalHook("afterModifyTransformStart", (d, p, v) => {
    this.runHooks("afterModifyTransformStart", d, p, v);
  }), this.selection.addLocalHook("beforeModifyTransformEnd", (d) => {
    this.runHooks("modifyTransformEnd", d);
  }), this.selection.addLocalHook("afterModifyTransformEnd", (d, p, v) => {
    this.runHooks("afterModifyTransformEnd", d, p, v);
  }), this.selection.addLocalHook("afterDeselect", () => {
    u.destroyEditor(), this._refreshBorders(), $e(this.rootElement, ["ht__selection--rows", "ht__selection--columns"]), this.runHooks("afterDeselect");
  }), this.selection.addLocalHook("insertRowRequire", (d) => {
    this.alter("insert_row_above", d, 1, "auto");
  }), this.selection.addLocalHook("insertColRequire", (d) => {
    this.alter("insert_col_start", d, 1, "auto");
  }), h = {
    /**
     * Inserts or removes rows and columns.
     *
     * @private
     * @param {string} action Possible values: "insert_row_above", "insert_row_below", "insert_col_start", "insert_col_end",
     *                        "remove_row", "remove_col".
     * @param {number|Array} index Row or column visual index which from the alter action will be triggered.
     *                             Alter actions such as "remove_row" and "remove_col" support array indexes in the
     *                             format `[[index, amount], [index, amount]...]` this can be used to remove
     *                             non-consecutive columns or rows in one call.
     * @param {number} [amount=1] Amount of rows or columns to remove.
     * @param {string} [source] Optional. Source of hook runner.
     * @param {boolean} [keepEmptyRows] Optional. Flag for preventing deletion of empty rows.
     */
    alter(d, p) {
      var v, E;
      let I = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1, A = arguments.length > 3 ? arguments[3] : void 0, K = arguments.length > 4 ? arguments[4] : void 0;
      const U = (J) => {
        if (J.length === 0)
          return [];
        const ne = [...J];
        return ne.sort((Ce, Fe) => {
          let [Ie] = Ce, [Oe] = Fe;
          return Ie === Oe ? 0 : Ie > Oe ? 1 : -1;
        }), cs(ne, (Ce, Fe) => {
          let [Ie, Oe] = Fe;
          const q = Ce[Ce.length - 1], [Qe, We] = q, xe = Qe + We;
          if (Ie <= xe) {
            const Le = Math.max(Oe - (xe - Ie), 0);
            q[1] += Le;
          } else
            Ce.push([Ie, Oe]);
          return Ce;
        }, [ne[0]]);
      };
      switch (d) {
        case "insert_row_below":
        case "insert_row_above":
          const J = r.countSourceRows();
          if (C.maxRows === J)
            return;
          const ne = d === "insert_row_below" ? "below" : "above";
          p = (v = p) !== null && v !== void 0 ? v : ne === "below" ? J : 0;
          const {
            delta: Q,
            startPhysicalIndex: Ce
          } = l.createRow(p, I, {
            source: A,
            mode: ne
          });
          if (Q) {
            const We = _.selectedRange.current(), xe = We == null ? void 0 : We.from, Le = xe == null ? void 0 : xe.row, Ee = r.toVisualRow(Ce);
            if (_.isSelectedByCorner())
              r.selectAll();
            else if (ue(Le) && Le >= Ee) {
              const {
                row: y,
                col: b
              } = We.to;
              let O = xe.col;
              _.isSelectedByRowHeader() && (O = -1), _.getSelectedRange().pop(), _.setRangeStartOnly(r._createCellCoords(Le + Q, O), !0), _.setRangeEnd(r._createCellCoords(y + Q, b));
            } else
              r._refreshBorders();
          }
          break;
        case "insert_col_start":
        case "insert_col_end":
          const Fe = d === "insert_col_end" ? "end" : "start";
          p = (E = p) !== null && E !== void 0 ? E : Fe === "end" ? r.countSourceCols() : 0;
          const {
            delta: Ie,
            startPhysicalIndex: Oe
          } = l.createCol(p, I, {
            source: A,
            mode: Fe
          });
          if (Ie) {
            if (Array.isArray(C.colHeaders)) {
              const y = [r.toVisualColumn(Oe), 0];
              y.length += Ie, Array.prototype.splice.apply(C.colHeaders, y);
            }
            const We = _.selectedRange.current(), xe = We == null ? void 0 : We.from, Le = xe == null ? void 0 : xe.col, Ee = r.toVisualColumn(Oe);
            if (_.isSelectedByCorner())
              r.selectAll();
            else if (ue(Le) && Le >= Ee) {
              const {
                row: y,
                col: b
              } = We.to;
              let O = xe.row;
              _.isSelectedByColumnHeader() && (O = -1), _.getSelectedRange().pop(), _.setRangeStartOnly(r._createCellCoords(O, Le + Ie), !0), _.setRangeEnd(r._createCellCoords(y, b + Ie));
            } else
              r._refreshBorders();
          }
          break;
        case "remove_row":
          const q = (We) => {
            let xe = 0;
            D(We, (Le) => {
              let [Ee, y] = Le;
              const b = Gt(Ee) ? r.countRows() - 1 : Math.max(Ee - xe, 0);
              if (Number.isInteger(Ee) && (Ee = Math.max(Ee - xe, 0)), !l.removeRow(Ee, y, A))
                return;
              const W = r.countRows(), k = C.fixedRowsTop;
              k >= b + 1 && (C.fixedRowsTop -= Math.min(y, k - b));
              const B = C.fixedRowsBottom;
              B && b >= W - B && (C.fixedRowsBottom -= Math.min(y, B)), xe += y;
            });
          };
          Array.isArray(p) ? q(U(p)) : q([[p, I]]), h.adjustRowsAndCols(), r._refreshBorders();
          break;
        case "remove_col":
          const Qe = (We) => {
            let xe = 0;
            D(We, (Le) => {
              let [Ee, y] = Le;
              const b = Gt(Ee) ? r.countCols() - 1 : Math.max(Ee - xe, 0);
              let O = r.toPhysicalColumn(b);
              if (Number.isInteger(Ee) && (Ee = Math.max(Ee - xe, 0)), !l.removeCol(Ee, y, A))
                return;
              const k = C.fixedColumnsStart;
              k >= b + 1 && (C.fixedColumnsStart -= Math.min(y, k - b)), Array.isArray(C.colHeaders) && (typeof O > "u" && (O = -1), C.colHeaders.splice(O, y)), xe += y;
            });
          };
          Array.isArray(p) ? Qe(U(p)) : Qe([[p, I]]), h.adjustRowsAndCols(), r._refreshBorders();
          break;
        default:
          throw new Error(`There is no such action "${d}"`);
      }
      K || h.adjustRowsAndCols();
    },
    /**
     * Makes sure there are empty rows at the bottom of the table.
     *
     * @private
     */
    adjustRowsAndCols() {
      const d = C.minRows, p = C.minSpareRows, v = C.minCols, E = C.minSpareCols;
      if (r.countRows() === 0 && r.countCols() === 0 && _.deselect(), d) {
        const I = r.countRows();
        I < d && l.createRow(I, d - I, {
          source: "auto"
        });
      }
      if (p) {
        const I = r.countEmptyRows(!0);
        if (I < p) {
          const A = p - I, K = Math.min(A, C.maxRows - r.countSourceRows());
          l.createRow(r.countRows(), K, {
            source: "auto"
          });
        }
      }
      {
        let I;
        (v || E) && (I = r.countEmptyCols(!0));
        let A = r.countCols();
        if (v && !C.columns && A < v) {
          const K = v - A;
          I += K, l.createCol(A, K, {
            source: "auto"
          });
        }
        if (E && !C.columns && r.dataType === "array" && I < E) {
          A = r.countCols();
          const K = E - I, U = Math.min(K, C.maxCols - A);
          l.createCol(A, U, {
            source: "auto"
          });
        }
      }
      if (_.isSelected()) {
        const I = r.countRows(), A = r.countCols();
        D(_.selectedRange, (K) => {
          let U = !1, J = K.from.row, ne = K.from.col, Q = K.to.row, Ce = K.to.col;
          J > I - 1 ? (J = I - 1, U = !0, Q > J && (Q = J)) : Q > I - 1 && (Q = I - 1, U = !0, J > Q && (J = Q)), ne > A - 1 ? (ne = A - 1, U = !0, Ce > ne && (Ce = ne)) : Ce > A - 1 && (Ce = A - 1, U = !0, ne > Ce && (ne = Ce)), U && r.selectCell(J, ne, Q, Ce);
        });
      }
      r.view && r.view.adjustElementsSize();
    },
    /**
     * Populate the data from the provided 2d array from the given cell coordinates.
     *
     * @private
     * @param {object} start Start selection position. Visual indexes.
     * @param {Array} input 2d data array.
     * @param {object} [end] End selection position (only for drag-down mode). Visual indexes.
     * @param {string} [source="populateFromArray"] Source information string.
     * @param {string} [method="overwrite"] Populate method. Possible options: `shift_down`, `shift_right`, `overwrite`.
     * @returns {object|undefined} Ending td in pasted area (only if any cell was changed).
     */
    populateFromArray(d, p, v, E, I) {
      let A, K, U, J;
      const ne = [], Q = {}, Ce = [], Fe = d.row, Ie = d.col;
      if (K = p.length, K === 0)
        return !1;
      let Oe = 0, q = 0;
      switch (Ge(v) && (Oe = v.col - Ie + 1, q = v.row - Fe + 1), I) {
        case "shift_down":
          const Qe = Zl(p), We = Qe.length, xe = Math.max(We, Oe), Le = r.getData().slice(Fe), Ee = Zl(Le).slice(Ie, Ie + xe);
          for (U = 0; U < xe; U += 1)
            if (U < We) {
              for (A = 0, K = Qe[U].length; A < q - K; A += 1)
                Qe[U].push(Qe[U][A % K]);
              U < Ee.length ? Ce.push(Qe[U].concat(Ee[U])) : Ce.push(Qe[U].concat(new Array(Le.length).fill(null)));
            } else
              Ce.push(Qe[U % We].concat(Ee[U]));
          r.populateFromArray(Fe, Ie, Zl(Ce));
          break;
        case "shift_right":
          const y = p.length, b = Math.max(y, q), O = r.getData().slice(Fe).map((G) => G.slice(Ie));
          for (A = 0; A < b; A += 1)
            if (A < y) {
              for (U = 0, J = p[A].length; U < Oe - J; U += 1)
                p[A].push(p[A][U % J]);
              if (A < O.length)
                for (let G = 0; G < O[A].length; G += 1)
                  p[A].push(O[A][G]);
              else
                p[A].push(...new Array(O[0].length).fill(null));
            } else
              p.push(p[A % K].slice(0, b).concat(O[A]));
          r.populateFromArray(Fe, Ie, p);
          break;
        case "overwrite":
        default:
          Q.row = d.row, Q.col = d.col;
          let W = 0, k = 0, B = !0, N;
          const L = function(le) {
            let ge = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
            const be = p[le % p.length];
            return ge !== null ? be[ge % be.length] : be;
          }, Y = p.length, V = v ? v.row - d.row + 1 : 0;
          for (v ? K = V : K = Math.max(Y, V), A = 0; A < K && !(v && Q.row > v.row && V > Y || !C.allowInsertRow && Q.row > r.countRows() - 1 || Q.row >= C.maxRows); A++) {
            const G = A - W, le = L(G).length, ge = v ? v.col - d.col + 1 : 0;
            if (v ? J = ge : J = Math.max(le, ge), Q.col = d.col, N = r.getCellMeta(Q.row, Q.col), (E === "CopyPaste.paste" || E === "Autofill.fill") && N.skipRowOnPaste) {
              W += 1, Q.row += 1, K += 1;
              continue;
            }
            for (k = 0, U = 0; U < J && !(v && Q.col > v.col && ge > le || !C.allowInsertColumn && Q.col > r.countCols() - 1 || Q.col >= C.maxCols); U++) {
              if (N = r.getCellMeta(Q.row, Q.col), (E === "CopyPaste.paste" || E === "Autofill.fill") && N.skipColumnOnPaste) {
                k += 1, Q.col += 1, J += 1;
                continue;
              }
              if (N.readOnly && E !== "UndoRedo.undo") {
                Q.col += 1;
                continue;
              }
              const be = U - k;
              let Pe = L(G, be), Be = r.getDataAtCell(Q.row, Q.col);
              if (Pe !== null && typeof Pe == "object")
                if (Array.isArray(Pe) && Be === null && (Be = []), Be === null || typeof Be != "object")
                  B = !1;
                else {
                  const gt = ma(Array.isArray(Be) ? Be : Be[0] || Be), Xe = ma(Array.isArray(Pe) ? Pe : Pe[0] || Pe);
                  vg(gt, Xe) || Array.isArray(gt) && Array.isArray(Xe) ? Pe = ms(Pe) : B = !1;
                }
              else
                Be !== null && typeof Be == "object" && (B = !1);
              B && ne.push([Q.row, Q.col, Pe]), B = !0, Q.col += 1;
            }
            Q.row += 1;
          }
          r.setDataAtCell(ne, null, null, E || "populateFromArray");
          break;
      }
    }
  };
  function j(d) {
    const p = PR(d);
    gp(p) ? (r.runHooks("beforeLanguageChange", p), S.language = p, r.runHooks("afterLanguageChange", p)) : DR(d);
  }
  function H(d, p) {
    const v = d === "className" ? r.rootElement : r.table;
    if (f)
      ie(v, p);
    else {
      let E = [], I = [];
      S[d] && (E = Array.isArray(S[d]) ? S[d] : pC(S[d])), p && (I = Array.isArray(p) ? p : pC(p));
      const A = mC(E, I), K = mC(I, E);
      A.length && $e(v, A), K.length && ie(v, K);
    }
    S[d] = p;
  }
  this.init = function() {
    c.setData(C.data), r.runHooks("beforeInit"), (vn() || Gb()) && ie(r.rootElement, "mobile"), this.updateSettings(C, !0), this.view = new SV(this), u = $L.getInstance(r, C, _), r.runHooks("init"), this.forceFullRender = !0, this.view.render(), f && r.rootElement.offsetParent === null && oL(r.rootElement, () => {
      r.view._wt.wtOverlays.updateLastSpreaderSize(), r.render(), r.view.adjustElementsSize();
    }), typeof f == "object" && (r.runHooks("afterChange", f[0], f[1]), f = !1), r.runHooks("afterInit");
  };
  function Z() {
    let d = !1;
    return {
      validatorsInQueue: 0,
      valid: !0,
      addValidatorToQueue() {
        this.validatorsInQueue += 1, d = !1;
      },
      removeValidatorFormQueue() {
        this.validatorsInQueue = this.validatorsInQueue - 1 < 0 ? 0 : this.validatorsInQueue - 1, this.checkIfQueueIsEmpty();
      },
      onQueueEmpty() {
      },
      checkIfQueueIsEmpty() {
        this.validatorsInQueue === 0 && d === !1 && (d = !0, this.onQueueEmpty(this.valid));
      }
    };
  }
  function X(d) {
    const p = d.replace(",", ".");
    return isNaN(parseFloat(p)) === !1 ? parseFloat(p) : d;
  }
  function F(d, p, v) {
    if (!d.length)
      return;
    const E = r.getActiveEditor(), I = new Z();
    let A = !0;
    I.onQueueEmpty = (K) => {
      E && A && E.cancelChanges(), v(K);
    };
    for (let K = d.length - 1; K >= 0; K--) {
      const [U, J, , ne] = d[K], Q = l.propToCol(J), Ce = r.getCellMeta(U, Q);
      Ce.type === "numeric" && typeof ne == "string" && WL(ne) && (d[K][3] = X(ne)), r.getCellValidator(Ce) && (I.addValidatorToQueue(), r.validateCell(d[K][3], Ce, function(Fe, Ie) {
        return function(Oe) {
          if (typeof Oe != "boolean")
            throw new Error("Validation error: result is not boolean");
          if (Oe === !1 && Ie.allowInvalid === !1) {
            A = !1, d.splice(Fe, 1), Ie.valid = !0;
            const q = r.getCell(Ie.visualRow, Ie.visualCol);
            q !== null && $e(q, C.invalidCellClassName);
          }
          I.removeValidatorFormQueue();
        };
      }(K, Ce), p));
    }
    I.checkIfQueueIsEmpty();
  }
  function z(d, p) {
    let v = d.length - 1;
    if (v < 0)
      return;
    for (; v >= 0; v--) {
      let I = !1;
      if (d[v] === null) {
        d.splice(v, 1);
        continue;
      }
      if (!((d[v][2] === null || d[v][2] === void 0) && (d[v][3] === null || d[v][3] === void 0))) {
        if (C.allowInsertRow)
          for (; d[v][0] > r.countRows() - 1; ) {
            const {
              delta: A
            } = l.createRow(void 0, void 0, {
              source: p
            });
            if (A === 0) {
              I = !0;
              break;
            }
          }
        if (r.dataType === "array" && (!C.columns || C.columns.length === 0) && C.allowInsertColumn)
          for (; l.propToCol(d[v][1]) > r.countCols() - 1; ) {
            const {
              delta: A
            } = l.createCol(void 0, void 0, {
              source: p
            });
            if (A === 0) {
              I = !0;
              break;
            }
          }
        I || l.set(d[v][0], d[v][1], d[v][3]);
      }
    }
    r.forceFullRender = !0, h.adjustRowsAndCols(), r.runHooks("beforeChangeRender", d, p), u.lockEditor(), r._refreshBorders(null), u.unlockEditor(), r.view.adjustElementsSize(), r.runHooks("afterChange", d, p || "edit");
    const E = r.getActiveEditor();
    E && ue(E.refreshValue) && E.refreshValue();
  }
  this._createCellCoords = function(d, p) {
    return r.view._wt.createCellCoords(d, p);
  }, this._createCellRange = function(d, p, v) {
    return r.view._wt.createCellRange(d, p, v);
  }, this.validateCell = function(d, p, v, E) {
    let I = r.getCellValidator(p);
    function A(K) {
      if (!(arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0) || p.hidden === !0) {
        v(K);
        return;
      }
      const J = p.visualCol, ne = p.visualRow, Q = r.getCell(ne, J, !0);
      if (Q && Q.nodeName !== "TH") {
        const Ce = r.rowIndexMapper.getRenderableFromVisualIndex(ne), Fe = r.columnIndexMapper.getRenderableFromVisualIndex(J);
        r.view._wt.getSetting("cellRenderer", Ce, Fe, Q);
      }
      v(K);
    }
    zN(I) && (I = function(K) {
      return function(U, J) {
        J(K.test(U));
      };
    }(I)), mt(I) ? (d = r.runHooks("beforeValidate", d, p.visualRow, p.prop, E), r._registerImmediate(() => {
      I.call(p, d, (K) => {
        r && (K = r.runHooks("afterValidate", K, d, p.visualRow, p.prop, E), p.valid = K, A(K), r.runHooks("postAfterValidate", K, d, p.visualRow, p.prop, E));
      });
    })) : r._registerImmediate(() => {
      p.valid = !0, A(p.valid, !1);
    });
  };
  function ee(d, p, v) {
    return Array.isArray(d) ? d : [[d, p, v]];
  }
  function oe(d, p) {
    const v = r.getActiveEditor(), E = r.runHooks("beforeChange", d, p || "edit"), I = d.filter((A) => A !== null);
    return E === !1 || I.length === 0 ? (v && v.cancelChanges(), []) : I;
  }
  this.setDataAtCell = function(d, p, v, E) {
    const I = ee(d, p, v), A = [];
    let K = E, U, J, ne;
    for (U = 0, J = I.length; U < J; U++) {
      if (typeof I[U] != "object")
        throw new Error("Method `setDataAtCell` accepts row number or changes array of arrays as its first parameter");
      if (typeof I[U][1] != "number")
        throw new Error("Method `setDataAtCell` accepts row and column number as its parameters. If you want to use object property name, use method `setDataAtRowProp`");
      I[U][1] >= this.countCols() ? ne = I[U][1] : ne = l.colToProp(I[U][1]), A.push([I[U][0], ne, c.getAtCell(this.toPhysicalRow(I[U][0]), I[U][1]), I[U][2]]);
    }
    !K && typeof d == "object" && (K = p);
    const Q = oe(A, E);
    r.runHooks("afterSetDataAtCell", Q, K), F(Q, K, () => {
      z(Q, K);
    });
  }, this.setDataAtRowProp = function(d, p, v, E) {
    const I = ee(d, p, v), A = [];
    let K = E, U, J;
    for (U = 0, J = I.length; U < J; U++)
      A.push([I[U][0], I[U][1], c.getAtCell(this.toPhysicalRow(I[U][0]), I[U][1]), I[U][2]]);
    !K && typeof d == "object" && (K = p);
    const ne = oe(A, E);
    r.runHooks("afterSetDataAtRowProp", ne, K), F(ne, K, () => {
      z(ne, K);
    });
  }, this.listen = function() {
    r && !r.isListening() && (Ou = r.guid, r.runHooks("afterListen"));
  }, this.unlisten = function() {
    this.isListening() && (Ou = null, r.runHooks("afterUnlisten"));
  }, this.isListening = function() {
    return Ou === r.guid;
  }, this.destroyEditor = function() {
    let d = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1, p = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0;
    r._refreshBorders(d, p);
  }, this.populateFromArray = function(d, p, v, E, I, A, K) {
    if (!(typeof v == "object" && typeof v[0] == "object"))
      throw new Error("populateFromArray parameter `input` must be an array of arrays");
    const U = typeof E == "number" ? r._createCellCoords(E, I) : null;
    return h.populateFromArray(r._createCellCoords(d, p), v, U, A, K);
  }, this.spliceCol = function(d, p, v) {
    for (var E = arguments.length, I = new Array(E > 3 ? E - 3 : 0), A = 3; A < E; A++)
      I[A - 3] = arguments[A];
    return l.spliceCol(d, p, v, ...I);
  }, this.spliceRow = function(d, p, v) {
    for (var E = arguments.length, I = new Array(E > 3 ? E - 3 : 0), A = 3; A < E; A++)
      I[A - 3] = arguments[A];
    return l.spliceRow(d, p, v, ...I);
  }, this.getSelected = function() {
    if (_.isSelected())
      return Ye(_.getSelectedRange(), (d) => {
        let {
          from: p,
          to: v
        } = d;
        return [p.row, p.col, v.row, v.col];
      });
  }, this.getSelectedLast = function() {
    const d = this.getSelected();
    let p;
    return d && d.length > 0 && (p = d[d.length - 1]), p;
  }, this.getSelectedRange = function() {
    if (_.isSelected())
      return Array.from(_.getSelectedRange());
  }, this.getSelectedRangeLast = function() {
    const d = this.getSelectedRange();
    let p;
    return d && d.length > 0 && (p = d[d.length - 1]), p;
  }, this.emptySelectedCells = function(d) {
    if (!_.isSelected() || this.countRows() === 0 || this.countCols() === 0)
      return;
    const p = [];
    D(_.getSelectedRange(), (v) => {
      const E = v.getTopStartCorner(), I = v.getBottomEndCorner();
      Se(E.row, I.row, (A) => {
        Se(E.col, I.col, (K) => {
          this.getCellMeta(A, K).readOnly || p.push([A, K, null]);
        });
      });
    }), p.length > 0 && this.setDataAtCell(p, d);
  }, this.isRenderSuspended = function() {
    return this.renderSuspendedCounter > 0;
  }, this.suspendRender = function() {
    this.renderSuspendedCounter += 1;
  }, this.resumeRender = function() {
    const d = this.renderSuspendedCounter - 1;
    this.renderSuspendedCounter = Math.max(d, 0), !this.isRenderSuspended() && d === this.renderSuspendedCounter && (this.renderCall ? this.render() : this._refreshBorders(null));
  }, this.render = function() {
    this.view && (this.renderCall = !0, this.forceFullRender = !0, this.isRenderSuspended() || (u.lockEditor(), this._refreshBorders(null), u.unlockEditor()));
  }, this.batchRender = function(d) {
    this.suspendRender();
    const p = d();
    return this.resumeRender(), p;
  }, this.isExecutionSuspended = function() {
    return this.executionSuspendedCounter > 0;
  }, this.suspendExecution = function() {
    this.executionSuspendedCounter += 1, this.columnIndexMapper.suspendOperations(), this.rowIndexMapper.suspendOperations();
  }, this.resumeExecution = function() {
    let d = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
    const p = this.executionSuspendedCounter - 1;
    this.executionSuspendedCounter = Math.max(p, 0), (!this.isExecutionSuspended() && p === this.executionSuspendedCounter || d) && (this.columnIndexMapper.resumeOperations(), this.rowIndexMapper.resumeOperations());
  }, this.batchExecution = function(d) {
    let p = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;
    this.suspendExecution();
    const v = d();
    return this.resumeExecution(p), v;
  }, this.batch = function(d) {
    this.suspendRender(), this.suspendExecution();
    const p = d();
    return this.resumeExecution(), this.resumeRender(), p;
  }, this.refreshDimensions = function() {
    if (!r.view)
      return;
    const {
      width: d,
      height: p
    } = r.view.getLastSize(), {
      width: v,
      height: E
    } = r.rootElement.getBoundingClientRect(), I = v !== d || E !== p;
    r.runHooks("beforeRefreshDimensions", {
      width: d,
      height: p
    }, {
      width: v,
      height: E
    }, I) !== !1 && ((I || r.view._wt.wtOverlays.scrollableElement === r.rootWindow) && (r.view.setLastSize(v, E), r.render()), r.runHooks("afterRefreshDimensions", {
      width: d,
      height: p
    }, {
      width: v,
      height: E
    }, I));
  }, this.updateData = function(d, p) {
    dv(d, (v) => {
      l = v;
    }, (v) => {
      l = v, r.columnIndexMapper.fitToLength(this.getInitialColumnCount()), r.rowIndexMapper.fitToLength(this.countSourceRows()), h.adjustRowsAndCols();
    }, {
      hotInstance: r,
      dataMap: l,
      dataSource: c,
      internalSource: "updateData",
      source: p,
      metaManager: w,
      firstRun: f
    });
  }, this.loadData = function(d, p) {
    dv(d, (v) => {
      l = v;
    }, () => {
      w.clearCellsCache(), r.initIndexMappers(), h.adjustRowsAndCols(), f && (f = [null, "loadData"]);
    }, {
      hotInstance: r,
      dataMap: l,
      dataSource: c,
      internalSource: "loadData",
      source: p,
      metaManager: w,
      firstRun: f
    });
  }, this.getInitialColumnCount = function() {
    const d = C.columns;
    let p = 0;
    if (Array.isArray(d))
      p = d.length;
    else if (mt(d))
      if (r.dataType === "array") {
        const v = this.countSourceCols();
        for (let E = 0; E < v; E += 1)
          d(E) && (p += 1);
      } else
        (r.dataType === "object" || r.dataType === "function") && (p = l.colToPropCache.length);
    else if (ue(C.dataSchema)) {
      const v = l.getSchema();
      p = Array.isArray(v) ? v.length : yg(v);
    } else
      p = this.countSourceCols();
    return p;
  }, this.initIndexMappers = function() {
    this.columnIndexMapper.initToLength(this.getInitialColumnCount()), this.rowIndexMapper.initToLength(this.countSourceRows());
  }, this.getData = function(d, p, v, E) {
    return wt(d) ? l.getAll() : l.getRange(r._createCellCoords(d, p), r._createCellCoords(v, E), l.DESTINATION_RENDERER);
  }, this.getCopyableText = function(d, p, v, E) {
    return l.getCopyableText(r._createCellCoords(d, p), r._createCellCoords(v, E));
  }, this.getCopyableData = function(d, p) {
    return l.getCopyable(d, l.colToProp(p));
  }, this.getSchema = function() {
    return l.getSchema();
  }, this.updateSettings = function(d) {
    let p = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;
    const v = (f ? r.loadData : r.updateData).bind(this);
    let E = !1, I, A;
    if (ue(d.rows))
      throw new Error('The "rows" setting is no longer supported. Do you mean startRows, minRows or maxRows?');
    if (ue(d.cols))
      throw new Error('The "cols" setting is no longer supported. Do you mean startCols, minCols or maxCols?');
    if (ue(d.ganttChart))
      throw new Error('Since 8.0.0 the "ganttChart" setting is no longer supported.');
    for (I in d)
      I === "data" || (I === "language" ? j(d.language) : I === "className" ? H("className", d.className) : I === "tableClassName" && r.table ? (H("tableClassName", d.tableClassName), r.view._wt.wtOverlays.syncOverlayTableClassNames()) : me.getSingleton().isRegistered(I) || me.getSingleton().isDeprecated(I) ? (mt(d[I]) || Array.isArray(d[I])) && (d[I].initialHook = !0, r.addHook(I, d[I])) : !p && Lt(d, I) && (S[I] = d[I]));
    d.data === void 0 && C.data === void 0 ? v(null, "updateSettings") : d.data !== void 0 ? v(d.data, "updateSettings") : d.columns !== void 0 && (l.createMap(), r.initIndexMappers());
    const K = r.countCols(), U = C.columns;
    if (U && mt(U) && (E = !0), (d.cell !== void 0 || d.cells !== void 0 || d.columns !== void 0) && w.clearCache(), K > 0)
      for (I = 0, A = 0; I < K; I++) {
        if (U) {
          const Q = E ? U(I) : U[A];
          Q && w.updateColumnMeta(A, Q);
        }
        A += 1;
      }
    ue(d.cell) && je(d.cell, (Q) => {
      r.setCellMetaObject(Q.row, Q.col, Q);
    }), r.runHooks("afterCellMetaReset");
    let J = r.rootElement.style.height;
    J !== "" && (J = parseInt(r.rootElement.style.height, 10));
    let ne = d.height;
    if (mt(ne) && (ne = ne()), p && r.rootElement.getAttribute("style") && r.rootElement.setAttribute("data-initialstyle", r.rootElement.getAttribute("style")), ne === null) {
      const Q = r.rootElement.getAttribute("data-initialstyle");
      Q && (Q.indexOf("height") > -1 || Q.indexOf("overflow") > -1) ? r.rootElement.setAttribute("style", Q) : (r.rootElement.style.height = "", r.rootElement.style.overflow = "");
    } else
      ne !== void 0 && (r.rootElement.style.height = isNaN(ne) ? `${ne}` : `${ne}px`, r.rootElement.style.overflow = "hidden");
    if (typeof d.width < "u") {
      let Q = d.width;
      mt(Q) && (Q = Q()), r.rootElement.style.width = isNaN(Q) ? `${Q}` : `${Q}px`;
    }
    p || (r.view && (r.view._wt.wtViewport.resetHasOversizedColumnHeadersMarked(), r.view._wt.exportSettingsAsClassNames()), r.runHooks("afterUpdateSettings", d)), h.adjustRowsAndCols(), r.view && !f && (r.forceFullRender = !0, u.lockEditor(), r._refreshBorders(null), r.view._wt.wtOverlays.adjustElementsSize(), u.unlockEditor()), !p && r.view && (J === "" || ne === "" || ne === void 0) && J !== ne && r.view._wt.wtOverlays.updateMainScrollableElements();
  }, this.getValue = function() {
    const d = r.getSelectedLast();
    if (C.getValue) {
      if (mt(C.getValue))
        return C.getValue.call(r);
      if (d)
        return r.getData()[d[0][0]][C.getValue];
    } else if (d)
      return r.getDataAtCell(d[0], d[1]);
  }, this.getSettings = function() {
    return C;
  }, this.clear = function() {
    this.selectAll(), this.emptySelectedCells();
  }, this.alter = function(d, p, v, E, I) {
    h.alter(d, p, v, E, I);
  }, this.getCell = function(d, p) {
    let v = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1, E = p, I = d;
    if (p >= 0) {
      if (this.columnIndexMapper.isHidden(this.toPhysicalColumn(p)))
        return null;
      E = this.columnIndexMapper.getRenderableFromVisualIndex(p);
    }
    if (d >= 0) {
      if (this.rowIndexMapper.isHidden(this.toPhysicalRow(d)))
        return null;
      I = this.rowIndexMapper.getRenderableFromVisualIndex(d);
    }
    return I === null || E === null ? null : r.view.getCellAtCoords(r._createCellCoords(I, E), v);
  }, this.getCoords = function(d) {
    const p = this.view._wt.wtTable.getCoords(d);
    if (p === null)
      return null;
    const {
      row: v,
      col: E
    } = p;
    let I = v, A = E;
    return v >= 0 && (I = this.rowIndexMapper.getVisualFromRenderableIndex(v)), E >= 0 && (A = this.columnIndexMapper.getVisualFromRenderableIndex(E)), r._createCellCoords(I, A);
  }, this.colToProp = function(d) {
    return l.colToProp(d);
  }, this.propToCol = function(d) {
    return l.propToCol(d);
  }, this.toVisualRow = (d) => this.rowIndexMapper.getVisualFromPhysicalIndex(d), this.toVisualColumn = (d) => this.columnIndexMapper.getVisualFromPhysicalIndex(d), this.toPhysicalRow = (d) => this.rowIndexMapper.getPhysicalFromVisualIndex(d), this.toPhysicalColumn = (d) => this.columnIndexMapper.getPhysicalFromVisualIndex(d), this.getDataAtCell = function(d, p) {
    return l.get(d, l.colToProp(p));
  }, this.getDataAtRowProp = function(d, p) {
    return l.get(d, p);
  }, this.getDataAtCol = function(d) {
    const p = [], v = l.getRange(r._createCellCoords(0, d), r._createCellCoords(C.data.length - 1, d), l.DESTINATION_RENDERER);
    for (let E = 0; E < v.length; E += 1)
      for (let I = 0; I < v[E].length; I += 1)
        p.push(v[E][I]);
    return p;
  }, this.getDataAtProp = function(d) {
    const p = [], v = l.getRange(r._createCellCoords(0, l.propToCol(d)), r._createCellCoords(C.data.length - 1, l.propToCol(d)), l.DESTINATION_RENDERER);
    for (let E = 0; E < v.length; E += 1)
      for (let I = 0; I < v[E].length; I += 1)
        p.push(v[E][I]);
    return p;
  }, this.getSourceData = function(d, p, v, E) {
    let I;
    return d === void 0 ? I = c.getData() : I = c.getByRange(r._createCellCoords(d, p), r._createCellCoords(v, E)), I;
  }, this.getSourceDataArray = function(d, p, v, E) {
    let I;
    return d === void 0 ? I = c.getData(!0) : I = c.getByRange(r._createCellCoords(d, p), r._createCellCoords(v, E), !0), I;
  }, this.getSourceDataAtCol = function(d) {
    return c.getAtColumn(d);
  }, this.setSourceDataAtCell = function(d, p, v, E) {
    const I = ee(d, p, v), A = this.hasHook("afterSetSourceDataAtCell"), K = [];
    A && D(I, (J) => {
      let [ne, Q, Ce] = J;
      K.push([
        ne,
        Q,
        c.getAtCell(ne, Q),
        // The previous value.
        Ce
      ]);
    }), D(I, (J) => {
      let [ne, Q, Ce] = J;
      c.setAtCell(ne, Q, Ce);
    }), A && this.runHooks("afterSetSourceDataAtCell", K, E), this.render();
    const U = r.getActiveEditor();
    U && ue(U.refreshValue) && U.refreshValue();
  }, this.getSourceDataAtRow = function(d) {
    return c.getAtRow(d);
  }, this.getSourceDataAtCell = function(d, p) {
    return c.getAtCell(d, p);
  }, this.getDataAtRow = function(d) {
    return l.getRange(r._createCellCoords(d, 0), r._createCellCoords(d, this.countCols() - 1), l.DESTINATION_RENDERER)[0] || [];
  }, this.getDataType = function(d, p, v, E) {
    const I = d === void 0 ? [0, 0, this.countRows(), this.countCols()] : [d, p, v, E], [A, K] = I;
    let [, , U, J] = I, ne = null, Q = null;
    U === void 0 && (U = A), J === void 0 && (J = K);
    let Ce = "mixed";
    return Se(Math.max(Math.min(A, U), 0), Math.max(A, U), (Fe) => {
      let Ie = !0;
      return Se(Math.max(Math.min(K, J), 0), Math.max(K, J), (Oe) => (Q = this.getCellMeta(Fe, Oe).type, ne ? Ie = ne === Q : ne = Q, Ie)), Ce = Ie ? Q : "mixed", Ie;
    }), Ce;
  }, this.removeCellMeta = function(d, p, v) {
    const [E, I] = [this.toPhysicalRow(d), this.toPhysicalColumn(p)];
    let A = w.getCellMetaKeyValue(E, I, v);
    r.runHooks("beforeRemoveCellMeta", d, p, v, A) !== !1 && (w.removeCellMeta(E, I, v), r.runHooks("afterRemoveCellMeta", d, p, v, A)), A = null;
  }, this.spliceCellsMeta = function(d) {
    let p = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
    for (var v = arguments.length, E = new Array(v > 2 ? v - 2 : 0), I = 2; I < v; I++)
      E[I - 2] = arguments[I];
    if (E.length > 0 && !Array.isArray(E[0]))
      throw new Error("The 3rd argument (cellMetaRows) has to be passed as an array of cell meta objects array.");
    p > 0 && w.removeRow(this.toPhysicalRow(d), p), E.length > 0 && D(E.reverse(), (A) => {
      w.createRow(this.toPhysicalRow(d)), D(A, (K, U) => this.setCellMetaObject(d, U, K));
    }), r.render();
  }, this.setCellMetaObject = function(d, p, v) {
    typeof v == "object" && je(v, (E, I) => {
      this.setCellMeta(d, p, I, E);
    });
  }, this.setCellMeta = function(d, p, v, E) {
    if (r.runHooks("beforeSetCellMeta", d, p, v, E) === !1)
      return;
    let A = d, K = p;
    d < this.countRows() && (A = this.toPhysicalRow(d)), p < this.countCols() && (K = this.toPhysicalColumn(p)), w.setCellMeta(A, K, v, E), r.runHooks("afterSetCellMeta", d, p, v, E);
  }, this.getCellsMeta = function() {
    return w.getCellsMeta();
  }, this.getCellMeta = function(d, p) {
    let v = this.toPhysicalRow(d), E = this.toPhysicalColumn(p);
    return v === null && (v = d), E === null && (E = p), w.getCellMeta(v, E, {
      visualRow: d,
      visualColumn: p
    });
  }, this.getCellMetaAtRow = function(d) {
    return w.getCellsMetaAtRow(d);
  }, this.isColumnModificationAllowed = function() {
    return !(r.dataType === "object" || C.columns);
  }, this.getCellRenderer = function(d, p) {
    const v = typeof d == "number" ? r.getCellMeta(d, p).renderer : d.renderer;
    return typeof v == "string" ? VC(v) : wt(v) ? VC("text") : v;
  }, this.getCellEditor = function(d, p) {
    const v = typeof d == "number" ? r.getCellMeta(d, p).editor : d.editor;
    return typeof v == "string" ? kC(v) : wt(v) ? kC("text") : v;
  }, this.getCellValidator = function(d, p) {
    const v = typeof d == "number" ? r.getCellMeta(d, p).validator : d.validator;
    return typeof v == "string" ? o$(v) : v;
  }, this.validateCells = function(d) {
    this._validateCells(d);
  }, this.validateRows = function(d, p) {
    if (!Array.isArray(d))
      throw new Error("validateRows parameter `rows` must be an array");
    this._validateCells(p, d);
  }, this.validateColumns = function(d, p) {
    if (!Array.isArray(d))
      throw new Error("validateColumns parameter `columns` must be an array");
    this._validateCells(p, void 0, d);
  }, this._validateCells = function(d, p, v) {
    const E = new Z();
    d && (E.onQueueEmpty = d);
    let I = r.countRows() - 1;
    for (; I >= 0; ) {
      if (p !== void 0 && p.indexOf(I) === -1) {
        I -= 1;
        continue;
      }
      let A = r.countCols() - 1;
      for (; A >= 0; ) {
        if (v !== void 0 && v.indexOf(A) === -1) {
          A -= 1;
          continue;
        }
        E.addValidatorToQueue(), r.validateCell(r.getDataAtCell(I, A), r.getCellMeta(I, A), (K) => {
          if (typeof K != "boolean")
            throw new Error("Validation error: result is not boolean");
          K === !1 && (E.valid = !1), E.removeValidatorFormQueue();
        }, "validateCells"), A -= 1;
      }
      I -= 1;
    }
    E.checkIfQueueIsEmpty();
  }, this.getRowHeader = function(d) {
    let p = C.rowHeaders, v = d;
    return v !== void 0 && (v = r.runHooks("modifyRowHeader", v)), v === void 0 ? (p = [], Se(r.countRows() - 1, (E) => {
      p.push(r.getRowHeader(E));
    })) : Array.isArray(p) && p[v] !== void 0 ? p = p[v] : mt(p) ? p = p(v) : p && typeof p != "string" && typeof p != "number" && (p = v + 1), p;
  }, this.hasRowHeaders = function() {
    return !!C.rowHeaders;
  }, this.hasColHeaders = function() {
    if (C.colHeaders !== void 0 && C.colHeaders !== null)
      return !!C.colHeaders;
    for (let d = 0, p = r.countCols(); d < p; d++)
      if (r.getColHeader(d))
        return !0;
    return !1;
  }, this.getColHeader = function(d) {
    let p = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : -1;
    const v = r.runHooks("modifyColHeader", d);
    if (v === void 0) {
      const U = [], J = r.countCols();
      for (let ne = 0; ne < J; ne++)
        U.push(r.getColHeader(ne));
      return U;
    }
    let E = C.colHeaders;
    const I = function(U) {
      const J = [], ne = r.countCols();
      let Q = 0;
      for (; Q < ne; Q++)
        mt(C.columns) && C.columns(Q) && J.push(Q);
      return J[U];
    }, A = r.toPhysicalColumn(v), K = I(A);
    return C.colHeaders === !1 ? E = null : C.columns && mt(C.columns) && C.columns(K) && C.columns(K).title ? E = C.columns(K).title : C.columns && C.columns[A] && C.columns[A].title ? E = C.columns[A].title : Array.isArray(C.colHeaders) && C.colHeaders[A] !== void 0 ? E = C.colHeaders[A] : mt(C.colHeaders) ? E = C.colHeaders(A) : C.colHeaders && typeof C.colHeaders != "string" && typeof C.colHeaders != "number" && (E = RV(v)), E = r.runHooks("modifyColumnHeaderValue", E, d, p), E;
  }, this._getColWidthFromSettings = function(d) {
    let p;
    if (d >= 0 && (p = r.getCellMeta(0, d).width), (p === void 0 || p === C.width) && (p = C.colWidths), p != null) {
      switch (typeof p) {
        case "object":
          p = p[d];
          break;
        case "function":
          p = p(d);
          break;
      }
      typeof p == "string" && (p = parseInt(p, 10));
    }
    return p;
  }, this.getColWidth = function(d) {
    let p = r._getColWidthFromSettings(d);
    return p = r.runHooks("modifyColWidth", p, d), p === void 0 && (p = Tg.DEFAULT_WIDTH), p;
  }, this._getRowHeightFromSettings = function(d) {
    let p = C.rowHeights;
    if (p != null) {
      switch (typeof p) {
        case "object":
          p = p[d];
          break;
        case "function":
          p = p(d);
          break;
      }
      typeof p == "string" && (p = parseInt(p, 10));
    }
    return p;
  }, this.getRowHeight = function(d) {
    let p = r._getRowHeightFromSettings(d);
    return p = r.runHooks("modifyRowHeight", p, d), p;
  }, this.countSourceRows = function() {
    return c.countRows();
  }, this.countSourceCols = function() {
    return c.countFirstRowKeys();
  }, this.countRows = function() {
    return l.getLength();
  }, this.countCols = function() {
    const d = C.maxCols, p = this.columnIndexMapper.getNotTrimmedIndexesLength();
    return Math.min(d, p);
  }, this.countRenderedRows = function() {
    return r.view._wt.drawn ? r.view._wt.wtTable.getRenderedRowsCount() : -1;
  }, this.countVisibleRows = function() {
    return r.view._wt.drawn ? r.view._wt.wtTable.getVisibleRowsCount() : -1;
  }, this.countRenderedCols = function() {
    return r.view._wt.drawn ? r.view._wt.wtTable.getRenderedColumnsCount() : -1;
  }, this.countVisibleCols = function() {
    return r.view._wt.drawn ? r.view._wt.wtTable.getVisibleColumnsCount() : -1;
  }, this.countEmptyRows = function() {
    let d = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1, p = 0;
    return af(r.countRows() - 1, (v) => {
      if (r.isEmptyRow(v))
        p += 1;
      else if (d === !0)
        return !1;
    }), p;
  }, this.countEmptyCols = function() {
    let d = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1, p = 0;
    return af(r.countCols() - 1, (v) => {
      if (r.isEmptyCol(v))
        p += 1;
      else if (d === !0)
        return !1;
    }), p;
  }, this.isEmptyRow = function(d) {
    return C.isEmptyRow.call(r, d);
  }, this.isEmptyCol = function(d) {
    return C.isEmptyCol.call(r, d);
  }, this.selectCell = function(d, p, v, E) {
    let I = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : !0, A = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : !0;
    return wt(d) || wt(p) ? !1 : this.selectCells([[d, p, v, E]], I, A);
  }, this.selectCells = function() {
    let d = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [[]], p = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0, v = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !0;
    p === !1 && (o = !0);
    const E = _.selectCells(d);
    return E && v && r.listen(), o = !1, E;
  }, this.selectColumns = function(d) {
    let p = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : d;
    return _.selectColumns(d, p);
  }, this.selectRows = function(d) {
    let p = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : d;
    return _.selectRows(d, p);
  }, this.deselectCell = function() {
    _.deselect();
  }, this.selectAll = function() {
    let d = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !0;
    const p = d && this.hasRowHeaders(), v = d && this.hasColHeaders();
    o = !0, _.selectAll(p, v), o = !1;
  };
  const fe = (d, p) => d.getNearestNotHiddenIndex(p, 1, !0);
  this.scrollViewportTo = function(d, p) {
    let v = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1, E = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : !1, I = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : !0;
    const A = !v, K = !E;
    let U = d, J = p;
    if (I) {
      const Ce = Number.isInteger(d), Fe = Number.isInteger(p), Ie = Ce ? fe(this.rowIndexMapper, d) : void 0, Oe = Fe ? fe(this.columnIndexMapper, p) : void 0;
      if (Ie === null || Oe === null)
        return !1;
      U = Ce ? r.rowIndexMapper.getRenderableFromVisualIndex(Ie) : void 0, J = Fe ? r.columnIndexMapper.getRenderableFromVisualIndex(Oe) : void 0;
    }
    const ne = Number.isInteger(U), Q = Number.isInteger(J);
    return ne && Q ? r.view.scrollViewport(r._createCellCoords(U, J), A, E, v, K) : ne && Q === !1 ? r.view.scrollViewportVertically(U, A, v) : Q && ne === !1 ? r.view.scrollViewportHorizontally(J, E, K) : !1;
  }, this.destroy = function() {
    if (r._clearTimeouts(), r._clearImmediates(), r.view && r.view.destroy(), c && c.destroy(), c = null, this.getShortcutManager().destroy(), w.clearCache(), gf(r)) {
      const d = this.rootDocument.querySelector(".hot-display-license-info");
      d && d.parentNode.removeChild(d);
    }
    bn(r.rootElement), a.destroy(), u && u.destroy(), r.batchExecution(() => {
      r.rowIndexMapper.unregisterAll(), r.columnIndexMapper.unregisterAll(), x.getItems().forEach((d) => {
        let [, p] = d;
        p.destroy();
      }), x.clear(), r.runHooks("afterDestroy");
    }, !0), me.getSingleton().destroy(r), je(r, (d, p, v) => {
      mt(d) ? v[p] = Ae(p) : p !== "guid" && (v[p] = null);
    }), r.isDestroyed = !0, l && l.destroy(), l = null, h = null, _ = null, u = null, r = null;
  };
  function Ae(d) {
    return () => {
      throw new Error(`The "${d}" method cannot be called because this Handsontable instance has been destroyed`);
    };
  }
  this.getActiveEditor = function() {
    return u.getActiveEditor();
  }, this.getPlugin = function(d) {
    const p = Js(d);
    return p === "UndoRedo" ? this.undoRedo : x.getItem(p);
  }, this.getPluginName = function(d) {
    return d === this.undoRedo ? this.undoRedo.constructor.PLUGIN_KEY : x.getId(d);
  }, this.getInstance = function() {
    return r;
  }, this.addHook = function(d, p) {
    me.getSingleton().add(d, p, r);
  }, this.hasHook = function(d) {
    return me.getSingleton().has(d, r) || me.getSingleton().has(d);
  }, this.addHookOnce = function(d, p) {
    me.getSingleton().once(d, p, r);
  }, this.removeHook = function(d, p) {
    me.getSingleton().remove(d, p, r);
  }, this.runHooks = function(d, p, v, E, I, A, K) {
    return me.getSingleton().run(r, d, p, v, E, I, A, K);
  }, this.getTranslatedPhrase = function(d, p) {
    return FR(C.language, d, p);
  }, this.toHTML = () => LC(this), this.toTableElement = () => {
    const d = this.rootDocument.createElement("div");
    return d.insertAdjacentHTML("afterbegin", LC(this)), d.firstElementChild;
  }, this.timeouts = [], this._registerTimeout = function(d) {
    let p = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, v = d;
    typeof v == "function" && (v = setTimeout(v, p)), this.timeouts.push(v);
  }, this._clearTimeouts = function() {
    D(this.timeouts, (d) => {
      clearTimeout(d);
    });
  }, this.immediates = [], this._registerImmediate = function(d) {
    this.immediates.push(setImmediate(d));
  }, this._clearImmediates = function() {
    D(this.immediates, (d) => {
      clearImmediate(d);
    });
  }, this._refreshBorders = function() {
    let d = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1, p = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0;
    u.destroyEditor(d), r.view.render(), p && _.isSelected() && u.prepareEditor();
  }, this.isRtl = function() {
    return r.rootWindow.getComputedStyle(r.rootElement).direction === "rtl";
  }, this.isLtr = function() {
    return !r.isRtl();
  }, this.getDirectionFactor = function() {
    return r.isLtr() ? 1 : -1;
  };
  const Ze = KB({
    handleEvent(d) {
      const p = r.isListening(), v = (d == null ? void 0 : d.key) !== void 0;
      return p && v;
    },
    beforeKeyDown: (d) => this.runHooks("beforeKeyDown", d),
    afterKeyDown: (d) => {
      this.isDestroyed || r.runHooks("afterDocumentKeyDown", d);
    },
    ownerWindow: this.rootWindow
  });
  this.addHook("beforeOnCellMouseDown", (d) => {
    d.ctrlKey === !1 && d.metaKey === !1 && Ze.releasePressedKeys();
  }), this.getShortcutManager = function() {
    return Ze;
  };
  const He = Ze.addContext("grid"), R = {
    runOnlyIf: () => ue(r.getSelected()) && r.countRenderedRows() > 0 && r.countRenderedCols() > 0,
    group: XB
  };
  Ze.setActiveContextName("grid"), He.addShortcuts([{
    keys: [["Control/Meta", "A"]],
    callback: () => {
      r.selectAll();
    }
  }, {
    keys: [["Control/Meta", "Enter"]],
    callback: () => {
      const d = r.getSelectedRange(), {
        row: p,
        col: v
      } = d[d.length - 1].highlight, E = r.getDataAtCell(p, v), I = /* @__PURE__ */ new Map();
      for (let A = 0; A < d.length; A++)
        d[A].forAll((K, U) => {
          if (K >= 0 && U >= 0 && (K !== p || U !== v)) {
            const {
              readOnly: J
            } = r.getCellMeta(K, U);
            J || I.set(`${K}x${U}`, [K, U, E]);
          }
        });
      r.setDataAtCell(Array.from(I.values()));
    },
    runOnlyIf: () => r.getSelectedRangeLast().getCellsCount() > 1
  }, {
    keys: [["ArrowUp"]],
    callback: () => {
      _.transformStart(-1, 0);
    }
  }, {
    keys: [["ArrowUp", "Control/Meta"]],
    captureCtrl: !0,
    callback: () => {
      _.setRangeStart(r._createCellCoords(r.rowIndexMapper.getNearestNotHiddenIndex(0, 1), r.getSelectedRangeLast().highlight.col));
    }
  }, {
    keys: [["ArrowUp", "Shift"]],
    callback: () => {
      _.transformEnd(-1, 0);
    }
  }, {
    keys: [["ArrowUp", "Shift", "Control/Meta"]],
    captureCtrl: !0,
    callback: () => {
      const {
        from: d,
        to: p
      } = r.getSelectedRangeLast(), v = r.rowIndexMapper.getNearestNotHiddenIndex(0, 1);
      _.setRangeStart(d.clone()), _.setRangeEnd(r._createCellCoords(v, p.col));
    },
    runOnlyIf: () => !(r.selection.isSelectedByCorner() || r.selection.isSelectedByColumnHeader())
  }, {
    keys: [["ArrowDown"]],
    callback: () => {
      _.transformStart(1, 0);
    }
  }, {
    keys: [["ArrowDown", "Control/Meta"]],
    captureCtrl: !0,
    callback: () => {
      _.setRangeStart(r._createCellCoords(r.rowIndexMapper.getNearestNotHiddenIndex(r.countRows() - 1, -1), r.getSelectedRangeLast().highlight.col));
    }
  }, {
    keys: [["ArrowDown", "Shift"]],
    callback: () => {
      _.transformEnd(1, 0);
    }
  }, {
    keys: [["ArrowDown", "Shift", "Control/Meta"]],
    captureCtrl: !0,
    callback: () => {
      const {
        from: d,
        to: p
      } = r.getSelectedRangeLast(), v = r.rowIndexMapper.getNearestNotHiddenIndex(r.countRows() - 1, -1);
      _.setRangeStart(d.clone()), _.setRangeEnd(r._createCellCoords(v, p.col));
    },
    runOnlyIf: () => !(r.selection.isSelectedByCorner() || r.selection.isSelectedByColumnHeader())
  }, {
    keys: [["ArrowLeft"]],
    callback: () => {
      _.transformStart(0, -1 * r.getDirectionFactor());
    }
  }, {
    keys: [["ArrowLeft", "Control/Meta"]],
    captureCtrl: !0,
    callback: () => {
      const d = r.getSelectedRangeLast().highlight.row, p = r.columnIndexMapper.getNearestNotHiddenIndex(...r.isRtl() ? [r.countCols() - 1, -1] : [0, 1]);
      _.setRangeStart(r._createCellCoords(d, p));
    }
  }, {
    keys: [["ArrowLeft", "Shift"]],
    callback: () => {
      _.transformEnd(0, -1 * r.getDirectionFactor());
    }
  }, {
    keys: [["ArrowLeft", "Shift", "Control/Meta"]],
    captureCtrl: !0,
    callback: () => {
      const {
        from: d,
        to: p
      } = r.getSelectedRangeLast(), v = r.columnIndexMapper.getNearestNotHiddenIndex(...r.isRtl() ? [r.countCols() - 1, -1] : [0, 1]);
      _.setRangeStart(d.clone()), _.setRangeEnd(r._createCellCoords(p.row, v));
    },
    runOnlyIf: () => !(r.selection.isSelectedByCorner() || r.selection.isSelectedByRowHeader())
  }, {
    keys: [["ArrowRight"]],
    callback: () => {
      _.transformStart(0, r.getDirectionFactor());
    }
  }, {
    keys: [["ArrowRight", "Control/Meta"]],
    captureCtrl: !0,
    callback: () => {
      const d = r.getSelectedRangeLast().highlight.row, p = r.columnIndexMapper.getNearestNotHiddenIndex(...r.isRtl() ? [0, 1] : [r.countCols() - 1, -1]);
      _.setRangeStart(r._createCellCoords(d, p));
    }
  }, {
    keys: [["ArrowRight", "Shift"]],
    callback: () => {
      _.transformEnd(0, r.getDirectionFactor());
    }
  }, {
    keys: [["ArrowRight", "Shift", "Control/Meta"]],
    captureCtrl: !0,
    callback: () => {
      const {
        from: d,
        to: p
      } = r.getSelectedRangeLast(), v = r.columnIndexMapper.getNearestNotHiddenIndex(...r.isRtl() ? [0, 1] : [r.countCols() - 1, -1]);
      _.setRangeStart(d.clone()), _.setRangeEnd(r._createCellCoords(p.row, v));
    },
    runOnlyIf: () => !(r.selection.isSelectedByCorner() || r.selection.isSelectedByRowHeader())
  }, {
    keys: [["Home"]],
    captureCtrl: !0,
    callback: () => {
      const d = parseInt(r.getSettings().fixedColumnsStart, 10), p = r.getSelectedRangeLast().highlight.row, v = r.columnIndexMapper.getNearestNotHiddenIndex(d, 1);
      _.setRangeStart(r._createCellCoords(p, v));
    },
    runOnlyIf: () => r.view.isMainTableNotFullyCoveredByOverlays()
  }, {
    keys: [["Home", "Shift"]],
    callback: () => {
      _.setRangeEnd(r._createCellCoords(_.selectedRange.current().from.row, r.columnIndexMapper.getNearestNotHiddenIndex(0, 1)));
    }
  }, {
    keys: [["Home", "Control/Meta"]],
    captureCtrl: !0,
    callback: () => {
      const d = parseInt(r.getSettings().fixedRowsTop, 10), p = parseInt(r.getSettings().fixedColumnsStart, 10), v = r.rowIndexMapper.getNearestNotHiddenIndex(d, 1), E = r.columnIndexMapper.getNearestNotHiddenIndex(p, 1);
      _.setRangeStart(r._createCellCoords(v, E));
    },
    runOnlyIf: () => r.view.isMainTableNotFullyCoveredByOverlays()
  }, {
    keys: [["End"]],
    captureCtrl: !0,
    callback: () => {
      _.setRangeStart(r._createCellCoords(r.getSelectedRangeLast().highlight.row, r.columnIndexMapper.getNearestNotHiddenIndex(r.countCols() - 1, -1)));
    },
    runOnlyIf: () => r.view.isMainTableNotFullyCoveredByOverlays()
  }, {
    keys: [["End", "Shift"]],
    callback: () => {
      _.setRangeEnd(r._createCellCoords(_.selectedRange.current().from.row, r.columnIndexMapper.getNearestNotHiddenIndex(r.countCols() - 1, -1)));
    }
  }, {
    keys: [["End", "Control/Meta"]],
    captureCtrl: !0,
    callback: () => {
      const d = parseInt(r.getSettings().fixedRowsBottom, 10), p = r.rowIndexMapper.getNearestNotHiddenIndex(r.countRows() - d - 1, -1), v = r.columnIndexMapper.getNearestNotHiddenIndex(r.countCols() - 1, -1);
      _.setRangeStart(r._createCellCoords(p, v));
    },
    runOnlyIf: () => r.view.isMainTableNotFullyCoveredByOverlays()
  }, {
    keys: [["PageUp"]],
    callback: () => {
      _.transformStart(-r.countVisibleRows(), 0);
    }
  }, {
    keys: [["PageUp", "Shift"]],
    callback: () => {
      const {
        to: d
      } = r.getSelectedRangeLast(), p = Math.max(d.row - r.countVisibleRows(), 0), v = r.rowIndexMapper.getNearestNotHiddenIndex(p, 1);
      if (v !== null) {
        const E = r._createCellCoords(v, d.col), I = d.row - r.view.getFirstFullyVisibleRow(), A = Math.max(E.row - I, 0);
        _.setRangeEnd(E), r.scrollViewportTo(A);
      }
    }
  }, {
    keys: [["PageDown"]],
    callback: () => {
      _.transformStart(r.countVisibleRows(), 0);
    }
  }, {
    keys: [["PageDown", "Shift"]],
    callback: () => {
      const {
        to: d
      } = r.getSelectedRangeLast(), p = Math.min(d.row + r.countVisibleRows(), r.countRows() - 1), v = r.rowIndexMapper.getNearestNotHiddenIndex(p, -1);
      if (v !== null) {
        const E = r._createCellCoords(v, d.col), I = d.row - r.view.getFirstFullyVisibleRow(), A = Math.min(E.row - I, r.countRows() - 1);
        _.setRangeEnd(E), r.scrollViewportTo(A);
      }
    }
  }, {
    keys: [["Tab"]],
    callback: (d) => {
      const p = typeof C.tabMoves == "function" ? C.tabMoves(d) : C.tabMoves;
      _.transformStart(p.row, p.col, !0);
    }
  }, {
    keys: [["Shift", "Tab"]],
    callback: (d) => {
      const p = typeof C.tabMoves == "function" ? C.tabMoves(d) : C.tabMoves;
      _.transformStart(-p.row, -p.col);
    }
  }], R), sR().forEach((d) => {
    const p = Eg(d);
    x.addItem(d, new p(this));
  }), me.getSingleton().run(r, "construct");
}
const qB = "hooksRefRegisterer", GR = {
  /**
   * Internal hooks storage.
   */
  _hooksStorage: /* @__PURE__ */ Object.create(null),
  /**
   * Add hook to the collection.
   *
   * @param {string} key The hook name.
   * @param {Function} callback The hook callback.
   * @returns {object}
   */
  addHook(s, e) {
    return this._hooksStorage[s] || (this._hooksStorage[s] = []), this.hot.addHook(s, e), this._hooksStorage[s].push(e), this;
  },
  /**
   * Remove all hooks listeners by hook name.
   *
   * @param {string} key The hook name.
   */
  removeHooksByKey(s) {
    D(this._hooksStorage[s] || [], (e) => {
      this.hot.removeHook(s, e);
    });
  },
  /**
   * Clear all added hooks.
   */
  clearHooks() {
    je(this._hooksStorage, (s, e) => this.removeHooksByKey(e)), this._hooksStorage = {};
  }
};
Jn(GR, "MIXIN_NAME", qB, {
  writable: !1,
  enumerable: !1
});
const ZB = GR, QB = "base", Kt = Object.freeze({
  VIRGIN: "STATE_VIRGIN",
  // before editing
  EDITING: "STATE_EDITING",
  WAITING: "STATE_WAITING",
  // waiting for async validation
  FINISHED: "STATE_FINISHED"
}), Cf = "baseEditor";
class mr {
  static get EDITOR_TYPE() {
    return QB;
  }
  /**
   * @param {Handsontable} instance A reference to the source instance of the Handsontable.
   */
  constructor(e) {
    this.hot = e, this.instance = e, this.state = Kt.VIRGIN, this._opened = !1, this._fullEditMode = !1, this._closeCallback = null, this.TD = null, this.row = null, this.col = null, this.prop = null, this.originalValue = null, this.cellProperties = null, this.init();
  }
  /**
   * Fires callback after closing editor.
   *
   * @private
   * @param {boolean} result The editor value.
   */
  _fireCallbacks(e) {
    this._closeCallback && (this._closeCallback(e), this._closeCallback = null);
  }
  /**
   * Initializes an editor's intance.
   */
  init() {
  }
  /**
   * Required method to get current value from editable element.
   */
  getValue() {
    throw Error("Editor getValue() method unimplemented");
  }
  /**
   * Required method to set new value into editable element.
   */
  setValue() {
    throw Error("Editor setValue() method unimplemented");
  }
  /**
   * Required method to open editor.
   */
  open() {
    throw Error("Editor open() method unimplemented");
  }
  /**
   * Required method to close editor.
   */
  close() {
    throw Error("Editor close() method unimplemented");
  }
  /**
   * Prepares editor's meta data.
   *
   * @param {number} row The visual row index.
   * @param {number} col The visual column index.
   * @param {number|string} prop The column property (passed when datasource is an array of objects).
   * @param {HTMLTableCellElement} td The rendered cell element.
   * @param {*} value The rendered value.
   * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).
   */
  prepare(e, t, n, o, r, a) {
    this.TD = o, this.row = e, this.col = t, this.prop = n, this.originalValue = r, this.cellProperties = a, this.state = Kt.VIRGIN;
  }
  /**
   * Fallback method to provide extendable editors in ES5.
   *
   * @returns {Function}
   */
  extend() {
    return class extends this.constructor {
    };
  }
  /**
   * Saves value from editor into data storage.
   *
   * @param {*} value The editor value.
   * @param {boolean} ctrlDown If `true`, applies value to each cell in the last selected range.
   */
  saveValue(e, t) {
    let n, o, r, a;
    if (t) {
      const f = this.hot.getSelectedLast();
      n = Math.max(Math.min(f[0], f[2]), 0), o = Math.max(Math.min(f[1], f[3]), 0), r = Math.max(f[0], f[2]), a = Math.max(f[1], f[3]);
    } else
      [n, o, r, a] = [this.row, this.col, null, null];
    const l = this.hot.runHooks("modifyGetCellCoords", n, o);
    Array.isArray(l) && ([n, o] = l);
    const h = this.hot.getShortcutManager().getContext("editor"), u = {
      runOnlyIf: () => ue(this.hot.getSelected()),
      group: Cf
    };
    this.isInFullEditMode() && h.addShortcuts([{
      keys: [["ArrowUp"]],
      callback: () => {
        this.hot.selection.transformStart(-1, 0);
      }
    }, {
      keys: [["ArrowDown"]],
      callback: () => {
        this.hot.selection.transformStart(1, 0);
      }
    }, {
      keys: [["ArrowLeft"]],
      callback: () => {
        this.hot.selection.transformStart(0, -1 * this.hot.getDirectionFactor());
      }
    }, {
      keys: [["ArrowRight"]],
      callback: () => {
        this.hot.selection.transformStart(0, this.hot.getDirectionFactor());
      }
    }], u), this.hot.populateFromArray(n, o, e, r, a, "edit");
  }
  /**
   * Begins editing on a highlighted cell and hides fillHandle corner if was present.
   *
   * @param {*} newInitialValue The initial editor value.
   * @param {Event} event The keyboard event object.
   */
  beginEditing(e, t) {
    if (this.state !== Kt.VIRGIN)
      return;
    const n = this.hot, o = n.rowIndexMapper.getRenderableFromVisualIndex(this.row), r = n.columnIndexMapper.getRenderableFromVisualIndex(this.col);
    if (n.view.scrollViewport(n._createCellCoords(o, r)), this.state = Kt.EDITING, this.isInFullEditMode()) {
      const a = typeof e == "string" ? e : Vt(this.originalValue);
      this.setValue(a);
    }
    this.open(t), this._opened = !0, this.focus(), n.view.render(), n.runHooks("afterBeginEditing", this.row, this.col);
  }
  /**
   * Finishes editing and start saving or restoring process for editing cell or last selected range.
   *
   * @param {boolean} restoreOriginalValue If true, then closes editor without saving value from the editor into a cell.
   * @param {boolean} ctrlDown If true, then saveValue will save editor's value to each cell in the last selected range.
   * @param {Function} callback The callback function, fired after editor closing.
   */
  finishEditing(e, t, n) {
    let o;
    if (n) {
      const l = this._closeCallback;
      this._closeCallback = (c) => {
        l && l(c), n(c), this.hot.view.render();
      };
    }
    if (this.isWaiting())
      return;
    const a = this.hot.getShortcutManager().getContext("editor");
    if (a.removeShortcutsByGroup(Cf), a.removeShortcutsByGroup(ch), this.state === Kt.VIRGIN) {
      this.hot._registerTimeout(() => {
        this._fireCallbacks(!0);
      });
      return;
    }
    if (this.state === Kt.EDITING) {
      if (e) {
        this.cancelChanges(), this.hot.view.render();
        return;
      }
      const l = this.getValue();
      this.cellProperties.trimWhitespace ? o = [[typeof l == "string" ? String.prototype.trim.call(l || "") : l]] : o = [[l]], this.state = Kt.WAITING, this.saveValue(o, t), this.hot.getCellValidator(this.cellProperties) ? this.hot.addHookOnce("postAfterValidate", (c) => {
        this.state = Kt.FINISHED, this.discardEditor(c);
      }) : (this.state = Kt.FINISHED, this.discardEditor(!0));
    }
  }
  /**
   * Finishes editing without singout saving value.
   */
  cancelChanges() {
    this.state = Kt.FINISHED, this.discardEditor();
  }
  /**
   * Verifies result of validation or closes editor if user's cancelled changes.
   *
   * @param {boolean|undefined} result If `false` and the cell using allowInvalid option,
   *                                   then an editor won't be closed until validation is passed.
   */
  discardEditor(e) {
    this.state === Kt.FINISHED && (e === !1 && this.cellProperties.allowInvalid !== !0 ? (this.hot.selectCell(this.row, this.col), this.focus(), this.state = Kt.EDITING, this._fireCallbacks(!1)) : (this.close(), this._opened = !1, this._fullEditMode = !1, this.state = Kt.VIRGIN, this._fireCallbacks(!0), this.hot.getShortcutManager().setActiveContextName("grid")));
  }
  /**
   * Switch editor into full edit mode. In this state navigation keys don't close editor. This mode is activated
   * automatically after hit ENTER or F2 key on the cell or while editing cell press F2 key.
   */
  enableFullEditMode() {
    this._fullEditMode = !0;
  }
  /**
   * Checks if editor is in full edit mode.
   *
   * @returns {boolean}
   */
  isInFullEditMode() {
    return this._fullEditMode;
  }
  /**
   * Returns information whether the editor is open.
   *
   * @returns {boolean}
   */
  isOpened() {
    return this._opened;
  }
  /**
   * Returns information whether the editor is waiting, eg.: for async validation.
   *
   * @returns {boolean}
   */
  isWaiting() {
    return this.state === Kt.WAITING;
  }
  /* eslint-disable jsdoc/require-description-complete-sentence */
  /**
   * Gets the object that provides information about the edited cell size and its position
   * relative to the table viewport.
   *
   * The rectangle has six integer properties:
   *  - `top` The top position relative to the table viewport
   *  - `start` The left (or right in RTL) position relative to the table viewport
   *  - `width` The cell's current width;
   *  - `maxWidth` The maximum cell's width after which the editor goes out of the table viewport
   *  - `height` The cell's current height;
   *  - `maxHeight` The maximum cell's height after which the editor goes out of the table viewport
   *
   * @returns {{top: number, start: number, width: number, maxWidth: number, height: number, maxHeight: number} | undefined}
   */
  getEditedCellRect() {
    var e;
    const t = this.getEditedCell();
    if (!t)
      return;
    const {
      wtOverlays: n,
      wtViewport: o
    } = this.hot.view._wt, r = this.hot.rootWindow, a = Wt(t), l = ht(t), c = Wt(this.hot.rootElement), h = ht(this.hot.rootElement), u = n.topOverlay.holder, f = n.inlineStartOverlay.holder, g = u !== r ? u.scrollTop : 0, m = f !== r ? f.scrollLeft : 0, w = r.innerWidth - c.left - h, {
      wtTable: C
    } = (e = n.getParentOverlay(t)) !== null && e !== void 0 ? e : this.hot.view._wt, S = C.name, x = ["master", "inline_start"].includes(S) ? g : 0, T = ["master", "top", "bottom"].includes(S) ? m : 0, M = a.top === c.top ? 0 : 1;
    let _ = a.top - c.top - M - x, P = 0;
    this.hot.isRtl() ? P = r.innerWidth - a.left - l - w - 1 + T : P = a.left - c.left - 1 - T, ["top", "top_inline_start_corner"].includes(S) && (_ += n.topOverlay.getOverlayOffset()), ["inline_start", "top_inline_start_corner"].includes(S) && (P += Math.abs(n.inlineStartOverlay.getOverlayOffset()));
    const j = this.hot.hasColHeaders(), H = this.hot.rowIndexMapper.getRenderableFromVisualIndex(this.row), Z = this.hot.columnIndexMapper.getRenderableFromVisualIndex(this.col), F = this.hot.rowIndexMapper.getRenderableIndexesLength() - this.hot.view._wt.getSetting("fixedRowsBottom");
    (j && H <= 0 || H === F) && (_ += 1), Z <= 0 && (P += 1);
    const z = o.rowsRenderCalculator.startPosition, ee = o.columnsRenderCalculator.startPosition, oe = Math.abs(n.inlineStartOverlay.getScrollPosition()), fe = n.topOverlay.getScrollPosition(), Ae = qt(this.hot.rootDocument), Ze = t.offsetTop + z - fe;
    let He = 0;
    if (this.hot.isRtl()) {
      const ne = t.offsetLeft;
      ne >= 0 ? He = C.getWidth() - t.offsetLeft : He = Math.abs(ne), He += ee - oe - l;
    } else
      He = t.offsetLeft + ee - oe;
    const R = Qi(this.TD, this.hot.rootWindow), d = this.hot.isRtl() ? "borderRightWidth" : "borderLeftWidth", p = parseInt(R[d], 10) > 0 ? 0 : 1, v = parseInt(R.borderTopWidth, 10) > 0 ? 0 : 1, E = ht(t) + p, I = At(t) + v, A = sL(u) ? Ae : 0, K = nL(f) ? Ae : 0, U = this.hot.view.maximumVisibleElementWidth(He) - A + p, J = Math.max(this.hot.view.maximumVisibleElementHeight(Ze) - K + v, 23);
    return {
      top: _,
      start: P,
      height: I,
      maxHeight: J,
      width: E,
      maxWidth: U
    };
  }
  /* eslint-enable jsdoc/require-description-complete-sentence */
  /**
   * Gets className of the edited cell if exist.
   *
   * @returns {string}
   */
  getEditedCellsLayerClass() {
    switch (this.checkEditorSection()) {
      case "inline-start":
        return "ht_clone_left ht_clone_inline_start";
      case "bottom":
        return "ht_clone_bottom";
      case "bottom-inline-start-corner":
        return "ht_clone_bottom_left_corner ht_clone_bottom_inline_start_corner";
      case "top":
        return "ht_clone_top";
      case "top-inline-start-corner":
        return "ht_clone_top_left_corner ht_clone_top_inline_start_corner";
      default:
        return "ht_clone_master";
    }
  }
  /**
   * Gets HTMLTableCellElement of the edited cell if exist.
   *
   * @returns {HTMLTableCellElement|null}
   */
  getEditedCell() {
    return this.hot.getCell(this.row, this.col, !0);
  }
  /**
   * Returns name of the overlay, where editor is placed.
   *
   * @private
   * @returns {string}
   */
  checkEditorSection() {
    const e = this.hot.countRows();
    let t = "";
    return this.row < this.hot.getSettings().fixedRowsTop ? this.col < this.hot.getSettings().fixedColumnsStart ? t = "top-inline-start-corner" : t = "top" : this.hot.getSettings().fixedRowsBottom && this.row >= e - this.hot.getSettings().fixedRowsBottom ? this.col < this.hot.getSettings().fixedColumnsStart ? t = "bottom-inline-start-corner" : t = "bottom" : this.col < this.hot.getSettings().fixedColumnsStart && (t = "inline-start"), t;
  }
}
ft(mr, ZB);
function JB() {
  var s = {
    minHeight: 200,
    maxHeight: 300,
    minWidth: 100,
    maxWidth: 300
  }, e, t = document.body, n = document.createTextNode(""), o = document.createElement("SPAN"), r = function(g, m, w) {
    g.addEventListener(m, w, !1);
  }, a = function(g, m, w) {
    g.removeEventListener(m, w, !1);
  }, l = function(g) {
    var m, w;
    g ? /^[a-zA-Z \.,\\\/\|0-9]$/.test(g) || (g = ".") : g = "", n.textContent !== void 0 ? n.textContent = e.value + g : n.data = e.value + g, o.style.position = "absolute", o.style.fontSize = f(e).fontSize, o.style.fontFamily = f(e).fontFamily, o.style.whiteSpace = "pre", t.appendChild(o), m = o.clientWidth + 2, t.removeChild(o), e.style.height = s.minHeight + "px", s.minWidth > m ? e.style.width = s.minWidth + "px" : m > s.maxWidth ? e.style.width = s.maxWidth + "px" : e.style.width = m + "px", w = e.scrollHeight ? e.scrollHeight - 1 : 0, s.minHeight > w ? e.style.height = s.minHeight + "px" : s.maxHeight < w ? (e.style.height = s.maxHeight + "px", e.style.overflowY = "visible") : e.style.height = w + "px";
  }, c = function() {
    window.setTimeout(l, 0);
  }, h = function(g) {
    if (g && g.minHeight)
      if (g.minHeight == "inherit")
        s.minHeight = e.clientHeight;
      else {
        var m = parseInt(g.minHeight);
        isNaN(m) || (s.minHeight = m);
      }
    if (g && g.maxHeight)
      if (g.maxHeight == "inherit")
        s.maxHeight = e.clientHeight;
      else {
        var w = parseInt(g.maxHeight);
        isNaN(w) || (s.maxHeight = w);
      }
    if (g && g.minWidth)
      if (g.minWidth == "inherit")
        s.minWidth = e.clientWidth;
      else {
        var C = parseInt(g.minWidth);
        isNaN(C) || (s.minWidth = C);
      }
    if (g && g.maxWidth)
      if (g.maxWidth == "inherit")
        s.maxWidth = e.clientWidth;
      else {
        var S = parseInt(g.maxWidth);
        isNaN(S) || (s.maxWidth = S);
      }
    o.firstChild || (o.className = "autoResize", o.style.display = "inline-block", o.appendChild(n));
  }, u = function(g, m, w) {
    e = g, h(m), e.nodeName == "TEXTAREA" && (e.style.resize = "none", e.style.overflowY = "", e.style.height = s.minHeight + "px", e.style.minWidth = s.minWidth + "px", e.style.maxWidth = s.maxWidth + "px", e.style.overflowY = "hidden"), w && (r(e, "change", l), r(e, "cut", c), r(e, "paste", c), r(e, "drop", c), r(e, "keydown", c), r(e, "focus", l), r(e, "compositionstart", c), r(e, "compositionupdate", c), r(e, "compositionend", c)), l();
  };
  function f(g) {
    return g.currentStyle || document.defaultView.getComputedStyle(g);
  }
  return {
    init: function(g, m, w) {
      u(g, m, w);
    },
    unObserve: function() {
      a(e, "change", l), a(e, "cut", c), a(e, "paste", c), a(e, "drop", c), a(e, "keydown", c), a(e, "focus", l), a(e, "compositionstart", c), a(e, "compositionupdate", c), a(e, "compositionend", c);
    },
    resize: l
  };
}
function mv(s, e) {
  const t = Nb(e), n = e.value.split(`
`);
  let o = t, r = 0;
  for (let a = 0; a < n.length; a++) {
    const l = n[a];
    a !== 0 && (r += n[a - 1].length + 1);
    const c = r + l.length;
    if (s === "home" ? o = r : s === "end" && (o = c), t <= c)
      break;
  }
  rh(e, o);
}
const eW = "ht_editor_visible", gl = "ht_editor_hidden", pv = "textEditor", tW = "text";
class ho extends mr {
  static get EDITOR_TYPE() {
    return tW;
  }
  /**
   * @param {Core} instance The Handsontable instance.
   */
  constructor(e) {
    super(e), this.eventManager = new Dt(this), this.autoResize = JB(), this.TEXTAREA = void 0, this.textareaStyle = void 0, this.TEXTAREA_PARENT = void 0, this.textareaParentStyle = void 0, this.layerClass = void 0, this.createElements(), this.bindEvents(), this.hot.addHookOnce("afterDestroy", () => this.destroy());
  }
  /**
   * Gets current value from editable element.
   *
   * @returns {number}
   */
  getValue() {
    return this.TEXTAREA.value;
  }
  /**
   * Sets new value into editable element.
   *
   * @param {*} newValue The editor value.
   */
  setValue(e) {
    this.TEXTAREA.value = e;
  }
  /**
   * Opens the editor and adjust its size.
   */
  open() {
    this.refreshDimensions(), this.showEditableElement(), this.hot.getShortcutManager().setActiveContextName("editor"), this.addHook("afterDocumentKeyDown", (t) => this.onAfterDocumentKeyDown(t)), this.registerShortcuts();
  }
  /**
   * Closes the editor.
   */
  close() {
    this.autoResize.unObserve(), this.hot.rootDocument.activeElement === this.TEXTAREA && this.hot.listen(), this.hideEditableElement(), this.unregisterShortcuts(), this.removeHooksByKey("afterDocumentKeyDown");
  }
  /**
   * Prepares editor's meta data.
   *
   * @param {number} row The visual row index.
   * @param {number} col The visual column index.
   * @param {number|string} prop The column property (passed when datasource is an array of objects).
   * @param {HTMLTableCellElement} td The rendered cell element.
   * @param {*} value The rendered value.
   * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).
   */
  prepare(e, t, n, o, r, a) {
    const l = this.state;
    if (super.prepare(e, t, n, o, r, a), !a.readOnly) {
      this.refreshDimensions(!0);
      const {
        allowInvalid: c,
        fragmentSelection: h
      } = a;
      c && (this.TEXTAREA.value = ""), l !== Kt.FINISHED && this.hideEditableElement(), !h && !vn() && this.focus();
    }
  }
  /**
   * Begins editing on a highlighted cell and hides fillHandle corner if was present.
   *
   * @param {*} newInitialValue The editor initial value.
   * @param {Event} event The keyboard event object.
   */
  beginEditing(e, t) {
    this.state === Kt.VIRGIN && (this.TEXTAREA.value = "", super.beginEditing(e, t));
  }
  /**
   * Sets focus state on the select element.
   */
  focus() {
    this.TEXTAREA.select(), rh(this.TEXTAREA, this.TEXTAREA.value.length);
  }
  /**
   * Creates an editor's elements and adds necessary CSS classnames.
   */
  createElements() {
    const {
      rootDocument: e
    } = this.hot;
    this.TEXTAREA = e.createElement("TEXTAREA"), this.TEXTAREA.setAttribute("data-hot-input", ""), this.TEXTAREA.tabIndex = -1, ie(this.TEXTAREA, "handsontableInput"), this.textareaStyle = this.TEXTAREA.style, this.textareaStyle.width = 0, this.textareaStyle.height = 0, this.textareaStyle.overflowY = "visible", this.TEXTAREA_PARENT = e.createElement("DIV"), ie(this.TEXTAREA_PARENT, "handsontableInputHolder"), Ne(this.TEXTAREA_PARENT, this.layerClass) && $e(this.TEXTAREA_PARENT, this.layerClass), ie(this.TEXTAREA_PARENT, gl), this.textareaParentStyle = this.TEXTAREA_PARENT.style, this.TEXTAREA_PARENT.appendChild(this.TEXTAREA), this.hot.rootElement.appendChild(this.TEXTAREA_PARENT);
  }
  /**
   * Moves an editable element out of the viewport, but element must be able to hold focus for IME support.
   *
   * @private
   */
  hideEditableElement() {
    ML() && (this.textareaStyle.textIndent = "-99999px"), this.textareaStyle.overflowY = "visible", this.textareaParentStyle.opacity = "0", this.textareaParentStyle.height = "1px", $e(this.TEXTAREA_PARENT, this.layerClass), ie(this.TEXTAREA_PARENT, gl);
  }
  /**
   * Resets an editable element position.
   *
   * @private
   */
  showEditableElement() {
    this.textareaParentStyle.height = "", this.textareaParentStyle.overflow = "", this.textareaParentStyle.position = "", this.textareaParentStyle[this.hot.isRtl() ? "left" : "right"] = "auto", this.textareaParentStyle.opacity = "1", this.textareaStyle.textIndent = "", this.textareaStyle.overflowY = "hidden";
    const e = this.TEXTAREA_PARENT.childNodes;
    let t = !1;
    Se(e.length - 1, (n) => {
      const o = e[n];
      if (Ne(o, "handsontableEditor"))
        return t = !0, !1;
    }), Ne(this.TEXTAREA_PARENT, gl) && $e(this.TEXTAREA_PARENT, gl), t ? (this.layerClass = eW, ie(this.TEXTAREA_PARENT, this.layerClass)) : (this.layerClass = this.getEditedCellsLayerClass(), ie(this.TEXTAREA_PARENT, this.layerClass));
  }
  /**
   * Refreshes editor's value using source data.
   *
   * @private
   */
  refreshValue() {
    const e = this.hot.toPhysicalRow(this.row), t = this.hot.getSourceDataAtCell(e, this.col);
    this.originalValue = t, this.setValue(t), this.refreshDimensions();
  }
  /**
   * Refreshes editor's size and position.
   *
   * @private
   * @param {boolean} force Indicates if the refreshing editor dimensions should be triggered.
   */
  refreshDimensions() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
    if (this.state !== Kt.EDITING && !e)
      return;
    if (this.TD = this.getEditedCell(), !this.TD) {
      e || this.close();
      return;
    }
    const {
      top: t,
      start: n,
      width: o,
      maxWidth: r,
      height: a,
      maxHeight: l
    } = this.getEditedCellRect();
    this.textareaParentStyle.top = `${t}px`, this.textareaParentStyle[this.hot.isRtl() ? "right" : "left"] = `${n}px`, this.showEditableElement();
    const c = Qi(this.TD, this.hot.rootWindow);
    this.TEXTAREA.style.fontSize = c.fontSize, this.TEXTAREA.style.fontFamily = c.fontFamily, this.TEXTAREA.style.backgroundColor = this.TD.style.backgroundColor;
    const h = Qi(this.TEXTAREA), u = parseInt(h.paddingLeft, 10) + parseInt(h.paddingRight, 10), f = parseInt(h.paddingTop, 10) + parseInt(h.paddingBottom, 10), g = o - u, m = a - f, w = r - u, C = l - f;
    this.autoResize.init(this.TEXTAREA, {
      minWidth: Math.min(g, w),
      minHeight: Math.min(m, C),
      // TEXTAREA should never be wider than visible part of the viewport (should not cover the scrollbar)
      maxWidth: w,
      maxHeight: C
    }, !0);
  }
  /**
   * Binds events and hooks.
   *
   * @private
   */
  bindEvents() {
    this.eventManager.addEventListener(this.TEXTAREA, "cut", (e) => e.stopPropagation()), this.eventManager.addEventListener(this.TEXTAREA, "paste", (e) => e.stopPropagation()), Yb() && this.eventManager.addEventListener(this.TEXTAREA, "focusout", () => this.finishEditing(!1)), this.addHook("afterScrollHorizontally", () => this.refreshDimensions()), this.addHook("afterScrollVertically", () => this.refreshDimensions()), this.addHook("afterColumnResize", () => {
      this.refreshDimensions(), this.focus();
    }), this.addHook("afterRowResize", () => {
      this.refreshDimensions(), this.focus();
    });
  }
  /**
   * Ugly hack for autocompleteEditor.
   *
   * @private
   */
  allowKeyEventPropagation() {
  }
  /**
   * Destroys the internal event manager and clears attached hooks.
   *
   * @private
   */
  destroy() {
    this.eventManager.destroy(), this.clearHooks();
  }
  /**
   * Register shortcuts responsible for handling editor.
   *
   * @private
   */
  registerShortcuts() {
    const t = this.hot.getShortcutManager().getContext("editor"), n = {
      runOnlyIf: () => ue(this.hot.getSelected()),
      group: pv
    }, o = () => {
      this.hot.rootDocument.execCommand("insertText", !1, `
`);
    };
    t.addShortcuts([{
      keys: [["Tab"]],
      // TODO: Duplicated part of code (callback to shortcut).
      callback: (r) => {
        const a = this.hot.getSettings(), l = typeof a.tabMoves == "function" ? a.tabMoves(r) : a.tabMoves;
        this.hot.selection.transformStart(l.row, l.col, !0);
      }
    }, {
      keys: [["Shift", "Tab"]],
      // TODO: Duplicated part of code (callback to shortcut).
      callback: (r) => {
        const a = this.hot.getSettings(), l = typeof a.tabMoves == "function" ? a.tabMoves(r) : a.tabMoves;
        this.hot.selection.transformStart(-l.row, -l.col);
      }
    }, {
      keys: [["Control", "Enter"]],
      callback: () => (o(), !1),
      runOnlyIf: (r) => !this.hot.selection.isMultiple() && // We trigger a data population for multiple selection.
      // catch CTRL but not right ALT (which in some systems triggers ALT+CTRL)
      !r.altKey,
      relativeToGroup: Qr,
      position: "before"
    }, {
      keys: [["Meta", "Enter"]],
      callback: () => (o(), !1),
      runOnlyIf: () => !this.hot.selection.isMultiple(),
      // We trigger a data population for multiple selection.
      relativeToGroup: Qr,
      position: "before"
    }, {
      keys: [["Alt", "Enter"]],
      callback: () => (o(), !1),
      relativeToGroup: Qr,
      position: "before"
    }, {
      // TODO: Duplicated part of code (callback to shortcut)
      keys: [["PageUp"]],
      callback: () => {
        this.hot.selection.transformStart(-this.hot.countVisibleRows(), 0);
      }
    }, {
      // TODO: Duplicated part of code (callback to shortcut)
      keys: [["PageDown"]],
      callback: () => {
        this.hot.selection.transformStart(this.hot.countVisibleRows(), 0);
      }
    }, {
      keys: [["Home"]],
      callback: (r, a) => {
        let [l] = a;
        mv(l, this.TEXTAREA);
      }
    }, {
      keys: [["End"]],
      callback: (r, a) => {
        let [l] = a;
        mv(l, this.TEXTAREA);
      }
    }, {
      keys: [["Control/Meta", "Z"]],
      preventDefault: !1,
      callback: () => {
        this.hot._registerTimeout(() => {
          this.autoResize.resize();
        }, 10);
      }
    }, {
      keys: [["Control/Meta", "Shift", "Z"]],
      preventDefault: !1,
      callback: () => {
        this.hot._registerTimeout(() => {
          this.autoResize.resize();
        }, 10);
      }
    }], n);
  }
  /**
   * Unregister shortcuts responsible for handling editor.
   *
   * @private
   */
  unregisterShortcuts() {
    const t = this.hot.getShortcutManager().getContext("editor");
    t.removeShortcutsByGroup(ch), t.removeShortcutsByGroup(pv), t.removeShortcutsByGroup(Cf);
  }
  /**
   * OnAfterDocumentKeyDown callback.
   *
   * @private
   * @param {KeyboardEvent} event The keyboard event object.
   */
  onAfterDocumentKeyDown(e) {
    [ve.ARROW_UP, ve.ARROW_RIGHT, ve.ARROW_DOWN, ve.ARROW_LEFT].indexOf(e.keyCode) === -1 && this.autoResize.resize(String.fromCharCode(e.keyCode));
  }
}
const sW = "base";
function $a(s, e, t, n, o, r, a) {
  const l = [], c = [];
  a.className && ie(e, a.className), a.readOnly && l.push(a.readOnlyCellClassName), a.valid === !1 && a.invalidCellClassName ? l.push(a.invalidCellClassName) : c.push(a.invalidCellClassName), a.wordWrap === !1 && a.noWordWrapClassName && l.push(a.noWordWrapClassName), !r && a.placeholder && l.push(a.placeholderCellClassName), $e(e, c), ie(e, l);
}
$a.RENDERER_TYPE = sW;
const nW = "text";
function Ri(s, e, t, n, o, r, a) {
  $a.apply(this, [s, e, t, n, o, r, a]);
  let l = r;
  if (!l && a.placeholder && (l = a.placeholder), l = Vt(l), a.trimWhitespace && (l = l.trim()), a.rendererTemplate) {
    bn(e);
    const c = s.rootDocument.createElement("TEMPLATE");
    c.setAttribute("bind", "{{}}"), c.innerHTML = a.rendererTemplate, HTMLTemplateElement.decorate(c), c.model = s.getSourceDataAtRow(t), e.appendChild(c);
  } else
    Zi(e, l);
}
Ri.RENDERER_TYPE = nW;
const iW = "text", jR = {
  CELL_TYPE: iW,
  editor: ho,
  renderer: Ri
};
gn(jR);
Ps.editors = {
  BaseEditor: mr
};
function Ps(s, e) {
  const t = new Cp(s, e || {}, Wg);
  return t.init(), t;
}
Ps.Core = function(s) {
  let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  return new Cp(s, e, Wg);
};
Ps.DefaultSettings = zR();
Ps.hooks = me.getSingleton();
Ps.CellCoords = Sc;
Ps.CellRange = Og;
Ps.packageName = "handsontable";
Ps.buildDate = "31/08/2023 08:23:33";
Ps.version = "13.1.0";
Ps.languages = {
  dictionaryKeys: QV,
  getLanguageDictionary: $R,
  getLanguagesDictionaries: nB,
  registerLanguageDictionary: LR,
  getTranslatedPhrase: FR
};
var Xo = Symbol("unassigned"), oW = "The Handsontable instance bound to this component was destroyed and cannot be used properly.";
function Tc(s, e) {
  return Object.prototype.hasOwnProperty.call(s, e);
}
function KR(s) {
  var e = Ps.hooks.getRegistered(), t = {};
  Object.assign(t, Ps.DefaultSettings);
  for (var n in t)
    t[n] = {
      default: Xo
    };
  for (var o = 0; o < e.length; o++)
    t[e[o]] = {
      default: Xo
    };
  return t.settings = {
    default: Xo
  }, s === "HotTable" && (t.id = {
    type: String,
    default: "hot-".concat(Math.random().toString(36).substring(5))
  }), t;
}
function XR(s) {
  var e = {}, t = s.settings;
  if (t !== Xo)
    for (var n in t)
      Tc(t, n) && t[n] !== Xo && (e[n] = t[n]);
  for (var o in s)
    Tc(s, o) && o !== "settings" && s[o] !== Xo && (e[o] = s[o]);
  return e;
}
function wv(s, e) {
  var t = XR(s), n = s.settings ? s.settings : t, o = s.settings ? t : null, r = {};
  for (var a in n)
    Tc(n, a) && n[a] !== void 0 && (!(e && a !== "data") || !Cv(e[a], n[a])) && (r[a] = n[a]);
  for (var l in o)
    Tc(o, l) && l !== "id" && l !== "settings" && o[l] !== void 0 && (!(e && l !== "data") || !Cv(e[l], o[l])) && (r[l] = o[l]);
  return r;
}
function Cv(s, e) {
  return JSON.stringify(s) === JSON.stringify(e);
}
var rW = "13.1.0", vp = Je({
  name: "HotTable",
  props: KR("HotTable"),
  provide: function() {
    return {
      columnsCache: this.columnsCache
    };
  },
  watch: {
    $props: {
      handler: function(e) {
        var t = wv(e, this.hotInstance ? this.hotInstance.getSettings() : void 0);
        !this.hotInstance || t === void 0 || (t.data && (this.hotInstance.isColumnModificationAllowed() || !this.hotInstance.isColumnModificationAllowed() && this.hotInstance.countSourceCols() === this.miscCache.currentSourceColumns) && (this.matchHotMappersSize(), delete t.data), Object.keys(t).length ? this.hotInstance.updateSettings(t) : this.hotInstance.render(), this.miscCache.currentSourceColumns = this.hotInstance.countSourceCols());
      },
      deep: !0,
      immediate: !0
    }
  },
  data: function() {
    return {
      /* eslint-disable vue/no-reserved-keys */
      __hotInstance: null,
      /* eslint-enable vue/no-reserved-keys */
      miscCache: {
        currentSourceColumns: null
      },
      columnSettings: null,
      columnsCache: /* @__PURE__ */ new Map(),
      get hotInstance() {
        return !this.__hotInstance || this.__hotInstance && !this.__hotInstance.isDestroyed ? this.__hotInstance : (console.warn(oW), null);
      },
      set hotInstance(e) {
        this.__hotInstance = e;
      }
    };
  },
  methods: {
    /**
     * Initialize Handsontable.
     */
    hotInit: function() {
      var e = wv(this.$props);
      e.columns = this.columnSettings ? this.columnSettings : e.columns, this.hotInstance = Bo(new Ps.Core(this.$el, e)), this.hotInstance.init(), this.miscCache.currentSourceColumns = this.hotInstance.countSourceCols();
    },
    matchHotMappersSize: function() {
      var e = this;
      if (this.hotInstance) {
        var t = this.hotInstance.getSourceData(), n = [], o = [], r = this.hotInstance.rowIndexMapper.getNumberOfIndexes(), a = this.hotInstance.isColumnModificationAllowed(), l = 0;
        if (t && t.length !== r && t.length < r)
          for (var c = t.length; c < r; c++)
            n.push(c);
        if (a) {
          var h;
          if (l = this.hotInstance.columnIndexMapper.getNumberOfIndexes(), t && t[0] && ((h = t[0]) === null || h === void 0 ? void 0 : h.length) !== l && t[0].length < l)
            for (var u = t[0].length; u < l; u++)
              o.push(u);
        }
        this.hotInstance.batch(function() {
          n.length > 0 ? e.hotInstance.rowIndexMapper.removeIndexes(n) : e.hotInstance.rowIndexMapper.insertIndexes(r - 1, t.length - r), a && t.length !== 0 && (o.length > 0 ? e.hotInstance.columnIndexMapper.removeIndexes(o) : e.hotInstance.columnIndexMapper.insertIndexes(l - 1, t[0].length - l));
        });
      }
    },
    /**
     * Get settings for the columns provided in the `hot-column` components.
     *
     * @returns {HotTableProps[] | undefined}
     */
    getColumnSettings: function() {
      var e = Array.from(this.columnsCache.values());
      return e.length ? e : void 0;
    }
  },
  mounted: function() {
    this.columnSettings = this.getColumnSettings(), this.hotInit();
  },
  beforeUnmount: function() {
    this.hotInstance && this.hotInstance.destroy();
  },
  version: rW
}), aW = ["id"];
function lW(s, e, t, n, o, r) {
  return we(), ke("div", {
    id: s.id
  }, [kE(s.$slots, "default")], 8, aW);
}
vp.render = lW;
vp.__file = "src/HotTable.vue";
function vv(s, e) {
  var t = Object.keys(s);
  if (Object.getOwnPropertySymbols) {
    var n = Object.getOwnPropertySymbols(s);
    e && (n = n.filter(function(o) {
      return Object.getOwnPropertyDescriptor(s, o).enumerable;
    })), t.push.apply(t, n);
  }
  return t;
}
function cW(s) {
  for (var e = 1; e < arguments.length; e++) {
    var t = arguments[e] != null ? arguments[e] : {};
    e % 2 ? vv(Object(t), !0).forEach(function(n) {
      hW(s, n, t[n]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(s, Object.getOwnPropertyDescriptors(t)) : vv(Object(t)).forEach(function(n) {
      Object.defineProperty(s, n, Object.getOwnPropertyDescriptor(t, n));
    });
  }
  return s;
}
function hW(s, e, t) {
  return e = dW(e), e in s ? Object.defineProperty(s, e, {
    value: t,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : s[e] = t, s;
}
function uW(s, e) {
  if (typeof s != "object" || s === null)
    return s;
  var t = s[Symbol.toPrimitive];
  if (t !== void 0) {
    var n = t.call(s, e || "default");
    if (typeof n != "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(s);
}
function dW(s) {
  var e = uW(s, "string");
  return typeof e == "symbol" ? e : String(e);
}
var fW = Je({
  name: "HotColumn",
  props: KR("HotColumn"),
  inject: ["columnsCache"],
  methods: {
    /**
     * Create the column settings based on the data provided to the `hot-column`
     * component and it's child components.
     */
    createColumnSettings: function() {
      var e = XR(this.$props), t = cW({}, e);
      e.renderer && (t.renderer = e.renderer), e.editor && (t.editor = e.editor), this.columnsCache.set(this, t);
    }
  },
  mounted: function() {
    this.createColumnSettings();
  },
  unmounted: function() {
    this.columnsCache.delete(this);
  },
  render: function() {
    return null;
  }
});
fW.__file = "src/HotColumn.vue";
const yv = "handsontableEditor", gW = "handsontable";
class yp extends ho {
  static get EDITOR_TYPE() {
    return gW;
  }
  /**
   * Opens the editor and adjust its size.
   */
  open() {
    super.open(), this.htEditor && this.htEditor.destroy(), this.htContainer.style.display === "none" && (this.htContainer.style.display = ""), this.htEditor = new this.hot.constructor(this.htContainer, this.htOptions), this.htEditor.init(), this.htEditor.rootElement.style.display = "", this.cellProperties.strict ? this.htEditor.selectCell(0, 0) : this.htEditor.deselectCell(), rh(this.TEXTAREA, 0, this.TEXTAREA.value.length), this.refreshDimensions();
  }
  /**
   * Closes the editor.
   */
  close() {
    this.htEditor && (this.htEditor.rootElement.style.display = "none"), this.removeHooksByKey("beforeKeyDown"), super.close();
  }
  /**
   * Prepares editor's meta data and configuration of the internal Handsontable's instance.
   *
   * @param {number} row The visual row index.
   * @param {number} col The visual column index.
   * @param {number|string} prop The column property (passed when datasource is an array of objects).
   * @param {HTMLTableCellElement} td The rendered cell element.
   * @param {*} value The rendered value.
   * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).
   */
  prepare(e, t, n, o, r, a) {
    super.prepare(e, t, n, o, r, a);
    const l = this, c = {
      startRows: 0,
      startCols: 0,
      minRows: 0,
      minCols: 0,
      className: "listbox",
      copyPaste: !1,
      autoColumnSize: !1,
      autoRowSize: !1,
      readOnly: !0,
      fillHandle: !1,
      autoWrapCol: !1,
      autoWrapRow: !1,
      afterOnCellMouseDown(h, u) {
        const f = this.getSourceData(u.row, u.col);
        f !== void 0 && l.setValue(f), l.instance.destroyEditor();
      },
      preventWheel: !0,
      layoutDirection: this.hot.isRtl() ? "rtl" : "ltr"
    };
    this.cellProperties.handsontable && Ut(c, a.handsontable), this.htOptions = c;
  }
  /**
   * Begins editing on a highlighted cell and hides fillHandle corner if was present.
   *
   * @param {*} newInitialValue The editor initial value.
   * @param {*} event The keyboard event object.
   */
  beginEditing(e, t) {
    const n = this.hot.getSettings().onBeginEditing;
    n && n() === !1 || super.beginEditing(e, t);
  }
  /**
   * Creates an editor's elements and adds necessary CSS classnames.
   */
  createElements() {
    super.createElements();
    const e = this.hot.rootDocument.createElement("DIV");
    e.className = "handsontableEditor", this.TEXTAREA_PARENT.appendChild(e), this.htContainer = e, this.assignHooks();
  }
  /**
   * Finishes editing and start saving or restoring process for editing cell or last selected range.
   *
   * @param {boolean} restoreOriginalValue If true, then closes editor without saving value from the editor into a cell.
   * @param {boolean} ctrlDown If true, then saveValue will save editor's value to each cell in the last selected range.
   * @param {Function} callback The callback function, fired after editor closing.
   */
  finishEditing(e, t, n) {
    if (this.htEditor && this.htEditor.isListening() && this.hot.listen(), this.htEditor && this.htEditor.getSelectedLast()) {
      const o = this.htEditor.getInstance().getValue();
      o !== void 0 && this.setValue(o);
    }
    super.finishEditing(e, t, n);
  }
  /**
   * Assings afterDestroy callback to prevent memory leaks.
   *
   * @private
   */
  assignHooks() {
    this.hot.addHook("afterDestroy", () => {
      this.htEditor && this.htEditor.destroy();
    });
  }
  /**
   * Register shortcuts responsible for handling editor.
   *
   * @private
   */
  registerShortcuts() {
    const t = this.hot.getShortcutManager().getContext("editor");
    super.registerShortcuts();
    const n = {
      group: yv,
      relativeToGroup: ch,
      position: "before"
    }, o = (r, a) => {
      const l = this.htEditor.getInstance();
      if (r !== void 0 && (r < 0 || l.flipped && r > l.countRows() - 1 ? l.deselectCell() : l.selectCell(r, 0), l.getData().length))
        return a.preventDefault(), Rn(a), this.hot.listen(), this.TEXTAREA.focus(), !1;
    };
    t.addShortcuts([{
      keys: [["ArrowUp"]],
      callback: (r) => {
        const a = this.htEditor.getInstance();
        let l, c;
        return !a.getSelectedLast() && a.flipped ? l = a.countRows() - 1 : a.getSelectedLast() && (a.flipped ? (c = a.getSelectedLast()[0], l = Math.max(0, c - 1)) : (c = a.getSelectedLast()[0], l = c - 1)), o(l, r);
      },
      preventDefault: !1
      // Doesn't block default behaviour (navigation) for a `textArea` HTMLElement.
    }, {
      keys: [["ArrowDown"]],
      callback: (r) => {
        const a = this.htEditor.getInstance();
        let l, c;
        if (!a.getSelectedLast() && !a.flipped)
          l = 0;
        else if (a.getSelectedLast()) {
          if (a.flipped)
            l = a.getSelectedLast()[0] + 1;
          else if (!a.flipped) {
            const h = a.countRows() - 1;
            c = a.getSelectedLast()[0], l = Math.min(h, c + 1);
          }
        }
        return o(l, r);
      },
      preventDefault: !1
      // Doesn't block default behaviour (navigation) for a `textArea` HTMLElement.
    }], n);
  }
  /**
   * Unregister shortcuts responsible for handling editor.
   *
   * @private
   */
  unregisterShortcuts() {
    super.unregisterShortcuts(), this.hot.getShortcutManager().getContext("editor").removeShortcutsByGroup(yv);
  }
}
function mW(s, e, t) {
  return e = pW(e), e in s ? Object.defineProperty(s, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : s[e] = t, s;
}
function pW(s) {
  var e = wW(s, "string");
  return typeof e == "symbol" ? e : String(e);
}
function wW(s, e) {
  if (typeof s != "object" || s === null)
    return s;
  var t = s[Symbol.toPrimitive];
  if (t !== void 0) {
    var n = t.call(s, e || "default");
    if (typeof n != "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(s);
}
const Au = /* @__PURE__ */ new WeakMap(), CW = "autocomplete";
class Sp extends yp {
  static get EDITOR_TYPE() {
    return CW;
  }
  constructor(e) {
    super(e), mW(this, "sortByRelevance", function(t, n, o) {
      const r = [], a = [], l = t.length;
      let c = n.length, h, u, f, g;
      if (l === 0) {
        for (f = 0; f < c; f++)
          a.push(f);
        return a;
      }
      for (f = 0; f < c; f++) {
        if (u = SC(Vt(n[f])), o)
          g = u.indexOf(t);
        else {
          const m = this.cellProperties.locale;
          g = u.toLocaleLowerCase(m).indexOf(t.toLocaleLowerCase(m));
        }
        g !== -1 && (h = u.length - g - l, r.push({
          baseIndex: f,
          index: g,
          charsLeft: h,
          value: u
        }));
      }
      for (r.sort((m, w) => {
        if (w.index === -1)
          return -1;
        if (m.index === -1)
          return 1;
        if (m.index < w.index)
          return -1;
        if (w.index < m.index)
          return 1;
        if (m.index === w.index) {
          if (m.charsLeft < w.charsLeft)
            return -1;
          if (m.charsLeft > w.charsLeft)
            return 1;
        }
        return 0;
      }), f = 0, c = r.length; f < c; f++)
        a.push(r[f].baseIndex);
      return a;
    }), this.query = null, this.strippedChoices = [], this.rawChoices = [], Au.set(this, {
      skipOne: !1,
      isMacOS: this.hot.rootWindow.navigator.platform.indexOf("Mac") > -1
    });
  }
  /**
   * Gets current value from editable element.
   *
   * @returns {string}
   */
  getValue() {
    const e = this.rawChoices.find((t) => this.stripValueIfNeeded(t) === this.TEXTAREA.value);
    return ue(e) ? e : this.TEXTAREA.value;
  }
  /**
   * Creates an editor's elements and adds necessary CSS classnames.
   */
  createElements() {
    super.createElements(), ie(this.htContainer, "autocompleteEditor"), ie(this.htContainer, this.hot.rootWindow.navigator.platform.indexOf("Mac") === -1 ? "" : "htMacScroll");
  }
  /**
   * Opens the editor and adjust its size and internal Handsontable's instance.
   */
  open() {
    const e = Au.get(this);
    super.open();
    const t = this.htEditor.getInstance(), n = this.cellProperties.trimDropdown === void 0 ? !0 : this.cellProperties.trimDropdown;
    this.showEditableElement(), this.focus();
    let o = qt();
    o === 0 && e.isMacOS && (o += 15), this.addHook("beforeKeyDown", (r) => this.onBeforeKeyDown(r)), t.updateSettings({
      colWidths: n ? [ht(this.TEXTAREA) - 2] : void 0,
      width: n ? ht(this.TEXTAREA) + o : void 0,
      renderer: (r, a, l, c, h, u, f) => {
        Ri(r, a, l, c, h, u, f);
        const {
          filteringCaseSensitive: g,
          allowHtml: m,
          locale: w
        } = this.cellProperties, C = this.query;
        let S = Vt(u), x, T;
        S && !m && (x = g === !0 ? S.indexOf(C) : S.toLocaleLowerCase(w).indexOf(C.toLocaleLowerCase(w)), x !== -1 && (T = S.substr(x, C.length), S = S.replace(T, `<strong>${T}</strong>`))), a.innerHTML = S;
      },
      autoColumnSize: !0
    }), e.skipOne && (e.skipOne = !1), this.hot._registerTimeout(() => {
      this.queryChoices(this.TEXTAREA.value);
    });
  }
  /**
   * Closes the editor.
   */
  close() {
    this.removeHooksByKey("beforeKeyDown"), super.close();
  }
  /**
   * Verifies result of validation or closes editor if user's cancelled changes.
   *
   * @param {boolean|undefined} result If `false` and the cell using allowInvalid option,
   *                                   then an editor won't be closed until validation is passed.
   */
  discardEditor(e) {
    super.discardEditor(e), this.hot.view.render();
  }
  /**
   * Prepares choices list based on applied argument.
   *
   * @private
   * @param {string} query The query.
   */
  queryChoices(e) {
    const t = this.cellProperties.source;
    this.query = e, typeof t == "function" ? t.call(this.cellProperties, e, (n) => {
      this.rawChoices = n, this.updateChoicesList(this.stripValuesIfNeeded(n));
    }) : Array.isArray(t) ? (this.rawChoices = t, this.updateChoicesList(this.stripValuesIfNeeded(t))) : this.updateChoicesList([]);
  }
  /**
   * Updates list of the possible completions to choose.
   *
   * @private
   * @param {Array} choicesList The choices list to process.
   */
  updateChoicesList(e) {
    const t = Nb(this.TEXTAREA), n = JN(this.TEXTAREA), o = this.cellProperties.sortByRelevance, r = this.cellProperties.filter;
    let a = null, l = null, c = e;
    o && (a = this.sortByRelevance(this.stripValueIfNeeded(this.getValue()), c, this.cellProperties.filteringCaseSensitive));
    const h = Array.isArray(a) ? a.length : 0;
    if (r === !1)
      h && (l = a[0]);
    else {
      const u = [];
      for (let f = 0, g = c.length; f < g && !(o && h <= f); f++)
        h ? u.push(c[a[f]]) : u.push(c[f]);
      l = 0, c = u;
    }
    this.strippedChoices = c, this.htEditor.loadData(Zl([c])), this.updateDropdownHeight(), this.flipDropdownIfNeeded(), this.cellProperties.strict === !0 && this.highlightBestMatchingChoice(l), this.hot.listen(), rh(this.TEXTAREA, t, t === n ? void 0 : n);
  }
  /**
   * Checks where is enough place to open editor.
   *
   * @private
   * @returns {boolean}
   */
  flipDropdownIfNeeded() {
    const e = sr(this.hot.view._wt.wtTable.TABLE), t = e === this.hot.rootWindow, n = this.cellProperties.preventOverflow;
    if (t || !t && (n || n === "horizontal"))
      return !1;
    const o = Wt(this.TEXTAREA), r = At(this.TEXTAREA), a = this.getDropdownHeight(), l = e.scrollTop, c = At(this.hot.view._wt.wtTable.THEAD), h = Wt(e), u = o.top - h.top - c + l, f = e.scrollHeight - u - c - r, g = a > f && u > f;
    return g ? this.flipDropdown(a) : this.unflipDropdown(), this.limitDropdownIfNeeded(g ? u : f, a), g;
  }
  /**
   * Checks if the internal table should generate scrollbar or could be rendered without it.
   *
   * @private
   * @param {number} spaceAvailable The free space as height defined in px available for dropdown list.
   * @param {number} dropdownHeight The dropdown height.
   */
  limitDropdownIfNeeded(e, t) {
    if (t > e) {
      let n = 0, o = 0, r = 0, a = null;
      do
        r = this.htEditor.getRowHeight(o) || this.htEditor.view._wt.getSetting("defaultRowHeight"), n += r, o += 1;
      while (n < e);
      a = n - r, this.htEditor.flipped && (this.htEditor.rootElement.style.top = `${parseInt(this.htEditor.rootElement.style.top, 10) + t - a}px`), this.setDropdownHeight(n - r);
    }
  }
  /**
   * Configures editor to open it at the top.
   *
   * @private
   * @param {number} dropdownHeight The dropdown height.
   */
  flipDropdown(e) {
    const t = this.htEditor.rootElement.style;
    t.position = "absolute", t.top = `${-e}px`, this.htEditor.flipped = !0;
  }
  /**
   * Configures editor to open it at the bottom.
   *
   * @private
   */
  unflipDropdown() {
    const e = this.htEditor.rootElement.style;
    e.position = "absolute", e.top = "", this.htEditor.flipped = void 0;
  }
  /**
   * Updates width and height of the internal Handsontable's instance.
   *
   * @private
   */
  updateDropdownHeight() {
    const e = this.htEditor.getColWidth(0) + qt(this.hot.rootDocument) + 2, t = this.cellProperties.trimDropdown;
    this.htEditor.updateSettings({
      height: this.getDropdownHeight(),
      width: t ? void 0 : e
    }), this.htEditor.view._wt.wtTable.alignOverlaysWithTrimmingContainer();
  }
  /**
   * Sets new height of the internal Handsontable's instance.
   *
   * @private
   * @param {number} height The new dropdown height.
   */
  setDropdownHeight(e) {
    this.htEditor.updateSettings({
      height: e
    });
  }
  /**
   * Creates new selection on specified row index, or deselects selected cells.
   *
   * @private
   * @param {number|undefined} index The visual row index.
   */
  highlightBestMatchingChoice(e) {
    typeof e == "number" ? this.htEditor.selectCell(e, 0, void 0, void 0, void 0, !1) : this.htEditor.deselectCell();
  }
  /**
   * Calculates and return the internal Handsontable's height.
   *
   * @private
   * @returns {number}
   */
  getDropdownHeight() {
    const e = this.htEditor.getInstance().getRowHeight(0) || 23, t = this.cellProperties.visibleRows;
    return this.strippedChoices.length >= t ? t * e : this.strippedChoices.length * e + 8;
  }
  /**
   * Sanitizes value from potential dangerous tags.
   *
   * @private
   * @param {string} value The value to sanitize.
   * @returns {string}
   */
  stripValueIfNeeded(e) {
    return this.stripValuesIfNeeded([e])[0];
  }
  /**
   * Sanitizes an array of the values from potential dangerous tags.
   *
   * @private
   * @param {string[]} values The value to sanitize.
   * @returns {string[]}
   */
  stripValuesIfNeeded(e) {
    const {
      allowHtml: t
    } = this.cellProperties, n = Ye(e, (r) => Vt(r));
    return Ye(n, (r) => t ? r : SC(r));
  }
  /**
   * Captures use of arrow down and up to control their behaviour.
   *
   * @private
   * @param {number} keyCode The keyboard keycode.
   * @returns {boolean}
   */
  allowKeyEventPropagation(e) {
    const t = this.htEditor.getSelectedRangeLast(), n = {
      row: t ? t.from.row : -1
    };
    let o = !1;
    return e === ve.ARROW_DOWN && n.row > 0 && n.row < this.htEditor.countRows() - 1 && (o = !0), e === ve.ARROW_UP && n.row > -1 && (o = !0), o;
  }
  /**
   * OnBeforeKeyDown callback.
   *
   * @private
   * @param {KeyboardEvent} event The keyboard event object.
   */
  onBeforeKeyDown(e) {
    const t = Au.get(this);
    if (t.skipOne = !1, IL(e.keyCode) || e.keyCode === ve.BACKSPACE || e.keyCode === ve.DELETE || e.keyCode === ve.INSERT) {
      let n = 10;
      if (e.keyCode === ve.C && (e.ctrlKey || e.metaKey))
        return;
      this.isOpened() || (n += 10), this.htEditor && this.hot._registerTimeout(() => {
        this.queryChoices(this.TEXTAREA.value), t.skipOne = !0;
      }, n);
    }
  }
}
const vW = "checkbox";
class qR extends mr {
  static get EDITOR_TYPE() {
    return vW;
  }
  beginEditing(e, t) {
    if (t && t.type === "mouseup") {
      const n = this.TD.querySelector('input[type="checkbox"]');
      Ne(n, "htBadValue") || n.click();
    }
  }
  finishEditing() {
  }
  init() {
  }
  open() {
  }
  close() {
  }
  getValue() {
  }
  setValue() {
  }
  focus() {
  }
}
var ZR = { exports: {} };
const yW = /* @__PURE__ */ WM(WN);
/*!
 * Pikaday
 *
 * Copyright © 2014 David Bushell | BSD & MIT license | https://github.com/Pikaday/Pikaday
 */
(function(s, e) {
  (function(t, n) {
    var o;
    {
      try {
        o = yW;
      } catch {
      }
      s.exports = n(o);
    }
  })(Ul, function(t) {
    var n = typeof t == "function", o = !!window.addEventListener, r = window.document, a = window.setTimeout, l = function(R, d, p, v) {
      o ? R.addEventListener(d, p, !!v) : R.attachEvent("on" + d, p);
    }, c = function(R, d, p, v) {
      o ? R.removeEventListener(d, p, !!v) : R.detachEvent("on" + d, p);
    }, h = function(R) {
      return R.trim ? R.trim() : R.replace(/^\s+|\s+$/g, "");
    }, u = function(R, d) {
      return (" " + R.className + " ").indexOf(" " + d + " ") !== -1;
    }, f = function(R, d) {
      u(R, d) || (R.className = R.className === "" ? d : R.className + " " + d);
    }, g = function(R, d) {
      R.className = h((" " + R.className + " ").replace(" " + d + " ", " "));
    }, m = function(R) {
      return /Array/.test(Object.prototype.toString.call(R));
    }, w = function(R) {
      return /Date/.test(Object.prototype.toString.call(R)) && !isNaN(R.getTime());
    }, C = function(R) {
      var d = R.getDay();
      return d === 0 || d === 6;
    }, S = function(R) {
      return R % 4 === 0 && R % 100 !== 0 || R % 400 === 0;
    }, x = function(R, d) {
      return [31, S(R) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][d];
    }, T = function(R) {
      w(R) && R.setHours(0, 0, 0, 0);
    }, M = function(R, d) {
      return R.getTime() === d.getTime();
    }, _ = function(R, d, p) {
      var v, E;
      for (v in d)
        E = R[v] !== void 0, E && typeof d[v] == "object" && d[v] !== null && d[v].nodeName === void 0 ? w(d[v]) ? p && (R[v] = new Date(d[v].getTime())) : m(d[v]) ? p && (R[v] = d[v].slice(0)) : R[v] = _({}, d[v], p) : (p || !E) && (R[v] = d[v]);
      return R;
    }, P = function(R, d, p) {
      var v;
      r.createEvent ? (v = r.createEvent("HTMLEvents"), v.initEvent(d, !0, !1), v = _(v, p), R.dispatchEvent(v)) : r.createEventObject && (v = r.createEventObject(), v = _(v, p), R.fireEvent("on" + d, v));
    }, j = function(R) {
      return R.month < 0 && (R.year -= Math.ceil(Math.abs(R.month) / 12), R.month += 12), R.month > 11 && (R.year += Math.floor(Math.abs(R.month) / 12), R.month -= 12), R;
    }, H = {
      // bind the picker to a form field
      field: null,
      // automatically show/hide the picker on `field` focus (default `true` if `field` is set)
      bound: void 0,
      // data-attribute on the input field with an aria assistance text (only applied when `bound` is set)
      ariaLabel: "Use the arrow keys to pick a date",
      // position of the datepicker, relative to the field (default to bottom & left)
      // ('bottom' & 'left' keywords are not used, 'top' & 'right' are modifier on the bottom/left position)
      position: "bottom left",
      // automatically fit in the viewport even if it means repositioning from the position option
      reposition: !0,
      // the default output format for `.toString()` and `field` value
      format: "YYYY-MM-DD",
      // the toString function which gets passed a current date object and format
      // and returns a string
      toString: null,
      // used to create date object from current input string
      parse: null,
      // the initial date to view when first opened
      defaultDate: null,
      // make the `defaultDate` the initial selected value
      setDefaultDate: !1,
      // first day of week (0: Sunday, 1: Monday etc)
      firstDay: 0,
      // minimum number of days in the week that gets week number one
      // default ISO 8601, week 01 is the week with the first Thursday (4)
      firstWeekOfYearMinDays: 4,
      // the default flag for moment's strict date parsing
      formatStrict: !1,
      // the minimum/earliest date that can be selected
      minDate: null,
      // the maximum/latest date that can be selected
      maxDate: null,
      // number of years either side, or array of upper/lower range
      yearRange: 10,
      // show week numbers at head of row
      showWeekNumber: !1,
      // Week picker mode
      pickWholeWeek: !1,
      // used internally (don't config outside)
      minYear: 0,
      maxYear: 9999,
      minMonth: void 0,
      maxMonth: void 0,
      startRange: null,
      endRange: null,
      isRTL: !1,
      // Additional text to append to the year in the calendar title
      yearSuffix: "",
      // Render the month after year in the calendar title
      showMonthAfterYear: !1,
      // Render days of the calendar grid that fall in the next or previous month
      showDaysInNextAndPreviousMonths: !1,
      // Allows user to select days that fall in the next or previous month
      enableSelectionDaysInNextAndPreviousMonths: !1,
      // how many months are visible
      numberOfMonths: 1,
      // when numberOfMonths is used, this will help you to choose where the main calendar will be (default `left`, can be set to `right`)
      // only used for the first display or when a selected date is not visible
      mainCalendar: "left",
      // Specify a DOM element to render the calendar in
      container: void 0,
      // Blur field when date is selected
      blurFieldOnSelect: !0,
      // internationalization
      i18n: {
        previousMonth: "Previous Month",
        nextMonth: "Next Month",
        months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
        weekdays: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
        weekdaysShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]
      },
      // Theme Classname
      theme: null,
      // events array
      events: [],
      // callback function
      onSelect: null,
      onOpen: null,
      onClose: null,
      onDraw: null,
      // Enable keyboard input
      keyboardInput: !0
    }, Z = function(R, d, p) {
      for (d += R.firstDay; d >= 7; )
        d -= 7;
      return p ? R.i18n.weekdaysShort[d] : R.i18n.weekdays[d];
    }, X = function(R) {
      var d = [], p = "false";
      if (R.isEmpty)
        if (R.showDaysInNextAndPreviousMonths)
          d.push("is-outside-current-month"), R.enableSelectionDaysInNextAndPreviousMonths || d.push("is-selection-disabled");
        else
          return '<td class="is-empty"></td>';
      return R.isDisabled && d.push("is-disabled"), R.isToday && d.push("is-today"), R.isSelected && (d.push("is-selected"), p = "true"), R.hasEvent && d.push("has-event"), R.isInRange && d.push("is-inrange"), R.isStartRange && d.push("is-startrange"), R.isEndRange && d.push("is-endrange"), '<td data-day="' + R.day + '" class="' + d.join(" ") + '" aria-selected="' + p + '"><button class="pika-button pika-day" type="button" data-pika-year="' + R.year + '" data-pika-month="' + R.month + '" data-pika-day="' + R.day + '">' + R.day + "</button></td>";
    }, F = function(R, d) {
      R.setHours(0, 0, 0, 0);
      var p = R.getDate(), v = R.getDay(), E = d, I = E - 1, A = 7, K = function(Ce) {
        return (Ce + A - 1) % A;
      };
      R.setDate(p + I - K(v));
      var U = new Date(R.getFullYear(), 0, E), J = 24 * 60 * 60 * 1e3, ne = (R.getTime() - U.getTime()) / J, Q = 1 + Math.round((ne - I + K(U.getDay())) / A);
      return Q;
    }, z = function(R, d, p, v) {
      var E = new Date(p, d, R), I = n ? t(E).isoWeek() : F(E, v);
      return '<td class="pika-week">' + I + "</td>";
    }, ee = function(R, d, p, v) {
      return '<tr class="pika-row' + (p ? " pick-whole-week" : "") + (v ? " is-selected" : "") + '">' + (d ? R.reverse() : R).join("") + "</tr>";
    }, oe = function(R) {
      return "<tbody>" + R.join("") + "</tbody>";
    }, fe = function(R) {
      var d, p = [];
      for (R.showWeekNumber && p.push("<th></th>"), d = 0; d < 7; d++)
        p.push('<th scope="col"><abbr title="' + Z(R, d) + '">' + Z(R, d, !0) + "</abbr></th>");
      return "<thead><tr>" + (R.isRTL ? p.reverse() : p).join("") + "</tr></thead>";
    }, Ae = function(R, d, p, v, E, I) {
      var A, K, U, J = R._o, ne = p === J.minYear, Q = p === J.maxYear, Ce = '<div id="' + I + '" class="pika-title" role="heading" aria-live="assertive">', Fe, Ie, Oe = !0, q = !0;
      for (U = [], A = 0; A < 12; A++)
        U.push('<option value="' + (p === E ? A - d : 12 + A - d) + '"' + (A === v ? ' selected="selected"' : "") + (ne && A < J.minMonth || Q && A > J.maxMonth ? ' disabled="disabled"' : "") + ">" + J.i18n.months[A] + "</option>");
      for (Fe = '<div class="pika-label">' + J.i18n.months[v] + '<select class="pika-select pika-select-month" tabindex="-1">' + U.join("") + "</select></div>", m(J.yearRange) ? (A = J.yearRange[0], K = J.yearRange[1] + 1) : (A = p - J.yearRange, K = 1 + p + J.yearRange), U = []; A < K && A <= J.maxYear; A++)
        A >= J.minYear && U.push('<option value="' + A + '"' + (A === p ? ' selected="selected"' : "") + ">" + A + "</option>");
      return Ie = '<div class="pika-label">' + p + J.yearSuffix + '<select class="pika-select pika-select-year" tabindex="-1">' + U.join("") + "</select></div>", J.showMonthAfterYear ? Ce += Ie + Fe : Ce += Fe + Ie, ne && (v === 0 || J.minMonth >= v) && (Oe = !1), Q && (v === 11 || J.maxMonth <= v) && (q = !1), d === 0 && (Ce += '<button class="pika-prev' + (Oe ? "" : " is-disabled") + '" type="button">' + J.i18n.previousMonth + "</button>"), d === R._o.numberOfMonths - 1 && (Ce += '<button class="pika-next' + (q ? "" : " is-disabled") + '" type="button">' + J.i18n.nextMonth + "</button>"), Ce += "</div>";
    }, Ze = function(R, d, p) {
      return '<table cellpadding="0" cellspacing="0" class="pika-table" role="grid" aria-labelledby="' + p + '">' + fe(R) + oe(d) + "</table>";
    }, He = function(R) {
      var d = this, p = d.config(R);
      d._onMouseDown = function(E) {
        if (d._v) {
          E = E || window.event;
          var I = E.target || E.srcElement;
          if (I)
            if (u(I, "is-disabled") || (u(I, "pika-button") && !u(I, "is-empty") && !u(I.parentNode, "is-disabled") ? (d.setDate(new Date(I.getAttribute("data-pika-year"), I.getAttribute("data-pika-month"), I.getAttribute("data-pika-day"))), p.bound && a(function() {
              d.hide(), p.blurFieldOnSelect && p.field && p.field.blur();
            }, 100)) : u(I, "pika-prev") ? d.prevMonth() : u(I, "pika-next") && d.nextMonth()), u(I, "pika-select"))
              d._c = !0;
            else if (E.preventDefault)
              E.preventDefault();
            else
              return E.returnValue = !1, !1;
        }
      }, d._onChange = function(E) {
        E = E || window.event;
        var I = E.target || E.srcElement;
        I && (u(I, "pika-select-month") ? d.gotoMonth(I.value) : u(I, "pika-select-year") && d.gotoYear(I.value));
      }, d._onKeyChange = function(E) {
        if (E = E || window.event, d.isVisible())
          switch (E.keyCode) {
            case 13:
            case 27:
              p.field && p.field.blur();
              break;
            case 37:
              d.adjustDate("subtract", 1);
              break;
            case 38:
              d.adjustDate("subtract", 7);
              break;
            case 39:
              d.adjustDate("add", 1);
              break;
            case 40:
              d.adjustDate("add", 7);
              break;
            case 8:
            case 46:
              d.setDate(null);
              break;
          }
      }, d._parseFieldValue = function() {
        if (p.parse)
          return p.parse(p.field.value, p.format);
        if (n) {
          var E = t(p.field.value, p.format, p.formatStrict);
          return E && E.isValid() ? E.toDate() : null;
        } else
          return new Date(Date.parse(p.field.value));
      }, d._onInputChange = function(E) {
        var I;
        E.firedBy !== d && (I = d._parseFieldValue(), w(I) && d.setDate(I), d._v || d.show());
      }, d._onInputFocus = function() {
        d.show();
      }, d._onInputClick = function() {
        d.show();
      }, d._onInputBlur = function() {
        var E = r.activeElement;
        do
          if (u(E, "pika-single"))
            return;
        while (E = E.parentNode);
        d._c || (d._b = a(function() {
          d.hide();
        }, 50)), d._c = !1;
      }, d._onClick = function(E) {
        E = E || window.event;
        var I = E.target || E.srcElement, A = I;
        if (I) {
          !o && u(I, "pika-select") && (I.onchange || (I.setAttribute("onchange", "return;"), l(I, "change", d._onChange)));
          do
            if (u(A, "pika-single") || A === p.trigger)
              return;
          while (A = A.parentNode);
          d._v && I !== p.trigger && A !== p.trigger && d.hide();
        }
      }, d.el = r.createElement("div"), d.el.className = "pika-single" + (p.isRTL ? " is-rtl" : "") + (p.theme ? " " + p.theme : ""), l(d.el, "mousedown", d._onMouseDown, !0), l(d.el, "touchend", d._onMouseDown, !0), l(d.el, "change", d._onChange), p.keyboardInput && l(r, "keydown", d._onKeyChange), p.field && (p.container ? p.container.appendChild(d.el) : p.bound ? r.body.appendChild(d.el) : p.field.parentNode.insertBefore(d.el, p.field.nextSibling), l(p.field, "change", d._onInputChange), p.defaultDate || (p.defaultDate = d._parseFieldValue(), p.setDefaultDate = !0));
      var v = p.defaultDate;
      w(v) ? p.setDefaultDate ? d.setDate(v, !0) : d.gotoDate(v) : d.gotoDate(/* @__PURE__ */ new Date()), p.bound ? (this.hide(), d.el.className += " is-bound", l(p.trigger, "click", d._onInputClick), l(p.trigger, "focus", d._onInputFocus), l(p.trigger, "blur", d._onInputBlur)) : this.show();
    };
    return He.prototype = {
      /**
       * configure functionality
       */
      config: function(R) {
        this._o || (this._o = _({}, H, !0));
        var d = _(this._o, R, !0);
        d.isRTL = !!d.isRTL, d.field = d.field && d.field.nodeName ? d.field : null, d.theme = typeof d.theme == "string" && d.theme ? d.theme : null, d.bound = !!(d.bound !== void 0 ? d.field && d.bound : d.field), d.trigger = d.trigger && d.trigger.nodeName ? d.trigger : d.field, d.disableWeekends = !!d.disableWeekends, d.disableDayFn = typeof d.disableDayFn == "function" ? d.disableDayFn : null;
        var p = parseInt(d.numberOfMonths, 10) || 1;
        if (d.numberOfMonths = p > 4 ? 4 : p, w(d.minDate) || (d.minDate = !1), w(d.maxDate) || (d.maxDate = !1), d.minDate && d.maxDate && d.maxDate < d.minDate && (d.maxDate = d.minDate = !1), d.minDate && this.setMinDate(d.minDate), d.maxDate && this.setMaxDate(d.maxDate), m(d.yearRange)) {
          var v = (/* @__PURE__ */ new Date()).getFullYear() - 10;
          d.yearRange[0] = parseInt(d.yearRange[0], 10) || v, d.yearRange[1] = parseInt(d.yearRange[1], 10) || v;
        } else
          d.yearRange = Math.abs(parseInt(d.yearRange, 10)) || H.yearRange, d.yearRange > 100 && (d.yearRange = 100);
        return d;
      },
      /**
       * return a formatted string of the current selection (using Moment.js if available)
       */
      toString: function(R) {
        return R = R || this._o.format, w(this._d) ? this._o.toString ? this._o.toString(this._d, R) : n ? t(this._d).format(R) : this._d.toDateString() : "";
      },
      /**
       * return a Moment.js object of the current selection (if available)
       */
      getMoment: function() {
        return n ? t(this._d) : null;
      },
      /**
       * set the current selection from a Moment.js object (if available)
       */
      setMoment: function(R, d) {
        n && t.isMoment(R) && this.setDate(R.toDate(), d);
      },
      /**
       * return a Date object of the current selection
       */
      getDate: function() {
        return w(this._d) ? new Date(this._d.getTime()) : null;
      },
      /**
       * set the current selection
       */
      setDate: function(R, d) {
        if (!R)
          return this._d = null, this._o.field && (this._o.field.value = "", P(this._o.field, "change", { firedBy: this })), this.draw();
        if (typeof R == "string" && (R = new Date(Date.parse(R))), !!w(R)) {
          var p = this._o.minDate, v = this._o.maxDate;
          w(p) && R < p ? R = p : w(v) && R > v && (R = v), this._d = new Date(R.getTime()), T(this._d), this.gotoDate(this._d), this._o.field && (this._o.field.value = this.toString(), P(this._o.field, "change", { firedBy: this })), !d && typeof this._o.onSelect == "function" && this._o.onSelect.call(this, this.getDate());
        }
      },
      /**
       * clear and reset the date
       */
      clear: function() {
        this.setDate(null);
      },
      /**
       * change view to a specific date
       */
      gotoDate: function(R) {
        var d = !0;
        if (w(R)) {
          if (this.calendars) {
            var p = new Date(this.calendars[0].year, this.calendars[0].month, 1), v = new Date(this.calendars[this.calendars.length - 1].year, this.calendars[this.calendars.length - 1].month, 1), E = R.getTime();
            v.setMonth(v.getMonth() + 1), v.setDate(v.getDate() - 1), d = E < p.getTime() || v.getTime() < E;
          }
          d && (this.calendars = [{
            month: R.getMonth(),
            year: R.getFullYear()
          }], this._o.mainCalendar === "right" && (this.calendars[0].month += 1 - this._o.numberOfMonths)), this.adjustCalendars();
        }
      },
      adjustDate: function(R, d) {
        var p = this.getDate() || /* @__PURE__ */ new Date(), v = parseInt(d) * 24 * 60 * 60 * 1e3, E;
        R === "add" ? E = new Date(p.valueOf() + v) : R === "subtract" && (E = new Date(p.valueOf() - v)), this.setDate(E);
      },
      adjustCalendars: function() {
        this.calendars[0] = j(this.calendars[0]);
        for (var R = 1; R < this._o.numberOfMonths; R++)
          this.calendars[R] = j({
            month: this.calendars[0].month + R,
            year: this.calendars[0].year
          });
        this.draw();
      },
      gotoToday: function() {
        this.gotoDate(/* @__PURE__ */ new Date());
      },
      /**
       * change view to a specific month (zero-index, e.g. 0: January)
       */
      gotoMonth: function(R) {
        isNaN(R) || (this.calendars[0].month = parseInt(R, 10), this.adjustCalendars());
      },
      nextMonth: function() {
        this.calendars[0].month++, this.adjustCalendars();
      },
      prevMonth: function() {
        this.calendars[0].month--, this.adjustCalendars();
      },
      /**
       * change view to a specific full year (e.g. "2012")
       */
      gotoYear: function(R) {
        isNaN(R) || (this.calendars[0].year = parseInt(R, 10), this.adjustCalendars());
      },
      /**
       * change the minDate
       */
      setMinDate: function(R) {
        R instanceof Date ? (T(R), this._o.minDate = R, this._o.minYear = R.getFullYear(), this._o.minMonth = R.getMonth()) : (this._o.minDate = H.minDate, this._o.minYear = H.minYear, this._o.minMonth = H.minMonth, this._o.startRange = H.startRange), this.draw();
      },
      /**
       * change the maxDate
       */
      setMaxDate: function(R) {
        R instanceof Date ? (T(R), this._o.maxDate = R, this._o.maxYear = R.getFullYear(), this._o.maxMonth = R.getMonth()) : (this._o.maxDate = H.maxDate, this._o.maxYear = H.maxYear, this._o.maxMonth = H.maxMonth, this._o.endRange = H.endRange), this.draw();
      },
      setStartRange: function(R) {
        this._o.startRange = R;
      },
      setEndRange: function(R) {
        this._o.endRange = R;
      },
      /**
       * refresh the HTML
       */
      draw: function(R) {
        if (!(!this._v && !R)) {
          var d = this._o, p = d.minYear, v = d.maxYear, E = d.minMonth, I = d.maxMonth, A = "", K;
          this._y <= p && (this._y = p, !isNaN(E) && this._m < E && (this._m = E)), this._y >= v && (this._y = v, !isNaN(I) && this._m > I && (this._m = I));
          for (var U = 0; U < d.numberOfMonths; U++)
            K = "pika-title-" + Math.random().toString(36).replace(/[^a-z]+/g, "").substr(0, 2), A += '<div class="pika-lendar">' + Ae(this, U, this.calendars[U].year, this.calendars[U].month, this.calendars[0].year, K) + this.render(this.calendars[U].year, this.calendars[U].month, K) + "</div>";
          this.el.innerHTML = A, d.bound && d.field.type !== "hidden" && a(function() {
            d.trigger.focus();
          }, 1), typeof this._o.onDraw == "function" && this._o.onDraw(this), d.bound && d.field.setAttribute("aria-label", d.ariaLabel);
        }
      },
      adjustPosition: function() {
        var R, d, p, v, E, I, A, K, U, J, ne, Q;
        if (!this._o.container) {
          if (this.el.style.position = "absolute", R = this._o.trigger, d = R, p = this.el.offsetWidth, v = this.el.offsetHeight, E = window.innerWidth || r.documentElement.clientWidth, I = window.innerHeight || r.documentElement.clientHeight, A = window.pageYOffset || r.body.scrollTop || r.documentElement.scrollTop, ne = !0, Q = !0, typeof R.getBoundingClientRect == "function")
            J = R.getBoundingClientRect(), K = J.left + window.pageXOffset, U = J.bottom + window.pageYOffset;
          else
            for (K = d.offsetLeft, U = d.offsetTop + d.offsetHeight; d = d.offsetParent; )
              K += d.offsetLeft, U += d.offsetTop;
          (this._o.reposition && K + p > E || this._o.position.indexOf("right") > -1 && K - p + R.offsetWidth > 0) && (K = K - p + R.offsetWidth, ne = !1), (this._o.reposition && U + v > I + A || this._o.position.indexOf("top") > -1 && U - v - R.offsetHeight > 0) && (U = U - v - R.offsetHeight, Q = !1), this.el.style.left = K + "px", this.el.style.top = U + "px", f(this.el, ne ? "left-aligned" : "right-aligned"), f(this.el, Q ? "bottom-aligned" : "top-aligned"), g(this.el, ne ? "right-aligned" : "left-aligned"), g(this.el, Q ? "top-aligned" : "bottom-aligned");
        }
      },
      /**
       * render HTML for a particular month
       */
      render: function(R, d, p) {
        var v = this._o, E = /* @__PURE__ */ new Date(), I = x(R, d), A = new Date(R, d, 1).getDay(), K = [], U = [];
        T(E), v.firstDay > 0 && (A -= v.firstDay, A < 0 && (A += 7));
        for (var J = d === 0 ? 11 : d - 1, ne = d === 11 ? 0 : d + 1, Q = d === 0 ? R - 1 : R, Ce = d === 11 ? R + 1 : R, Fe = x(Q, J), Ie = I + A, Oe = Ie; Oe > 7; )
          Oe -= 7;
        Ie += 7 - Oe;
        for (var q = !1, Qe = 0, We = 0; Qe < Ie; Qe++) {
          var xe = new Date(R, d, 1 + (Qe - A)), Le = w(this._d) ? M(xe, this._d) : !1, Ee = M(xe, E), y = v.events.indexOf(xe.toDateString()) !== -1, b = Qe < A || Qe >= I + A, O = 1 + (Qe - A), W = d, k = R, B = v.startRange && M(v.startRange, xe), N = v.endRange && M(v.endRange, xe), L = v.startRange && v.endRange && v.startRange < xe && xe < v.endRange, Y = v.minDate && xe < v.minDate || v.maxDate && xe > v.maxDate || v.disableWeekends && C(xe) || v.disableDayFn && v.disableDayFn(xe);
          b && (Qe < A ? (O = Fe + O, W = J, k = Q) : (O = O - I, W = ne, k = Ce));
          var V = {
            day: O,
            month: W,
            year: k,
            hasEvent: y,
            isSelected: Le,
            isToday: Ee,
            isDisabled: Y,
            isEmpty: b,
            isStartRange: B,
            isEndRange: N,
            isInRange: L,
            showDaysInNextAndPreviousMonths: v.showDaysInNextAndPreviousMonths,
            enableSelectionDaysInNextAndPreviousMonths: v.enableSelectionDaysInNextAndPreviousMonths
          };
          v.pickWholeWeek && Le && (q = !0), U.push(X(V)), ++We === 7 && (v.showWeekNumber && U.unshift(z(Qe - A, d, R, v.firstWeekOfYearMinDays)), K.push(ee(U, v.isRTL, v.pickWholeWeek, q)), U = [], We = 0, q = !1);
        }
        return Ze(v, K, p);
      },
      isVisible: function() {
        return this._v;
      },
      show: function() {
        this.isVisible() || (this._v = !0, this.draw(), g(this.el, "is-hidden"), this._o.bound && (l(r, "click", this._onClick), this.adjustPosition()), typeof this._o.onOpen == "function" && this._o.onOpen.call(this));
      },
      hide: function() {
        var R = this._v;
        R !== !1 && (this._o.bound && c(r, "click", this._onClick), this._o.container || (this.el.style.position = "static", this.el.style.left = "auto", this.el.style.top = "auto"), f(this.el, "is-hidden"), this._v = !1, R !== void 0 && typeof this._o.onClose == "function" && this._o.onClose.call(this));
      },
      /**
       * GAME OVER
       */
      destroy: function() {
        var R = this._o;
        this.hide(), c(this.el, "mousedown", this._onMouseDown, !0), c(this.el, "touchend", this._onMouseDown, !0), c(this.el, "change", this._onChange), R.keyboardInput && c(r, "keydown", this._onKeyChange), R.field && (c(R.field, "change", this._onInputChange), R.bound && (c(R.trigger, "click", this._onInputClick), c(R.trigger, "focus", this._onInputFocus), c(R.trigger, "blur", this._onInputBlur))), this.el.parentNode && this.el.parentNode.removeChild(this.el);
      }
    }, He;
  });
})(ZR);
var SW = ZR.exports;
const Sv = /* @__PURE__ */ Uy(SW), QR = "date", bv = "dateEditor";
class JR extends ho {
  static get EDITOR_TYPE() {
    return QR;
  }
  /**
   * @param {Core} hotInstance Handsontable instance.
   * @private
   */
  constructor(e) {
    super(e), this.defaultDateFormat = "DD/MM/YYYY", this.isCellEdited = !1, this.parentDestroyed = !1, this.$datePicker = null;
  }
  init() {
    if (typeof se != "function")
      throw new Error("You need to include moment.js to your project.");
    if (typeof Sv != "function")
      throw new Error("You need to include Pikaday to your project.");
    super.init(), this.instance.addHook("afterDestroy", () => {
      this.parentDestroyed = !0, this.destroyElements();
    });
  }
  /**
   * Create data picker instance.
   */
  createElements() {
    super.createElements(), this.datePicker = this.hot.rootDocument.createElement("DIV"), this.datePickerStyle = this.datePicker.style, this.datePickerStyle.position = "absolute", this.datePickerStyle.top = 0, this.datePickerStyle.left = 0, this.datePickerStyle.zIndex = 9999, this.datePicker.setAttribute("dir", this.hot.isRtl() ? "rtl" : "ltr"), ie(this.datePicker, "htDatepickerHolder"), this.hot.rootDocument.body.appendChild(this.datePicker), new Dt(this).addEventListener(this.datePicker, "mousedown", (t) => t.stopPropagation());
  }
  /**
   * Destroy data picker instance.
   */
  destroyElements() {
    const e = this.datePicker.parentNode;
    this.$datePicker && this.$datePicker.destroy(), e && e.removeChild(this.datePicker);
  }
  /**
   * Prepare editor to appear.
   *
   * @param {number} row The visual row index.
   * @param {number} col The visual column index.
   * @param {number|string} prop The column property (passed when datasource is an array of objects).
   * @param {HTMLTableCellElement} td The rendered cell element.
   * @param {*} value The rendered value.
   * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).
   */
  prepare(e, t, n, o, r, a) {
    super.prepare(e, t, n, o, r, a);
  }
  /**
   * Open editor.
   *
   * @param {Event} [event=null] The event object.
   */
  open() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
    const n = this.hot.getShortcutManager().getContext("editor");
    super.open(), this.showDatepicker(e), n.addShortcut({
      keys: [["Enter"]],
      callback: (o) => {
        o.stopPropagation();
      },
      group: bv
    });
  }
  /**
   * Close editor.
   */
  close() {
    var e;
    this._opened = !1, (e = this.$datePicker) !== null && e !== void 0 && e.destroy && this.$datePicker.destroy(), this.instance._registerTimeout(() => {
      this.instance._refreshBorders();
    }), this.hot.getShortcutManager().getContext("editor").removeShortcutsByGroup(bv), super.close();
  }
  /**
   * Finishes editing and start saving or restoring process for editing cell or last selected range.
   *
   * @param {boolean} restoreOriginalValue If true, then closes editor without saving value from the editor into a cell.
   * @param {boolean} ctrlDown If true, then saveValue will save editor's value to each cell in the last selected range.
   */
  finishEditing() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1, t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;
    if (e) {
      const n = this.originalValue;
      n !== void 0 && this.setValue(n);
    }
    super.finishEditing(e, t);
  }
  /**
   * Show data picker.
   *
   * @param {Event} event The event object.
   */
  showDatepicker(e) {
    const t = this.TD.getBoundingClientRect(), n = this.cellProperties.dateFormat || this.defaultDateFormat, o = this.instance.view.isMouseDown(), r = e ? jb(e.keyCode) : !1;
    let a;
    this.datePicker.style.display = "block", this.$datePicker = new Sv(this.getDatePickerConfig()), this.$datePicker._onInputFocus = function() {
    }, this.datePickerStyle.top = `${this.hot.rootWindow.pageYOffset + t.top + At(this.TD)}px`;
    let l = this.hot.rootWindow.pageXOffset;
    this.hot.isRtl() ? l = t.right - ht(this.datePicker) : l = t.left, this.datePickerStyle.left = `${l}px`, this.originalValue ? (a = this.originalValue, se(a, n, !0).isValid() && this.$datePicker.setMoment(se(a, n), !0), this.getValue() !== this.originalValue && this.setValue(this.originalValue), !r && !o && this.setValue("")) : this.cellProperties.defaultDate ? (a = this.cellProperties.defaultDate, se(a, n, !0).isValid() && this.$datePicker.setMoment(se(a, n), !0), !r && !o && this.setValue("")) : this.$datePicker.gotoToday();
  }
  /**
   * Hide data picker.
   */
  hideDatepicker() {
    this.datePickerStyle.display = "none", this.$datePicker.hide();
  }
  /**
   * Get date picker options.
   *
   * @returns {object}
   */
  getDatePickerConfig() {
    const e = this.TEXTAREA, t = {};
    this.cellProperties && this.cellProperties.datePickerConfig && lh(t, this.cellProperties.datePickerConfig);
    const n = t.onSelect, o = t.onClose;
    return t.field = e, t.trigger = e, t.container = this.datePicker, t.bound = !1, t.format = t.format || this.defaultDateFormat, t.reposition = t.reposition || !1, t.isRTL = !1, t.onSelect = (r) => {
      let a = r;
      isNaN(a.getTime()) || (a = se(a).format(this.cellProperties.dateFormat || this.defaultDateFormat)), this.setValue(a), this.hideDatepicker(), n && n();
    }, t.onClose = () => {
      this.parentDestroyed || this.finishEditing(!1), o && o();
    }, t;
  }
}
const bW = "dropdown";
class bp extends Sp {
  static get EDITOR_TYPE() {
    return bW;
  }
  /**
   * @param {number} row The visual row index.
   * @param {number} col The visual column index.
   * @param {number|string} prop The column property (passed when datasource is an array of objects).
   * @param {HTMLTableCellElement} td The rendered cell element.
   * @param {*} value The rendered value.
   * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).
   */
  prepare(e, t, n, o, r, a) {
    super.prepare(e, t, n, o, r, a), this.cellProperties.filter = !1, this.cellProperties.strict = !0;
  }
}
me.getSingleton().add("beforeValidate", function(s, e, t) {
  const n = this.getCellMeta(e, this.propToCol(t));
  n.editor === bp && n.strict === void 0 && (n.filter = !1, n.strict = !0);
});
const RW = "numeric";
class e0 extends ho {
  static get EDITOR_TYPE() {
    return RW;
  }
}
const EW = "password";
class t0 extends ho {
  static get EDITOR_TYPE() {
    return EW;
  }
  createElements() {
    super.createElements(), this.TEXTAREA = this.hot.rootDocument.createElement("input"), this.TEXTAREA.setAttribute("type", "password"), this.TEXTAREA.setAttribute("data-hot-input", ""), this.TEXTAREA.className = "handsontableInput", this.textareaStyle = this.TEXTAREA.style, this.textareaStyle.width = 0, this.textareaStyle.height = 0, bn(this.TEXTAREA_PARENT), this.TEXTAREA_PARENT.appendChild(this.TEXTAREA);
  }
}
const Pu = "ht_editor_visible", Rv = "selectEditor", xW = "select";
class TW extends mr {
  static get EDITOR_TYPE() {
    return xW;
  }
  /**
   * Initializes editor instance, DOM Element and mount hooks.
   */
  init() {
    this.select = this.hot.rootDocument.createElement("SELECT"), ie(this.select, "htSelectEditor"), this.select.style.display = "none", this.hot.rootElement.appendChild(this.select), this.registerHooks();
  }
  /**
   * Returns select's value.
   *
   * @returns {*}
   */
  getValue() {
    return this.select.value;
  }
  /**
   * Sets value in the select element.
   *
   * @param {*} value A new select's value.
   */
  setValue(e) {
    this.select.value = e;
  }
  /**
   * Opens the editor and adjust its size.
   */
  open() {
    this._opened = !0, this.refreshDimensions(), this.select.style.display = "", this.hot.getShortcutManager().setActiveContextName("editor"), this.registerShortcuts();
  }
  /**
   * Closes the editor.
   */
  close() {
    this._opened = !1, this.select.style.display = "none", Ne(this.select, Pu) && $e(this.select, Pu), this.unregisterShortcuts(), this.clearHooks();
  }
  /**
   * Sets focus state on the select element.
   */
  focus() {
    this.select.focus();
  }
  /**
   * Binds hooks to refresh editor's size after scrolling of the viewport or resizing of columns/rows.
   *
   * @private
   */
  registerHooks() {
    this.addHook("afterScrollHorizontally", () => this.refreshDimensions()), this.addHook("afterScrollVertically", () => this.refreshDimensions()), this.addHook("afterColumnResize", () => this.refreshDimensions()), this.addHook("afterRowResize", () => this.refreshDimensions());
  }
  /**
   * Prepares editor's meta data and a list of available options.
   *
   * @param {number} row The visual row index.
   * @param {number} col The visual column index.
   * @param {number|string} prop The column property (passed when datasource is an array of objects).
   * @param {HTMLTableCellElement} td The rendered cell element.
   * @param {*} value The rendered value.
   * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).
   */
  prepare(e, t, n, o, r, a) {
    super.prepare(e, t, n, o, r, a);
    const l = this.cellProperties.selectOptions;
    let c;
    typeof l == "function" ? c = this.prepareOptions(l(this.row, this.col, this.prop)) : c = this.prepareOptions(l), bn(this.select), je(c, (h, u) => {
      const f = this.hot.rootDocument.createElement("OPTION");
      f.value = u, ur(f, h), this.select.appendChild(f);
    });
  }
  /**
   * Creates consistent list of available options.
   *
   * @private
   * @param {Array|object} optionsToPrepare The list of the values to render in the select eleemnt.
   * @returns {object}
   */
  prepareOptions(e) {
    let t = {};
    if (Array.isArray(e))
      for (let n = 0, o = e.length; n < o; n++)
        t[e[n]] = e[n];
    else
      typeof e == "object" && (t = e);
    return t;
  }
  /**
   * Refreshes editor's value using source data.
   *
   * @private
   */
  refreshValue() {
    const e = this.hot.getSourceDataAtCell(this.row, this.prop);
    this.originalValue = e, this.setValue(e), this.refreshDimensions();
  }
  /**
   * Refreshes editor's size and position.
   *
   * @private
   */
  refreshDimensions() {
    if (this.state !== Kt.EDITING)
      return;
    if (this.TD = this.getEditedCell(), !this.TD) {
      this.close();
      return;
    }
    const {
      top: e,
      start: t,
      width: n,
      height: o
    } = this.getEditedCellRect(), r = this.select.style;
    r.height = `${o}px`, r.width = `${n}px`, r.top = `${e}px`, r[this.hot.isRtl() ? "right" : "left"] = `${t}px`, r.margin = "0px", ie(this.select, Pu);
  }
  /**
   * Register shortcuts responsible for handling editor.
   *
   * @private
   */
  registerShortcuts() {
    const t = this.hot.getShortcutManager().getContext("editor"), n = {
      group: Rv
    };
    this.isInFullEditMode() !== !1 && t.addShortcuts([{
      keys: [["ArrowUp"]],
      callback: () => {
        const o = this.select.selectedIndex - 1;
        o >= 0 && (this.select[o].selected = !0);
      }
    }, {
      keys: [["ArrowDown"]],
      callback: () => {
        const o = this.select.selectedIndex + 1;
        o <= this.select.length - 1 && (this.select[o].selected = !0);
      }
    }], n);
  }
  /**
   * Unregister shortcuts responsible for handling editor.
   *
   * @private
   */
  unregisterShortcuts() {
    this.hot.getShortcutManager().getContext("editor").removeShortcutsByGroup(Rv);
  }
}
const MW = "time";
class s0 extends ho {
  static get EDITOR_TYPE() {
    return MW;
  }
  /**
   * Prepares editor's meta data.
   *
   * @param {number} row The visual row index.
   * @param {number} col The visual column index.
   * @param {number|string} prop The column property (passed when datasource is an array of objects).
   * @param {HTMLTableCellElement} td The rendered cell element.
   * @param {*} value The rendered value.
   * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).
   */
  prepare(e, t, n, o, r, a) {
    super.prepare(e, t, n, o, r, a), this.TEXTAREA.dir = "ltr";
  }
}
function _W() {
  _s(mr), _s(Sp), _s(qR), _s(JR), _s(bp), _s(yp), _s(e0), _s(t0), _s(TW), _s(ho), _s(s0);
}
const IW = "html";
function Rp(s, e, t, n, o, r, a) {
  $a.apply(this, [s, e, t, n, o, r, a]), ur(e, r ?? "", !1);
}
Rp.RENDERER_TYPE = IW;
const OW = "autocomplete";
function pr(s, e, t, n, o, r, a) {
  const {
    rootDocument: l
  } = s, c = a.allowHtml ? Rp : Ri, h = l.createElement("DIV");
  if (h.className = "htAutocompleteArrow", h.appendChild(l.createTextNode(String.fromCharCode(9660))), c.apply(this, [s, e, t, n, o, r, a]), e.firstChild || e.appendChild(l.createTextNode(String.fromCharCode(160))), e.insertBefore(h, e.firstChild), ie(e, "htAutocomplete"), !s.acArrowListener) {
    const u = new Dt(s);
    s.acArrowListener = function(f) {
      Ne(f.target, "htAutocompleteArrow") && s.view._wt.getSetting("onCellDblClick", null, s._createCellCoords(t, n), e);
    }, u.addEventListener(s.rootElement, "mousedown", s.acArrowListener), s.addHookOnce("afterDestroy", () => {
      u.destroy();
    });
  }
}
pr.RENDERER_TYPE = OW;
const Ev = /* @__PURE__ */ new WeakMap(), xv = /* @__PURE__ */ new WeakMap(), AW = "htBadValue", or = "data-row", rr = "data-col", PW = "checkboxRenderer", n0 = "checkbox";
me.getSingleton().add("modifyAutoColumnSizeSeed", function(s, e, t) {
  const {
    label: n,
    type: o,
    row: r,
    column: a,
    prop: l
  } = e;
  if (o === n0) {
    if (n) {
      const {
        value: c,
        property: h
      } = n;
      let u = t;
      if (c)
        u = typeof c == "function" ? c(r, a, l, t) : c;
      else if (h) {
        const f = this.getDataAtRowProp(r, h);
        u = f !== null ? f : t;
      }
      s = u;
    }
    return s;
  }
});
function Ep(s, e, t, n, o, r, a) {
  const {
    rootDocument: l
  } = s;
  $a.apply(this, [s, e, t, n, o, r, a]), DW(s);
  let c = HW(l);
  const h = a.label;
  let u = !1;
  if (typeof a.checkedTemplate > "u" && (a.checkedTemplate = !0), typeof a.uncheckedTemplate > "u" && (a.uncheckedTemplate = !1), bn(e), r === a.checkedTemplate || Vt(r).toLocaleLowerCase(a.locale) === Vt(a.checkedTemplate).toLocaleLowerCase(a.locale) ? c.checked = !0 : r === a.uncheckedTemplate || Vt(r).toLocaleLowerCase(a.locale) === Vt(a.uncheckedTemplate).toLocaleLowerCase(a.locale) ? c.checked = !1 : Gt(r) ? ie(c, "noValue") : (c.style.display = "none", ie(c, AW), u = !0), c.setAttribute(or, t), c.setAttribute(rr, n), !u && h) {
    let w = "";
    if (h.value)
      w = typeof h.value == "function" ? h.value.call(this, t, n, o, r) : h.value;
    else if (h.property) {
      const S = s.getDataAtRowProp(t, h.property);
      w = S !== null ? S : "";
    }
    const C = kW(l, w, h.separated !== !0);
    h.position === "before" ? h.separated ? (e.appendChild(C), e.appendChild(c)) : (C.appendChild(c), c = C) : (!h.position || h.position === "after") && (h.separated ? (e.appendChild(c), e.appendChild(C)) : (C.insertBefore(c, C.firstChild), c = C));
  }
  (!h || h && !h.separated) && e.appendChild(c), u && e.appendChild(l.createTextNode("#bad-value#")), Ev.has(s) || (Ev.set(s, !0), f());
  function f() {
    const C = s.getShortcutManager().getContext("grid"), S = {
      group: PW
    };
    C.addShortcuts([{
      keys: [["space"]],
      callback: () => (g(), !m())
    }, {
      keys: [["enter"]],
      callback: () => (g(), !m()),
      runOnlyIf: () => s.getSettings().enterBeginsEditing
    }, {
      keys: [["delete"], ["backspace"]],
      callback: () => (g(!0), !m()),
      relativeToGroup: Qr,
      position: "before"
    }], S);
  }
  function g() {
    let w = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
    const C = s.getSelectedRange();
    if (C)
      for (let S = 0; S < C.length; S++) {
        const {
          row: x,
          col: T
        } = C[S].getTopStartCorner(), {
          row: M,
          col: _
        } = C[S].getBottomEndCorner(), P = [];
        for (let j = x; j <= M; j += 1)
          for (let H = T; H <= _; H += 1) {
            const Z = s.getCellMeta(j, H);
            if (Z.type !== "checkbox")
              return;
            if (Z.readOnly === !0)
              continue;
            typeof Z.checkedTemplate > "u" && (Z.checkedTemplate = !0), typeof Z.uncheckedTemplate > "u" && (Z.uncheckedTemplate = !1);
            const X = s.getDataAtCell(j, H);
            w === !1 ? [Z.checkedTemplate, Z.checkedTemplate.toString()].includes(X) ? P.push([j, H, Z.uncheckedTemplate]) : [Z.uncheckedTemplate, Z.uncheckedTemplate.toString(), null, void 0].includes(X) && P.push([j, H, Z.checkedTemplate]) : P.push([j, H, Z.uncheckedTemplate]);
          }
        P.length > 0 && s.setDataAtCell(P);
      }
  }
  function m() {
    const w = s.getSelectedRange();
    if (w) {
      for (let C = 0; C < w.length; C++) {
        const S = w[C].getTopStartCorner(), x = w[C].getBottomEndCorner();
        for (let T = S.row; T <= x.row; T++)
          for (let M = S.col; M <= x.col; M++) {
            const _ = s.getCellMeta(T, M);
            if (_.type !== "checkbox")
              return !1;
            const P = s.getCell(T, M);
            if (P == null)
              return !0;
            if (P.querySelectorAll("input[type=checkbox]").length > 0 && !_.readOnly)
              return !0;
          }
      }
      return !1;
    }
  }
}
Ep.RENDERER_TYPE = n0;
function DW(s) {
  let e = xv.get(s);
  if (!e) {
    const {
      rootElement: t
    } = s;
    e = new Dt(s), e.addEventListener(t, "click", (n) => LW(n, s)), e.addEventListener(t, "mouseup", (n) => NW(n, s)), e.addEventListener(t, "change", (n) => $W(n, s)), xv.set(s, e);
  }
  return e;
}
function HW(s) {
  const e = s.createElement("input");
  return e.className = "htCheckboxRendererInput", e.type = "checkbox", e.setAttribute("autocomplete", "off"), e.setAttribute("tabindex", "-1"), e.cloneNode(!1);
}
function kW(s, e, t) {
  const n = s.createElement("label");
  return n.className = `htCheckboxRendererLabel ${t ? "fullWidth" : ""}`, n.appendChild(s.createTextNode(e)), n.cloneNode(!0);
}
function NW(s, e) {
  const {
    target: t
  } = s;
  xp(t) && (!t.hasAttribute(or) || !t.hasAttribute(rr) || setTimeout(e.listen, 10));
}
function LW(s, e) {
  const {
    target: t
  } = s;
  if (!xp(t) || !t.hasAttribute(or) || !t.hasAttribute(rr))
    return;
  const n = parseInt(t.getAttribute(or), 10), o = parseInt(t.getAttribute(rr), 10);
  e.getCellMeta(n, o).readOnly && s.preventDefault();
}
function $W(s, e) {
  const {
    target: t
  } = s;
  if (!xp(t) || !t.hasAttribute(or) || !t.hasAttribute(rr))
    return;
  const n = parseInt(t.getAttribute(or), 10), o = parseInt(t.getAttribute(rr), 10), r = e.getCellMeta(n, o);
  if (!r.readOnly) {
    let a = null;
    s.target.checked ? a = r.uncheckedTemplate === void 0 ? !0 : r.checkedTemplate : a = r.uncheckedTemplate === void 0 ? !1 : r.uncheckedTemplate, e.setDataAtCell(n, o, a);
  }
}
function xp(s) {
  return s.tagName === "INPUT" && s.getAttribute("type") === "checkbox";
}
function ml(s) {
  throw new Error('Could not dynamically require "' + s + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
}
var i0 = { exports: {} };
(function(s, e) {
  (function(t) {
    s.exports = t();
  })(function() {
    return function t(n, o, r) {
      function a(h, u) {
        if (!o[h]) {
          if (!n[h]) {
            var f = typeof ml == "function" && ml;
            if (!u && f)
              return f(h, !0);
            if (l)
              return l(h, !0);
            var g = new Error("Cannot find module '" + h + "'");
            throw g.code = "MODULE_NOT_FOUND", g;
          }
          var m = o[h] = { exports: {} };
          n[h][0].call(m.exports, function(w) {
            return a(n[h][1][w] || w);
          }, m, m.exports, t, n, o, r);
        }
        return o[h].exports;
      }
      for (var l = typeof ml == "function" && ml, c = 0; c < r.length; c++)
        a(r[c]);
      return a;
    }({ 1: [function(t, n, o) {
      (function(r) {
        var a, l = /^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i, c = Math.ceil, h = Math.floor, u = "[BigNumber Error] ", f = u + "Number primitive has more than 15 significant digits: ", g = 1e14, m = 14, w = 9007199254740991, C = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13], S = 1e7, x = 1e9;
        function T(X) {
          var F = 0 | X;
          return 0 < X || X === F ? F : F - 1;
        }
        function M(X) {
          for (var F, z, ee = 1, oe = X.length, fe = X[0] + ""; ee < oe; ) {
            for (F = X[ee++] + "", z = m - F.length; z--; F = "0" + F)
              ;
            fe += F;
          }
          for (oe = fe.length; fe.charCodeAt(--oe) === 48; )
            ;
          return fe.slice(0, oe + 1 || 1);
        }
        function _(X, F) {
          var z, ee, oe = X.c, fe = F.c, Ae = X.s, Ze = F.s, He = X.e, R = F.e;
          if (!Ae || !Ze)
            return null;
          if (z = oe && !oe[0], ee = fe && !fe[0], z || ee)
            return z ? ee ? 0 : -Ze : Ae;
          if (Ae != Ze)
            return Ae;
          if (z = Ae < 0, ee = He == R, !oe || !fe)
            return ee ? 0 : !oe ^ z ? 1 : -1;
          if (!ee)
            return R < He ^ z ? 1 : -1;
          for (Ze = (He = oe.length) < (R = fe.length) ? He : R, Ae = 0; Ae < Ze; Ae++)
            if (oe[Ae] != fe[Ae])
              return oe[Ae] > fe[Ae] ^ z ? 1 : -1;
          return He == R ? 0 : R < He ^ z ? 1 : -1;
        }
        function P(X, F, z, ee) {
          if (X < F || z < X || X !== (X < 0 ? c(X) : h(X)))
            throw Error(u + (ee || "Argument") + (typeof X == "number" ? X < F || z < X ? " out of range: " : " not an integer: " : " not a primitive number: ") + String(X));
        }
        function j(X) {
          var F = X.c.length - 1;
          return T(X.e / m) == F && X.c[F] % 2 != 0;
        }
        function H(X, F) {
          return (1 < X.length ? X.charAt(0) + "." + X.slice(1) : X) + (F < 0 ? "e" : "e+") + F;
        }
        function Z(X, F, z) {
          var ee, oe;
          if (F < 0) {
            for (oe = z + "."; ++F; oe += z)
              ;
            X = oe + X;
          } else if (++F > (ee = X.length)) {
            for (oe = z, F -= ee; --F; oe += z)
              ;
            X += oe;
          } else
            F < ee && (X = X.slice(0, F) + "." + X.slice(F));
          return X;
        }
        (a = function X(F) {
          var z, ee, oe, fe, Ae, Ze, He, R, d, p, v = q.prototype = { constructor: q, toString: null, valueOf: null }, E = new q(1), I = 20, A = 4, K = -7, U = 21, J = -1e7, ne = 1e7, Q = !1, Ce = 1, Fe = 0, Ie = { prefix: "", groupSize: 3, secondaryGroupSize: 0, groupSeparator: ",", decimalSeparator: ".", fractionGroupSize: 0, fractionGroupSeparator: " ", suffix: "" }, Oe = "0123456789abcdefghijklmnopqrstuvwxyz";
          function q(y, b) {
            var O, W, k, B, N, L, Y, V, G = this;
            if (!(G instanceof q))
              return new q(y, b);
            if (b == null) {
              if (y instanceof q)
                return G.s = y.s, G.e = y.e, void (G.c = (y = y.c) ? y.slice() : y);
              if ((L = typeof y == "number") && 0 * y == 0) {
                if (G.s = 1 / y < 0 ? (y = -y, -1) : 1, y === ~~y) {
                  for (B = 0, N = y; 10 <= N; N /= 10, B++)
                    ;
                  return G.e = B, void (G.c = [y]);
                }
                V = String(y);
              } else {
                if (V = String(y), !l.test(V))
                  return oe(G, V, L);
                G.s = V.charCodeAt(0) == 45 ? (V = V.slice(1), -1) : 1;
              }
              -1 < (B = V.indexOf(".")) && (V = V.replace(".", "")), 0 < (N = V.search(/e/i)) ? (B < 0 && (B = N), B += +V.slice(N + 1), V = V.substring(0, N)) : B < 0 && (B = V.length);
            } else {
              if (P(b, 2, Oe.length, "Base"), V = String(y), b == 10)
                return Le(G = new q(y instanceof q ? y : V), I + G.e + 1, A);
              if (L = typeof y == "number") {
                if (0 * y != 0)
                  return oe(G, V, L, b);
                if (G.s = 1 / y < 0 ? (V = V.slice(1), -1) : 1, q.DEBUG && 15 < V.replace(/^0\.0*|\./, "").length)
                  throw Error(f + y);
                L = !1;
              } else
                G.s = V.charCodeAt(0) === 45 ? (V = V.slice(1), -1) : 1;
              for (O = Oe.slice(0, b), B = N = 0, Y = V.length; N < Y; N++)
                if (O.indexOf(W = V.charAt(N)) < 0) {
                  if (W == ".") {
                    if (B < N) {
                      B = Y;
                      continue;
                    }
                  } else if (!k && (V == V.toUpperCase() && (V = V.toLowerCase()) || V == V.toLowerCase() && (V = V.toUpperCase()))) {
                    k = !0, N = -1, B = 0;
                    continue;
                  }
                  return oe(G, String(y), L, b);
                }
              -1 < (B = (V = ee(V, b, 10, G.s)).indexOf(".")) ? V = V.replace(".", "") : B = V.length;
            }
            for (N = 0; V.charCodeAt(N) === 48; N++)
              ;
            for (Y = V.length; V.charCodeAt(--Y) === 48; )
              ;
            if (V = V.slice(N, ++Y)) {
              if (Y -= N, L && q.DEBUG && 15 < Y && (w < y || y !== h(y)))
                throw Error(f + G.s * y);
              if (ne < (B = B - N - 1))
                G.c = G.e = null;
              else if (B < J)
                G.c = [G.e = 0];
              else {
                if (G.e = B, G.c = [], N = (B + 1) % m, B < 0 && (N += m), N < Y) {
                  for (N && G.c.push(+V.slice(0, N)), Y -= m; N < Y; )
                    G.c.push(+V.slice(N, N += m));
                  V = V.slice(N), N = m - V.length;
                } else
                  N -= Y;
                for (; N--; V += "0")
                  ;
                G.c.push(+V);
              }
            } else
              G.c = [G.e = 0];
          }
          function Qe(y, b, O, W) {
            var k, B, N, L, Y;
            if (O == null ? O = A : P(O, 0, 8), !y.c)
              return y.toString();
            if (k = y.c[0], N = y.e, b == null)
              Y = M(y.c), Y = W == 1 || W == 2 && (N <= K || U <= N) ? H(Y, N) : Z(Y, N, "0");
            else if (B = (y = Le(new q(y), b, O)).e, L = (Y = M(y.c)).length, W == 1 || W == 2 && (b <= B || B <= K)) {
              for (; L < b; Y += "0", L++)
                ;
              Y = H(Y, B);
            } else if (b -= N, Y = Z(Y, B, "0"), L < B + 1) {
              if (0 < --b)
                for (Y += "."; b--; Y += "0")
                  ;
            } else if (0 < (b += B - L))
              for (B + 1 == L && (Y += "."); b--; Y += "0")
                ;
            return y.s < 0 && k ? "-" + Y : Y;
          }
          function We(y, b) {
            for (var O, W = 1, k = new q(y[0]); W < y.length; W++) {
              if (!(O = new q(y[W])).s) {
                k = O;
                break;
              }
              b.call(k, O) && (k = O);
            }
            return k;
          }
          function xe(y, b, O) {
            for (var W = 1, k = b.length; !b[--k]; b.pop())
              ;
            for (k = b[0]; 10 <= k; k /= 10, W++)
              ;
            return (O = W + O * m - 1) > ne ? y.c = y.e = null : y.c = O < J ? [y.e = 0] : (y.e = O, b), y;
          }
          function Le(y, b, O, W) {
            var k, B, N, L, Y, V, G, le = y.c, ge = C;
            if (le) {
              e: {
                for (k = 1, L = le[0]; 10 <= L; L /= 10, k++)
                  ;
                if ((B = b - k) < 0)
                  B += m, N = b, G = (Y = le[V = 0]) / ge[k - N - 1] % 10 | 0;
                else if ((V = c((B + 1) / m)) >= le.length) {
                  if (!W)
                    break e;
                  for (; le.length <= V; le.push(0))
                    ;
                  Y = G = 0, N = (B %= m) - m + (k = 1);
                } else {
                  for (Y = L = le[V], k = 1; 10 <= L; L /= 10, k++)
                    ;
                  G = (N = (B %= m) - m + k) < 0 ? 0 : Y / ge[k - N - 1] % 10 | 0;
                }
                if (W = W || b < 0 || le[V + 1] != null || (N < 0 ? Y : Y % ge[k - N - 1]), W = O < 4 ? (G || W) && (O == 0 || O == (y.s < 0 ? 3 : 2)) : 5 < G || G == 5 && (O == 4 || W || O == 6 && (0 < B ? 0 < N ? Y / ge[k - N] : 0 : le[V - 1]) % 10 & 1 || O == (y.s < 0 ? 8 : 7)), b < 1 || !le[0])
                  return le.length = 0, W ? (b -= y.e + 1, le[0] = ge[(m - b % m) % m], y.e = -b || 0) : le[0] = y.e = 0, y;
                if (B == 0 ? (le.length = V, L = 1, V--) : (le.length = V + 1, L = ge[m - B], le[V] = 0 < N ? h(Y / ge[k - N] % ge[N]) * L : 0), W)
                  for (; ; ) {
                    if (V == 0) {
                      for (B = 1, N = le[0]; 10 <= N; N /= 10, B++)
                        ;
                      for (N = le[0] += L, L = 1; 10 <= N; N /= 10, L++)
                        ;
                      B != L && (y.e++, le[0] == g && (le[0] = 1));
                      break;
                    }
                    if (le[V] += L, le[V] != g)
                      break;
                    le[V--] = 0, L = 1;
                  }
                for (B = le.length; le[--B] === 0; le.pop())
                  ;
              }
              y.e > ne ? y.c = y.e = null : y.e < J && (y.c = [y.e = 0]);
            }
            return y;
          }
          function Ee(y) {
            var b, O = y.e;
            return O === null ? y.toString() : (b = M(y.c), b = O <= K || U <= O ? H(b, O) : Z(b, O, "0"), y.s < 0 ? "-" + b : b);
          }
          return q.clone = X, q.ROUND_UP = 0, q.ROUND_DOWN = 1, q.ROUND_CEIL = 2, q.ROUND_FLOOR = 3, q.ROUND_HALF_UP = 4, q.ROUND_HALF_DOWN = 5, q.ROUND_HALF_EVEN = 6, q.ROUND_HALF_CEIL = 7, q.ROUND_HALF_FLOOR = 8, q.EUCLID = 9, q.config = q.set = function(y) {
            var b, O;
            if (y != null) {
              if (typeof y != "object")
                throw Error(u + "Object expected: " + y);
              if (y.hasOwnProperty(b = "DECIMAL_PLACES") && (P(O = y[b], 0, x, b), I = O), y.hasOwnProperty(b = "ROUNDING_MODE") && (P(O = y[b], 0, 8, b), A = O), y.hasOwnProperty(b = "EXPONENTIAL_AT") && ((O = y[b]) && O.pop ? (P(O[0], -x, 0, b), P(O[1], 0, x, b), K = O[0], U = O[1]) : (P(O, -x, x, b), K = -(U = O < 0 ? -O : O))), y.hasOwnProperty(b = "RANGE"))
                if ((O = y[b]) && O.pop)
                  P(O[0], -x, -1, b), P(O[1], 1, x, b), J = O[0], ne = O[1];
                else {
                  if (P(O, -x, x, b), !O)
                    throw Error(u + b + " cannot be zero: " + O);
                  J = -(ne = O < 0 ? -O : O);
                }
              if (y.hasOwnProperty(b = "CRYPTO")) {
                if ((O = y[b]) !== !!O)
                  throw Error(u + b + " not true or false: " + O);
                if (O) {
                  if (typeof crypto > "u" || !crypto || !crypto.getRandomValues && !crypto.randomBytes)
                    throw Q = !O, Error(u + "crypto unavailable");
                  Q = O;
                } else
                  Q = O;
              }
              if (y.hasOwnProperty(b = "MODULO_MODE") && (P(O = y[b], 0, 9, b), Ce = O), y.hasOwnProperty(b = "POW_PRECISION") && (P(O = y[b], 0, x, b), Fe = O), y.hasOwnProperty(b = "FORMAT")) {
                if (typeof (O = y[b]) != "object")
                  throw Error(u + b + " not an object: " + O);
                Ie = O;
              }
              if (y.hasOwnProperty(b = "ALPHABET")) {
                if (typeof (O = y[b]) != "string" || /^.$|[+-.\s]|(.).*\1/.test(O))
                  throw Error(u + b + " invalid: " + O);
                Oe = O;
              }
            }
            return { DECIMAL_PLACES: I, ROUNDING_MODE: A, EXPONENTIAL_AT: [K, U], RANGE: [J, ne], CRYPTO: Q, MODULO_MODE: Ce, POW_PRECISION: Fe, FORMAT: Ie, ALPHABET: Oe };
          }, q.isBigNumber = function(y) {
            return y instanceof q || y && y._isBigNumber === !0 || !1;
          }, q.maximum = q.max = function() {
            return We(arguments, v.lt);
          }, q.minimum = q.min = function() {
            return We(arguments, v.gt);
          }, q.random = (fe = 9007199254740992, Ae = Math.random() * fe & 2097151 ? function() {
            return h(Math.random() * fe);
          } : function() {
            return 8388608 * (1073741824 * Math.random() | 0) + (8388608 * Math.random() | 0);
          }, function(y) {
            var b, O, W, k, B, N = 0, L = [], Y = new q(E);
            if (y == null ? y = I : P(y, 0, x), k = c(y / m), Q)
              if (crypto.getRandomValues) {
                for (b = crypto.getRandomValues(new Uint32Array(k *= 2)); N < k; )
                  9e15 <= (B = 131072 * b[N] + (b[N + 1] >>> 11)) ? (O = crypto.getRandomValues(new Uint32Array(2)), b[N] = O[0], b[N + 1] = O[1]) : (L.push(B % 1e14), N += 2);
                N = k / 2;
              } else {
                if (!crypto.randomBytes)
                  throw Q = !1, Error(u + "crypto unavailable");
                for (b = crypto.randomBytes(k *= 7); N < k; )
                  9e15 <= (B = 281474976710656 * (31 & b[N]) + 1099511627776 * b[N + 1] + 4294967296 * b[N + 2] + 16777216 * b[N + 3] + (b[N + 4] << 16) + (b[N + 5] << 8) + b[N + 6]) ? crypto.randomBytes(7).copy(b, N) : (L.push(B % 1e14), N += 7);
                N = k / 7;
              }
            if (!Q)
              for (; N < k; )
                (B = Ae()) < 9e15 && (L[N++] = B % 1e14);
            for (k = L[--N], y %= m, k && y && (B = C[m - y], L[N] = h(k / B) * B); L[N] === 0; L.pop(), N--)
              ;
            if (N < 0)
              L = [W = 0];
            else {
              for (W = -1; L[0] === 0; L.splice(0, 1), W -= m)
                ;
              for (N = 1, B = L[0]; 10 <= B; B /= 10, N++)
                ;
              N < m && (W -= m - N);
            }
            return Y.e = W, Y.c = L, Y;
          }), q.sum = function() {
            for (var y = 1, b = arguments, O = new q(b[0]); y < b.length; )
              O = O.plus(b[y++]);
            return O;
          }, ee = function() {
            var y = "0123456789";
            function b(O, W, k, B) {
              for (var N, L, Y = [0], V = 0, G = O.length; V < G; ) {
                for (L = Y.length; L--; Y[L] *= W)
                  ;
                for (Y[0] += B.indexOf(O.charAt(V++)), N = 0; N < Y.length; N++)
                  Y[N] > k - 1 && (Y[N + 1] == null && (Y[N + 1] = 0), Y[N + 1] += Y[N] / k | 0, Y[N] %= k);
              }
              return Y.reverse();
            }
            return function(O, W, k, B, N) {
              var L, Y, V, G, le, ge, be, Pe, Be = O.indexOf("."), gt = I, Xe = A;
              for (0 <= Be && (G = Fe, Fe = 0, O = O.replace(".", ""), ge = (Pe = new q(W)).pow(O.length - Be), Fe = G, Pe.c = b(Z(M(ge.c), ge.e, "0"), 10, k, y), Pe.e = Pe.c.length), V = G = (be = b(O, W, k, N ? (L = Oe, y) : (L = y, Oe))).length; be[--G] == 0; be.pop())
                ;
              if (!be[0])
                return L.charAt(0);
              if (Be < 0 ? --V : (ge.c = be, ge.e = V, ge.s = B, be = (ge = z(ge, Pe, gt, Xe, k)).c, le = ge.r, V = ge.e), Be = be[Y = V + gt + 1], G = k / 2, le = le || Y < 0 || be[Y + 1] != null, le = Xe < 4 ? (Be != null || le) && (Xe == 0 || Xe == (ge.s < 0 ? 3 : 2)) : G < Be || Be == G && (Xe == 4 || le || Xe == 6 && 1 & be[Y - 1] || Xe == (ge.s < 0 ? 8 : 7)), Y < 1 || !be[0])
                O = le ? Z(L.charAt(1), -gt, L.charAt(0)) : L.charAt(0);
              else {
                if (be.length = Y, le)
                  for (--k; ++be[--Y] > k; )
                    be[Y] = 0, Y || (++V, be = [1].concat(be));
                for (G = be.length; !be[--G]; )
                  ;
                for (Be = 0, O = ""; Be <= G; O += L.charAt(be[Be++]))
                  ;
                O = Z(O, V, L.charAt(0));
              }
              return O;
            };
          }(), z = function() {
            function y(W, k, B) {
              var N, L, Y, V, G = 0, le = W.length, ge = k % S, be = k / S | 0;
              for (W = W.slice(); le--; )
                G = ((L = ge * (Y = W[le] % S) + (N = be * Y + (V = W[le] / S | 0) * ge) % S * S + G) / B | 0) + (N / S | 0) + be * V, W[le] = L % B;
              return G && (W = [G].concat(W)), W;
            }
            function b(W, k, B, N) {
              var L, Y;
              if (B != N)
                Y = N < B ? 1 : -1;
              else
                for (L = Y = 0; L < B; L++)
                  if (W[L] != k[L]) {
                    Y = W[L] > k[L] ? 1 : -1;
                    break;
                  }
              return Y;
            }
            function O(W, k, B, N) {
              for (var L = 0; B--; )
                W[B] -= L, L = W[B] < k[B] ? 1 : 0, W[B] = L * N + W[B] - k[B];
              for (; !W[0] && 1 < W.length; W.splice(0, 1))
                ;
            }
            return function(W, k, B, N, L) {
              var Y, V, G, le, ge, be, Pe, Be, gt, Xe, lt, bt, fo, wr, kt, Zt, Ei, hs = W.s == k.s ? 1 : -1, zt = W.c, Ct = k.c;
              if (!(zt && zt[0] && Ct && Ct[0]))
                return new q(W.s && k.s && (zt ? !Ct || zt[0] != Ct[0] : Ct) ? zt && zt[0] == 0 || !Ct ? 0 * hs : hs / 0 : NaN);
              for (gt = (Be = new q(hs)).c = [], hs = B + (V = W.e - k.e) + 1, L || (L = g, V = T(W.e / m) - T(k.e / m), hs = hs / m | 0), G = 0; Ct[G] == (zt[G] || 0); G++)
                ;
              if (Ct[G] > (zt[G] || 0) && V--, hs < 0)
                gt.push(1), le = !0;
              else {
                for (wr = zt.length, Zt = Ct.length, hs += 2, 1 < (ge = h(L / (Ct[G = 0] + 1))) && (Ct = y(Ct, ge, L), zt = y(zt, ge, L), Zt = Ct.length, wr = zt.length), fo = Zt, lt = (Xe = zt.slice(0, Zt)).length; lt < Zt; Xe[lt++] = 0)
                  ;
                Ei = Ct.slice(), Ei = [0].concat(Ei), kt = Ct[0], Ct[1] >= L / 2 && kt++;
                do {
                  if (ge = 0, (Y = b(Ct, Xe, Zt, lt)) < 0) {
                    if (bt = Xe[0], Zt != lt && (bt = bt * L + (Xe[1] || 0)), 1 < (ge = h(bt / kt)))
                      for (L <= ge && (ge = L - 1), Pe = (be = y(Ct, ge, L)).length, lt = Xe.length; b(be, Xe, Pe, lt) == 1; )
                        ge--, O(be, Zt < Pe ? Ei : Ct, Pe, L), Pe = be.length, Y = 1;
                    else
                      ge == 0 && (Y = ge = 1), Pe = (be = Ct.slice()).length;
                    if (Pe < lt && (be = [0].concat(be)), O(Xe, be, lt, L), lt = Xe.length, Y == -1)
                      for (; b(Ct, Xe, Zt, lt) < 1; )
                        ge++, O(Xe, Zt < lt ? Ei : Ct, lt, L), lt = Xe.length;
                  } else
                    Y === 0 && (ge++, Xe = [0]);
                  gt[G++] = ge, Xe[0] ? Xe[lt++] = zt[fo] || 0 : (Xe = [zt[fo]], lt = 1);
                } while ((fo++ < wr || Xe[0] != null) && hs--);
                le = Xe[0] != null, gt[0] || gt.splice(0, 1);
              }
              if (L == g) {
                for (G = 1, hs = gt[0]; 10 <= hs; hs /= 10, G++)
                  ;
                Le(Be, B + (Be.e = G + V * m - 1) + 1, N, le);
              } else
                Be.e = V, Be.r = +le;
              return Be;
            };
          }(), Ze = /^(-?)0([xbo])(?=\w[\w.]*$)/i, He = /^([^.]+)\.$/, R = /^\.([^.]+)$/, d = /^-?(Infinity|NaN)$/, p = /^\s*\+(?=[\w.])|^\s+|\s+$/g, oe = function(y, b, O, W) {
            var k, B = O ? b : b.replace(p, "");
            if (d.test(B))
              y.s = isNaN(B) ? null : B < 0 ? -1 : 1, y.c = y.e = null;
            else {
              if (!O && (B = B.replace(Ze, function(N, L, Y) {
                return k = (Y = Y.toLowerCase()) == "x" ? 16 : Y == "b" ? 2 : 8, W && W != k ? N : L;
              }), W && (k = W, B = B.replace(He, "$1").replace(R, "0.$1")), b != B))
                return new q(B, k);
              if (q.DEBUG)
                throw Error(u + "Not a" + (W ? " base " + W : "") + " number: " + b);
              y.c = y.e = y.s = null;
            }
          }, v.absoluteValue = v.abs = function() {
            var y = new q(this);
            return y.s < 0 && (y.s = 1), y;
          }, v.comparedTo = function(y, b) {
            return _(this, new q(y, b));
          }, v.decimalPlaces = v.dp = function(y, b) {
            var O, W, k;
            if (y != null)
              return P(y, 0, x), b == null ? b = A : P(b, 0, 8), Le(new q(this), y + this.e + 1, b);
            if (!(O = this.c))
              return null;
            if (W = ((k = O.length - 1) - T(this.e / m)) * m, k = O[k])
              for (; k % 10 == 0; k /= 10, W--)
                ;
            return W < 0 && (W = 0), W;
          }, v.dividedBy = v.div = function(y, b) {
            return z(this, new q(y, b), I, A);
          }, v.dividedToIntegerBy = v.idiv = function(y, b) {
            return z(this, new q(y, b), 0, 1);
          }, v.exponentiatedBy = v.pow = function(y, b) {
            var O, W, k, B, N, L, Y, V, G = this;
            if ((y = new q(y)).c && !y.isInteger())
              throw Error(u + "Exponent not an integer: " + Ee(y));
            if (b != null && (b = new q(b)), N = 14 < y.e, !G.c || !G.c[0] || G.c[0] == 1 && !G.e && G.c.length == 1 || !y.c || !y.c[0])
              return V = new q(Math.pow(+Ee(G), N ? 2 - j(y) : +Ee(y))), b ? V.mod(b) : V;
            if (L = y.s < 0, b) {
              if (b.c ? !b.c[0] : !b.s)
                return new q(NaN);
              (W = !L && G.isInteger() && b.isInteger()) && (G = G.mod(b));
            } else {
              if (9 < y.e && (0 < G.e || G.e < -1 || (G.e == 0 ? 1 < G.c[0] || N && 24e7 <= G.c[1] : G.c[0] < 8e13 || N && G.c[0] <= 9999975e7)))
                return B = G.s < 0 && j(y) ? -0 : 0, -1 < G.e && (B = 1 / B), new q(L ? 1 / B : B);
              Fe && (B = c(Fe / m + 2));
            }
            for (Y = N ? (O = new q(0.5), L && (y.s = 1), j(y)) : (k = Math.abs(+Ee(y))) % 2, V = new q(E); ; ) {
              if (Y) {
                if (!(V = V.times(G)).c)
                  break;
                B ? V.c.length > B && (V.c.length = B) : W && (V = V.mod(b));
              }
              if (k) {
                if ((k = h(k / 2)) === 0)
                  break;
                Y = k % 2;
              } else if (Le(y = y.times(O), y.e + 1, 1), 14 < y.e)
                Y = j(y);
              else {
                if ((k = +Ee(y)) == 0)
                  break;
                Y = k % 2;
              }
              G = G.times(G), B ? G.c && G.c.length > B && (G.c.length = B) : W && (G = G.mod(b));
            }
            return W ? V : (L && (V = E.div(V)), b ? V.mod(b) : B ? Le(V, Fe, A, void 0) : V);
          }, v.integerValue = function(y) {
            var b = new q(this);
            return y == null ? y = A : P(y, 0, 8), Le(b, b.e + 1, y);
          }, v.isEqualTo = v.eq = function(y, b) {
            return _(this, new q(y, b)) === 0;
          }, v.isFinite = function() {
            return !!this.c;
          }, v.isGreaterThan = v.gt = function(y, b) {
            return 0 < _(this, new q(y, b));
          }, v.isGreaterThanOrEqualTo = v.gte = function(y, b) {
            return (b = _(this, new q(y, b))) === 1 || b === 0;
          }, v.isInteger = function() {
            return !!this.c && T(this.e / m) > this.c.length - 2;
          }, v.isLessThan = v.lt = function(y, b) {
            return _(this, new q(y, b)) < 0;
          }, v.isLessThanOrEqualTo = v.lte = function(y, b) {
            return (b = _(this, new q(y, b))) === -1 || b === 0;
          }, v.isNaN = function() {
            return !this.s;
          }, v.isNegative = function() {
            return this.s < 0;
          }, v.isPositive = function() {
            return 0 < this.s;
          }, v.isZero = function() {
            return !!this.c && this.c[0] == 0;
          }, v.minus = function(y, b) {
            var O, W, k, B, N = this, L = N.s;
            if (b = (y = new q(y, b)).s, !L || !b)
              return new q(NaN);
            if (L != b)
              return y.s = -b, N.plus(y);
            var Y = N.e / m, V = y.e / m, G = N.c, le = y.c;
            if (!Y || !V) {
              if (!G || !le)
                return G ? (y.s = -b, y) : new q(le ? N : NaN);
              if (!G[0] || !le[0])
                return le[0] ? (y.s = -b, y) : new q(G[0] ? N : A == 3 ? -0 : 0);
            }
            if (Y = T(Y), V = T(V), G = G.slice(), L = Y - V) {
              for ((k = (B = L < 0) ? (L = -L, G) : (V = Y, le)).reverse(), b = L; b--; k.push(0))
                ;
              k.reverse();
            } else
              for (W = (B = (L = G.length) < (b = le.length)) ? L : b, L = b = 0; b < W; b++)
                if (G[b] != le[b]) {
                  B = G[b] < le[b];
                  break;
                }
            if (B && (k = G, G = le, le = k, y.s = -y.s), 0 < (b = (W = le.length) - (O = G.length)))
              for (; b--; G[O++] = 0)
                ;
            for (b = g - 1; L < W; ) {
              if (G[--W] < le[W]) {
                for (O = W; O && !G[--O]; G[O] = b)
                  ;
                --G[O], G[W] += g;
              }
              G[W] -= le[W];
            }
            for (; G[0] == 0; G.splice(0, 1), --V)
              ;
            return G[0] ? xe(y, G, V) : (y.s = A == 3 ? -1 : 1, y.c = [y.e = 0], y);
          }, v.modulo = v.mod = function(y, b) {
            var O, W, k = this;
            return y = new q(y, b), !k.c || !y.s || y.c && !y.c[0] ? new q(NaN) : !y.c || k.c && !k.c[0] ? new q(k) : (Ce == 9 ? (W = y.s, y.s = 1, O = z(k, y, 0, 3), y.s = W, O.s *= W) : O = z(k, y, 0, Ce), (y = k.minus(O.times(y))).c[0] || Ce != 1 || (y.s = k.s), y);
          }, v.multipliedBy = v.times = function(y, b) {
            var O, W, k, B, N, L, Y, V, G, le, ge, be, Pe, Be, gt, Xe = this, lt = Xe.c, bt = (y = new q(y, b)).c;
            if (!(lt && bt && lt[0] && bt[0]))
              return !Xe.s || !y.s || lt && !lt[0] && !bt || bt && !bt[0] && !lt ? y.c = y.e = y.s = null : (y.s *= Xe.s, lt && bt ? (y.c = [0], y.e = 0) : y.c = y.e = null), y;
            for (W = T(Xe.e / m) + T(y.e / m), y.s *= Xe.s, (Y = lt.length) < (le = bt.length) && (Pe = lt, lt = bt, bt = Pe, k = Y, Y = le, le = k), k = Y + le, Pe = []; k--; Pe.push(0))
              ;
            for (Be = g, gt = S, k = le; 0 <= --k; ) {
              for (O = 0, ge = bt[k] % gt, be = bt[k] / gt | 0, B = k + (N = Y); k < B; )
                O = ((V = ge * (V = lt[--N] % gt) + (L = be * V + (G = lt[N] / gt | 0) * ge) % gt * gt + Pe[B] + O) / Be | 0) + (L / gt | 0) + be * G, Pe[B--] = V % Be;
              Pe[B] = O;
            }
            return O ? ++W : Pe.splice(0, 1), xe(y, Pe, W);
          }, v.negated = function() {
            var y = new q(this);
            return y.s = -y.s || null, y;
          }, v.plus = function(y, b) {
            var O, W = this, k = W.s;
            if (b = (y = new q(y, b)).s, !k || !b)
              return new q(NaN);
            if (k != b)
              return y.s = -b, W.minus(y);
            var B = W.e / m, N = y.e / m, L = W.c, Y = y.c;
            if (!B || !N) {
              if (!L || !Y)
                return new q(k / 0);
              if (!L[0] || !Y[0])
                return Y[0] ? y : new q(L[0] ? W : 0 * k);
            }
            if (B = T(B), N = T(N), L = L.slice(), k = B - N) {
              for ((O = 0 < k ? (N = B, Y) : (k = -k, L)).reverse(); k--; O.push(0))
                ;
              O.reverse();
            }
            for ((k = L.length) - (b = Y.length) < 0 && (O = Y, Y = L, L = O, b = k), k = 0; b; )
              k = (L[--b] = L[b] + Y[b] + k) / g | 0, L[b] = g === L[b] ? 0 : L[b] % g;
            return k && (L = [k].concat(L), ++N), xe(y, L, N);
          }, v.precision = v.sd = function(y, b) {
            var O, W, k;
            if (y != null && y !== !!y)
              return P(y, 1, x), b == null ? b = A : P(b, 0, 8), Le(new q(this), y, b);
            if (!(O = this.c))
              return null;
            if (W = (k = O.length - 1) * m + 1, k = O[k]) {
              for (; k % 10 == 0; k /= 10, W--)
                ;
              for (k = O[0]; 10 <= k; k /= 10, W++)
                ;
            }
            return y && this.e + 1 > W && (W = this.e + 1), W;
          }, v.shiftedBy = function(y) {
            return P(y, -w, w), this.times("1e" + y);
          }, v.squareRoot = v.sqrt = function() {
            var y, b, O, W, k, B = this, N = B.c, L = B.s, Y = B.e, V = I + 4, G = new q("0.5");
            if (L !== 1 || !N || !N[0])
              return new q(!L || L < 0 && (!N || N[0]) ? NaN : N ? B : 1 / 0);
            if ((O = (L = Math.sqrt(+Ee(B))) == 0 || L == 1 / 0 ? (((b = M(N)).length + Y) % 2 == 0 && (b += "0"), L = Math.sqrt(+b), Y = T((Y + 1) / 2) - (Y < 0 || Y % 2), new q(b = L == 1 / 0 ? "1e" + Y : (b = L.toExponential()).slice(0, b.indexOf("e") + 1) + Y)) : new q(L + "")).c[0]) {
              for ((L = (Y = O.e) + V) < 3 && (L = 0); ; )
                if (k = O, O = G.times(k.plus(z(B, k, V, 1))), M(k.c).slice(0, L) === (b = M(O.c)).slice(0, L)) {
                  if (O.e < Y && --L, (b = b.slice(L - 3, L + 1)) != "9999" && (W || b != "4999")) {
                    +b && (+b.slice(1) || b.charAt(0) != "5") || (Le(O, O.e + I + 2, 1), y = !O.times(O).eq(B));
                    break;
                  }
                  if (!W && (Le(k, k.e + I + 2, 0), k.times(k).eq(B))) {
                    O = k;
                    break;
                  }
                  V += 4, L += 4, W = 1;
                }
            }
            return Le(O, O.e + I + 1, A, y);
          }, v.toExponential = function(y, b) {
            return y != null && (P(y, 0, x), y++), Qe(this, y, b, 1);
          }, v.toFixed = function(y, b) {
            return y != null && (P(y, 0, x), y = y + this.e + 1), Qe(this, y, b);
          }, v.toFormat = function(y, b, O) {
            var W;
            if (O == null)
              y != null && b && typeof b == "object" ? (O = b, b = null) : y && typeof y == "object" ? (O = y, y = b = null) : O = Ie;
            else if (typeof O != "object")
              throw Error(u + "Argument not an object: " + O);
            if (W = this.toFixed(y, b), this.c) {
              var k, B = W.split("."), N = +O.groupSize, L = +O.secondaryGroupSize, Y = O.groupSeparator || "", V = B[0], G = B[1], le = this.s < 0, ge = le ? V.slice(1) : V, be = ge.length;
              if (L && (k = N, N = L, be -= L = k), 0 < N && 0 < be) {
                for (k = be % N || N, V = ge.substr(0, k); k < be; k += N)
                  V += Y + ge.substr(k, N);
                0 < L && (V += Y + ge.slice(k)), le && (V = "-" + V);
              }
              W = G ? V + (O.decimalSeparator || "") + ((L = +O.fractionGroupSize) ? G.replace(new RegExp("\\d{" + L + "}\\B", "g"), "$&" + (O.fractionGroupSeparator || "")) : G) : V;
            }
            return (O.prefix || "") + W + (O.suffix || "");
          }, v.toFraction = function(y) {
            var b, O, W, k, B, N, L, Y, V, G, le, ge, be = this, Pe = be.c;
            if (y != null && (!(L = new q(y)).isInteger() && (L.c || L.s !== 1) || L.lt(E)))
              throw Error(u + "Argument " + (L.isInteger() ? "out of range: " : "not an integer: ") + Ee(L));
            if (!Pe)
              return new q(be);
            for (b = new q(E), V = O = new q(E), W = Y = new q(E), ge = M(Pe), B = b.e = ge.length - be.e - 1, b.c[0] = C[(N = B % m) < 0 ? m + N : N], y = !y || 0 < L.comparedTo(b) ? 0 < B ? b : V : L, N = ne, ne = 1 / 0, L = new q(ge), Y.c[0] = 0; G = z(L, b, 0, 1), (k = O.plus(G.times(W))).comparedTo(y) != 1; )
              O = W, W = k, V = Y.plus(G.times(k = V)), Y = k, b = L.minus(G.times(k = b)), L = k;
            return k = z(y.minus(O), W, 0, 1), Y = Y.plus(k.times(V)), O = O.plus(k.times(W)), Y.s = V.s = be.s, le = z(V, W, B *= 2, A).minus(be).abs().comparedTo(z(Y, O, B, A).minus(be).abs()) < 1 ? [V, W] : [Y, O], ne = N, le;
          }, v.toNumber = function() {
            return +Ee(this);
          }, v.toPrecision = function(y, b) {
            return y != null && P(y, 1, x), Qe(this, y, b, 2);
          }, v.toString = function(y) {
            var b, O = this, W = O.s, k = O.e;
            return k === null ? W ? (b = "Infinity", W < 0 && (b = "-" + b)) : b = "NaN" : (b = y == null ? k <= K || U <= k ? H(M(O.c), k) : Z(M(O.c), k, "0") : y === 10 ? Z(M((O = Le(new q(O), I + k + 1, A)).c), O.e, "0") : (P(y, 2, Oe.length, "Base"), ee(Z(M(O.c), k, "0"), 10, y, W, !0)), W < 0 && O.c[0] && (b = "-" + b)), b;
          }, v.valueOf = v.toJSON = function() {
            return Ee(this);
          }, v._isBigNumber = !0, typeof Symbol == "function" && typeof Symbol.iterator == "symbol" && (v[Symbol.toStringTag] = "BigNumber", v[Symbol.for("nodejs.util.inspect.custom")] = v.valueOf), F != null && q.set(F), q;
        }()).default = a.BigNumber = a, n !== void 0 && n.exports ? n.exports = a : (r || (r = typeof self < "u" && self ? self : window), r.BigNumber = a);
      })(this);
    }, {}], 2: [function(t, n, o) {
      n.exports = { languageTag: "en-US", delimiters: { thousands: ",", decimal: "." }, abbreviations: { thousand: "k", million: "m", billion: "b", trillion: "t" }, spaceSeparated: !1, ordinal: function(r) {
        var a = r % 10;
        return ~~(r % 100 / 10) == 1 ? "th" : a === 1 ? "st" : a === 2 ? "nd" : a === 3 ? "rd" : "th";
      }, currency: { symbol: "$", position: "prefix", code: "USD" }, currencyFormat: { thousandSeparated: !0, totalLength: 4, spaceSeparated: !0 }, formats: { fourDigits: { totalLength: 4, spaceSeparated: !0 }, fullWithTwoDecimals: { output: "currency", thousandSeparated: !0, mantissa: 2 }, fullWithTwoDecimalsNoCurrency: { thousandSeparated: !0, mantissa: 2 }, fullWithNoDecimals: { output: "currency", thousandSeparated: !0, mantissa: 0 } } };
    }, {}], 3: [function(t, n, o) {
      function r(T, M) {
        return function(_) {
          if (Array.isArray(_))
            return _;
        }(T) || function(_, P) {
          var j = [], H = !0, Z = !1, X = void 0;
          try {
            for (var F, z = _[Symbol.iterator](); !(H = (F = z.next()).done) && (j.push(F.value), !P || j.length !== P); H = !0)
              ;
          } catch (ee) {
            Z = !0, X = ee;
          } finally {
            try {
              H || z.return == null || z.return();
            } finally {
              if (Z)
                throw X;
            }
          }
          return j;
        }(T, M) || function() {
          throw new TypeError("Invalid attempt to destructure non-iterable instance");
        }();
      }
      var a = t("./globalState"), l = t("./validating"), c = t("./parsing"), h = ["B", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"], u = { general: { scale: 1024, suffixes: h, marker: "bd" }, binary: { scale: 1024, suffixes: ["B", "KiB", "MiB", "GiB", "TiB", "PiB", "EiB", "ZiB", "YiB"], marker: "b" }, decimal: { scale: 1e3, suffixes: h, marker: "d" } }, f = { totalLength: 0, characteristic: 0, forceAverage: !1, average: !1, mantissa: -1, optionalMantissa: !0, thousandSeparated: !1, spaceSeparated: !1, negative: "sign", forceSign: !1 };
      function g(T) {
        var M = 1 < arguments.length && arguments[1] !== void 0 ? arguments[1] : {}, _ = 2 < arguments.length ? arguments[2] : void 0;
        if (typeof M == "string" && (M = c.parseFormat(M)), !l.validateFormat(M))
          return "ERROR: invalid format";
        var P = M.prefix || "", j = M.postfix || "", H = function(Z, X, F) {
          switch (X.output) {
            case "currency":
              return X = x(X, a.currentCurrencyDefaultFormat()), function(Oe, q, Qe) {
                var We = Qe.currentCurrency(), xe = Object.assign({}, f, q), Le = void 0, Ee = "", y = !!xe.totalLength || !!xe.forceAverage || xe.average, b = q.currencyPosition || We.position, O = q.currencySymbol || We.symbol;
                xe.spaceSeparated && (Ee = " "), b === "infix" && (Le = Ee + O + Ee);
                var W = S({ instance: Oe, providedFormat: q, state: Qe, decimalSeparator: Le });
                return b === "prefix" && (W = Oe._value < 0 && xe.negative === "sign" ? "-".concat(Ee).concat(O).concat(W.slice(1)) : O + Ee + W), b && b !== "postfix" || (W = W + (Ee = y ? "" : Ee) + O), W;
              }(Z, X, a);
            case "percent":
              return X = x(X, a.currentPercentageDefaultFormat()), function(Oe, q, Qe, We) {
                var xe = q.prefixSymbol, Le = S({ instance: We(100 * Oe._value), providedFormat: q, state: Qe }), Ee = Object.assign({}, f, q);
                return xe ? "%".concat(Ee.spaceSeparated ? " " : "").concat(Le) : "".concat(Le).concat(Ee.spaceSeparated ? " " : "", "%");
              }(Z, X, a, F);
            case "byte":
              return X = x(X, a.currentByteDefaultFormat()), E = Z, A = a, K = F, U = (I = X).base || "binary", J = u[U], ne = m(E._value, J.suffixes, J.scale), Q = ne.value, Ce = ne.suffix, Fe = S({ instance: K(Q), providedFormat: I, state: A, defaults: A.currentByteDefaultFormat() }), Ie = A.currentAbbreviations(), "".concat(Fe).concat(Ie.spaced ? " " : "").concat(Ce);
            case "time":
              return X = x(X, a.currentTimeDefaultFormat()), R = Z, d = Math.floor(R._value / 60 / 60), p = Math.floor((R._value - 60 * d * 60) / 60), v = Math.round(R._value - 60 * d * 60 - 60 * p), "".concat(d, ":").concat(p < 10 ? "0" : "").concat(p, ":").concat(v < 10 ? "0" : "").concat(v);
            case "ordinal":
              return X = x(X, a.currentOrdinalDefaultFormat()), z = Z, ee = X, fe = (oe = a).currentOrdinal(), Ae = Object.assign({}, f, ee), Ze = S({ instance: z, providedFormat: ee, state: oe }), He = fe(z._value), "".concat(Ze).concat(Ae.spaceSeparated ? " " : "").concat(He);
            case "number":
            default:
              return S({ instance: Z, providedFormat: X, numbro: F });
          }
          var z, ee, oe, fe, Ae, Ze, He, R, d, p, v, E, I, A, K, U, J, ne, Q, Ce, Fe, Ie;
        }(T, M, _);
        return H = (H = P + H) + j;
      }
      function m(T, M, _) {
        var P = M[0], j = Math.abs(T);
        if (_ <= j) {
          for (var H = 1; H < M.length; ++H) {
            var Z = Math.pow(_, H), X = Math.pow(_, H + 1);
            if (Z <= j && j < X) {
              P = M[H], T /= Z;
              break;
            }
          }
          P === M[0] && (T /= Math.pow(_, M.length - 1), P = M[M.length - 1]);
        }
        return { value: T, suffix: P };
      }
      function w(T) {
        for (var M = "", _ = 0; _ < T; _++)
          M += "0";
        return M;
      }
      function C(T, M) {
        return T.toString().indexOf("e") !== -1 ? function(_, P) {
          var j = _.toString(), H = r(j.split("e"), 2), Z = H[0], X = H[1], F = r(Z.split("."), 2), z = F[0], ee = F[1], oe = ee === void 0 ? "" : ee;
          if (0 < +X)
            j = z + oe + w(X - oe.length);
          else {
            var fe = ".";
            fe = +z < 0 ? "-0".concat(fe) : "0".concat(fe);
            var Ae = (w(-X - 1) + Math.abs(z) + oe).substr(0, P);
            Ae.length < P && (Ae += w(P - Ae.length)), j = fe + Ae;
          }
          return 0 < +X && 0 < P && (j += ".".concat(w(P))), j;
        }(T, M) : (Math.round(+"".concat(T, "e+").concat(M)) / Math.pow(10, M)).toFixed(M);
      }
      function S(T) {
        var M = T.instance, _ = T.providedFormat, P = T.state, j = P === void 0 ? a : P, H = T.decimalSeparator, Z = T.defaults, X = Z === void 0 ? j.currentDefaults() : Z, F = M._value;
        if (F === 0 && j.hasZeroFormat())
          return j.getZeroFormat();
        if (!isFinite(F))
          return F.toString();
        var z, ee, oe, fe, Ae, Ze, He, R, d = Object.assign({}, f, X, _), p = d.totalLength, v = p ? 0 : d.characteristic, E = d.optionalCharacteristic, I = d.forceAverage, A = !!p || !!I || d.average, K = p ? -1 : A && _.mantissa === void 0 ? 0 : d.mantissa, U = !p && (_.optionalMantissa === void 0 ? K === -1 : d.optionalMantissa), J = d.trimMantissa, ne = d.thousandSeparated, Q = d.spaceSeparated, Ce = d.negative, Fe = d.forceSign, Ie = d.exponential, Oe = "";
        if (A) {
          var q = function(y) {
            var b = y.value, O = y.forceAverage, W = y.abbreviations, k = y.spaceSeparated, B = k !== void 0 && k, N = y.totalLength, L = N === void 0 ? 0 : N, Y = "", V = Math.abs(b), G = -1;
            if (V >= Math.pow(10, 12) && !O || O === "trillion" ? (Y = W.trillion, b /= Math.pow(10, 12)) : V < Math.pow(10, 12) && V >= Math.pow(10, 9) && !O || O === "billion" ? (Y = W.billion, b /= Math.pow(10, 9)) : V < Math.pow(10, 9) && V >= Math.pow(10, 6) && !O || O === "million" ? (Y = W.million, b /= Math.pow(10, 6)) : (V < Math.pow(10, 6) && V >= Math.pow(10, 3) && !O || O === "thousand") && (Y = W.thousand, b /= Math.pow(10, 3)), Y && (Y = (B ? " " : "") + Y), L) {
              var le = b.toString().split(".")[0];
              G = Math.max(L - le.length, 0);
            }
            return { value: b, abbreviation: Y, mantissaPrecision: G };
          }({ value: F, forceAverage: I, abbreviations: j.currentAbbreviations(), spaceSeparated: Q, totalLength: p });
          F = q.value, Oe += q.abbreviation, p && (K = q.mantissaPrecision);
        }
        if (Ie) {
          var Qe = (ee = (z = { value: F, characteristicPrecision: v }).value, oe = z.characteristicPrecision, fe = oe === void 0 ? 0 : oe, Ae = r(ee.toExponential().split("e"), 2), Ze = Ae[0], He = Ae[1], R = +Ze, fe && 1 < fe && (R *= Math.pow(10, fe - 1), He = 0 <= (He = +He - (fe - 1)) ? "+".concat(He) : He), { value: R, abbreviation: "e".concat(He) });
          F = Qe.value, Oe = Qe.abbreviation + Oe;
        }
        var We, xe, Le, Ee = function(y, b, O, W, k) {
          if (W === -1)
            return y;
          var B = C(b, W), N = r(B.toString().split("."), 2), L = N[0], Y = N[1], V = Y === void 0 ? "" : Y;
          if (V.match(/^0+$/) && (O || k))
            return L;
          var G = V.match(/0+$/);
          return k && G ? "".concat(L, ".").concat(V.toString().slice(0, G.index)) : B.toString();
        }(F.toString(), F, U, K, J);
        return Ee = function(y, b, O, W, k) {
          var B = W.currentDelimiters(), N = B.thousands;
          k = k || B.decimal;
          var L = B.thousandsSize || 3, Y = y.toString(), V = Y.split(".")[0], G = Y.split(".")[1];
          return O && (b < 0 && (V = V.slice(1)), function(le, ge) {
            for (var be = [], Pe = 0, Be = le; 0 < Be; Be--)
              Pe === ge && (be.unshift(Be), Pe = 0), Pe++;
            return be;
          }(V.length, L).forEach(function(le, ge) {
            V = V.slice(0, le + ge) + N + V.slice(le + ge);
          }), b < 0 && (V = "-".concat(V))), Y = G ? V + k + G : V;
        }(Ee = function(y, b, O, W) {
          var k = y, B = r(k.toString().split("."), 2), N = B[0], L = B[1];
          if (N.match(/^-?0$/) && O)
            return L ? "".concat(N.replace("0", ""), ".").concat(L) : N.replace("0", "");
          if (N.length < W)
            for (var Y = W - N.length, V = 0; V < Y; V++)
              k = "0".concat(k);
          return k.toString();
        }(Ee, 0, E, v), F, ne, j, H), (A || Ie) && (Ee = Ee + Oe), (Fe || F < 0) && (We = Ee, Le = Ce, Ee = (xe = F) === 0 ? We : +We == 0 ? We.replace("-", "") : 0 < xe ? "+".concat(We) : Le === "sign" ? We : "(".concat(We.replace("-", ""), ")")), Ee;
      }
      function x(T, M) {
        if (!T)
          return M;
        var _ = Object.keys(T);
        return _.length === 1 && _[0] === "output" ? M : T;
      }
      n.exports = function(T) {
        return { format: function() {
          for (var M = arguments.length, _ = new Array(M), P = 0; P < M; P++)
            _[P] = arguments[P];
          return g.apply(void 0, _.concat([T]));
        }, getByteUnit: function() {
          for (var M = arguments.length, _ = new Array(M), P = 0; P < M; P++)
            _[P] = arguments[P];
          return (function(j) {
            var H = u.general;
            return m(j._value, H.suffixes, H.scale).suffix;
          }).apply(void 0, _.concat([T]));
        }, getBinaryByteUnit: function() {
          for (var M = arguments.length, _ = new Array(M), P = 0; P < M; P++)
            _[P] = arguments[P];
          return (function(j) {
            var H = u.binary;
            return m(j._value, H.suffixes, H.scale).suffix;
          }).apply(void 0, _.concat([T]));
        }, getDecimalByteUnit: function() {
          for (var M = arguments.length, _ = new Array(M), P = 0; P < M; P++)
            _[P] = arguments[P];
          return (function(j) {
            var H = u.decimal;
            return m(j._value, H.suffixes, H.scale).suffix;
          }).apply(void 0, _.concat([T]));
        }, formatOrDefault: x };
      };
    }, { "./globalState": 4, "./parsing": 8, "./validating": 10 }], 4: [function(t, n, o) {
      var r = t("./en-US"), a = t("./validating"), l = t("./parsing"), c = {}, h = void 0, u = {}, f = null, g = {};
      function m(C) {
        h = C;
      }
      function w() {
        return u[h];
      }
      c.languages = function() {
        return Object.assign({}, u);
      }, c.currentLanguage = function() {
        return h;
      }, c.currentCurrency = function() {
        return w().currency;
      }, c.currentAbbreviations = function() {
        return w().abbreviations;
      }, c.currentDelimiters = function() {
        return w().delimiters;
      }, c.currentOrdinal = function() {
        return w().ordinal;
      }, c.currentDefaults = function() {
        return Object.assign({}, w().defaults, g);
      }, c.currentOrdinalDefaultFormat = function() {
        return Object.assign({}, c.currentDefaults(), w().ordinalFormat);
      }, c.currentByteDefaultFormat = function() {
        return Object.assign({}, c.currentDefaults(), w().byteFormat);
      }, c.currentPercentageDefaultFormat = function() {
        return Object.assign({}, c.currentDefaults(), w().percentageFormat);
      }, c.currentCurrencyDefaultFormat = function() {
        return Object.assign({}, c.currentDefaults(), w().currencyFormat);
      }, c.currentTimeDefaultFormat = function() {
        return Object.assign({}, c.currentDefaults(), w().timeFormat);
      }, c.setDefaults = function(C) {
        C = l.parseFormat(C), a.validateFormat(C) && (g = C);
      }, c.getZeroFormat = function() {
        return f;
      }, c.setZeroFormat = function(C) {
        return f = typeof C == "string" ? C : null;
      }, c.hasZeroFormat = function() {
        return f !== null;
      }, c.languageData = function(C) {
        if (C) {
          if (u[C])
            return u[C];
          throw new Error('Unknown tag "'.concat(C, '"'));
        }
        return w();
      }, c.registerLanguage = function(C) {
        var S = 1 < arguments.length && arguments[1] !== void 0 && arguments[1];
        if (!a.validateLanguage(C))
          throw new Error("Invalid language data");
        u[C.languageTag] = C, S && m(C.languageTag);
      }, c.setLanguage = function(C) {
        var S = 1 < arguments.length && arguments[1] !== void 0 ? arguments[1] : r.languageTag;
        if (!u[C]) {
          var x = C.split("-")[0], T = Object.keys(u).find(function(M) {
            return M.split("-")[0] === x;
          });
          return u[T] ? void m(T) : void m(S);
        }
        m(C);
      }, c.registerLanguage(r), h = r.languageTag, n.exports = c;
    }, { "./en-US": 2, "./parsing": 8, "./validating": 10 }], 5: [function(t, n, o) {
      n.exports = function(r) {
        return { loadLanguagesInNode: function(a) {
          return l = r, void a.forEach(function(c) {
            var h = void 0;
            try {
              h = t("../languages/".concat(c));
            } catch {
              console.error('Unable to load "'.concat(c, '". No matching language file found.'));
            }
            h && l.registerLanguage(h);
          });
          var l;
        } };
      };
    }, {}], 6: [function(t, n, o) {
      var r = t("bignumber.js");
      function a(l, c, h) {
        var u = new r(l._value), f = c;
        return h.isNumbro(c) && (f = c._value), f = new r(f), l._value = u.minus(f).toNumber(), l;
      }
      n.exports = function(l) {
        return { add: function(c, h) {
          return f = h, g = l, m = new r((u = c)._value), w = f, g.isNumbro(f) && (w = f._value), w = new r(w), u._value = m.plus(w).toNumber(), u;
          var u, f, g, m, w;
        }, subtract: function(c, h) {
          return a(c, h, l);
        }, multiply: function(c, h) {
          return f = h, g = l, m = new r((u = c)._value), w = f, g.isNumbro(f) && (w = f._value), w = new r(w), u._value = m.times(w).toNumber(), u;
          var u, f, g, m, w;
        }, divide: function(c, h) {
          return f = h, g = l, m = new r((u = c)._value), w = f, g.isNumbro(f) && (w = f._value), w = new r(w), u._value = m.dividedBy(w).toNumber(), u;
          var u, f, g, m, w;
        }, set: function(c, h) {
          return u = c, g = f = h, l.isNumbro(f) && (g = f._value), u._value = g, u;
          var u, f, g;
        }, difference: function(c, h) {
          return u = h, a(g = (f = l)(c._value), u, f), Math.abs(g._value);
          var u, f, g;
        } };
      };
    }, { "bignumber.js": 1 }], 7: [function(t, n, o) {
      function r(S, x) {
        for (var T = 0; T < x.length; T++) {
          var M = x[T];
          M.enumerable = M.enumerable || !1, M.configurable = !0, "value" in M && (M.writable = !0), Object.defineProperty(S, M.key, M);
        }
      }
      var a = t("./globalState"), l = t("./validating"), c = t("./loading")(C), h = t("./unformatting"), u = t("./formatting")(C), f = t("./manipulating")(C), g = t("./parsing"), m = function() {
        function S(M) {
          (function(_, P) {
            if (!(_ instanceof P))
              throw new TypeError("Cannot call a class as a function");
          })(this, S), this._value = M;
        }
        var x, T;
        return x = S, (T = [{ key: "clone", value: function() {
          return C(this._value);
        } }, { key: "format", value: function() {
          var M = 0 < arguments.length && arguments[0] !== void 0 ? arguments[0] : {};
          return u.format(this, M);
        } }, { key: "formatCurrency", value: function(M) {
          return typeof M == "string" && (M = g.parseFormat(M)), (M = u.formatOrDefault(M, a.currentCurrencyDefaultFormat())).output = "currency", u.format(this, M);
        } }, { key: "formatTime", value: function() {
          var M = 0 < arguments.length && arguments[0] !== void 0 ? arguments[0] : {};
          return M.output = "time", u.format(this, M);
        } }, { key: "binaryByteUnits", value: function() {
          return u.getBinaryByteUnit(this);
        } }, { key: "decimalByteUnits", value: function() {
          return u.getDecimalByteUnit(this);
        } }, { key: "byteUnits", value: function() {
          return u.getByteUnit(this);
        } }, { key: "difference", value: function(M) {
          return f.difference(this, M);
        } }, { key: "add", value: function(M) {
          return f.add(this, M);
        } }, { key: "subtract", value: function(M) {
          return f.subtract(this, M);
        } }, { key: "multiply", value: function(M) {
          return f.multiply(this, M);
        } }, { key: "divide", value: function(M) {
          return f.divide(this, M);
        } }, { key: "set", value: function(M) {
          return f.set(this, w(M));
        } }, { key: "value", value: function() {
          return this._value;
        } }, { key: "valueOf", value: function() {
          return this._value;
        } }]) && r(x.prototype, T), S;
      }();
      function w(S) {
        var x = S;
        return C.isNumbro(S) ? x = S._value : typeof S == "string" ? x = C.unformat(S) : isNaN(S) && (x = NaN), x;
      }
      function C(S) {
        return new m(w(S));
      }
      C.version = "2.1.2", C.isNumbro = function(S) {
        return S instanceof m;
      }, C.language = a.currentLanguage, C.registerLanguage = a.registerLanguage, C.setLanguage = a.setLanguage, C.languages = a.languages, C.languageData = a.languageData, C.zeroFormat = a.setZeroFormat, C.defaultFormat = a.currentDefaults, C.setDefaults = a.setDefaults, C.defaultCurrencyFormat = a.currentCurrencyDefaultFormat, C.validate = l.validate, C.loadLanguagesInNode = c.loadLanguagesInNode, C.unformat = h.unformat, n.exports = C;
    }, { "./formatting": 3, "./globalState": 4, "./loading": 5, "./manipulating": 6, "./parsing": 8, "./unformatting": 9, "./validating": 10 }], 8: [function(t, n, o) {
      n.exports = { parseFormat: function(r) {
        var a, l, c, h, u, f, g, m, w, C, S, x, T, M, _, P, j, H, Z, X, F = 1 < arguments.length && arguments[1] !== void 0 ? arguments[1] : {};
        return typeof r != "string" ? r : (l = F, r = (c = (a = r).match(/^{([^}]*)}/)) ? (l.prefix = c[1], a.slice(c[0].length)) : a, u = F, function(z, ee) {
          if (z.indexOf("$") === -1) {
            if (z.indexOf("%") === -1)
              return z.indexOf("bd") !== -1 ? (ee.output = "byte", ee.base = "general") : z.indexOf("b") !== -1 ? (ee.output = "byte", ee.base = "binary") : z.indexOf("d") !== -1 ? (ee.output = "byte", ee.base = "decimal") : z.indexOf(":") === -1 ? z.indexOf("o") !== -1 && (ee.output = "ordinal") : ee.output = "time";
            ee.output = "percent";
          } else
            ee.output = "currency";
        }(r = (f = (h = r).match(/{([^}]*)}$/)) ? (u.postfix = f[1], h.slice(0, -f[0].length)) : h, F), g = F, (m = r.match(/[1-9]+[0-9]*/)) && (g.totalLength = +m[0]), w = F, (C = r.split(".")[0].match(/0+/)) && (w.characteristic = C[0].length), function(z, ee) {
          if (z.indexOf(".") !== -1) {
            var oe = z.split(".")[0];
            ee.optionalCharacteristic = oe.indexOf("0") === -1;
          }
        }(r, F), S = F, r.indexOf("a") !== -1 && (S.average = !0), T = F, (x = r).indexOf("K") !== -1 ? T.forceAverage = "thousand" : x.indexOf("M") !== -1 ? T.forceAverage = "million" : x.indexOf("B") !== -1 ? T.forceAverage = "billion" : x.indexOf("T") !== -1 && (T.forceAverage = "trillion"), function(z, ee) {
          var oe = z.split(".")[1];
          if (oe) {
            var fe = oe.match(/0+/);
            fe && (ee.mantissa = fe[0].length);
          }
        }(r, F), _ = F, (M = r).match(/\[\.]/) ? _.optionalMantissa = !0 : M.match(/\./) && (_.optionalMantissa = !1), P = F, r.indexOf(",") !== -1 && (P.thousandSeparated = !0), j = F, r.indexOf(" ") !== -1 && (j.spaceSeparated = !0), Z = F, (H = r).match(/^\+?\([^)]*\)$/) && (Z.negative = "parenthesis"), H.match(/^\+?-/) && (Z.negative = "sign"), X = F, r.match(/^\+/) && (X.forceSign = !0), F);
      } };
    }, {}], 9: [function(t, n, o) {
      var r = [{ key: "ZiB", factor: Math.pow(1024, 7) }, { key: "ZB", factor: Math.pow(1e3, 7) }, { key: "YiB", factor: Math.pow(1024, 8) }, { key: "YB", factor: Math.pow(1e3, 8) }, { key: "TiB", factor: Math.pow(1024, 4) }, { key: "TB", factor: Math.pow(1e3, 4) }, { key: "PiB", factor: Math.pow(1024, 5) }, { key: "PB", factor: Math.pow(1e3, 5) }, { key: "MiB", factor: Math.pow(1024, 2) }, { key: "MB", factor: Math.pow(1e3, 2) }, { key: "KiB", factor: Math.pow(1024, 1) }, { key: "KB", factor: Math.pow(1e3, 1) }, { key: "GiB", factor: Math.pow(1024, 3) }, { key: "GB", factor: Math.pow(1e3, 3) }, { key: "EiB", factor: Math.pow(1024, 6) }, { key: "EB", factor: Math.pow(1e3, 6) }, { key: "B", factor: 1 }];
      function a(c) {
        return c.replace(/[-/\\^$*+?.()|[\]{}]/g, "\\$&");
      }
      function l(c, h) {
        var u = 2 < arguments.length && arguments[2] !== void 0 ? arguments[2] : "", f = 3 < arguments.length ? arguments[3] : void 0, g = 4 < arguments.length ? arguments[4] : void 0, m = 5 < arguments.length ? arguments[5] : void 0, w = 6 < arguments.length ? arguments[6] : void 0;
        if (c !== "")
          return c === g ? 0 : function C(S, x) {
            var T = 2 < arguments.length && arguments[2] !== void 0 ? arguments[2] : "", M = 3 < arguments.length ? arguments[3] : void 0, _ = 4 < arguments.length ? arguments[4] : void 0, P = 5 < arguments.length ? arguments[5] : void 0, j = 6 < arguments.length ? arguments[6] : void 0;
            if (!isNaN(+S))
              return +S;
            var H = "", Z = S.replace(/(^[^(]*)\((.*)\)([^)]*$)/, "$1$2$3");
            if (Z !== S)
              return -1 * C(Z, x, T, M, _, P, j);
            for (var X = 0; X < r.length; X++) {
              var F = r[X];
              if ((H = S.replace(F.key, "")) !== S)
                return C(H, x, T, M, _, P, j) * F.factor;
            }
            if ((H = S.replace("%", "")) !== S)
              return C(H, x, T, M, _, P, j) / 100;
            var z = parseFloat(S);
            if (!isNaN(z)) {
              var ee = M(z);
              if (ee && ee !== "." && (H = S.replace(new RegExp("".concat(a(ee), "$")), "")) !== S)
                return C(H, x, T, M, _, P, j);
              var oe = {};
              Object.keys(P).forEach(function(p) {
                oe[P[p]] = p;
              });
              for (var fe = Object.keys(oe).sort().reverse(), Ae = fe.length, Ze = 0; Ze < Ae; Ze++) {
                var He = fe[Ze], R = oe[He];
                if ((H = S.replace(He, "")) !== S) {
                  var d = void 0;
                  switch (R) {
                    case "thousand":
                      d = Math.pow(10, 3);
                      break;
                    case "million":
                      d = Math.pow(10, 6);
                      break;
                    case "billion":
                      d = Math.pow(10, 9);
                      break;
                    case "trillion":
                      d = Math.pow(10, 12);
                  }
                  return C(H, x, T, M, _, P, j) * d;
                }
              }
            }
          }(function(C, S) {
            var x = 2 < arguments.length && arguments[2] !== void 0 ? arguments[2] : "", T = C.replace(x, "");
            return T = (T = T.replace(new RegExp("([0-9])".concat(a(S.thousands), "([0-9])"), "g"), "$1$2")).replace(S.decimal, ".");
          }(c, h, u), h, u, f, g, m, w);
      }
      n.exports = { unformat: function(c, h) {
        var u, f, g, m = t("./globalState"), w = m.currentDelimiters(), C = m.currentCurrency().symbol, S = m.currentOrdinal(), x = m.getZeroFormat(), T = m.currentAbbreviations(), M = void 0;
        if (typeof c == "string")
          M = function(_, P) {
            if (!_.indexOf(":") || P.thousands === ":")
              return !1;
            var j = _.split(":");
            if (j.length !== 3)
              return !1;
            var H = +j[0], Z = +j[1], X = +j[2];
            return !isNaN(H) && !isNaN(Z) && !isNaN(X);
          }(c, w) ? (u = c.split(":"), f = +u[0], g = +u[1], +u[2] + 60 * g + 3600 * f) : l(c, w, C, S, x, T, h);
        else {
          if (typeof c != "number")
            return;
          M = c;
        }
        if (M !== void 0)
          return M;
      } };
    }, { "./globalState": 4 }], 10: [function(t, n, o) {
      function r(w) {
        return function(C) {
          if (Array.isArray(C)) {
            for (var S = 0, x = new Array(C.length); S < C.length; S++)
              x[S] = C[S];
            return x;
          }
        }(w) || function(C) {
          if (Symbol.iterator in Object(C) || Object.prototype.toString.call(C) === "[object Arguments]")
            return Array.from(C);
        }(w) || function() {
          throw new TypeError("Invalid attempt to spread non-iterable instance");
        }();
      }
      function a(w) {
        return (a = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(C) {
          return typeof C;
        } : function(C) {
          return C && typeof Symbol == "function" && C.constructor === Symbol && C !== Symbol.prototype ? "symbol" : typeof C;
        })(w);
      }
      var l = t("./unformatting"), c = /^[a-z]{2,3}(-[a-zA-Z]{4})?(-([A-Z]{2}|[0-9]{3}))?$/, h = { output: { type: "string", validValues: ["currency", "percent", "byte", "time", "ordinal", "number"] }, base: { type: "string", validValues: ["decimal", "binary", "general"], restriction: function(w, C) {
        return C.output === "byte";
      }, message: "`base` must be provided only when the output is `byte`", mandatory: function(w) {
        return w.output === "byte";
      } }, characteristic: { type: "number", restriction: function(w) {
        return 0 <= w;
      }, message: "value must be positive" }, prefix: "string", postfix: "string", forceAverage: { type: "string", validValues: ["trillion", "billion", "million", "thousand"] }, average: "boolean", currencyPosition: { type: "string", validValues: ["prefix", "infix", "postfix"] }, currencySymbol: "string", totalLength: { type: "number", restrictions: [{ restriction: function(w) {
        return 0 <= w;
      }, message: "value must be positive" }, { restriction: function(w, C) {
        return !C.exponential;
      }, message: "`totalLength` is incompatible with `exponential`" }] }, mantissa: { type: "number", restriction: function(w) {
        return 0 <= w;
      }, message: "value must be positive" }, optionalMantissa: "boolean", trimMantissa: "boolean", optionalCharacteristic: "boolean", thousandSeparated: "boolean", spaceSeparated: "boolean", abbreviations: { type: "object", children: { thousand: "string", million: "string", billion: "string", trillion: "string" } }, negative: { type: "string", validValues: ["sign", "parenthesis"] }, forceSign: "boolean", exponential: { type: "boolean" }, prefixSymbol: { type: "boolean", restriction: function(w, C) {
        return C.output === "percent";
      }, message: "`prefixSymbol` can be provided only when the output is `percent`" } }, u = { languageTag: { type: "string", mandatory: !0, restriction: function(w) {
        return w.match(c);
      }, message: "the language tag must follow the BCP 47 specification (see https://tools.ieft.org/html/bcp47)" }, delimiters: { type: "object", children: { thousands: "string", decimal: "string", thousandsSize: "number" }, mandatory: !0 }, abbreviations: { type: "object", children: { thousand: { type: "string", mandatory: !0 }, million: { type: "string", mandatory: !0 }, billion: { type: "string", mandatory: !0 }, trillion: { type: "string", mandatory: !0 } }, mandatory: !0 }, spaceSeparated: "boolean", ordinal: { type: "function", mandatory: !0 }, currency: { type: "object", children: { symbol: "string", position: "string", code: "string" }, mandatory: !0 }, defaults: "format", ordinalFormat: "format", byteFormat: "format", percentageFormat: "format", currencyFormat: "format", timeDefaults: "format", formats: { type: "object", children: { fourDigits: { type: "format", mandatory: !0 }, fullWithTwoDecimals: { type: "format", mandatory: !0 }, fullWithTwoDecimalsNoCurrency: { type: "format", mandatory: !0 }, fullWithNoDecimals: { type: "format", mandatory: !0 } } } };
      function f(w) {
        return !!l.unformat(w);
      }
      function g(w, C, S) {
        var x = 3 < arguments.length && arguments[3] !== void 0 && arguments[3], T = Object.keys(w).map(function(M) {
          if (!C[M])
            return console.error("".concat(S, " Invalid key: ").concat(M)), !1;
          var _ = w[M], P = C[M];
          if (typeof P == "string" && (P = { type: P }), P.type === "format") {
            if (!g(_, h, "[Validate ".concat(M, "]"), !0))
              return !1;
          } else if (a(_) !== P.type)
            return console.error("".concat(S, " ").concat(M, ' type mismatched: "').concat(P.type, '" expected, "').concat(a(_), '" provided')), !1;
          if (P.restrictions && P.restrictions.length)
            for (var j = P.restrictions.length, H = 0; H < j; H++) {
              var Z = P.restrictions[H], X = Z.restriction, F = Z.message;
              if (!X(_, w))
                return console.error("".concat(S, " ").concat(M, " invalid value: ").concat(F)), !1;
            }
          return P.restriction && !P.restriction(_, w) ? (console.error("".concat(S, " ").concat(M, " invalid value: ").concat(P.message)), !1) : P.validValues && P.validValues.indexOf(_) === -1 ? (console.error("".concat(S, " ").concat(M, " invalid value: must be among ").concat(JSON.stringify(P.validValues), ', "').concat(_, '" provided')), !1) : !(P.children && !g(_, P.children, "[Validate ".concat(M, "]")));
        });
        return x || T.push.apply(T, r(Object.keys(C).map(function(M) {
          var _ = C[M];
          if (typeof _ == "string" && (_ = { type: _ }), _.mandatory) {
            var P = _.mandatory;
            if (typeof P == "function" && (P = P(w)), P && w[M] === void 0)
              return console.error("".concat(S, ' Missing mandatory key "').concat(M, '"')), !1;
          }
          return !0;
        }))), T.reduce(function(M, _) {
          return M && _;
        }, !0);
      }
      function m(w) {
        return g(w, h, "[Validate format]");
      }
      n.exports = { validate: function(w, C) {
        var S = f(w), x = m(C);
        return S && x;
      }, validateFormat: m, validateInput: f, validateLanguage: function(w) {
        return g(w, u, "[Validate language]");
      } };
    }, { "./unformatting": 9 }] }, {}, [7])(7);
  });
})(i0);
var FW = i0.exports;
const Ai = /* @__PURE__ */ Uy(FW), VW = "numeric";
function Tp(s, e, t, n, o, r, a) {
  let l = r;
  if (ys(l)) {
    const c = a.numericFormat, h = c && c.culture || "-", u = c && c.pattern, f = a.className || "", g = f.length ? f.split(" ") : [];
    if (typeof h < "u" && !Ai.languages()[h]) {
      const m = h.replace("-", ""), w = Ai.allLanguages ? Ai.allLanguages[h] : Ai[m];
      w && Ai.registerLanguage(w);
    }
    Ai.setLanguage(h), l = Ai(l).format(u || "0"), g.indexOf("htLeft") < 0 && g.indexOf("htCenter") < 0 && g.indexOf("htRight") < 0 && g.indexOf("htJustify") < 0 && g.push("htRight"), g.indexOf("htNumeric") < 0 && g.push("htNumeric"), a.className = g.join(" "), e.dir = "ltr";
  }
  Ri(s, e, t, n, o, l, a);
}
Tp.RENDERER_TYPE = VW;
const BW = "password";
function Mp(s, e, t, n, o, r, a) {
  Ri.apply(this, [s, e, t, n, o, r, a]);
  const l = a.hashLength || e.innerHTML.length, c = a.hashSymbol || "*";
  let h = "";
  Se(l - 1, () => {
    h += c;
  }), ur(e, h);
}
Mp.RENDERER_TYPE = BW;
const WW = "time";
function _p(s, e, t, n, o, r, a) {
  Ri.apply(this, [s, e, t, n, o, r, a]), e.dir = "ltr";
}
_p.RENDERER_TYPE = WW;
function UW() {
  $n(pr), $n($a), $n(Ep), $n(Rp), $n(Tp), $n(Mp), $n(Ri), $n(_p);
}
const zW = "autocomplete";
function yh(s, e) {
  let t = s;
  if (t == null && (t = ""), this.allowEmpty && t === "") {
    e(!0);
    return;
  }
  this.strict && this.source ? typeof this.source == "function" ? this.source(t, Tv(t, e)) : Tv(t, e)(this.source) : e(!0);
}
yh.VALIDATOR_TYPE = zW;
function Tv(s, e) {
  const t = s;
  return function(n) {
    let o = !1;
    for (let r = 0, a = n.length; r < a; r++)
      if (t === n[r]) {
        o = !0;
        break;
      }
    e(o);
  };
}
function YW(s) {
  const e = new Date(s);
  return isNaN((/* @__PURE__ */ new Date(`${s}T00:00`)).getDate()) ? e : new Date(e.getTime() + e.getTimezoneOffset() * 6e4);
}
const GW = "date";
function Ip(s, e) {
  const t = Zb(QR, this.instance);
  let n = s, o = !0;
  n == null && (n = "");
  let r = se(n, this.dateFormat || t.defaultDateFormat, !0).isValid(), a = se(new Date(n)).isValid() || r;
  if (this.allowEmpty && n === "" && (a = !0, r = !0), a || (o = !1), !a && r && (o = !0), a && !r)
    if (this.correctFormat === !0) {
      const l = jW(n, this.dateFormat), c = this.instance.toVisualRow(this.row), h = this.instance.toVisualColumn(this.col);
      this.instance.setDataAtCell(c, h, l, "dateValidator"), o = !0;
    } else
      o = !1;
  e(o);
}
Ip.VALIDATOR_TYPE = GW;
function jW(s, e) {
  const t = se(YW(s)), n = se(s, e), o = s.search(/[A-z]/g) > -1;
  let r;
  return t.isValid() && t.format("x") === n.format("x") || !n.isValid() || o ? r = t : r = n, r.format(e);
}
const KW = "numeric";
function Op(s, e) {
  let t = s;
  t == null && (t = ""), this.allowEmpty && t === "" ? e(!0) : e(t === "" ? !1 : ys(s));
}
Op.VALIDATOR_TYPE = KW;
const XW = [
  "YYYY-MM-DDTHH:mm:ss.SSSZ",
  "X",
  // Unix timestamp
  "x"
  // Unix ms timestamp
], qW = "time";
function Ap(s, e) {
  const t = this.timeFormat || "h:mm:ss a";
  let n = !0, o = s;
  o === null && (o = ""), o = /^\d{3,}$/.test(o) ? parseInt(o, 10) : o;
  const r = /^\d{1,2}$/.test(o);
  r && (o += ":00");
  const a = se(o, XW, !0).isValid() ? se(o) : se(o, t);
  let l = a.isValid(), c = se(o, t, !0).isValid() && !r;
  if (this.allowEmpty && o === "" && (l = !0, c = !0), l || (n = !1), !l && c && (n = !0), l && !c)
    if (this.correctFormat === !0) {
      const h = a.format(t), u = this.instance.toVisualRow(this.row), f = this.instance.toVisualColumn(this.col);
      this.instance.setDataAtCell(u, f, h, "timeValidator"), n = !0;
    } else
      n = !1;
  e(n);
}
Ap.VALIDATOR_TYPE = qW;
function ZW() {
  Ur(yh), Ur(Ip), Ur(Op), Ur(Ap);
}
const QW = "autocomplete", JW = {
  CELL_TYPE: QW,
  editor: Sp,
  renderer: pr,
  validator: yh
}, e2 = "checkbox", t2 = {
  CELL_TYPE: e2,
  editor: qR,
  renderer: Ep
}, s2 = "date", n2 = {
  CELL_TYPE: s2,
  editor: JR,
  // displays small gray arrow on right side of the cell
  renderer: pr,
  validator: Ip
}, i2 = "dropdown", o2 = {
  CELL_TYPE: i2,
  editor: bp,
  // displays small gray arrow on right side of the cell
  renderer: pr,
  validator: yh
}, r2 = "handsontable", a2 = {
  CELL_TYPE: r2,
  editor: yp,
  // displays small gray arrow on right side of the cell
  renderer: pr
}, l2 = "numeric", c2 = {
  CELL_TYPE: l2,
  editor: e0,
  renderer: Tp,
  validator: Op,
  dataType: "number"
}, h2 = "password", u2 = {
  CELL_TYPE: h2,
  editor: t0,
  renderer: Mp,
  copyable: !1
}, d2 = "time", f2 = {
  CELL_TYPE: d2,
  editor: s0,
  renderer: _p,
  validator: Ap
};
function g2() {
  gn(JW), gn(t2), gn(n2), gn(o2), gn(a2), gn(c2), gn(u2), gn(jR), gn(f2);
}
function m2(s, e) {
  p2(s, e), e.add(s);
}
function p2(s, e) {
  if (e.has(s))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function w2(s, e, t) {
  if (!e.has(s))
    throw new TypeError("attempted to get private field on non-instance");
  return t;
}
const Mv = /* @__PURE__ */ new Map([["plugin", QL], ["cell-type", UR], ["editor", qb], ["renderer", nR], ["validator", iR]]), C2 = "base", Pi = /* @__PURE__ */ new WeakMap(), Du = [];
let ln = null;
var _v = /* @__PURE__ */ new WeakSet();
class at {
  static get PLUGIN_KEY() {
    return C2;
  }
  /**
   * The `SETTING_KEYS` getter defines the keys that, when present in the config object, trigger the plugin update
   * after the `updateSettings` calls.
   * - When it returns `true`, the plugin updates after all `updateSettings` calls, regardless of the contents of the
   * config object.
   * - When it returns `false`, the plugin never updates on `updateSettings` calls.
   *
   * @returns {string[] | boolean}
   */
  static get SETTING_KEYS() {
    return [this.PLUGIN_KEY];
  }
  /**
   * @param {object} hotInstance Handsontable instance.
   */
  constructor(e) {
    m2(this, _v), Jn(this, "hot", e, {
      writable: !1
    }), Pi.set(this, {
      hooks: {}
    }), ln = null, this.pluginName = null, this.pluginsInitializedCallbacks = [], this.isPluginsReady = !1, this.enabled = !1, this.initialized = !1, this.hot.addHook("afterPluginsInitialized", () => this.onAfterPluginsInitialized()), this.hot.addHook("afterUpdateSettings", (t) => this.onUpdateSettings(t)), this.hot.addHook("beforeInit", () => this.init());
  }
  init() {
    this.pluginName = this.hot.getPluginName(this);
    const e = this.constructor.PLUGIN_DEPS, t = Array.isArray(e) ? e : [];
    if (t.length > 0) {
      const o = [];
      if (t.forEach((r) => {
        const [a, l] = r.split(":");
        if (!Mv.has(a))
          throw new Error(`Unknown plugin dependency type "${a}" was found.`);
        Mv.get(a)(l) || o.push(` - ${l} (${a})`);
      }), o.length > 0) {
        const r = [`The ${this.pluginName} plugin requires the following modules:
`, `${o.join(`
`)}
`].join("");
        Du.push(r);
      }
    }
    if (ln || (ln = sR()), ln.indexOf("UndoRedo") >= 0 && ln.splice(ln.indexOf("UndoRedo"), 1), ln.indexOf(this.pluginName) >= 0 && ln.splice(ln.indexOf(this.pluginName), 1), this.hot.addHookOnce("afterPluginsInitialized", () => {
      this.isEnabled && this.isEnabled() && this.enablePlugin();
    }), ln.length === 0) {
      if (Du.length > 0) {
        const o = [`${Du.join(`
`)}
`, "You have to import and register them manually."].join("");
        throw new Error(o);
      }
      this.hot.runHooks("afterPluginsInitialized");
    }
    this.initialized = !0;
  }
  /**
   * Enable plugin for this Handsontable instance.
   */
  enablePlugin() {
    this.enabled = !0;
  }
  /**
   * Disable plugin for this Handsontable instance.
   */
  disablePlugin() {
    this.eventManager && this.eventManager.clear(), this.clearHooks(), this.enabled = !1;
  }
  /**
   * Add listener to plugin hooks system.
   *
   * @param {string} name The hook name.
   * @param {Function} callback The listener function to add.
   */
  addHook(e, t) {
    Pi.get(this).hooks[e] = Pi.get(this).hooks[e] || [];
    const n = Pi.get(this).hooks[e];
    this.hot.addHook(e, t), n.push(t), Pi.get(this).hooks[e] = n;
  }
  /**
   * Remove all hooks listeners by hook name.
   *
   * @param {string} name The hook name.
   */
  removeHooks(e) {
    D(Pi.get(this).hooks[e] || [], (t) => {
      this.hot.removeHook(e, t);
    });
  }
  /**
   * Clear all hooks.
   */
  clearHooks() {
    const e = Pi.get(this).hooks;
    je(e, (t, n) => this.removeHooks(n)), e.length = 0;
  }
  /**
   * Register function which will be immediately called after all plugins initialized.
   *
   * @param {Function} callback The listener function to call.
   */
  callOnPluginsReady(e) {
    this.isPluginsReady ? e() : this.pluginsInitializedCallbacks.push(e);
  }
  /**
   * On after plugins initialized listener.
   *
   * @private
   */
  onAfterPluginsInitialized() {
    D(this.pluginsInitializedCallbacks, (e) => e()), this.pluginsInitializedCallbacks.length = 0, this.isPluginsReady = !0;
  }
  /**
   * On update settings listener.
   *
   * @private
   * @param {object} newSettings New set of settings passed to the `updateSettings` method.
   */
  onUpdateSettings(e) {
    const t = w2(this, _v, v2).call(this, e);
    this.isEnabled && (this.enabled && !this.isEnabled() && this.disablePlugin(), !this.enabled && this.isEnabled() && this.enablePlugin(), this.enabled && this.isEnabled() && t && this.updatePlugin(e));
  }
  /**
   * Updates the plugin to use the latest options you have specified.
   *
   * @private
   */
  updatePlugin() {
  }
  /**
   * Destroy plugin.
   */
  destroy() {
    this.eventManager && this.eventManager.destroy(), this.clearHooks(), je(this, (e, t) => {
      t !== "hot" && (this[t] = null);
    }), delete this.t, delete this.hot;
  }
}
function v2(s) {
  if (!s)
    return !1;
  const e = this.constructor.SETTING_KEYS;
  if (typeof e == "boolean")
    return e;
  for (let t = 0; t < e.length; t++)
    if (s[e[t]] !== void 0)
      return !0;
  return !1;
}
let y2 = class {
  constructor(e) {
    this.hot = e, this.container = null, this.injected = !1, this.rows = [], this.columns = [], this.samples = null, this.settings = {
      useHeaders: !0
    };
  }
  /**
   * Add row.
   *
   * @param {number} row Row index.
   * @param {Map} samples Samples Map object.
   */
  addRow(e, t) {
    if (this.columns.length)
      throw new Error("Doesn't support multi-dimensional table");
    this.rows.length || (this.container = this.createContainer(this.hot.rootElement.className));
    const n = {
      row: e
    };
    this.rows.push(n), this.samples = t, this.table = this.createTable(this.hot.table.className), this.table.colGroup.appendChild(this.createColGroupsCol()), this.table.tr.appendChild(this.createRow(e)), this.container.container.appendChild(this.table.fragment), n.table = this.table.table;
  }
  /**
   * Add a row consisting of the column headers.
   *
   * @param {Map} samples A map with sampled table values.
   */
  addColumnHeadersRow(e) {
    const t = this.hot.getColHeader(0);
    if (t != null) {
      const n = {
        row: -1
      };
      this.rows.push(n), this.container = this.createContainer(this.hot.rootElement.className), this.samples = e, this.table = this.createTable(this.hot.table.className), this.table.colGroup.appendChild(this.createColGroupsCol()), this.appendColumnHeadersRow(), this.container.container.appendChild(this.table.fragment), n.table = this.table.table;
    }
  }
  /**
   * Add column.
   *
   * @param {number} column Column index.
   * @param {Map} samples A map with sampled table values.
   */
  addColumn(e, t) {
    if (this.rows.length)
      throw new Error("Doesn't support multi-dimensional table");
    this.columns.length || (this.container = this.createContainer(this.hot.rootElement.className));
    const n = {
      col: e
    };
    this.columns.push(n), this.samples = t, this.table = this.createTable(this.hot.table.className), this.getSetting("useHeaders") && this.hot.getColHeader(e) !== null && this.hot.view.appendColHeader(e, this.table.th), this.table.tBody.appendChild(this.createCol(e)), this.container.container.appendChild(this.table.fragment), n.table = this.table.table;
  }
  /**
   * Get calculated heights.
   *
   * @param {Function} callback Callback which will be fired for each calculated row.
   */
  getHeights(e) {
    this.injected || this.injectTable(), D(this.rows, (t) => {
      e(t.row, At(t.table) - 1);
    });
  }
  /**
   * Get calculated widths.
   *
   * @param {Function} callback Callback which will be fired for each calculated column.
   */
  getWidths(e) {
    this.injected || this.injectTable(), D(this.columns, (t) => {
      const {
        width: n
      } = t.table.getBoundingClientRect();
      e(t.col, Math.ceil(n));
    });
  }
  /**
   * Set the Ghost Table settings to the provided object.
   *
   * @param {object} settings New Ghost Table Settings.
   */
  setSettings(e) {
    this.settings = e;
  }
  /**
   * Set a single setting of the Ghost Table.
   *
   * @param {string} name Setting name.
   * @param {*} value Setting value.
   */
  setSetting(e, t) {
    this.settings || (this.settings = {}), this.settings[e] = t;
  }
  /**
   * Get the Ghost Table settings.
   *
   * @returns {object|null}
   */
  getSettings() {
    return this.settings;
  }
  /**
   * Get a single Ghost Table setting.
   *
   * @param {string} name The setting name to get.
   * @returns {boolean|null}
   */
  getSetting(e) {
    return this.settings ? this.settings[e] : null;
  }
  /**
   * Create colgroup col elements.
   *
   * @returns {DocumentFragment}
   */
  createColGroupsCol() {
    const e = this.hot.rootDocument.createDocumentFragment();
    return this.hot.hasRowHeaders() && e.appendChild(this.createColElement(-1)), this.samples.forEach((t) => {
      D(t.strings, (n) => {
        e.appendChild(this.createColElement(n.col));
      });
    }), e;
  }
  /**
   * Create table row element.
   *
   * @param {number} row Row index.
   * @returns {DocumentFragment} Returns created table row elements.
   */
  createRow(e) {
    const {
      rootDocument: t
    } = this.hot, n = t.createDocumentFragment(), o = t.createElement("th");
    return this.hot.hasRowHeaders() && (this.hot.view.appendRowHeader(e, o), n.appendChild(o)), this.samples.forEach((r) => {
      D(r.strings, (a) => {
        const l = a.col, c = this.hot.getCellMeta(e, l);
        c.col = l, c.row = e;
        const h = this.hot.getCellRenderer(c), u = t.createElement("td");
        u.setAttribute("ghost-table", 1), h(this.hot, u, e, l, this.hot.colToProp(l), a.value, c), n.appendChild(u);
      });
    }), n;
  }
  /**
   * Creates DOM elements for headers and appends them to the THEAD element of the table.
   */
  appendColumnHeadersRow() {
    const {
      rootDocument: e
    } = this.hot, t = e.createDocumentFragment(), n = [];
    if (this.hot.hasRowHeaders()) {
      const o = e.createElement("th");
      n.push([-1, o]), t.appendChild(o);
    }
    this.samples.forEach((o) => {
      D(o.strings, (r) => {
        const a = r.col, l = e.createElement("th");
        n.push([a, l]), t.appendChild(l);
      });
    }), this.table.tHead.appendChild(t), D(n, (o) => {
      const [r, a] = o;
      this.hot.view.appendColHeader(r, a);
    });
  }
  /**
   * Create table column elements.
   *
   * @param {number} column Column index.
   * @returns {DocumentFragment} Returns created column table column elements.
   */
  createCol(e) {
    const {
      rootDocument: t
    } = this.hot, n = t.createDocumentFragment();
    return this.samples.forEach((o) => {
      D(o.strings, (r) => {
        const a = r.row, l = this.hot.getCellMeta(a, e);
        l.col = e, l.row = a;
        const c = this.hot.getCellRenderer(l), h = t.createElement("td"), u = t.createElement("tr");
        h.setAttribute("ghost-table", 1), c(this.hot, h, a, e, this.hot.colToProp(e), r.value, l), u.appendChild(h), n.appendChild(u);
      });
    }), n;
  }
  /**
   * Remove table from document and reset internal state.
   */
  clean() {
    this.rows.length = 0, this.rows[-1] = void 0, this.columns.length = 0, this.samples && this.samples.clear(), this.samples = null, this.removeTable();
  }
  /**
   * Inject generated table into document.
   *
   * @param {HTMLElement} [parent=null] The element to which the ghost table is injected.
   */
  injectTable() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
    this.injected || ((e || this.hot.rootElement).appendChild(this.container.fragment), this.injected = !0);
  }
  /**
   * Remove table from document.
   */
  removeTable() {
    this.injected && this.container.container.parentNode && (this.container.container.parentNode.removeChild(this.container.container), this.container = null, this.injected = !1);
  }
  /**
   * Create col element.
   *
   * @param {number} column Column index.
   * @returns {HTMLElement}
   */
  createColElement(e) {
    const t = this.hot.rootDocument.createElement("col");
    return t.style.width = `${this.hot.view._wt.wtTable.getStretchedColumnWidth(e)}px`, t;
  }
  /**
   * Create table element.
   *
   * @param {string} className The CSS classes to add.
   * @returns {object}
   */
  createTable() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
    const {
      rootDocument: t
    } = this.hot, n = t.createDocumentFragment(), o = t.createElement("table"), r = t.createElement("thead"), a = t.createElement("tbody"), l = t.createElement("colgroup"), c = t.createElement("tr"), h = t.createElement("th");
    return this.isVertical() && o.appendChild(l), this.isHorizontal() && (c.appendChild(h), r.appendChild(c), o.style.tableLayout = "auto", o.style.width = "auto"), o.appendChild(r), this.isVertical() && a.appendChild(c), o.appendChild(a), ie(o, e), n.appendChild(o), {
      fragment: n,
      table: o,
      tHead: r,
      tBody: a,
      colGroup: l,
      tr: c,
      th: h
    };
  }
  /**
   * Create container for tables.
   *
   * @param {string} className The CSS classes to add.
   * @returns {object}
   */
  createContainer() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
    const {
      rootDocument: t
    } = this.hot, n = t.createDocumentFragment(), o = t.createElement("div"), r = `htGhostTable htAutoSize ${e.trim()}`;
    return ie(o, r), n.appendChild(o), {
      fragment: n,
      container: o
    };
  }
  /**
   * Checks if table is raised vertically (checking rows).
   *
   * @returns {boolean}
   */
  isVertical() {
    return !!(this.rows.length && !this.columns.length);
  }
  /**
   * Checks if table is raised horizontally (checking columns).
   *
   * @returns {boolean}
   */
  isHorizontal() {
    return !!(this.columns.length && !this.rows.length);
  }
};
const o0 = y2;
class Pp {
  /**
   * Number of samples to take of each value length.
   *
   * @type {number}
   */
  static get SAMPLE_COUNT() {
    return 3;
  }
  constructor(e) {
    this.samples = null, this.dataFactory = e, this.customSampleCount = null, this.allowDuplicates = !1;
  }
  /**
   * Get the sample count for this instance.
   *
   * @returns {number}
   */
  getSampleCount() {
    return this.customSampleCount ? this.customSampleCount : Pp.SAMPLE_COUNT;
  }
  /**
   * Set the sample count.
   *
   * @param {number} sampleCount Number of samples to be collected.
   */
  setSampleCount(e) {
    this.customSampleCount = e;
  }
  /**
   * Set if the generator should accept duplicate values.
   *
   * @param {boolean} allowDuplicates `true` to allow duplicate values.
   */
  setAllowDuplicates(e) {
    this.allowDuplicates = e;
  }
  /**
   * Generate samples for row. You can control which area should be sampled by passing `rowRange` object and `colRange` object.
   *
   * @param {object|number} rowRange The rows range to generate the samples.
   * @param {object} colRange The column range to generate the samples.
   * @returns {object}
   */
  generateRowSamples(e, t) {
    return this.generateSamples("row", t, e);
  }
  /**
   * Generate samples for column. You can control which area should be sampled by passing `colRange` object and `rowRange` object.
   *
   * @param {object} colRange Column index.
   * @param {object} rowRange Column index.
   * @returns {object}
   */
  generateColumnSamples(e, t) {
    return this.generateSamples("col", t, e);
  }
  /**
   * Generate collection of samples.
   *
   * @param {string} type Type to generate. Can be `col` or `row`.
   * @param {object} range The range to generate the samples.
   * @param {object|number} specifierRange The range to generate the samples.
   * @returns {Map}
   */
  generateSamples(e, t, n) {
    const o = /* @__PURE__ */ new Map(), {
      from: r,
      to: a
    } = typeof n == "number" ? {
      from: n,
      to: n
    } : n;
    return Se(r, a, (l) => {
      const c = this.generateSample(e, t, l);
      o.set(l, c);
    }), o;
  }
  /**
   * Generate sample for specified type (`row` or `col`).
   *
   * @param {string} type Samples type `row` or `col`.
   * @param {object} range The range to generate the samples.
   * @param {number} specifierValue The range to generate the samples.
   * @returns {Map}
   */
  generateSample(e, t, n) {
    if (e !== "row" && e !== "col")
      throw new Error("Unsupported sample type");
    const o = /* @__PURE__ */ new Map(), r = e === "row" ? "col" : "row", a = [];
    return Se(t.from, t.to, (l) => {
      const {
        value: c,
        bundleSeed: h
      } = e === "row" ? this.dataFactory(n, l) : this.dataFactory(l, n), u = typeof h == "string" && h.length > 0;
      let f;
      u ? f = h : Ge(c) ? f = `${Object.keys(c).length}` : Array.isArray(c) ? f = `${c.length}` : f = `${Vt(c).length}`, o.has(f) || o.set(f, {
        needed: this.getSampleCount(),
        strings: []
      });
      const g = o.get(f);
      g.needed && (!(a.indexOf(c) > -1) || this.allowDuplicates || u) && (g.strings.push({
        value: c,
        [r]: l
      }), a.push(c), g.needed -= 1);
    }), o;
  }
}
const r0 = Pp;
me.getSingleton().register("modifyAutoColumnSizeSeed");
const Ir = "autoColumnSize", S2 = 10, Hu = /* @__PURE__ */ new WeakMap(), b2 = "autoColumnSize";
class ea extends at {
  static get PLUGIN_KEY() {
    return Ir;
  }
  static get PLUGIN_PRIORITY() {
    return S2;
  }
  static get SETTING_KEYS() {
    return !0;
  }
  static get CALCULATION_STEP() {
    return 50;
  }
  static get SYNC_CALCULATION_LIMIT() {
    return 50;
  }
  constructor(e) {
    super(e), Hu.set(this, {
      /**
       * Cached column header names. It is used to diff current column headers with previous state and detect which
       * columns width should be updated.
       *
       * @private
       * @type {Array}
       */
      cachedColumnHeaders: []
    }), this.ghostTable = new o0(this.hot), this.samplesGenerator = new r0((t, n) => {
      const o = this.hot.getCellMeta(t, n);
      let r = "";
      o.spanned || (r = this.hot.getDataAtCell(t, n));
      let a = "";
      return this.hot.hasHook("modifyAutoColumnSizeSeed") && (a = this.hot.runHooks("modifyAutoColumnSizeSeed", a, o, r)), {
        value: r,
        bundleSeed: a
      };
    }), this.firstCalculation = !0, this.inProgress = !1, this.measuredColumns = 0, this.columnWidthsMap = new bi(), this.hot.columnIndexMapper.registerMap(b2, this.columnWidthsMap), this.addHook("beforeColumnResize", (t, n, o) => this.onBeforeColumnResize(t, n, o));
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link #enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return this.hot.getSettings()[Ir] !== !1 && !this.hot.getSettings().colWidths;
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    var e = this;
    if (this.enabled)
      return;
    const t = this.hot.getSettings()[Ir];
    t && t.useHeaders !== null && t.useHeaders !== void 0 && this.ghostTable.setSetting("useHeaders", t.useHeaders), this.setSamplingOptions(), this.addHook("afterLoadData", function() {
      return e.onAfterLoadData(...arguments);
    }), this.addHook("beforeChangeRender", (n) => this.onBeforeChange(n)), this.addHook("afterFormulasValuesUpdate", (n) => this.onAfterFormulasValuesUpdate(n)), this.addHook("beforeViewRender", (n) => this.onBeforeViewRender(n)), this.addHook("modifyColWidth", (n, o) => this.getColumnWidth(o, n)), this.addHook("afterInit", () => this.onAfterInit()), super.enablePlugin();
  }
  /**
   * Updates the plugin's state. This method is executed when {@link Core#updateSettings} is invoked.
   */
  updatePlugin() {
    const e = this.findColumnsWhereHeaderWasChanged();
    e.length && (this.clearCache(e), this.calculateVisibleColumnsWidth()), super.updatePlugin();
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    super.disablePlugin(), this.addHook("beforeColumnResize", (e, t, n) => this.onBeforeColumnResize(e, t, n));
  }
  /**
   * Calculates visible columns width.
   */
  calculateVisibleColumnsWidth() {
    if (!this.hot.countRows())
      return;
    const t = this.hot.renderCall, n = this.getFirstVisibleColumn(), o = this.getLastVisibleColumn();
    n === -1 || o === -1 || this.calculateColumnsWidth({
      from: n,
      to: o
    }, void 0, t);
  }
  /**
   * Calculates a columns width.
   *
   * @param {number|object} colRange Visual column index or an object with `from` and `to` visual indexes as a range.
   * @param {number|object} rowRange Visual row index or an object with `from` and `to` visual indexes as a range.
   * @param {boolean} [force=false] If `true` the calculation will be processed regardless of whether the width exists in the cache.
   */
  calculateColumnsWidth() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
      from: 0,
      to: this.hot.countCols() - 1
    }, t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
      from: 0,
      to: this.hot.countRows() - 1
    }, n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1;
    const o = typeof e == "number" ? {
      from: e,
      to: e
    } : e, r = typeof t == "number" ? {
      from: t,
      to: t
    } : t;
    Se(o.from, o.to, (a) => {
      let l = this.hot.toPhysicalColumn(a);
      if (l === null && (l = a), n || this.columnWidthsMap.getValueAtIndex(l) === null && !this.hot._getColWidthFromSettings(l)) {
        const c = this.samplesGenerator.generateColumnSamples(a, r);
        D(c, (h) => {
          let [u, f] = h;
          return this.ghostTable.addColumn(u, f);
        });
      }
    }), this.ghostTable.columns.length && (this.hot.batchExecution(() => {
      this.ghostTable.getWidths((a, l) => {
        const c = this.hot.toPhysicalColumn(a);
        this.columnWidthsMap.setValueAtIndex(c, l);
      });
    }, !0), this.measuredColumns = o.to + 1, this.ghostTable.clean());
  }
  /**
   * Calculates all columns width. The calculated column will be cached in the {@link AutoColumnSize#widths} property.
   * To retrieve width for specified column use {@link AutoColumnSize#getColumnWidth} method.
   *
   * @param {object|number} rowRange Row index or an object with `from` and `to` properties which define row range.
   */
  calculateAllColumnsWidth() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
      from: 0,
      to: this.hot.countRows() - 1
    }, t = 0;
    const n = this.hot.countCols() - 1;
    let o = null;
    this.inProgress = !0;
    const r = () => {
      if (!this.hot) {
        bc(o), this.inProgress = !1;
        return;
      }
      this.calculateColumnsWidth({
        from: t,
        to: Math.min(t + ea.CALCULATION_STEP, n)
      }, e), t = t + ea.CALCULATION_STEP + 1, t < n ? o = Ag(r) : (bc(o), this.inProgress = !1, this.hot.view.adjustElementsSize());
    }, a = this.getSyncCalculationLimit();
    this.firstCalculation && a >= 0 && (this.calculateColumnsWidth({
      from: 0,
      to: a
    }, e), this.firstCalculation = !1, t = a + 1), t < n ? r() : this.inProgress = !1;
  }
  /**
   * Sets the sampling options.
   *
   * @private
   */
  setSamplingOptions() {
    const e = this.hot.getSettings()[Ir], t = e && Lt(e, "samplingRatio") ? e.samplingRatio : void 0, n = e && Lt(e, "allowSampleDuplicates") ? e.allowSampleDuplicates : void 0;
    t && !isNaN(t) && this.samplesGenerator.setSampleCount(parseInt(t, 10)), n && this.samplesGenerator.setAllowDuplicates(n);
  }
  /**
   * Recalculates all columns width (overwrite cache values).
   */
  recalculateAllColumnsWidth() {
    this.hot.view && this.hot.view._wt.wtTable.isVisible() && (this.clearCache(), this.calculateAllColumnsWidth());
  }
  /**
   * Gets value which tells how many columns should be calculated synchronously (rest of the columns will be calculated
   * asynchronously). The limit is calculated based on `syncLimit` set to `autoColumnSize` option (see {@link Options#autoColumnSize}).
   *
   * @returns {number}
   */
  getSyncCalculationLimit() {
    const e = this.hot.getSettings()[Ir];
    let t = ea.SYNC_CALCULATION_LIMIT;
    const n = this.hot.countCols() - 1;
    return Ge(e) && (t = e.syncLimit, Pb(t) ? t = Jb(n, t) : t >>= 0), Math.min(t, n);
  }
  /**
   * Gets the calculated column width.
   *
   * @param {number} column Visual column index.
   * @param {number} [defaultWidth] Default column width. It will be picked up if no calculated width found.
   * @param {boolean} [keepMinimum=true] If `true` then returned value won't be smaller then 50 (default column width).
   * @returns {number}
   */
  getColumnWidth(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : void 0, n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !0, o = t;
    return o === void 0 && (o = this.columnWidthsMap.getValueAtIndex(this.hot.toPhysicalColumn(e)), n && typeof o == "number" && (o = Math.max(o, Tg.DEFAULT_WIDTH))), o;
  }
  /**
   * Gets the first visible column.
   *
   * @returns {number} Returns visual column index, -1 if table is not rendered or if there are no columns to base the the calculations on.
   */
  getFirstVisibleColumn() {
    const e = this.hot.view._wt;
    if (e.wtViewport.columnsVisibleCalculator) {
      const t = e.wtTable.getFirstVisibleColumn();
      if (t !== -1)
        return this.hot.columnIndexMapper.getVisualFromRenderableIndex(t);
    }
    if (e.wtViewport.columnsRenderCalculator) {
      const t = e.wtTable.getFirstRenderedColumn();
      if (t !== -1)
        return this.hot.columnIndexMapper.getVisualFromRenderableIndex(t);
    }
    return -1;
  }
  /**
   * Gets the last visible column.
   *
   * @returns {number} Returns visual column index or -1 if table is not rendered.
   */
  getLastVisibleColumn() {
    const e = this.hot.view._wt;
    if (e.wtViewport.columnsVisibleCalculator) {
      const t = e.wtTable.getLastVisibleColumn();
      if (t !== -1)
        return this.hot.columnIndexMapper.getVisualFromRenderableIndex(t);
    }
    if (e.wtViewport.columnsRenderCalculator) {
      const t = e.wtTable.getLastRenderedColumn();
      if (t !== -1)
        return this.hot.columnIndexMapper.getVisualFromRenderableIndex(t);
    }
    return -1;
  }
  /**
   * Collects all columns which titles has been changed in comparison to the previous state.
   *
   * @private
   * @returns {Array} It returns an array of physical column indexes.
   */
  findColumnsWhereHeaderWasChanged() {
    const e = this.hot.getColHeader(), {
      cachedColumnHeaders: t
    } = Hu.get(this);
    return cs(e, (o, r, a) => {
      const l = t.length;
      return (l - 1 < a || t[a] !== r) && o.push(a), l - 1 < a ? t.push(r) : t[a] = r, o;
    }, []);
  }
  /**
   * Clears cache of calculated column widths. If you want to clear only selected columns pass an array with their indexes.
   * Otherwise whole cache will be cleared.
   *
   * @param {number[]} [columns] List of physical column indexes to clear.
   */
  clearCache() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
    e.length ? this.hot.batchExecution(() => {
      D(e, (t) => {
        this.columnWidthsMap.setValueAtIndex(t, null);
      });
    }, !0) : this.columnWidthsMap.clear();
  }
  /**
   * Checks if all widths were calculated. If not then return `true` (need recalculate).
   *
   * @returns {boolean}
   */
  isNeedRecalculate() {
    return !!Ws(this.columnWidthsMap.getValues().slice(0, this.measuredColumns), (e) => e === null).length;
  }
  /**
   * On before view render listener.
   *
   * @private
   */
  onBeforeViewRender() {
    this.calculateVisibleColumnsWidth(), this.isNeedRecalculate() && !this.inProgress && this.calculateAllColumnsWidth();
  }
  /**
   * On after load data listener.
   *
   * @private
   */
  onAfterLoadData() {
    this.hot.view ? this.recalculateAllColumnsWidth() : setTimeout(() => {
      this.hot && this.recalculateAllColumnsWidth();
    }, 0);
  }
  /**
   * On before change listener.
   *
   * @private
   * @param {Array} changes An array of modified data.
   */
  onBeforeChange(e) {
    const t = Ye(e, (n) => {
      let [, o] = n;
      return this.hot.toPhysicalColumn(this.hot.propToCol(o));
    });
    this.clearCache(Array.from(new Set(t)));
  }
  /**
   * On before column resize listener.
   *
   * @private
   * @param {number} size Calculated new column width.
   * @param {number} column Visual index of the resized column.
   * @param {boolean} isDblClick  Flag that determines whether there was a double-click.
   * @returns {number}
   */
  onBeforeColumnResize(e, t, n) {
    let o = e;
    return n && (this.calculateColumnsWidth(t, void 0, !0), o = this.getColumnWidth(t, void 0, !1)), o;
  }
  /**
   * On after Handsontable init fill plugin with all necessary values.
   *
   * @private
   */
  onAfterInit() {
    Hu.get(this).cachedColumnHeaders = this.hot.getColHeader();
  }
  /**
   * After formulas values updated listener.
   *
   * @private
   * @param {Array} changes An array of modified data.
   */
  onAfterFormulasValuesUpdate(e) {
    const t = Ws(e, (o) => {
      var r;
      return ue((r = o.address) === null || r === void 0 ? void 0 : r.col);
    }), n = Ye(t, (o) => o.address.col);
    this.clearCache(Array.from(new Set(n)));
  }
  /**
   * Destroys the plugin instance.
   */
  destroy() {
    this.ghostTable.clean(), super.destroy();
  }
}
const Ui = {
  horizontal: "horizontal",
  vertical: "vertical"
};
function R2(s, e, t) {
  let n, o, r;
  return e[0] === s[0] && e[1] < s[1] ? (r = "left", n = t(e[0], e[1]), o = t(e[2], s[1] - 1)) : e[2] === s[2] && e[0] === s[0] && e[3] > s[3] ? (r = "right", n = t(e[0], s[3] + 1), o = t(e[2], e[3])) : e[0] < s[0] && e[1] === s[1] ? (r = "up", n = t(e[0], e[1]), o = t(s[0] - 1, e[3])) : e[2] > s[2] && e[1] === s[1] && (r = "down", n = t(s[2] + 1, e[1]), o = t(e[2], e[3])), n && n.normalize(), o && o.normalize(), {
    directionOfDrag: r,
    startOfDragCoords: n,
    endOfDragCoords: o
  };
}
function E2(s) {
  const e = {};
  return s === !0 ? (e.directions = Object.keys(Ui), e.autoInsertRow = !0) : Ge(s) ? (ue(s.autoInsertRow) ? s.direction === Ui.horizontal ? e.autoInsertRow = !1 : e.autoInsertRow = s.autoInsertRow : e.autoInsertRow = !1, ue(s.direction) ? e.directions = [s.direction] : e.directions = Object.keys(Ui)) : typeof s == "string" ? (e.directions = [s], e.autoInsertRow = !0) : (e.directions = [], e.autoInsertRow = !1), e;
}
me.getSingleton().register("modifyAutofillRange");
me.getSingleton().register("beforeAutofill");
me.getSingleton().register("afterAutofill");
const Iv = "autofill", x2 = 20, T2 = ["fillHandle"], M2 = "insert_row_below", _2 = 200;
class I2 extends at {
  static get PLUGIN_KEY() {
    return Iv;
  }
  static get PLUGIN_PRIORITY() {
    return x2;
  }
  static get SETTING_KEYS() {
    return [Iv, ...T2];
  }
  constructor(e) {
    super(e), this.eventManager = new Dt(this), this.addingStarted = !1, this.mouseDownOnCellCorner = !1, this.mouseDragOutside = !1, this.handleDraggedCells = 0, this.directions = [], this.autoInsertRow = !1;
  }
  /**
   * Checks if the plugin is enabled in the Handsontable settings.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return this.hot.getSettings().fillHandle;
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    this.enabled || (this.mapSettings(), this.registerEvents(), this.addHook("afterOnCellCornerMouseDown", (e) => this.onAfterCellCornerMouseDown(e)), this.addHook("afterOnCellCornerDblClick", (e) => this.onCellCornerDblClick(e)), this.addHook("beforeOnCellMouseOver", (e, t) => this.onBeforeCellMouseOver(t)), super.enablePlugin());
  }
  /**
   * Updates the plugin's state.
   *
   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
   *  - `autofill`
   *  - [`fillHandle`](@/api/options.md#fillhandle)
   */
  updatePlugin() {
    this.disablePlugin(), this.enablePlugin(), super.updatePlugin();
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    this.clearMappedSettings(), super.disablePlugin();
  }
  /**
   * Gets selection data.
   *
   * @private
   * @returns {object[]} Ranges Array of objects with properties `startRow`, `startCol`, `endRow` and `endCol`.
   */
  getSelectionData() {
    const e = this.hot.getSelectedRangeLast(), {
      row: t,
      col: n
    } = e.getTopStartCorner(), {
      row: o,
      col: r
    } = e.getBottomEndCorner(), a = this.hot.runHooks("modifyCopyableRange", [{
      startRow: t,
      startCol: n,
      endRow: o,
      endCol: r
    }]), l = [], c = [], h = [];
    return D(a, (u) => {
      for (let f = u.startRow; f <= u.endRow; f += 1)
        l.indexOf(f) === -1 && l.push(f);
      for (let f = u.startCol; f <= u.endCol; f += 1)
        c.indexOf(f) === -1 && c.push(f);
    }), D(l, (u) => {
      const f = [];
      D(c, (g) => {
        f.push(this.hot.getCopyableData(u, g));
      }), h.push(f);
    }), h;
  }
  /**
   * Try to apply fill values to the area in fill border, omitting the selection border.
   *
   * @private
   * @returns {boolean} Reports if fill was applied.
   *
   * @fires Hooks#modifyAutofillRange
   * @fires Hooks#beforeAutofill
   * @fires Hooks#afterAutofill
   */
  fillIn() {
    if (this.hot.selection.highlight.getFill().isEmpty())
      return !1;
    const [e, t, n, o] = this.hot.selection.highlight.getFill().getVisualCorners(), r = this.hot.getSelectedRangeLast(), a = r.getTopStartCorner(), l = r.getBottomEndCorner();
    this.resetSelectionOfDraggedArea();
    const c = [a.row, a.col, l.row, l.col], h = this.hot.runHooks("modifyAutofillRange", [Math.min(a.row, e), Math.min(a.col, t), Math.max(l.row, n), Math.max(l.col, o)], c), {
      directionOfDrag: u,
      startOfDragCoords: f,
      endOfDragCoords: g
    } = R2(c, h, (m, w) => this.hot._createCellCoords(m, w));
    if (f && f.row > -1 && f.col > -1) {
      const m = this.getSelectionData(), w = r.clone(), C = this.hot._createCellRange(f, f, g), S = this.hot.runHooks("beforeAutofill", m, w, C, u);
      if (S === !1)
        return this.hot.selection.highlight.getFill().clear(), this.hot.render(), !1;
      let x = S;
      const T = S;
      if (["up", "left"].indexOf(u) > -1 && !(T.length === 1 && T[0].length === 0))
        if (x = [], u === "up") {
          const M = g.row - f.row + 1, _ = M % T.length;
          for (let P = 0; P < M; P++)
            x.push(T[(P + (T.length - _)) % T.length]);
        } else {
          const M = g.col - f.col + 1, _ = M % T[0].length;
          for (let P = 0; P < T.length; P++) {
            x.push([]);
            for (let j = 0; j < M; j++)
              x[P].push(T[P][(j + (T[P].length - _)) % T[P].length]);
          }
        }
      this.hot.populateFromArray(f.row, f.col, x, g.row, g.col, `${this.pluginName}.fill`, null), this.setSelection(h), this.hot.runHooks("afterAutofill", x, w, C, u), this.hot.render();
    } else
      this.hot._refreshBorders();
    return !0;
  }
  /**
   * Reduces the selection area if the handle was dragged outside of the table or on headers.
   *
   * @private
   * @param {CellCoords} coords Indexes of selection corners.
   * @returns {CellCoords}
   */
  reduceSelectionAreaIfNeeded(e) {
    return e.row < 0 && (e.row = 0), e.col < 0 && (e.col = 0), e;
  }
  /**
   * Gets the coordinates of the drag & drop borders.
   *
   * @private
   * @param {CellCoords} coordsOfSelection `CellCoords` coord object.
   * @returns {CellCoords}
   */
  getCoordsOfDragAndDropBorders(e) {
    const t = this.hot.getSelectedRangeLast(), n = t.getBottomEndCorner();
    let o = e;
    if (this.directions.includes(Ui.vertical) && this.directions.includes(Ui.horizontal)) {
      const r = t.getTopStartCorner();
      (n.col <= e.col || r.col >= e.col) && (o = this.hot._createCellCoords(n.row, e.col)), (n.row < e.row || r.row > e.row) && (o = this.hot._createCellCoords(e.row, n.col));
    } else if (this.directions.includes(Ui.vertical))
      o = this.hot._createCellCoords(e.row, n.col);
    else if (this.directions.includes(Ui.horizontal))
      o = this.hot._createCellCoords(n.row, e.col);
    else
      return;
    return this.reduceSelectionAreaIfNeeded(o);
  }
  /**
   * Show the fill border.
   *
   * @private
   * @param {CellCoords} coordsOfSelection `CellCoords` coord object.
   */
  showBorder(e) {
    const t = this.getCoordsOfDragAndDropBorders(e);
    t && this.redrawBorders(t);
  }
  /**
   * Add new row.
   *
   * @private
   */
  addRow() {
    this.hot._registerTimeout(() => {
      this.hot.alter(M2, void 0, 1, `${this.pluginName}.fill`), this.addingStarted = !1;
    }, _2);
  }
  /**
   * Add new rows if they are needed to continue auto-filling values.
   *
   * @private
   */
  addNewRowIfNeeded() {
    if (!this.hot.selection.highlight.getFill().isEmpty() && this.addingStarted === !1 && this.autoInsertRow) {
      const e = this.hot.getSelectedLast(), t = this.hot.selection.highlight.getFill().getVisualCorners(), n = this.hot.countRows();
      e[2] < n - 1 && t[2] === n - 1 && (this.addingStarted = !0, this.addRow());
    }
  }
  /**
   * Get index of last adjacent filled in row.
   *
   * @private
   * @param {Array} cornersOfSelectedCells Indexes of selection corners.
   * @returns {number} Gives number greater than or equal to zero when selection adjacent can be applied.
   *                   Or -1 when selection adjacent can't be applied.
   */
  getIndexOfLastAdjacentFilledInRow(e) {
    const t = this.hot.getData(), n = this.hot.countRows();
    let o;
    for (let r = e[2] + 1; r < n; r++) {
      for (let c = e[1]; c <= e[3]; c++)
        if (t[r][c])
          return -1;
      const a = t[r][e[1] - 1], l = t[r][e[3] + 1];
      (a || l) && (o = r);
    }
    return o;
  }
  /**
   * Adds a selection from the start area to the specific row index.
   *
   * @private
   * @param {Array} selectStartArea Selection area from which we start to create more comprehensive selection.
   * @param {number} rowIndex The row index into the selection will be added.
   */
  addSelectionFromStartAreaToSpecificRowIndex(e, t) {
    this.hot.selection.highlight.getFill().clear().add(this.hot._createCellCoords(e[0], e[1])).add(this.hot._createCellCoords(t, e[3])).commit();
  }
  /**
   * Sets selection based on passed corners.
   *
   * @private
   * @param {Array} cornersOfArea An array witch defines selection.
   */
  setSelection(e) {
    this.hot.selectCell(...Ye(e, (t) => Math.max(t, 0)), !1, !1);
  }
  /**
   * Try to select cells down to the last row in the left column and then returns if selection was applied.
   *
   * @private
   * @returns {boolean}
   */
  selectAdjacent() {
    const e = this.hot.getSelectedLast(), t = this.getIndexOfLastAdjacentFilledInRow(e);
    return t === -1 || t === void 0 ? !1 : (this.addSelectionFromStartAreaToSpecificRowIndex(e, t), !0);
  }
  /**
   * Resets selection of dragged area.
   *
   * @private
   */
  resetSelectionOfDraggedArea() {
    this.handleDraggedCells = 0, this.hot.selection.highlight.getFill().clear();
  }
  /**
   * Redraws borders.
   *
   * @private
   * @param {CellCoords} coords `CellCoords` coord object.
   */
  redrawBorders(e) {
    this.hot.selection.highlight.getFill().clear().add(this.hot.getSelectedRangeLast().from).add(this.hot.getSelectedRangeLast().to).add(e).commit(), this.hot.view.render();
  }
  /**
   * Get if mouse was dragged outside.
   *
   * @private
   * @param {MouseEvent} event `mousemove` event properties.
   * @returns {boolean}
   */
  getIfMouseWasDraggedOutside(e) {
    const {
      documentElement: t
    } = this.hot.rootDocument, n = Wt(this.hot.table).top - (this.hot.rootWindow.pageYOffset || t.scrollTop) + At(this.hot.table), o = Wt(this.hot.table).left - (this.hot.rootWindow.pageXOffset || t.scrollLeft) + ht(this.hot.table);
    return e.clientY > n && e.clientX <= o;
  }
  /**
   * Bind the events used by the plugin.
   *
   * @private
   */
  registerEvents() {
    const {
      documentElement: e
    } = this.hot.rootDocument;
    this.eventManager.addEventListener(e, "mouseup", () => this.onMouseUp()), this.eventManager.addEventListener(e, "mousemove", (t) => this.onMouseMove(t));
  }
  /**
   * On cell corner double click callback.
   *
   * @private
   */
  onCellCornerDblClick() {
    this.selectAdjacent() && this.fillIn();
  }
  /**
   * On after cell corner mouse down listener.
   *
   * @private
   */
  onAfterCellCornerMouseDown() {
    this.handleDraggedCells = 1, this.mouseDownOnCellCorner = !0;
  }
  /**
   * On before cell mouse over listener.
   *
   * @private
   * @param {CellCoords} coords `CellCoords` coord object.
   */
  onBeforeCellMouseOver(e) {
    this.mouseDownOnCellCorner && !this.hot.view.isMouseDown() && this.handleDraggedCells && (this.handleDraggedCells += 1, this.showBorder(e), this.addNewRowIfNeeded());
  }
  /**
   * On mouse up listener.
   *
   * @private
   */
  onMouseUp() {
    this.handleDraggedCells && (this.handleDraggedCells > 1 && this.fillIn(), this.handleDraggedCells = 0, this.mouseDownOnCellCorner = !1);
  }
  /**
   * On mouse move listener.
   *
   * @private
   * @param {MouseEvent} event `mousemove` event properties.
   */
  onMouseMove(e) {
    const t = this.getIfMouseWasDraggedOutside(e);
    this.addingStarted === !1 && this.handleDraggedCells > 0 && t ? (this.mouseDragOutside = !0, this.addingStarted = !0) : this.mouseDragOutside = !1, this.mouseDragOutside && this.autoInsertRow && this.addRow();
  }
  /**
   * Clears mapped settings.
   *
   * @private
   */
  clearMappedSettings() {
    this.directions.length = 0, this.autoInsertRow = !1;
  }
  /**
   * Map settings.
   *
   * @private
   */
  mapSettings() {
    const e = E2(this.hot.getSettings().fillHandle);
    this.directions = e.directions, this.autoInsertRow = e.autoInsertRow;
  }
  /**
   * Destroys the plugin instance.
   */
  destroy() {
    super.destroy();
  }
}
const pl = "autoRowSize", O2 = 40, A2 = "autoRowSize";
class ta extends at {
  static get PLUGIN_KEY() {
    return pl;
  }
  static get PLUGIN_PRIORITY() {
    return O2;
  }
  static get SETTING_KEYS() {
    return !0;
  }
  static get CALCULATION_STEP() {
    return 50;
  }
  static get SYNC_CALCULATION_LIMIT() {
    return 500;
  }
  constructor(e) {
    super(e), this.rowHeightsMap = void 0, this.headerHeight = null, this.ghostTable = new o0(this.hot), this.samplesGenerator = new r0((t, n) => {
      let o;
      return t >= 0 ? o = this.hot.getDataAtCell(t, n) : t === -1 && (o = this.hot.getColHeader(n)), {
        value: o
      };
    }), this.firstCalculation = !0, this.inProgress = !1, this.measuredRows = 0, this.rowHeightsMap = new bi(), this.hot.rowIndexMapper.registerMap(A2, this.rowHeightsMap), this.addHook("beforeRowResize", (t, n, o) => this.onBeforeRowResize(t, n, o));
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link AutoRowSize#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    const e = this.hot.getSettings()[pl];
    return e === !0 || Ge(e);
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    var e = this;
    this.enabled || (this.setSamplingOptions(), this.addHook("afterLoadData", function() {
      return e.onAfterLoadData(...arguments);
    }), this.addHook("beforeChangeRender", (t) => this.onBeforeChange(t)), this.addHook("beforeColumnResize", () => this.recalculateAllRowsHeight()), this.addHook("beforeViewRender", (t) => this.onBeforeViewRender(t)), this.addHook("modifyRowHeight", (t, n) => this.getRowHeight(n, t)), this.addHook("modifyColumnHeaderHeight", () => this.getColumnHeaderHeight()), super.enablePlugin());
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    this.headerHeight = null, super.disablePlugin(), this.addHook("beforeRowResize", (e, t, n) => this.onBeforeRowResize(e, t, n));
  }
  /**
   * Calculate a given rows height.
   *
   * @param {number|object} rowRange Row index or an object with `from` and `to` indexes as a range.
   * @param {number|object} colRange Column index or an object with `from` and `to` indexes as a range.
   * @param {boolean} [force=false] If `true` the calculation will be processed regardless of whether the width exists in the cache.
   */
  calculateRowsHeight() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
      from: 0,
      to: this.hot.countRows() - 1
    }, t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
      from: 0,
      to: this.hot.countCols() - 1
    }, n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1;
    const o = typeof e == "number" ? {
      from: e,
      to: e
    } : e, r = typeof t == "number" ? {
      from: t,
      to: t
    } : t;
    if (this.hot.getColHeader(0) !== null) {
      const a = this.samplesGenerator.generateRowSamples(-1, r);
      this.ghostTable.addColumnHeadersRow(a.get(-1));
    }
    Se(o.from, o.to, (a) => {
      if (n || this.rowHeightsMap.getValueAtIndex(a) === null) {
        const l = this.samplesGenerator.generateRowSamples(a, r);
        D(l, (c) => {
          let [h, u] = c;
          return this.ghostTable.addRow(h, u);
        });
      }
    }), this.ghostTable.rows.length && (this.hot.batchExecution(() => {
      this.ghostTable.getHeights((a, l) => {
        a < 0 ? this.headerHeight = l : this.rowHeightsMap.setValueAtIndex(this.hot.toPhysicalRow(a), l);
      });
    }, !0), this.measuredRows = o.to + 1, this.ghostTable.clean());
  }
  /**
   * Calculate all rows heights. The calculated row will be cached in the {@link AutoRowSize#heights} property.
   * To retrieve height for specified row use {@link AutoRowSize#getRowHeight} method.
   *
   * @param {object|number} colRange Row index or an object with `from` and `to` properties which define row range.
   */
  calculateAllRowsHeight() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
      from: 0,
      to: this.hot.countCols() - 1
    }, t = 0;
    const n = this.hot.countRows() - 1;
    let o = null;
    this.inProgress = !0;
    const r = () => {
      if (!this.hot) {
        bc(o), this.inProgress = !1;
        return;
      }
      this.calculateRowsHeight({
        from: t,
        to: Math.min(t + ta.CALCULATION_STEP, n)
      }, e), t = t + ta.CALCULATION_STEP + 1, t < n ? o = Ag(r) : (bc(o), this.inProgress = !1, this.hot.view.adjustElementsSize(!0), this.hot.view._wt.wtOverlays.inlineStartOverlay.needFullRender && this.hot.view._wt.wtOverlays.inlineStartOverlay.clone.draw());
    }, a = this.getSyncCalculationLimit();
    this.firstCalculation && a >= 0 && (this.calculateRowsHeight({
      from: 0,
      to: a
    }, e), this.firstCalculation = !1, t = a + 1), t < n ? r() : (this.inProgress = !1, this.hot.view.adjustElementsSize(!1));
  }
  /**
   * Sets the sampling options.
   *
   * @private
   */
  setSamplingOptions() {
    const e = this.hot.getSettings()[pl], t = e && Lt(e, "samplingRatio") ? e.samplingRatio : void 0, n = e && Lt(e, "allowSampleDuplicates") ? e.allowSampleDuplicates : void 0;
    t && !isNaN(t) && this.samplesGenerator.setSampleCount(parseInt(t, 10)), n && this.samplesGenerator.setAllowDuplicates(n);
  }
  /**
   * Recalculates all rows height (overwrite cache values).
   */
  recalculateAllRowsHeight() {
    da(this.hot.view._wt.wtTable.TABLE) && (this.clearCache(), this.calculateAllRowsHeight());
  }
  /**
   * Gets value which tells how many rows should be calculated synchronously (rest of the rows will be calculated
   * asynchronously). The limit is calculated based on `syncLimit` set to autoRowSize option (see {@link Options#autoRowSize}).
   *
   * @returns {number}
   */
  getSyncCalculationLimit() {
    const e = this.hot.getSettings()[pl];
    let t = ta.SYNC_CALCULATION_LIMIT;
    const n = this.hot.countRows() - 1;
    return Ge(e) && (t = e.syncLimit, Pb(t) ? t = Jb(n, t) : t >>= 0), Math.min(t, n);
  }
  /**
   * Get a row's height, as measured in the DOM.
   *
   * The height returned includes 1 px of the row's bottom border.
   *
   * Mind that this method is different from the
   * [`getRowHeight()`](@/api/core.md#getrowheight) method
   * of Handsontable's [Core](@/api/core.md).
   *
   * @param {number} row A visual row index.
   * @param {number} [defaultHeight] If no height is found, `defaultHeight` is returned instead.
   * @returns {number} The height of the specified row, in pixels.
   */
  getRowHeight(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : void 0;
    const n = e < 0 ? this.headerHeight : this.rowHeightsMap.getValueAtIndex(this.hot.toPhysicalRow(e));
    let o = t;
    return n !== null && n > (t || 0) && (o = n), o;
  }
  /**
   * Get the calculated column header height.
   *
   * @returns {number|undefined}
   */
  getColumnHeaderHeight() {
    return this.headerHeight;
  }
  /**
   * Get the first visible row.
   *
   * @returns {number} Returns row index, -1 if table is not rendered or if there are no rows to base the the calculations on.
   */
  getFirstVisibleRow() {
    const e = this.hot.view._wt;
    return e.wtViewport.rowsVisibleCalculator ? e.wtTable.getFirstVisibleRow() : e.wtViewport.rowsRenderCalculator ? e.wtTable.getFirstRenderedRow() : -1;
  }
  /**
   * Gets the last visible row.
   *
   * @returns {number} Returns row index or -1 if table is not rendered.
   */
  getLastVisibleRow() {
    const e = this.hot.view._wt;
    return e.wtViewport.rowsVisibleCalculator ? e.wtTable.getLastVisibleRow() : e.wtViewport.rowsRenderCalculator ? e.wtTable.getLastRenderedRow() : -1;
  }
  /**
   * Clears cached heights.
   */
  clearCache() {
    this.headerHeight = null, this.rowHeightsMap.init();
  }
  /**
   * Clears cache by range.
   *
   * @param {object|number} range Row index or an object with `from` and `to` properties which define row range.
   */
  clearCacheByRange(e) {
    const {
      from: t,
      to: n
    } = typeof e == "number" ? {
      from: e,
      to: e
    } : e;
    this.hot.batchExecution(() => {
      Se(Math.min(t, n), Math.max(t, n), (o) => {
        this.rowHeightsMap.setValueAtIndex(o, null);
      });
    }, !0);
  }
  /**
   * Checks if all heights were calculated. If not then return `true` (need recalculate).
   *
   * @returns {boolean}
   */
  isNeedRecalculate() {
    return !!Ws(this.rowHeightsMap.getValues().slice(0, this.measuredRows), (e) => e === null).length;
  }
  /**
   * On before view render listener.
   *
   * @private
   */
  onBeforeViewRender() {
    const e = this.hot.renderCall, t = this.hot.getSettings().fixedRowsBottom, n = this.getFirstVisibleRow(), o = this.getLastVisibleRow();
    if (!(n === -1 || o === -1)) {
      if (this.calculateRowsHeight({
        from: n,
        to: o
      }, void 0, e), t) {
        const r = this.hot.countRows() - 1;
        this.calculateRowsHeight({
          from: r - t,
          to: r
        });
      }
      this.isNeedRecalculate() && !this.inProgress && this.calculateAllRowsHeight();
    }
  }
  /**
   * On before row move listener.
   *
   * @private
   * @param {number} from Row index where was grabbed.
   * @param {number} to Destination row index.
   */
  onBeforeRowMove(e, t) {
    this.clearCacheByRange({
      from: e,
      to: t
    }), this.calculateAllRowsHeight();
  }
  /**
   * On before row resize listener.
   *
   * @private
   * @param {number} size The size of the current row index.
   * @param {number} row Current row index.
   * @param {boolean} isDblClick Indicates if the resize was triggered by doubleclick.
   * @returns {number}
   */
  onBeforeRowResize(e, t, n) {
    let o = e;
    return n && (this.calculateRowsHeight(t, void 0, !0), o = this.getRowHeight(t)), o;
  }
  /**
   * On after load data listener.
   *
   * @private
   */
  onAfterLoadData() {
    this.hot.view ? this.recalculateAllRowsHeight() : setTimeout(() => {
      this.hot && this.recalculateAllRowsHeight();
    }, 0);
  }
  /**
   * On before change listener.
   *
   * @private
   * @param {Array} changes 2D array containing information about each of the edited cells.
   */
  onBeforeChange(e) {
    let t = null;
    e.length === 1 ? t = e[0][0] : e.length > 1 && (t = {
      from: e[0][0],
      to: e[e.length - 1][0]
    }), t !== null && this.clearCacheByRange(t);
  }
  /**
   * Destroys the plugin instance.
   */
  destroy() {
    this.ghostTable.clean(), super.destroy();
  }
}
const {
  getListWithInsertedItems: P2,
  getListWithRemovedItems: D2
} = MR("physicallyIndexed");
class H2 extends co {
  constructor() {
    super((e) => e);
  }
  /**
   * Add values to list and reorganize.
   *
   * @private
   * @param {number} insertionIndex Position inside the list.
   * @param {Array} insertedIndexes List of inserted indexes.
   */
  insert(e, t) {
    const n = jg(this.indexedValues, t);
    this.indexedValues = P2(n, e, t, this.initValueOrFn), super.insert(e, t);
  }
  /**
   * Remove values from the list and reorganize.
   *
   * @private
   * @param {Array} removedIndexes List of removed indexes.
   */
  remove(e) {
    const t = D2(this.indexedValues, e);
    this.indexedValues = Gg(t, e), super.remove(e);
  }
}
const k2 = H2, {
  getListWithInsertedItems: N2,
  getListWithRemovedItems: L2
} = MR("physicallyIndexed");
class $2 extends co {
  constructor() {
    super((e) => e);
  }
  /**
   * Add values to list and reorganize.
   *
   * @private
   * @param {number} insertionIndex Position inside the list.
   * @param {Array} insertedIndexes List of inserted indexes.
   */
  insert(e, t) {
    this.indexedValues = N2(this.indexedValues, e, t, (n, o) => this.getNextValue(o)), super.insert(e, t);
  }
  /**
   * Remove values from the list and reorganize.
   *
   * @private
   * @param {Array} removedIndexes List of removed indexes.
   */
  remove(e) {
    this.indexedValues = L2(this.indexedValues, e), super.remove(e);
  }
  /**
   * Get next values, which should be greater than actual maximum value in the list.
   *
   * @param {number} ordinalNumber Position in the list.
   * @returns {number}
   */
  getNextValue(e) {
    return Math.max(...this.getValues()) + 1 + e;
  }
}
const F2 = $2, ku = "bindRowsWithHeaders", V2 = 210, B2 = "loose", W2 = /* @__PURE__ */ new Map([["loose", k2], ["strict", F2]]);
class U2 extends at {
  static get PLUGIN_KEY() {
    return ku;
  }
  static get PLUGIN_PRIORITY() {
    return V2;
  }
  constructor(e) {
    super(e), this.headerIndexes = null;
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link BindRowsWithHeaders#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return !!this.hot.getSettings()[ku];
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    if (this.enabled)
      return;
    let e = this.hot.getSettings()[ku];
    typeof e != "string" && (e = B2);
    const t = W2.get(e);
    this.headerIndexes = this.hot.rowIndexMapper.registerMap("bindRowsWithHeaders", new t()), this.addHook("modifyRowHeader", (n) => this.onModifyRowHeader(n)), super.enablePlugin();
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    this.hot.rowIndexMapper.unregisterMap("bindRowsWithHeaders"), super.disablePlugin();
  }
  /**
   * On modify row header listener.
   *
   * @private
   * @param {number} row Row index.
   * @returns {number}
   */
  onModifyRowHeader(e) {
    return this.headerIndexes.getValueAtIndex(this.hot.toPhysicalRow(e));
  }
  /**
   * Destroys the plugin instance.
   */
  destroy() {
    super.destroy();
  }
}
function z2(s, e, t) {
  Y2(s, e), e.set(s, t);
}
function Y2(s, e) {
  if (e.has(s))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function Nu(s, e, t) {
  return e = G2(e), e in s ? Object.defineProperty(s, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : s[e] = t, s;
}
function G2(s) {
  var e = j2(s, "string");
  return typeof e == "symbol" ? e : String(e);
}
function j2(s, e) {
  if (typeof s != "object" || s === null)
    return s;
  var t = s[Symbol.toPrimitive];
  if (t !== void 0) {
    var n = t.call(s, e || "default");
    if (typeof n != "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(s);
}
function Ov(s, e) {
  var t = a0(s, e, "get");
  return K2(s, t);
}
function K2(s, e) {
  return e.get ? e.get.call(s) : e.value;
}
function Lu(s, e, t) {
  var n = a0(s, e, "set");
  return X2(s, n, t), t;
}
function a0(s, e, t) {
  if (!e.has(s))
    throw new TypeError("attempted to " + t + " private field on non-instance");
  return e.get(s);
}
function X2(s, e, t) {
  if (e.set)
    e.set.call(s, t);
  else {
    if (!e.writable)
      throw new TypeError("attempted to set read only private field");
    e.value = t;
  }
}
const $u = "collapsibleColumns", q2 = 290, Z2 = ["nestedHeaders"], Ro = "collapsibleIndicator", Av = /* @__PURE__ */ new Map([["collapse", {
  hideColumn: !0,
  beforeHook: "beforeColumnCollapse",
  afterHook: "afterColumnCollapse"
}], ["expand", {
  hideColumn: !1,
  beforeHook: "beforeColumnExpand",
  afterHook: "afterColumnExpand"
}]]);
var Eo = /* @__PURE__ */ new WeakMap();
class Q2 extends at {
  constructor() {
    super(...arguments), Nu(this, "nestedHeadersPlugin", null), Nu(this, "eventManager", new Dt(this)), Nu(this, "headerStateManager", null), z2(this, Eo, {
      writable: !0,
      value: null
    });
  }
  static get PLUGIN_KEY() {
    return $u;
  }
  static get PLUGIN_PRIORITY() {
    return q2;
  }
  static get PLUGIN_DEPS() {
    return ["plugin:NestedHeaders"];
  }
  static get SETTING_KEYS() {
    return [$u, ...Z2];
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link CollapsibleColumns#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return !!this.hot.getSettings()[$u];
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    var e = this;
    if (this.enabled)
      return;
    const {
      nestedHeaders: t
    } = this.hot.getSettings();
    t || pt("You need to configure the Nested Headers plugin in order to use collapsible headers."), Lu(this, Eo, this.hot.columnIndexMapper.createAndRegisterIndexMap(this.pluginName, "hiding")), this.nestedHeadersPlugin = this.hot.getPlugin("nestedHeaders"), this.headerStateManager = this.nestedHeadersPlugin.getStateManager(), this.addHook("init", () => this.onInit()), this.addHook("afterLoadData", function() {
      return e.onAfterLoadData(...arguments);
    }), this.addHook("afterGetColHeader", function() {
      return e.onAfterGetColHeader(...arguments);
    }), this.addHook("beforeOnCellMouseDown", (n, o, r) => this.onBeforeOnCellMouseDown(n, o, r)), super.enablePlugin(), this.updatePlugin();
  }
  /**
   * Updates the plugin's state.
   *
   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
   *   - [`collapsibleColumns`](@/api/options.md#collapsiblecolumns)
   *   - [`nestedHeaders`](@/api/options.md#nestedheaders)
   */
  updatePlugin() {
    if (this.hot.view) {
      if (!this.nestedHeadersPlugin.detectedOverlappedHeaders) {
        const {
          collapsibleColumns: e
        } = this.hot.getSettings();
        typeof e == "boolean" ? this.headerStateManager.mapState((t) => ({
          collapsible: t.origColspan > 1
        })) : Array.isArray(e) && (this.headerStateManager.mapState(() => ({
          collapsible: !1
        })), this.headerStateManager.mergeStateWith(e));
      }
      super.updatePlugin();
    }
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    this.hot.columnIndexMapper.unregisterMap(this.pluginName), Lu(this, Eo, null), this.nestedHeadersPlugin = null, this.clearButtons(), super.disablePlugin();
  }
  /**
   * Clears the expand/collapse buttons.
   *
   * @private
   */
  clearButtons() {
    if (!this.hot.view)
      return;
    const e = this.hot.view._wt.getSetting("columnHeaders").length, t = this.hot.view._wt.wtTable.THEAD, n = this.hot.view._wt.wtOverlays.topOverlay.clone.wtTable.THEAD, o = this.hot.view._wt.wtOverlays.topInlineStartCornerOverlay ? this.hot.view._wt.wtOverlays.topInlineStartCornerOverlay.clone.wtTable.THEAD : null, r = function(a) {
      a && a.parentNode.removeChild(a);
    };
    Se(0, e - 1, (a) => {
      const l = t.childNodes[a], c = n.childNodes[a], h = o ? o.childNodes[a] : null;
      Se(0, l.childNodes.length - 1, (u) => {
        let f = l.childNodes[u].querySelector(`.${Ro}`);
        r(f), c && c.childNodes[u] && (f = c.childNodes[u].querySelector(`.${Ro}`), r(f)), o && h && h.childNodes[u] && (f = h.childNodes[u].querySelector(`.${Ro}`), r(f));
      });
    });
  }
  /**
   * Expands section at the provided coords.
   *
   * @param {object} coords Contains coordinates information. (`coords.row`, `coords.col`).
   */
  expandSection(e) {
    this.toggleCollapsibleSection([e], "expand");
  }
  /**
   * Collapses section at the provided coords.
   *
   * @param {object} coords Contains coordinates information. (`coords.row`, `coords.col`).
   */
  collapseSection(e) {
    this.toggleCollapsibleSection([e], "collapse");
  }
  /**
   * Collapses or expand all collapsible sections, depending on the action parameter.
   *
   * @param {string} action 'collapse' or 'expand'.
   */
  toggleAllCollapsibleSections(e) {
    const t = this.headerStateManager.mapNodes((n) => {
      const {
        collapsible: o,
        origColspan: r,
        headerLevel: a,
        columnIndex: l,
        isCollapsed: c
      } = n;
      if (o === !0 && r > 1 && (c && e === "expand" || !c && e === "collapse"))
        return {
          row: this.headerStateManager.levelToRowCoords(a),
          col: l
        };
    });
    this.toggleCollapsibleSection(t, e);
  }
  /**
   * Collapses all collapsible sections.
   */
  collapseAll() {
    this.toggleAllCollapsibleSections("collapse");
  }
  /**
   * Expands all collapsible sections.
   */
  expandAll() {
    this.toggleAllCollapsibleSections("expand");
  }
  /**
   * Collapses/Expands a section.
   *
   * @param {Array} coords Array of coords - section coordinates.
   * @param {string} [action] Action definition ('collapse' or 'expand').
   * @fires Hooks#beforeColumnCollapse
   * @fires Hooks#beforeColumnExpand
   * @fires Hooks#afterColumnCollapse
   * @fires Hooks#afterColumnExpand
   */
  toggleCollapsibleSection(e, t) {
    if (!Av.has(t))
      throw new Error(`Unsupported action is passed (${t}).`);
    if (!Array.isArray(e))
      return;
    const n = Ws(e, (g) => {
      let {
        row: m
      } = g;
      return m < 0;
    });
    let o = n.length > 0;
    D(n, (g) => {
      var m;
      let {
        row: w,
        col: C
      } = g;
      const {
        collapsible: S,
        isCollapsed: x
      } = (m = this.headerStateManager.getHeaderSettings(w, C)) !== null && m !== void 0 ? m : {};
      if (!S || x && t === "collapse" || !x && t === "expand")
        return o = !1, !1;
    });
    const r = [], a = [];
    o && D(n, (g) => {
      let {
        row: m,
        col: w
      } = g;
      const {
        colspanCompensation: C,
        affectedColumns: S,
        rollbackModification: x
      } = this.headerStateManager.triggerNodeModification(t, m, w);
      C > 0 && (a.push(...S), r.push(x));
    });
    const l = this.getCollapsedColumns();
    let c = [];
    t === "collapse" ? c = Ob([...l, ...a]) : t === "expand" && (c = Ws(l, (g) => !a.includes(g)));
    const h = Av.get(t);
    if (this.hot.runHooks(h.beforeHook, l, c, o) === !1) {
      D(r, (g) => {
        g();
      });
      return;
    }
    this.hot.batchExecution(() => {
      D(a, (g) => {
        Ov(this, Eo).setValueAtIndex(this.hot.toPhysicalColumn(g), h.hideColumn);
      });
    }, !0);
    const f = this.getCollapsedColumns().length !== l.length;
    this.hot.runHooks(h.afterHook, l, c, o, f), this.hot.render(), this.hot.view.adjustElementsSize(!0);
  }
  /**
   * Gets an array of physical indexes of collapsed columns.
   *
   * @private
   * @returns {number[]}
   */
  getCollapsedColumns() {
    return Ov(this, Eo).getHiddenIndexes();
  }
  /**
   * Adds the indicator to the headers.
   *
   * @private
   * @param {number} column Column index.
   * @param {HTMLElement} TH TH element.
   * @param {number} headerLevel The index of header level counting from the top (positive
   *                             values counting from 0 to N).
   */
  onAfterGetColHeader(e, t, n) {
    var o;
    const {
      collapsible: r,
      origColspan: a,
      isCollapsed: l
    } = (o = this.headerStateManager.getHeaderSettings(n, e)) !== null && o !== void 0 ? o : {}, c = r && a > 1 && e >= this.hot.getSettings().fixedColumnsStart;
    let h = t.querySelector(`.${Ro}`);
    if (c)
      h || (h = this.hot.rootDocument.createElement("div"), ie(h, Ro), t.querySelector("div:first-child").appendChild(h)), $e(h, ["collapsed", "expanded"]), l ? (ie(h, "collapsed"), Zi(h, "+")) : (ie(h, "expanded"), Zi(h, "-"));
    else {
      var u;
      (u = h) === null || u === void 0 || u.remove();
    }
  }
  /**
   * Indicator mouse event callback.
   *
   * @private
   * @param {object} event Mouse event.
   * @param {object} coords Event coordinates.
   */
  onBeforeOnCellMouseDown(e, t) {
    Ne(e.target, Ro) && (Ne(e.target, "expanded") ? (this.eventManager.fireEvent(e.target, "mouseup"), this.toggleCollapsibleSection([t], "collapse")) : Ne(e.target, "collapsed") && (this.eventManager.fireEvent(e.target, "mouseup"), this.toggleCollapsibleSection([t], "expand")), Rn(e));
  }
  /**
   * Updates the plugin state after HoT initialization.
   *
   * @private
   */
  onInit() {
    this.updatePlugin();
  }
  /**
   * Updates the plugin state after new dataset load.
   *
   * @private
   * @param {Array[]} sourceData Array of arrays or array of objects containing data.
   * @param {boolean} initialLoad Flag that determines whether the data has been loaded
   *                              during the initialization.
   */
  onAfterLoadData(e, t) {
    t || this.updatePlugin();
  }
  /**
   * Destroys the plugin instance.
   */
  destroy() {
    Lu(this, Eo, null), super.destroy();
  }
}
const J2 = ["sortEmptyCells", "indicator", "headerAction", "compareFunctionFactory"], eU = !1, tU = !0, sU = !0;
class nU {
  constructor(e, t) {
    this.hot = e, this.sortingStates = new dh(), this.sortEmptyCells = eU, this.indicator = tU, this.headerAction = sU, this.compareFunctionFactory = void 0, this.mapName = t, this.hot.columnIndexMapper.registerMap(t, this.sortingStates);
  }
  /**
   * Update column properties which affect the sorting result.
   *
   * **Note**: All column properties can be overwritten by {@link Options#columns} option.
   *
   * @param {object} allSortSettings Column sorting plugin's configuration object.
   */
  updateAllColumnsProperties(e) {
    Ge(e) && je(e, (t, n) => {
      J2.includes(n) && (this[n] = t);
    });
  }
  /**
   * Get all column properties which affect the sorting result.
   *
   * @returns {object}
   */
  getAllColumnsProperties() {
    const e = {
      sortEmptyCells: this.sortEmptyCells,
      indicator: this.indicator,
      headerAction: this.headerAction
    };
    return typeof this.compareFunctionFactory == "function" && (e.compareFunctionFactory = this.compareFunctionFactory), e;
  }
  /**
   * Get sort order of column.
   *
   * @param {number} searchedColumn Visual column index.
   * @returns {string|undefined} Sort order (`asc` for ascending, `desc` for descending and undefined for not sorted).
   */
  getSortOrderOfColumn(e) {
    var t;
    return (t = this.sortingStates.getValueAtIndex(this.hot.toPhysicalColumn(e))) === null || t === void 0 ? void 0 : t.sortOrder;
  }
  /**
   * Get order of particular column in the states queue.
   *
   * @param {number} column Visual column index.
   * @returns {number}
   */
  getIndexOfColumnInSortQueue(e) {
    return e = this.hot.toPhysicalColumn(e), this.sortingStates.getEntries().findIndex((t) => {
      let [n] = t;
      return n === e;
    });
  }
  /**
   * Get number of sorted columns.
   *
   * @returns {number}
   */
  getNumberOfSortedColumns() {
    return this.sortingStates.getLength();
  }
  /**
   * Get if list of sorted columns is empty.
   *
   * @returns {boolean}
   */
  isListOfSortedColumnsEmpty() {
    return this.getNumberOfSortedColumns() === 0;
  }
  /**
   * Get if particular column is sorted.
   *
   * @param {number} column Visual column index.
   * @returns {boolean}
   */
  isColumnSorted(e) {
    return Ge(this.sortingStates.getValueAtIndex(this.hot.toPhysicalColumn(e)));
  }
  /**
   * Queue of sort states containing sorted columns and their orders (Array of objects containing `column` and `sortOrder` properties).
   *
   * **Note**: Please keep in mind that returned objects expose **visual** column index under the `column` key.
   *
   * @returns {Array<object>}
   */
  getSortStates() {
    return this.sortingStates === null ? [] : this.sortingStates.getEntries().map((t) => {
      let [n, o] = t;
      return {
        column: this.hot.toVisualColumn(n),
        ...o
      };
    });
  }
  /**
   * Get sort state for particular column. Object contains `column` and `sortOrder` properties.
   *
   * **Note**: Please keep in mind that returned objects expose **visual** column index under the `column` key.
   *
   * @param {number} column Visual column index.
   * @returns {object|undefined}
   */
  getColumnSortState(e) {
    const t = this.getSortOrderOfColumn(e);
    if (ue(t))
      return {
        column: e,
        sortOrder: t
      };
  }
  /**
   * Set all column states.
   *
   * @param {Array} sortStates Sort states.
   */
  setSortStates(e) {
    this.sortingStates.clear();
    for (let t = 0; t < e.length; t += 1)
      this.sortingStates.setValueAtIndex(this.hot.toPhysicalColumn(e[t].column), {
        sortOrder: e[t].sortOrder
      });
  }
  /**
   * Destroy the state manager.
   */
  destroy() {
    this.hot.columnIndexMapper.unregisterMap(this.mapName), this.sortingStates = null;
  }
}
const Mc = "asc", _c = "desc", iU = "colHeader";
function oU(s) {
  if (Ge(s) === !1)
    return !1;
  const {
    column: e,
    sortOrder: t
  } = s;
  return Number.isInteger(e) && [Mc, _c].includes(t);
}
function rU(s) {
  if (s.some((t) => oU(t) === !1))
    return !1;
  const e = s.map((t) => {
    let {
      column: n
    } = t;
    return n;
  });
  return new Set(e).size === e.length;
}
function Pv(s) {
  if (s !== _c)
    return s === Mc ? _c : Mc;
}
function Dv(s) {
  return s.querySelector(`.${iU}`);
}
function Hv(s, e) {
  if (s < 0 || !e.parentNode)
    return !1;
  const t = e.parentNode.parentNode.childNodes;
  return Array.from(t).indexOf(e.parentNode) - t.length === -1;
}
function vf(s, e, t) {
  return s === -1 && e >= 0 && Ji(t) === !1;
}
const aU = "ascending", lU = "descending", l0 = "indicatorDisabled", c0 = "columnSorting", h0 = "sortAction", u0 = /* @__PURE__ */ new Map([[Mc, aU], [_c, lU]]);
function cU(s, e, t, n) {
  const o = [c0];
  if (n && o.push(h0), t === !1)
    return o.push(l0), o;
  const r = s.getSortOrderOfColumn(e);
  return ue(r) && o.push(u0.get(r)), o;
}
function hU() {
  return Array.from(u0.values()).concat(h0, l0, c0);
}
function d0(s, e, t) {
  const n = e.locale;
  return function(o, r) {
    const {
      sortEmptyCells: a
    } = t;
    return typeof o == "string" && (o = o.toLocaleLowerCase(n)), typeof r == "string" && (r = r.toLocaleLowerCase(n)), o === r ? yn : Gt(o) ? Gt(r) ? yn : a && s === "asc" ? _t : It : Gt(r) ? a && s === "asc" ? It : _t : isNaN(o) && !isNaN(r) ? s === "asc" ? It : _t : !isNaN(o) && isNaN(r) || (isNaN(o) || isNaN(r) || (o = parseFloat(o), r = parseFloat(r)), o < r) ? s === "asc" ? _t : It : o > r ? s === "asc" ? It : _t : yn;
  };
}
const f0 = "default";
function uU(s, e, t) {
  return function(n, o) {
    const r = parseFloat(n), a = parseFloat(o), {
      sortEmptyCells: l
    } = t;
    if (r === a || isNaN(r) && isNaN(a))
      return yn;
    if (l) {
      if (Gt(n))
        return s === "asc" ? _t : It;
      if (Gt(o))
        return s === "asc" ? It : _t;
    }
    return isNaN(r) ? It : isNaN(a) ? _t : r < a ? s === "asc" ? _t : It : r > a ? s === "asc" ? It : _t : yn;
  };
}
const dU = "numeric";
function fU(s, e, t) {
  const n = e.checkedTemplate, o = e.uncheckedTemplate, {
    sortEmptyCells: r
  } = t;
  return function(a, l) {
    const c = Gt(a), h = Gt(l), u = c ? o : a, f = h ? o : l, g = u === o || u === n, m = f === o || f === n;
    if (r === !1) {
      if (c && h === !1)
        return It;
      if (c === !1 && h)
        return _t;
    }
    return g === !1 && m ? s === "asc" ? _t : It : g && m === !1 ? s === "asc" ? It : _t : g === !1 && m === !1 ? d0(s, e, t)(a, l) : u === o && f === n ? s === "asc" ? _t : It : u === n && f === o ? s === "asc" ? It : _t : yn;
  };
}
const gU = "checkbox";
function mU(s, e, t) {
  return function(n, o) {
    const {
      sortEmptyCells: r
    } = t;
    if (n === o)
      return yn;
    if (Gt(n))
      return Gt(o) ? yn : r && s === "asc" ? _t : It;
    if (Gt(o))
      return r && s === "asc" ? It : _t;
    const a = e.dateFormat, l = se(n, a), c = se(o, a);
    return l.isValid() ? c.isValid() ? c.isAfter(l) ? s === "asc" ? _t : It : c.isBefore(l) ? s === "asc" ? It : _t : yn : _t : It;
  };
}
const pU = "date", {
  register: Sh,
  getItem: kv,
  hasItem: wU
} = Gs("sorting.compareFunctionFactory"), {
  register: g0,
  getItem: CU
} = Gs("sorting.mainSortComparator");
function m0(s) {
  return wU(s) ? kv(s) : kv(f0);
}
Sh(dU, uU);
Sh(gU, fU);
Sh(pU, mU);
Sh(f0, d0);
const yn = 0, _t = -1, It = 1;
function vU(s, e) {
  const t = CU(e);
  for (var n = arguments.length, o = new Array(n > 2 ? n - 2 : 0), r = 2; r < n; r++)
    o[r - 2] = arguments[r];
  s.sort(t(...o));
}
function yU(s, e) {
  return function(t, n) {
    const [, ...o] = t, [, ...r] = n;
    return function(l) {
      const c = s[l], h = e[l], u = o[l], f = r[l], g = h.columnSorting;
      return (g.compareFunctionFactory ? g.compareFunctionFactory : m0(h.type))(c, h, g)(u, f);
    }(0);
  };
}
const yf = "columnSorting", SU = 50, Nv = "append", bU = "replace";
g0(yf, yU);
me.getSingleton().register("beforeColumnSort");
me.getSingleton().register("afterColumnSort");
class p0 extends at {
  static get PLUGIN_KEY() {
    return yf;
  }
  static get PLUGIN_PRIORITY() {
    return SU;
  }
  constructor(e) {
    super(e), this.columnStatesManager = null, this.columnMetaCache = null, this.pluginKey = yf, this.indexesSequenceCache = null;
  }
  /**
   * Checks if the plugin is enabled in the Handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link ColumnSorting#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return !!this.hot.getSettings()[this.pluginKey];
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    var e = this;
    this.enabled || (this.columnStatesManager = new nU(this.hot, `${this.pluginKey}.sortingStates`), this.columnMetaCache = new bi((t) => {
      let n = this.hot.toVisualColumn(t);
      return n === null && (n = t), this.getMergedPluginSettings(n);
    }), this.hot.columnIndexMapper.registerMap(`${this.pluginKey}.columnMeta`, this.columnMetaCache), this.addHook("afterGetColHeader", (t, n) => this.onAfterGetColHeader(t, n)), this.addHook("beforeOnCellMouseDown", function() {
      return e.onBeforeOnCellMouseDown(...arguments);
    }), this.addHook("afterOnCellMouseDown", (t, n) => this.onAfterOnCellMouseDown(t, n)), this.addHook("afterInit", () => this.loadOrSortBySettings()), this.addHook("afterLoadData", function() {
      return e.onAfterLoadData(...arguments);
    }), this.hot.view && this.loadOrSortBySettings(), super.enablePlugin());
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    const e = (t, n) => {
      const o = Dv(n);
      Hv(t, n) === !1 || o === null || this.updateHeaderClasses(o);
    };
    this.hot.addHook("afterGetColHeader", e), this.hot.addHookOnce("afterViewRender", () => {
      this.hot.removeHook("afterGetColHeader", e);
    }), this.hot.batchExecution(() => {
      this.indexesSequenceCache !== null && (this.hot.rowIndexMapper.setIndexesSequence(this.indexesSequenceCache.getValues()), this.hot.rowIndexMapper.unregisterMap(this.pluginKey));
    }, !0), this.hot.columnIndexMapper.unregisterMap(`${this.pluginKey}.columnMeta`), this.columnStatesManager.destroy(), this.columnMetaCache = null, this.columnStatesManager = null, super.disablePlugin();
  }
  // DIFF - MultiColumnSorting & ColumnSorting: changed function documentation.
  /**
   * Sorts the table by chosen columns and orders.
   *
   * @param {undefined|object} sortConfig Single column sort configuration. The configuration object contains `column` and `sortOrder` properties.
   * First of them contains visual column index, the second one contains sort order (`asc` for ascending, `desc` for descending).
   *
   * **Note**: Please keep in mind that every call of `sort` function set an entirely new sort order. Previous sort configs aren't preserved.
   *
   * @example
   * ```js
   * // sort ascending first visual column
   * hot.getPlugin('columnSorting').sort({ column: 0, sortOrder: 'asc' });
   * ```
   *
   * @fires Hooks#beforeColumnSort
   * @fires Hooks#afterColumnSort
   */
  sort(e) {
    const t = this.getSortConfig(), n = this.getNormalizedSortConfigs(e), o = this.areValidSortConfigs(n);
    this.hot.runHooks("beforeColumnSort", t, n, o) !== !1 && (t.length === 0 && this.indexesSequenceCache === null && (this.indexesSequenceCache = this.hot.rowIndexMapper.registerMap(this.pluginKey, new _R()), this.indexesSequenceCache.setValues(this.hot.rowIndexMapper.getIndexesSequence())), o && (this.columnStatesManager.setSortStates(n), this.sortByPresetSortStates(n), this.saveAllSortSettings(n)), this.hot.runHooks("afterColumnSort", t, o ? n : t, o), o && (this.hot.render(), this.hot.forceFullRender = !1, this.hot.view.render()));
  }
  /**
   * Clear the sort performed on the table.
   */
  clearSort() {
    this.sort([]);
  }
  /**
   * Checks if the table is sorted (any column have to be sorted).
   *
   * @returns {boolean}
   */
  isSorted() {
    return this.enabled && !this.columnStatesManager.isListOfSortedColumnsEmpty();
  }
  /**
   * Get sort configuration for particular column or for all sorted columns. Objects contain `column` and `sortOrder` properties.
   *
   * **Note**: Please keep in mind that returned objects expose **visual** column index under the `column` key. They are handled by the `sort` function.
   *
   * @param {number} [column] Visual column index.
   * @returns {undefined|object|Array}
   */
  getSortConfig(e) {
    return ue(e) ? this.columnStatesManager.getColumnSortState(e) : this.columnStatesManager.getSortStates();
  }
  /**
   * @description
   * Warn: Useful mainly for providing server side sort implementation (see in the example below). It doesn't sort the data set. It just sets sort configuration for all sorted columns.
   * Note: Please keep in mind that this method doesn't re-render the table.
   *
   * @example
   * ```js
   * beforeColumnSort: function(currentSortConfig, destinationSortConfigs) {
   *   const columnSortPlugin = this.getPlugin('columnSorting');
   *
   *   columnSortPlugin.setSortConfig(destinationSortConfigs);
   *
   *   // const newData = ... // Calculated data set, ie. from an AJAX call.
   *
   *   this.loadData(newData); // Load new data set and re-render the table.
   *
   *   return false; // The blockade for the default sort action.
   * }
   * ```
   *
   * @param {undefined|object|Array} sortConfig Single column sort configuration or full sort configuration (for all sorted columns).
   * The configuration object contains `column` and `sortOrder` properties. First of them contains visual column index, the second one contains
   * sort order (`asc` for ascending, `desc` for descending).
   */
  setSortConfig(e) {
    const t = this.getNormalizedSortConfigs(e);
    this.areValidSortConfigs(t) && this.columnStatesManager.setSortStates(t);
  }
  /**
   * Get normalized sort configs.
   *
   * @private
   * @param {object|Array} [sortConfig=[]] Single column sort configuration or full sort configuration (for all sorted columns).
   * The configuration object contains `column` and `sortOrder` properties. First of them contains visual column index, the second one contains
   * sort order (`asc` for ascending, `desc` for descending).
   * @returns {Array}
   */
  getNormalizedSortConfigs() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
    return Array.isArray(e) ? e.slice(0, 1) : [e];
  }
  /**
   * Get if sort configs are valid.
   *
   * @private
   * @param {Array} sortConfigs Sort configuration for all sorted columns. Objects contain `column` and `sortOrder` properties.
   * @returns {boolean}
   */
  areValidSortConfigs(e) {
    const t = this.hot.countCols();
    return rU(e) && e.every((n) => {
      let {
        column: o
      } = n;
      return o <= t && o >= 0;
    });
  }
  /**
   * Saves all sorting settings. Saving works only when {@link Options#persistentState} option is enabled.
   *
   * @param {Array} sortConfigs Sort configuration for all sorted columns. Objects contain `column` and `sortOrder` properties.
   *
   * @private
   * @fires Hooks#persistentStateSave
   */
  saveAllSortSettings(e) {
    const t = this.columnStatesManager.getAllColumnsProperties(), n = (o) => {
      let {
        column: r,
        ...a
      } = o;
      return {
        column: this.hot.toPhysicalColumn(r),
        ...a
      };
    };
    t.initialConfig = Ye(e, n), this.hot.runHooks("persistentStateSave", "columnSorting", t);
  }
  /**
   * Get all saved sorting settings. Loading works only when {@link Options#persistentState} option is enabled.
   *
   * @private
   * @returns {object} Previously saved sort settings.
   *
   * @fires Hooks#persistentStateLoad
   */
  getAllSavedSortSettings() {
    const e = {};
    this.hot.runHooks("persistentStateLoad", "columnSorting", e);
    const t = e.value, n = (o) => {
      let {
        column: r,
        ...a
      } = o;
      return {
        column: this.hot.toVisualColumn(r),
        ...a
      };
    };
    return ue(t) && Array.isArray(t.initialConfig) && (t.initialConfig = Ye(t.initialConfig, n)), t;
  }
  /**
   * Get next sort configuration for particular column. Object contain `column` and `sortOrder` properties.
   *
   * **Note**: Please keep in mind that returned object expose **visual** column index under the `column` key.
   *
   * @private
   * @param {number} column Visual column index.
   * @returns {undefined|object}
   */
  getColumnNextConfig(e) {
    const t = this.columnStatesManager.getSortOrderOfColumn(e);
    if (ue(t)) {
      const o = Pv(t);
      return ue(o) ? {
        column: e,
        sortOrder: o
      } : void 0;
    }
    const n = this.hot.countCols();
    if (Number.isInteger(e) && e >= 0 && e < n)
      return {
        column: e,
        sortOrder: Pv()
      };
  }
  /**
   * Get sort configuration with "next order" for particular column.
   *
   * @private
   * @param {number} columnToChange Visual column index of column which order will be changed.
   * @param {string} strategyId ID of strategy. Possible values: 'append' and 'replace'. The first one
   * change order of particular column and change it's position in the sort queue to the last one. The second one
   * just change order of particular column.
   *
   * **Note**: Please keep in mind that returned objects expose **visual** column index under the `column` key.
   *
   * @returns {Array}
   */
  getNextSortConfig(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : Nv;
    const n = this.columnStatesManager.getIndexOfColumnInSortQueue(e), o = n !== -1, r = this.getSortConfig(), a = this.getColumnNextConfig(e);
    if (o) {
      if (wt(a))
        return [...r.slice(0, n), ...r.slice(n + 1)];
      if (t === Nv)
        return [...r.slice(0, n), ...r.slice(n + 1), a];
      if (t === bU)
        return [...r.slice(0, n), a, ...r.slice(n + 1)];
    }
    return ue(a) ? r.concat(a) : r;
  }
  /**
   * Get plugin's column config for the specified column index.
   *
   * @private
   * @param {object} columnConfig Configuration inside `columns` property for the specified column index.
   * @returns {object}
   */
  getPluginColumnConfig(e) {
    if (Ge(e)) {
      const t = e[this.pluginKey];
      if (Ge(t))
        return t;
    }
    return {};
  }
  /**
   * Get plugin settings related properties, properly merged from cascade settings.
   *
   * @private
   * @param {number} column Visual column index.
   * @returns {object}
   */
  getMergedPluginSettings(e) {
    const t = this.hot.getSettings()[this.pluginKey], n = this.columnStatesManager.getAllColumnsProperties(), o = this.hot.getCellMeta(0, e), r = Object.getPrototypeOf(o);
    return Array.isArray(r.columns) ? Object.assign(n, t, this.getPluginColumnConfig(r.columns[e])) : mt(r.columns) ? Object.assign(n, t, this.getPluginColumnConfig(r.columns(e))) : Object.assign(n, t);
  }
  /**
   * Get copy of settings for first cell in the column.
   *
   * @private
   * @param {number} column Visual column index.
   * @returns {object}
   */
  // TODO: Workaround. Inheriting of non-primitive cell meta values doesn't work. Instead of getting properties from column meta we call this function.
  // TODO: Remove test named: "should not break the dataset when inserted new row" (#5431).
  getFirstCellSettings(e) {
    const t = this.hot.getCellMeta(0, e), n = Object.create(t);
    return n[this.pluginKey] = this.columnMetaCache.getValueAtIndex(this.hot.toPhysicalColumn(e)), n;
  }
  /**
   * Get number of rows which should be sorted.
   *
   * @private
   * @param {number} numberOfRows Total number of displayed rows.
   * @returns {number}
   */
  getNumberOfRowsToSort(e) {
    const t = this.hot.getSettings();
    return t.maxRows <= e ? t.maxRows : e - t.minSpareRows;
  }
  /**
   * Performs the sorting using a stable sort function basing on internal state of sorting.
   *
   * @param {Array} sortConfigs Sort configuration for all sorted columns. Objects contain `column` and `sortOrder` properties.
   * @private
   */
  sortByPresetSortStates(e) {
    if (e.length === 0) {
      this.hot.rowIndexMapper.setIndexesSequence(this.indexesSequenceCache.getValues());
      return;
    }
    const t = [], n = this.hot.countRows(), o = (h) => Ye(e, (u) => this.hot.getDataAtCell(h, u.column));
    for (let h = 0; h < this.getNumberOfRowsToSort(n); h += 1)
      t.push([this.hot.toPhysicalRow(h)].concat(o(h)));
    const r = Ye(t, (h) => h[0]);
    vU(t, this.pluginKey, Ye(e, (h) => h.sortOrder), Ye(e, (h) => this.getFirstCellSettings(h.column)));
    for (let h = t.length; h < n; h += 1)
      t.push([h].concat(o(h)));
    const a = Ye(t, (h) => h[0]), l = new Map(Ye(r, (h, u) => [h, a[u]])), c = Ye(this.hot.rowIndexMapper.getIndexesSequence(), (h) => l.has(h) ? l.get(h) : h);
    this.hot.rowIndexMapper.setIndexesSequence(c);
  }
  /**
   * Load saved settings or sort by predefined plugin configuration.
   *
   * @private
   */
  loadOrSortBySettings() {
    const e = this.getAllSavedSortSettings();
    if (Ge(e))
      this.sortBySettings(e);
    else {
      const t = this.hot.getSettings()[this.pluginKey];
      this.sortBySettings(t);
    }
  }
  /**
   * Sort the table by provided configuration.
   *
   * @private
   * @param {object} allSortSettings All sort config settings. Object may contain `initialConfig`, `indicator`,
   * `sortEmptyCells`, `headerAction` and `compareFunctionFactory` properties.
   */
  sortBySettings(e) {
    if (Ge(e)) {
      this.columnStatesManager.updateAllColumnsProperties(e);
      const t = e.initialConfig;
      (Array.isArray(t) || Ge(t)) && this.sort(t);
    } else
      this.hot.render();
  }
  /**
   * Callback for the `onAfterGetColHeader` hook. Adds column sorting CSS classes.
   *
   * @private
   * @param {number} column Visual column index.
   * @param {Element} TH TH HTML element.
   */
  onAfterGetColHeader(e, t) {
    const n = Dv(t);
    if (Hv(e, t) === !1 || n === null)
      return;
    const o = this.getFirstCellSettings(e)[this.pluginKey], r = o.indicator, a = o.headerAction;
    this.updateHeaderClasses(n, this.columnStatesManager, e, r, a);
  }
  /**
   * Update header classes.
   *
   * @private
   * @param {HTMLElement} headerSpanElement Header span element.
   * @param {...*} args Extra arguments for helpers.
   */
  updateHeaderClasses(e) {
    if ($e(e, hU()), this.enabled !== !1) {
      for (var t = arguments.length, n = new Array(t > 1 ? t - 1 : 0), o = 1; o < t; o++)
        n[o - 1] = arguments[o];
      ie(e, cU(...n));
    }
  }
  /**
   * Overwriting base plugin's `onUpdateSettings` method. Please keep in mind that `onAfterUpdateSettings` isn't called
   * for `updateSettings` in specific situations.
   *
   * @private
   * @param {object} newSettings New settings object.
   */
  onUpdateSettings(e) {
    super.onUpdateSettings(), this.columnMetaCache !== null && this.columnMetaCache.init(this.hot.columnIndexMapper.getNumberOfIndexes()), ue(e[this.pluginKey]) && this.sortBySettings(e[this.pluginKey]);
  }
  /**
   * Callback for the `afterLoadData` hook.
   *
   * @private
   * @param {boolean} initialLoad Flag that determines whether the data has been loaded during the initialization.
   */
  onAfterLoadData(e) {
    e === !0 && this.hot.view && this.loadOrSortBySettings();
  }
  /**
   * Indicates if clickable header was clicked.
   *
   * @private
   * @param {MouseEvent} event The `mousedown` event.
   * @param {number} column Visual column index.
   * @returns {boolean}
   */
  wasClickableHeaderClicked(e, t) {
    return this.getFirstCellSettings(t)[this.pluginKey].headerAction && e.target.nodeName === "SPAN";
  }
  /**
   * Changes the behavior of selection / dragging.
   *
   * @private
   * @param {MouseEvent} event The `mousedown` event.
   * @param {CellCoords} coords Visual coordinates.
   * @param {HTMLElement} TD The cell element.
   * @param {object} controller An object with properties `row`, `column` and `cell`. Each property contains
   *                            a boolean value that allows or disallows changing the selection for that particular area.
   */
  onBeforeOnCellMouseDown(e, t, n, o) {
    vf(t.row, t.col, e) !== !1 && this.wasClickableHeaderClicked(e, t.col) && this.hot.getShortcutManager().isCtrlPressed() && (o.column = !0);
  }
  /**
   * Callback for the `onAfterOnCellMouseDown` hook.
   *
   * @private
   * @param {Event} event Event which are provided by hook.
   * @param {CellCoords} coords Visual coords of the selected cell.
   */
  onAfterOnCellMouseDown(e, t) {
    vf(t.row, t.col, e) !== !1 && this.wasClickableHeaderClicked(e, t.col) && (this.hot.getShortcutManager().isCtrlPressed() && (this.hot.deselectCell(), this.hot.selectColumns(t.col)), this.sort(this.getColumnNextConfig(t.col)));
  }
  /**
   * Destroys the plugin instance.
   */
  destroy() {
    var e;
    (e = this.columnStatesManager) === null || e === void 0 || e.destroy(), super.destroy();
  }
}
class RU {
  constructor(e, t) {
    this.plugin = e, this.hot = this.plugin.hot, this.endpoints = [], this.settings = t, this.settingsType = "array", this.currentEndpoint = null, this.cellsToSetCache = [];
  }
  /**
   * Get a single endpoint object.
   *
   * @param {number} index Index of the endpoint.
   * @returns {object}
   */
  getEndpoint(e) {
    return this.settingsType === "function" ? this.fillMissingEndpointData(this.settings)[e] : this.endpoints[e];
  }
  /**
   * Get an array with all the endpoints.
   *
   * @returns {Array}
   */
  getAllEndpoints() {
    return this.settingsType === "function" ? this.fillMissingEndpointData(this.settings) : this.endpoints;
  }
  /**
   * Used to fill the blanks in the endpoint data provided by a settings function.
   *
   * @private
   * @param {Function} func Function provided in the HOT settings.
   * @returns {Array} An array of endpoints.
   */
  fillMissingEndpointData(e) {
    return this.parseSettings(e.call(this));
  }
  /**
   * Parse plugin's settings.
   *
   * @param {Array} settings The settings array.
   * @returns {object[]}
   */
  parseSettings(e) {
    const t = [];
    let n = e;
    if (!n && typeof this.settings == "function") {
      this.settingsType = "function";
      return;
    }
    return n || (n = this.settings), D(n, (o) => {
      const r = {};
      this.assignSetting(o, r, "ranges", [[0, this.hot.countRows() - 1]]), this.assignSetting(o, r, "reversedRowCoords", !1), this.assignSetting(o, r, "destinationRow", new Error(`
        You must provide a destination row for the Column Summary plugin in order to work properly!
      `)), this.assignSetting(o, r, "destinationColumn", new Error(`
        You must provide a destination column for the Column Summary plugin in order to work properly!
      `)), this.assignSetting(o, r, "sourceColumn", o.destinationColumn), this.assignSetting(o, r, "type", "sum"), this.assignSetting(o, r, "forceNumeric", !1), this.assignSetting(o, r, "suppressDataTypeErrors", !0), this.assignSetting(o, r, "suppressDataTypeErrors", !0), this.assignSetting(o, r, "customFunction", null), this.assignSetting(o, r, "readOnly", !0), this.assignSetting(o, r, "roundFloat", !1), t.push(r);
    }), t;
  }
  /**
   * Setter for the internal setting objects.
   *
   * @param {object} settings Object with the settings.
   * @param {object} endpoint Contains information about the endpoint for the the calculation.
   * @param {string} name Settings name.
   * @param {object} defaultValue Default value for the settings.
   */
  assignSetting(e, t, n, o) {
    if (n === "ranges" && e[n] === void 0) {
      t[n] = o;
      return;
    } else if (n === "ranges" && e[n].length === 0)
      return;
    if (e[n] === void 0) {
      if (o instanceof Error)
        throw o;
      t[n] = o;
    } else
      n === "destinationRow" && t.reversedRowCoords ? t[n] = this.hot.countRows() - e[n] - 1 : t[n] = e[n];
  }
  /**
   * Resets the endpoint setup before the structure alteration (like inserting or removing rows/columns). Used for settings provided as a function.
   *
   * @private
   * @param {string} action Type of the action performed.
   * @param {number} index Row/column index.
   * @param {number} number Number of rows/columns added/removed.
   */
  resetSetupBeforeStructureAlteration(e, t, n) {
    if (this.settingsType !== "function")
      return;
    const o = e.indexOf("row") > -1 ? "row" : "col", r = this.getAllEndpoints();
    D(r, (a) => {
      o === "row" && a.destinationRow >= t && (e === "insert_row" ? a.alterRowOffset = n : e === "remove_row" && (a.alterRowOffset = -1 * n)), o === "col" && a.destinationColumn >= t && (e === "insert_col" ? a.alterColumnOffset = n : e === "remove_col" && (a.alterColumnOffset = -1 * n));
    }), this.resetAllEndpoints(r, !1);
  }
  /**
   * AfterCreateRow/afterCreateRow/afterRemoveRow/afterRemoveCol hook callback. Reset and reenables the summary functionality
   * after changing the table structure.
   *
   * @private
   * @param {string} action Type of the action performed.
   * @param {number} index Row/column index.
   * @param {number} number Number of rows/columns added/removed.
   * @param {Array} [logicRows] Array of the logical indexes.
   * @param {string} [source] Source of change.
   * @param {boolean} [forceRefresh] `true` of the endpoints should refresh after completing the function.
   */
  resetSetupAfterStructureAlteration(e, t, n, o, r) {
    let a = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : !0;
    if (this.settingsType === "function") {
      const g = () => (this.hot.removeHook("beforeViewRender", g), this.refreshAllEndpoints());
      this.hot.addHookOnce("beforeViewRender", g);
      return;
    }
    const l = e.indexOf("row") > -1 ? "row" : "col", c = e.indexOf("remove") > -1 ? -1 : 1, h = this.getAllEndpoints(), u = e.indexOf("move_row") === 0, f = t;
    D(h, (g) => {
      l === "row" && g.destinationRow >= f && (g.alterRowOffset = c * n), l === "col" && g.destinationColumn >= f && (g.alterColumnOffset = c * n);
    }), this.resetAllEndpoints(h, !u), u ? D(h, (g) => {
      this.extendEndpointRanges(g, f, o[0], o.length), this.recreatePhysicalRanges(g), this.clearOffsetInformation(g);
    }) : D(h, (g) => {
      this.shiftEndpointCoordinates(g, f);
    }), a && this.refreshAllEndpoints();
  }
  /**
   * Clear the offset information from the endpoint object.
   *
   * @private
   * @param {object} endpoint And endpoint object.
   */
  clearOffsetInformation(e) {
    e.alterRowOffset = void 0, e.alterColumnOffset = void 0;
  }
  /**
   * Extend the row ranges for the provided endpoint.
   *
   * @private
   * @param {object} endpoint The endpoint object.
   * @param {number} placeOfAlteration Index of the row where the alteration takes place.
   * @param {number} previousPosition Previous endpoint result position.
   * @param {number} offset Offset generated by the alteration.
   */
  extendEndpointRanges(e, t, n, o) {
    D(e.ranges, (r) => {
      r[1] && (t >= r[0] && t <= r[1] ? n > r[1] ? r[1] += o : n < r[0] && (r[0] -= o) : n >= r[0] && n <= r[1] && (r[1] -= o, t <= r[0] && (r[0] += 1, r[1] += 1)));
    });
  }
  /**
   * Recreate the physical ranges for the provided endpoint. Used (for example) when a row gets moved and extends an existing range.
   *
   * @private
   * @param {object} endpoint An endpoint object.
   */
  recreatePhysicalRanges(e) {
    const t = e.ranges, n = [], o = [];
    D(t, (r) => {
      const a = [];
      if (r[1])
        for (let l = r[0]; l <= r[1]; l++)
          a.push(this.hot.toPhysicalRow(l));
      else
        a.push(this.hot.toPhysicalRow(r[0]));
      o.push(a);
    }), D(o, (r) => {
      let a = [];
      D(r, (l, c) => {
        c === 0 ? a.push(l) : r[c] !== r[c - 1] + 1 && (a.push(r[c - 1]), n.push(a), a = [], a.push(l)), c === r.length - 1 && (a.push(l), n.push(a));
      });
    }), e.ranges = n;
  }
  /**
   * Shifts the endpoint coordinates by the defined offset.
   *
   * @private
   * @param {object} endpoint Endpoint object.
   * @param {number} offsetStartIndex Index of the performed change (if the change is located after the endpoint, nothing about the endpoint has to be changed.
   */
  shiftEndpointCoordinates(e, t) {
    e.alterRowOffset && e.alterRowOffset !== 0 ? (e.destinationRow += e.alterRowOffset || 0, D(e.ranges, (n) => {
      D(n, (o, r) => {
        o >= t && (n[r] += e.alterRowOffset || 0);
      });
    })) : e.alterColumnOffset && e.alterColumnOffset !== 0 && (e.destinationColumn += e.alterColumnOffset || 0, e.sourceColumn += e.alterColumnOffset || 0);
  }
  /**
   * Resets (removes) the endpoints from the table.
   *
   * @param {Array} [endpoints] Array containing the endpoints.
   * @param {boolean} [useOffset=true] Use the cell offset value.
   */
  resetAllEndpoints() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.getAllEndpoints(), t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0;
    e.some((o) => {
      const r = o.alterRowOffset || 0, a = o.alterColumnOffset || 0;
      return o.destinationRow + r >= this.hot.countRows() || o.destinationColumn + a >= this.hot.countCols();
    }) || (this.cellsToSetCache = [], D(e, (o) => {
      this.resetEndpointValue(o, t);
    }), this.hot.setDataAtCell(this.cellsToSetCache, "ColumnSummary.reset"), this.cellsToSetCache = []);
  }
  /**
   * Calculate and refresh all defined endpoints.
   */
  refreshAllEndpoints() {
    this.cellsToSetCache = [], D(this.getAllEndpoints(), (e) => {
      this.currentEndpoint = e, this.plugin.calculate(e), this.setEndpointValue(e, "init");
    }), this.currentEndpoint = null, this.hot.setDataAtCell(this.cellsToSetCache, "ColumnSummary.reset"), this.cellsToSetCache = [];
  }
  /**
   * Calculate and refresh endpoints only in the changed columns.
   *
   * @param {Array} changes Array of changes from the `afterChange` hook.
   */
  refreshChangedEndpoints(e) {
    const t = [];
    this.cellsToSetCache = [], D(e, (n, o, r) => {
      `${n[2] || ""}` != `${n[3]}` && D(this.getAllEndpoints(), (a, l) => {
        this.hot.propToCol(r[o][1]) === a.sourceColumn && t.indexOf(l) === -1 && t.push(l);
      });
    }), D(t, (n) => {
      this.refreshEndpoint(this.getEndpoint(n));
    }), this.hot.setDataAtCell(this.cellsToSetCache, "ColumnSummary.reset"), this.cellsToSetCache = [];
  }
  /**
   * Calculate and refresh a single endpoint.
   *
   * @param {object} endpoint Contains the endpoint information.
   */
  refreshEndpoint(e) {
    this.currentEndpoint = e, this.plugin.calculate(e), this.setEndpointValue(e), this.currentEndpoint = null;
  }
  /**
   * Reset the endpoint value.
   *
   * @param {object} endpoint Contains the endpoint information.
   * @param {boolean} [useOffset=true] Use the cell offset value.
   */
  resetEndpointValue(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0;
    const n = e.alterRowOffset || 0, o = e.alterColumnOffset || 0;
    this.cellsToSetCache.push([this.hot.toVisualRow(e.destinationRow + (t ? n : 0)), this.hot.toVisualColumn(e.destinationColumn + (t ? o : 0)), ""]);
  }
  /**
   * Set the endpoint value.
   *
   * @param {object} endpoint Contains the endpoint information.
   * @param {string} [source] Source of the call information.
   * @param {boolean} [render=false] `true` if it needs to render the table afterwards.
   */
  setEndpointValue(e, t) {
    let n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1;
    const o = this.hot.toVisualRow(e.destinationRow);
    if (e.destinationRow >= this.hot.countRows() || e.destinationColumn >= this.hot.countCols()) {
      this.throwOutOfBoundsWarning();
      return;
    }
    const r = this.hot.toVisualRow(e.destinationRow);
    if (r !== null) {
      const a = this.hot.getCellMeta(r, e.destinationColumn);
      (t === "init" || a.readOnly !== e.readOnly) && (a.readOnly = e.readOnly, a.className = "columnSummaryResult");
    }
    e.roundFloat && !isNaN(e.result) && (e.result = e.result.toFixed(e.roundFloat)), n ? this.hot.setDataAtCell(o, e.destinationColumn, e.result, "ColumnSummary.set") : this.cellsToSetCache.push([o, e.destinationColumn, e.result]), e.alterRowOffset = void 0, e.alterColumnOffset = void 0;
  }
  /**
   * Throw an error for the calculation range being out of boundaries.
   *
   * @private
   */
  throwOutOfBoundsWarning() {
    pt("One of the Column Summary plugins' destination points you provided is beyond the table boundaries!");
  }
}
const EU = RU;
function Fu(s) {
  return s == null || isNaN(s);
}
const Vu = "columnSummary", xU = 220;
class TU extends at {
  static get PLUGIN_KEY() {
    return Vu;
  }
  static get PLUGIN_PRIORITY() {
    return xU;
  }
  constructor(e) {
    super(e), this.endpoints = null;
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link ColumnSummary#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return !!this.hot.getSettings()[Vu];
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    var e = this;
    this.enabled || (this.settings = this.hot.getSettings()[Vu], this.endpoints = new EU(this, this.settings), this.addHook("afterInit", function() {
      return e.onAfterInit(...arguments);
    }), this.addHook("afterChange", function() {
      return e.onAfterChange(...arguments);
    }), this.addHook("beforeCreateRow", (t, n, o) => this.endpoints.resetSetupBeforeStructureAlteration("insert_row", t, n, null, o)), this.addHook("beforeCreateCol", (t, n, o) => this.endpoints.resetSetupBeforeStructureAlteration("insert_col", t, n, null, o)), this.addHook("beforeRemoveRow", function() {
      for (var t = arguments.length, n = new Array(t), o = 0; o < t; o++)
        n[o] = arguments[o];
      return e.endpoints.resetSetupBeforeStructureAlteration("remove_row", ...n);
    }), this.addHook("beforeRemoveCol", function() {
      for (var t = arguments.length, n = new Array(t), o = 0; o < t; o++)
        n[o] = arguments[o];
      return e.endpoints.resetSetupBeforeStructureAlteration("remove_col", ...n);
    }), this.addHook("afterCreateRow", (t, n, o) => this.endpoints.resetSetupAfterStructureAlteration("insert_row", t, n, null, o)), this.addHook("afterCreateCol", (t, n, o) => this.endpoints.resetSetupAfterStructureAlteration("insert_col", t, n, null, o)), this.addHook("afterRemoveRow", function() {
      for (var t = arguments.length, n = new Array(t), o = 0; o < t; o++)
        n[o] = arguments[o];
      return e.endpoints.resetSetupAfterStructureAlteration("remove_row", ...n);
    }), this.addHook("afterRemoveCol", function() {
      for (var t = arguments.length, n = new Array(t), o = 0; o < t; o++)
        n[o] = arguments[o];
      return e.endpoints.resetSetupAfterStructureAlteration("remove_col", ...n);
    }), this.addHook("afterRowMove", function() {
      return e.onAfterRowMove(...arguments);
    }), super.enablePlugin());
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    this.endpoints = null, this.settings = null, this.currentEndpoint = null;
  }
  /**
   * Calculates math for a single endpoint.
   *
   * @private
   * @param {object} endpoint Contains information about the endpoint.
   */
  calculate(e) {
    switch (e.type.toLowerCase()) {
      case "sum":
        e.result = this.calculateSum(e);
        break;
      case "min":
        e.result = this.calculateMinMax(e, e.type);
        break;
      case "max":
        e.result = this.calculateMinMax(e, e.type);
        break;
      case "count":
        e.result = this.countEntries(e);
        break;
      case "average":
        e.result = this.calculateAverage(e);
        break;
      case "custom":
        e.result = e.customFunction.call(this, e);
        break;
    }
  }
  /**
   * Calculates sum of the values contained in ranges provided in the plugin config.
   *
   * @private
   * @param {object} endpoint Contains the endpoint information.
   * @returns {number} Sum for the selected range.
   */
  calculateSum(e) {
    let t = 0;
    return je(e.ranges, (n) => {
      t += this.getPartialSum(n, e.sourceColumn);
    }), t;
  }
  /**
   * Returns partial sum of values from a single row range.
   *
   * @private
   * @param {Array} rowRange Range for the sum.
   * @param {number} col Column index.
   * @returns {number} The partial sum.
   */
  getPartialSum(e, t) {
    let n = 0, o = e[1] || e[0], r = null, a = 0;
    do {
      if (r = this.getCellValue(o, t), r = Fu(r) ? null : r, r !== null) {
        const l = (`${r}`.split(".")[1] || []).length || 1;
        l > a && (a = l);
      }
      n += r || 0, o -= 1;
    } while (o >= e[0]);
    return Math.round(n * 10 ** a) / 10 ** a;
  }
  /**
   * Calculates the minimal value for the selected ranges.
   *
   * @private
   * @param {object} endpoint Contains the endpoint information.
   * @param {string} type `'min'` or `'max'`.
   * @returns {number} Min or Max value.
   */
  calculateMinMax(e, t) {
    let n = null;
    return je(e.ranges, (o) => {
      const r = this.getPartialMinMax(o, e.sourceColumn, t);
      if (n === null && r !== null && (n = r), r !== null)
        switch (t) {
          case "min":
            n = Math.min(n, r);
            break;
          case "max":
            n = Math.max(n, r);
            break;
        }
    }), n === null ? "Not enough data" : n;
  }
  /**
   * Returns a local minimum of the provided sub-range.
   *
   * @private
   * @param {Array} rowRange Range for the calculation.
   * @param {number} col Column index.
   * @param {string} type `'min'` or `'max'`.
   * @returns {number|null} Min or max value.
   */
  getPartialMinMax(e, t, n) {
    let o = null, r = e[1] || e[0], a;
    do {
      if (a = this.getCellValue(r, t), a = Fu(a) ? null : a, o === null)
        o = a;
      else if (a !== null)
        switch (n) {
          case "min":
            o = Math.min(o, a);
            break;
          case "max":
            o = Math.max(o, a);
            break;
        }
      r -= 1;
    } while (r >= e[0]);
    return o;
  }
  /**
   * Counts empty cells in the provided row range.
   *
   * @private
   * @param {Array} rowRange Row range for the calculation.
   * @param {number} col Column index.
   * @returns {number} Empty cells count.
   */
  countEmpty(e, t) {
    let n, o = 0, r = e[1] || e[0];
    do
      n = this.getCellValue(r, t), n = Fu(n) ? null : n, n === null && (o += 1), r -= 1;
    while (r >= e[0]);
    return o;
  }
  /**
   * Counts non-empty cells in the provided row range.
   *
   * @private
   * @param {object} endpoint Contains the endpoint information.
   * @returns {number} Entry count.
   */
  countEntries(e) {
    let t = 0;
    const n = e.ranges;
    return je(n, (o) => {
      const r = o[1] === void 0 ? 1 : o[1] - o[0] + 1, a = this.countEmpty(o, e.sourceColumn);
      t += r, t -= a;
    }), t;
  }
  /**
   * Calculates the average value from the cells in the range.
   *
   * @private
   * @param {object} endpoint Contains the endpoint information.
   * @returns {number} Avarage value.
   */
  calculateAverage(e) {
    const t = this.calculateSum(e), n = this.countEntries(e);
    return t / n;
  }
  /**
   * Returns a cell value, taking into consideration a basic validation.
   *
   * @private
   * @param {number} row Row index.
   * @param {number} col Column index.
   * @returns {string} The cell value.
   */
  getCellValue(e, t) {
    const n = this.hot.toVisualRow(e), o = this.hot.toVisualColumn(t);
    let r = this.hot.getSourceDataAtCell(e, t), a = "";
    if (n !== null && o !== null && (a = this.hot.getCellMeta(n, o).className || ""), a.indexOf("columnSummaryResult") > -1)
      return null;
    if (this.endpoints.currentEndpoint.forceNumeric && (typeof r == "string" && (r = r.replace(/,/, ".")), r = parseFloat(r)), isNaN(r) && !this.endpoints.currentEndpoint.suppressDataTypeErrors)
      throw new Error(ut`ColumnSummary plugin: cell at (${e}, ${t}) is not in a\x20
          numeric format. Cannot do the calculation.`);
    return r;
  }
  /**
   * `afterInit` hook callback.
   *
   * @private
   */
  onAfterInit() {
    this.endpoints.endpoints = this.endpoints.parseSettings(), this.endpoints.refreshAllEndpoints(!0);
  }
  /**
   * `afterChange` hook callback.
   *
   * @private
   * @param {Array} changes 2D array containing information about each of the edited cells.
   * @param {string} source The string that identifies source of changes.
   */
  onAfterChange(e, t) {
    e && t !== "ColumnSummary.reset" && t !== "ColumnSummary.set" && t !== "loadData" && this.endpoints.refreshChangedEndpoints(e);
  }
  /**
   * `beforeRowMove` hook callback.
   *
   * @private
   * @param {Array} rows Array of visual row indexes to be moved.
   * @param {number} finalIndex Visual row index, being a start index for the moved rows. Points to where the elements will be placed after the moving action.
   * To check the visualization of the final index, please take a look at [documentation](@/guides/rows/row-moving.md).
   */
  onAfterRowMove(e, t) {
    this.endpoints.resetSetupBeforeStructureAlteration("move_row", e[0], e.length, e, this.pluginName), this.endpoints.resetSetupAfterStructureAlteration("move_row", t, e.length, e, this.pluginName);
  }
}
class Yo {
  static get CLASS_EDITOR_CONTAINER() {
    return "htCommentsContainer";
  }
  static get CLASS_EDITOR() {
    return "htComments";
  }
  static get CLASS_INPUT() {
    return "htCommentTextArea";
  }
  static get CLASS_CELL() {
    return "htCommentCell";
  }
  constructor(e, t) {
    this.rootDocument = e, this.isRtl = t, this.container = null, this.editor = this.createEditor(), this.editorStyle = this.editor.style, this.hidden = !0, this.hide();
  }
  /**
   * Set position of the comments editor according to the  provided x and y coordinates.
   *
   * @param {number} x X position (in pixels).
   * @param {number} y Y position (in pixels).
   */
  setPosition(e, t) {
    this.editorStyle.left = `${e}px`, this.editorStyle.top = `${t}px`;
  }
  /**
   * Set the editor size according to the provided arguments.
   *
   * @param {number} width Width in pixels.
   * @param {number} height Height in pixels.
   */
  setSize(e, t) {
    if (e && t) {
      const n = this.getInputElement();
      n.style.width = `${e}px`, n.style.height = `${t}px`;
    }
  }
  /**
   * Returns the size of the comments editor.
   *
   * @returns {{ width: number, height: number }}
   */
  getSize() {
    return {
      width: ht(this.getInputElement()),
      height: At(this.getInputElement())
    };
  }
  /**
   * Reset the editor size to its initial state.
   */
  resetSize() {
    const e = this.getInputElement();
    e.style.width = "", e.style.height = "";
  }
  /**
   * Set the read-only state for the comments editor.
   *
   * @param {boolean} state The new read only state.
   */
  setReadOnlyState(e) {
    const t = this.getInputElement();
    t.readOnly = e;
  }
  /**
   * Show the comments editor.
   */
  show() {
    this.editorStyle.display = "block", this.hidden = !1;
  }
  /**
   * Hide the comments editor.
   */
  hide() {
    this.hidden || (this.editorStyle.display = "none"), this.hidden = !0;
  }
  /**
   * Checks if the editor is visible.
   *
   * @returns {boolean}
   */
  isVisible() {
    return this.editorStyle.display === "block";
  }
  /**
   * Set the comment value.
   *
   * @param {string} [value] The value to use.
   */
  setValue() {
    const t = (arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "") || "";
    this.getInputElement().value = t;
  }
  /**
   * Get the comment value.
   *
   * @returns {string}
   */
  getValue() {
    return this.getInputElement().value;
  }
  /**
   * Checks if the comment input element is focused.
   *
   * @returns {boolean}
   */
  isFocused() {
    return this.rootDocument.activeElement === this.getInputElement();
  }
  /**
   * Focus the comments input element.
   */
  focus() {
    this.getInputElement().focus();
  }
  /**
   * Create the `textarea` to be used as a comments editor.
   *
   * @returns {HTMLElement}
   */
  createEditor() {
    const e = this.rootDocument.createElement("div"), t = this.rootDocument.createElement("textarea");
    return e.style.display = "none", this.container = this.rootDocument.createElement("div"), this.container.setAttribute("dir", this.isRtl ? "rtl" : "ltr"), ie(this.container, Yo.CLASS_EDITOR_CONTAINER), this.rootDocument.body.appendChild(this.container), ie(e, Yo.CLASS_EDITOR), ie(t, Yo.CLASS_INPUT), e.appendChild(t), this.container.appendChild(e), e;
  }
  /**
   * Get the input element.
   *
   * @returns {HTMLElement}
   */
  getInputElement() {
    return this.editor.querySelector(`.${Yo.CLASS_INPUT}`);
  }
  /**
   * Destroy the comments editor.
   */
  destroy() {
    const e = this.container ? this.container.parentNode : null;
    this.editor.parentNode.removeChild(this.editor), this.editor = null, this.editorStyle = null, e && e.removeChild(this.container);
  }
}
const MU = Yo, ze = "---------";
function _U() {
  return {
    name: ze
  };
}
function IU(s) {
  return Ye(s, (e) => ({
    start: e.getTopStartCorner(),
    end: e.getBottomEndCorner()
  }));
}
function wl(s) {
  return Ne(s, "htSeparator");
}
function OU(s) {
  return Ne(s, "htSubmenu");
}
function Cl(s) {
  return Ne(s, "htDisabled");
}
function vl(s) {
  return Ne(s, "htSelectionDisabled");
}
function uo(s) {
  const e = s.getSelected();
  return !e || e[0] < 0 ? null : e;
}
function AU(s, e) {
  return s.indexOf(e) !== -1 ? s : `${s.replace("htTop", "").replace("htMiddle", "").replace("htBottom", "").replace("  ", "")} ${e}`;
}
function PU(s, e) {
  return s.indexOf(e) !== -1 ? s : `${s.replace("htLeft", "").replace("htCenter", "").replace("htRight", "").replace("htJustify", "").replace("  ", "")} ${e}`;
}
function Di(s, e) {
  const t = {};
  return D(s, (n) => {
    n.forAll((o, r) => {
      o >= 0 && r >= 0 && (t[o] || (t[o] = []), t[o][r] = e(o, r));
    });
  }), t;
}
function ci(s, e, t, n, o) {
  D(s, (r) => {
    r.forAll((a, l) => {
      a >= 0 && l >= 0 && DU(a, l, e, t, n, o);
    });
  });
}
function DU(s, e, t, n, o, r) {
  const a = o(s, e);
  let l = n;
  a.className && (t === "vertical" ? l = AU(a.className, n) : l = PU(a.className, n)), r(s, e, "className", l);
}
function pn(s, e) {
  let t = !1;
  return Array.isArray(s) && D(s, (n) => (n.forAll((o, r) => {
    if (o >= 0 && r >= 0 && e(o, r))
      return t = !0, !1;
  }), t)), t;
}
function Bn(s) {
  return `<span class="selected">${String.fromCharCode(10003)}</span>${s}`;
}
function HU(s, e) {
  return !s.hidden || !(typeof s.hidden == "function" && s.hidden.call(e));
}
function w0(s, e) {
  const t = s.slice(0);
  for (let n = 0; n < t.length && t[n].name === e; )
    t.shift();
  return t;
}
function kU(s, e) {
  let t = s.slice(0);
  return t.reverse(), t = w0(t, e), t.reverse(), t;
}
function NU(s) {
  const e = [];
  return D(s, (t, n) => {
    n > 0 ? e[e.length - 1].name !== t.name && e.push(t) : e.push(t);
  }), e;
}
function LU(s) {
  let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : ze, t = s.slice(0);
  return t = w0(t, e), t = kU(t, e), t = NU(t), t;
}
const $U = 250, FU = 250;
class C0 {
  constructor(e) {
    this.wasLastActionShow = !0, this.showDebounced = null, this.hidingTimer = null, this.updateDelay(e);
  }
  /**
   * Responsible for hiding comment after proper delay.
   */
  hide() {
    this.wasLastActionShow = !1, this.hidingTimer = setTimeout(() => {
      this.wasLastActionShow === !1 && this.runLocalHooks("hide");
    }, FU);
  }
  /**
   * Responsible for showing comment after proper delay.
   *
   * @param {object} range Coordinates of selected cell.
   */
  show(e) {
    this.wasLastActionShow = !0, this.showDebounced(e);
  }
  /**
   * Cancel hiding comment.
   */
  cancelHiding() {
    this.wasLastActionShow = !0, clearTimeout(this.hidingTimer), this.hidingTimer = null;
  }
  /**
   * Update the switch settings.
   *
   * @param {number} displayDelay Delay of showing the comments (in milliseconds).
   */
  updateDelay() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : $U;
    this.showDebounced = $b((t) => {
      this.wasLastActionShow && this.runLocalHooks("show", t.from.row, t.from.col);
    }, e);
  }
  /**
   * Destroy the switcher.
   */
  destroy() {
    this.clearLocalHooks();
  }
}
ft(C0, Rs);
const VU = C0, Bu = "comments", BU = 60, yl = /* @__PURE__ */ new WeakMap(), cn = "comment", xo = "value", Lv = "style", Sl = "readOnly";
class WU extends at {
  static get PLUGIN_KEY() {
    return Bu;
  }
  static get PLUGIN_PRIORITY() {
    return BU;
  }
  constructor(e) {
    super(e), this.editor = null, this.displaySwitch = null, this.eventManager = null, this.range = {}, this.preventEditorAutoSwitch = !1, yl.set(this, {
      tempEditorDimensions: {},
      cellBelowCursor: null
    });
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link Comments#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return !!this.hot.getSettings()[Bu];
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    this.enabled || (this.editor || (this.editor = new MU(this.hot.rootDocument, this.hot.isRtl())), this.eventManager || (this.eventManager = new Dt(this)), this.displaySwitch || (this.displaySwitch = new VU(this.getDisplayDelaySetting())), this.addHook("afterContextMenuDefaultOptions", (e) => this.addToContextMenu(e)), this.addHook("afterRenderer", (e, t, n, o, r, a) => this.onAfterRenderer(e, a)), this.addHook("afterScrollHorizontally", () => this.hide()), this.addHook("afterScrollVertically", () => this.hide()), this.addHook("afterBeginEditing", () => this.hide()), this.displaySwitch.addLocalHook("hide", () => this.hide()), this.displaySwitch.addLocalHook("show", (e, t) => this.showAtCell(e, t)), this.registerListeners(), super.enablePlugin());
  }
  /**
   * Updates the plugin's state.
   *
   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
   *   - [`comments`](@/api/options.md#comments)
   */
  updatePlugin() {
    this.disablePlugin(), this.enablePlugin(), super.updatePlugin(), this.displaySwitch.updateDelay(this.getDisplayDelaySetting());
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    super.disablePlugin();
  }
  /**
   * Registers all necessary DOM listeners.
   *
   * @private
   */
  registerListeners() {
    const {
      rootDocument: e
    } = this.hot;
    this.eventManager.addEventListener(e, "mouseover", (t) => this.onMouseOver(t)), this.eventManager.addEventListener(e, "mousedown", (t) => this.onMouseDown(t)), this.eventManager.addEventListener(e, "mouseup", () => this.onMouseUp()), this.eventManager.addEventListener(this.editor.getInputElement(), "blur", () => this.onEditorBlur()), this.eventManager.addEventListener(this.editor.getInputElement(), "mousedown", (t) => this.onEditorMouseDown(t)), this.eventManager.addEventListener(this.editor.getInputElement(), "mouseup", (t) => this.onEditorMouseUp(t));
  }
  /**
   * Sets the current cell range to be able to use general methods like {@link Comments#setComment}, {@link Comments#removeComment}, {@link Comments#show}.
   *
   * @param {object} range Object with `from` property, each with `row` and `col` properties.
   */
  setRange(e) {
    this.range = e;
  }
  /**
   * Clears the currently selected cell.
   */
  clearRange() {
    this.range = {};
  }
  /**
   * Checks if the event target is a cell containing a comment.
   *
   * @private
   * @param {Event} event DOM event.
   * @returns {boolean}
   */
  targetIsCellWithComment(e) {
    const t = ji(e.target, "TD", "TBODY");
    return !!(t && Ne(t, "htCommentCell") && ji(t, [this.hot.rootElement]));
  }
  /**
   * Checks if the event target is a comment textarea.
   *
   * @private
   * @param {Event} event DOM event.
   * @returns {boolean}
   */
  targetIsCommentTextArea(e) {
    return this.editor.getInputElement() === e.target;
  }
  /**
   * Sets a comment for a cell according to the previously set range (see {@link Comments#setRange}).
   *
   * @param {string} value Comment contents.
   */
  setComment(e) {
    if (!this.range.from)
      throw new Error('Before using this method, first set cell range (hot.getPlugin("comment").setRange())');
    const t = this.editor.getValue();
    let n = "";
    e != null ? n = e : t != null && (n = t);
    const o = this.range.from.row, r = this.range.from.col;
    this.updateCommentMeta(o, r, {
      [xo]: n
    }), this.hot.render();
  }
  /**
   * Sets a comment for a specified cell.
   *
   * @param {number} row Visual row index.
   * @param {number} column Visual column index.
   * @param {string} value Comment contents.
   */
  setCommentAtCell(e, t, n) {
    this.setRange({
      from: this.hot._createCellCoords(e, t)
    }), this.setComment(n);
  }
  /**
   * Removes a comment from a cell according to previously set range (see {@link Comments#setRange}).
   *
   * @param {boolean} [forceRender=true] If set to `true`, the table will be re-rendered at the end of the operation.
   */
  removeComment() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !0;
    if (!this.range.from)
      throw new Error('Before using this method, first set cell range (hot.getPlugin("comment").setRange())');
    this.hot.setCellMeta(this.range.from.row, this.range.from.col, cn), e && this.hot.render(), this.hide();
  }
  /**
   * Removes a comment from a specified cell.
   *
   * @param {number} row Visual row index.
   * @param {number} column Visual column index.
   * @param {boolean} [forceRender=true] If `true`, the table will be re-rendered at the end of the operation.
   */
  removeCommentAtCell(e, t) {
    let n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !0;
    this.setRange({
      from: this.hot._createCellCoords(e, t)
    }), this.removeComment(n);
  }
  /**
   * Gets comment from a cell according to previously set range (see {@link Comments#setRange}).
   *
   * @returns {string|undefined} Returns a content of the comment.
   */
  getComment() {
    const e = this.range.from.row, t = this.range.from.col;
    return this.getCommentMeta(e, t, xo);
  }
  /**
   * Gets comment from a cell at the provided coordinates.
   *
   * @param {number} row Visual row index.
   * @param {number} column Visual column index.
   * @returns {string|undefined} Returns a content of the comment.
   */
  getCommentAtCell(e, t) {
    return this.getCommentMeta(e, t, xo);
  }
  /**
   * Shows the comment editor accordingly to the previously set range (see {@link Comments#setRange}).
   *
   * @returns {boolean} Returns `true` if comment editor was shown.
   */
  show() {
    if (!this.range.from)
      throw new Error('Before using this method, first set cell range (hot.getPlugin("comment").setRange())');
    const {
      from: {
        row: e,
        col: t
      }
    } = this.range;
    if (e < 0 || e > this.hot.countSourceRows() - 1 || t < 0 || t > this.hot.countSourceCols() - 1)
      return !1;
    const n = this.hot.getCellMeta(this.range.from.row, this.range.from.col);
    return this.editor.setValue(n[cn] ? n[cn][xo] : ""), this.editor.show(), this.refreshEditor(!0), !0;
  }
  /**
   * Shows comment editor according to cell coordinates.
   *
   * @param {number} row Visual row index.
   * @param {number} column Visual column index.
   * @returns {boolean} Returns `true` if comment editor was shown.
   */
  showAtCell(e, t) {
    return this.setRange({
      from: this.hot._createCellCoords(e, t)
    }), this.show();
  }
  /**
   * Hides the comment editor.
   */
  hide() {
    this.editor.hide();
  }
  /**
   * Refreshes comment editor position and styling.
   *
   * @param {boolean} [force=false] If `true` then recalculation will be forced.
   */
  refreshEditor() {
    var e, t;
    if (!(arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1) && (!this.range.from || !this.editor.isVisible()))
      return;
    const {
      rowIndexMapper: o,
      columnIndexMapper: r
    } = this.hot, {
      row: a,
      col: l
    } = this.range.from;
    let c = o.getRenderableFromVisualIndex(a), h = r.getRenderableFromVisualIndex(l);
    const u = c === null;
    this.editor.setPosition(0, 0), c === null && (c = o.getRenderableFromVisualIndex(o.getNearestNotHiddenIndex(a, -1))), h === null && (h = r.getRenderableFromVisualIndex(r.getNearestNotHiddenIndex(l, -1)));
    const f = c === null, g = h === null;
    c = (e = c) !== null && e !== void 0 ? e : 0, h = (t = h) !== null && t !== void 0 ? t : 0;
    const {
      rootWindow: m,
      view: {
        _wt: w
      }
    } = this.hot, {
      wtTable: C
    } = w, S = w.getCell({
      row: c,
      col: h
    }, !0), x = this.getCommentMeta(a, l, Lv);
    x ? this.editor.setSize(x.width, x.height) : this.editor.resetSize();
    const T = g ? 0 : C.getStretchedColumnWidth(h), M = u && !f ? At(S) : 0, {
      left: _,
      top: P,
      width: j,
      height: H
    } = S.getBoundingClientRect(), {
      width: Z,
      height: X
    } = this.editor.getSize(), {
      innerWidth: F,
      innerHeight: z
    } = this.hot.rootWindow, ee = this.hot.rootDocument.documentElement;
    let oe = _ + m.scrollX + T, fe = P + m.scrollY + M;
    this.hot.isRtl() && (oe -= Z + T), this.hot.isLtr() && _ + j + Z > F ? oe = _ + m.scrollX - Z - 1 : this.hot.isRtl() && oe < -(ee.scrollWidth - ee.clientWidth) && (oe = _ + m.scrollX + T + 1), P + X > z && (fe -= X - H + 1), this.editor.setPosition(oe, fe), this.editor.setReadOnlyState(this.getCommentMeta(a, l, Sl));
  }
  /**
   * Checks if there is a comment for selected range.
   *
   * @private
   * @returns {boolean}
   */
  checkSelectionCommentsConsistency() {
    const e = this.hot.getSelectedRangeLast();
    if (!e)
      return !1;
    let t = !1;
    const n = e.getTopStartCorner();
    return this.getCommentMeta(n.row, n.col, xo) && (t = !0), t;
  }
  /**
   * Sets or update the comment-related cell meta.
   *
   * @param {number} row Visual row index.
   * @param {number} column Visual column index.
   * @param {object} metaObject Object defining all the comment-related meta information.
   */
  updateCommentMeta(e, t, n) {
    const o = this.hot.getCellMeta(e, t)[cn];
    let r;
    o ? (r = ms(o), lh(r, n)) : r = n, this.hot.setCellMeta(e, t, cn, r);
  }
  /**
   * Gets the comment related meta information.
   *
   * @param {number} row Visual row index.
   * @param {number} column Visual column index.
   * @param {string} property Cell meta property.
   * @returns {Mixed}
   */
  getCommentMeta(e, t, n) {
    const o = this.hot.getCellMeta(e, t);
    if (o[cn])
      return o[cn][n];
  }
  /**
   * `mousedown` event callback.
   *
   * @private
   * @param {MouseEvent} event The `mousedown` event.
   */
  onMouseDown(e) {
    if (!(!this.hot.view || !this.hot.view._wt) && !this.preventEditorAutoSwitch && !this.targetIsCommentTextArea(e)) {
      const t = ji(e.target, "TD", "TBODY");
      let n = null;
      t && (n = this.hot.getCoords(t)), (!t || this.range.from && n && (this.range.from.row !== n.row || this.range.from.col !== n.col)) && this.hide();
    }
  }
  /**
   * `mouseover` event callback.
   *
   * @private
   * @param {MouseEvent} event The `mouseover` event.
   */
  onMouseOver(e) {
    const t = yl.get(this), {
      rootDocument: n
    } = this.hot;
    if (!(this.preventEditorAutoSwitch || this.editor.isFocused() || Ne(e.target, "wtBorder") || t.cellBelowCursor === e.target || !this.editor))
      if (t.cellBelowCursor = n.elementFromPoint(e.clientX, e.clientY), this.targetIsCellWithComment(e)) {
        const o = this.hot._createCellRange(this.hot.getCoords(e.target));
        this.displaySwitch.show(o);
      } else
        Ki(e.target, n) && !this.targetIsCommentTextArea(e) && this.displaySwitch.hide();
  }
  /**
   * `mouseup` event callback.
   *
   * @private
   */
  onMouseUp() {
    this.preventEditorAutoSwitch = !1;
  }
  /**
   * The `afterRenderer` hook callback.
   *
   * @private
   * @param {HTMLTableCellElement} TD The rendered `TD` element.
   * @param {object} cellProperties The rendered cell's property object.
   */
  onAfterRenderer(e, t) {
    t[cn] && t[cn][xo] && ie(e, t.commentedCellClassName);
  }
  /**
   * `blur` event callback for the comment editor.
   *
   * @private
   */
  onEditorBlur() {
    this.setComment();
  }
  /**
   * `mousedown` hook. Along with `onEditorMouseUp` used to simulate the textarea resizing event.
   *
   * @private
   * @param {MouseEvent} event The `mousedown` event.
   */
  onEditorMouseDown(e) {
    const t = yl.get(this);
    t.tempEditorDimensions = {
      width: ht(e.target),
      height: At(e.target)
    };
  }
  /**
   * `mouseup` hook. Along with `onEditorMouseDown` used to simulate the textarea resizing event.
   *
   * @private
   * @param {MouseEvent} event The `mouseup` event.
   */
  onEditorMouseUp(e) {
    const t = yl.get(this), n = ht(e.target), o = At(e.target);
    (n !== t.tempEditorDimensions.width + 1 || o !== t.tempEditorDimensions.height + 2) && this.updateCommentMeta(this.range.from.row, this.range.from.col, {
      [Lv]: {
        width: n,
        height: o
      }
    });
  }
  /**
   * Context Menu's "Add comment" callback. Results in showing the comment editor.
   *
   * @private
   */
  onContextMenuAddComment() {
    const e = this.hot.getSelectedRangeLast();
    this.preventEditorAutoSwitch = !0, this.displaySwitch.cancelHiding(), this.setRange({
      from: e.highlight
    }), this.show(), this.hot.deselectCell(), this.editor.focus();
  }
  /**
   * Context Menu's "remove comment" callback.
   *
   * @private
   */
  onContextMenuRemoveComment() {
    const e = this.hot.getSelectedRangeLast();
    this.preventEditorAutoSwitch = !0, e.forAll((t, n) => {
      t >= 0 && n >= 0 && this.removeCommentAtCell(t, n, !1);
    }), this.hot.render();
  }
  /**
   * Context Menu's "make comment read-only" callback.
   *
   * @private
   */
  onContextMenuMakeReadOnly() {
    const e = this.hot.getSelectedRangeLast();
    this.preventEditorAutoSwitch = !0, e.forAll((t, n) => {
      if (t >= 0 && n >= 0) {
        const o = !!this.getCommentMeta(t, n, Sl);
        this.updateCommentMeta(t, n, {
          [Sl]: !o
        });
      }
    });
  }
  /**
   * Add Comments plugin options to the Context Menu.
   *
   * @private
   * @param {object} defaultOptions The menu options.
   */
  addToContextMenu(e) {
    const t = () => this.hot.rowIndexMapper.getRenderableIndexesLength() > 0 && this.hot.columnIndexMapper.getRenderableIndexesLength() > 0;
    e.items.push({
      name: "---------"
    }, {
      key: "commentsAddEdit",
      name: () => this.checkSelectionCommentsConsistency() ? this.hot.getTranslatedPhrase(pm) : this.hot.getTranslatedPhrase(mm),
      callback: () => this.onContextMenuAddComment(),
      disabled: () => t() ? !(this.hot.getSelectedLast() && !this.hot.selection.isSelectedByCorner()) : !0
    }, {
      key: "commentsRemove",
      name() {
        return this.getTranslatedPhrase(wm);
      },
      callback: () => this.onContextMenuRemoveComment(),
      disabled: () => t() ? !(this.hot.getSelectedLast() && !this.hot.selection.isSelectedByCorner()) : !0
    }, {
      key: "commentsReadOnly",
      name() {
        let n = this.getTranslatedPhrase(Cm);
        return pn(this.getSelectedRangeLast(), (r, a) => {
          let l = this.getCellMeta(r, a)[cn];
          if (l && (l = l[Sl]), l)
            return !0;
        }) && (n = Bn(n)), n;
      },
      callback: () => this.onContextMenuMakeReadOnly(),
      disabled: () => t() ? !(this.hot.getSelectedLast() && !this.hot.selection.isSelectedByCorner()) || !this.checkSelectionCommentsConsistency() : !0
    });
  }
  /**
   * Get `displayDelay` setting of comment plugin.
   *
   * @private
   * @returns {number|undefined}
   */
  getDisplayDelaySetting() {
    const e = this.hot.getSettings()[Bu];
    if (Ge(e))
      return e.displayDelay;
  }
  /**
   * Destroys the plugin instance.
   */
  destroy() {
    this.editor && this.editor.destroy(), this.displaySwitch && this.displaySwitch.destroy(), super.destroy();
  }
}
var $v = iS, UU = TypeError, zU = function(s, e) {
  if (!delete s[e])
    throw UU("Cannot delete property " + $v(e) + " of " + $v(s));
}, YU = oo, GU = zc, jU = Gc, KU = SS, XU = zU, qU = bS, ZU = [].unshift(0) !== 1, QU = function() {
  try {
    Object.defineProperty([], "length", { writable: !1 }).unshift();
  } catch (s) {
    return s instanceof TypeError;
  }
}, JU = ZU || !QU();
YU({ target: "Array", proto: !0, arity: 1, forced: JU }, {
  // eslint-disable-next-line no-unused-vars -- required for `.length`
  unshift: function(e) {
    var t = GU(this), n = jU(t), o = arguments.length;
    if (o) {
      qU(n + o);
      for (var r = n; r--; ) {
        var a = r + o;
        r in t ? t[a] = t[r] : XU(t, a);
      }
      for (var l = 0; l < o; l++)
        t[l] = arguments[l];
    }
    return KU(t, n + o);
  }
});
class ez {
  constructor(e) {
    this.hot = e, this.commands = {}, this.commonCallback = null;
  }
  /**
   * Register command.
   *
   * @param {string} name Command name.
   * @param {object} commandDescriptor Command descriptor object with properties like `key` (command id),
   *                                   `callback` (task to execute), `name` (command name), `disabled` (command availability).
   */
  registerCommand(e, t) {
    this.commands[e] = t;
  }
  /**
   * Set common callback which will be trigger on every executed command.
   *
   * @param {Function} callback Function which will be fired on every command execute.
   */
  setCommonCallback(e) {
    this.commonCallback = e;
  }
  /**
   * Execute command by its name.
   *
   * @param {string} commandName Command id.
   * @param {*} params Arguments passed to command task.
   */
  execute(e) {
    for (var t = arguments.length, n = new Array(t > 1 ? t - 1 : 0), o = 1; o < t; o++)
      n[o - 1] = arguments[o];
    const r = e.split(":"), a = r[0], l = r.length === 2 ? r[1] : null;
    let c = this.commands[a];
    if (!c)
      throw new Error(`Menu command '${a}' not exists.`);
    if (l && c.submenu && (c = tz(l, c.submenu.items)), c.disabled === !0 || typeof c.disabled == "function" && c.disabled.call(this.hot) === !0 || Lt(c, "submenu"))
      return;
    const h = [];
    typeof c.callback == "function" && h.push(c.callback), typeof this.commonCallback == "function" && h.push(this.commonCallback), n.unshift(r.join(":")), D(h, (u) => u.apply(this.hot, n));
  }
}
function tz(s, e) {
  let t;
  return D(e, (n) => {
    const o = n.key ? n.key.split(":") : null;
    if (Array.isArray(o) && o[1] === s)
      return t = n, !1;
  }), t;
}
const v0 = ez, Fs = "alignment";
function sz() {
  return {
    key: Fs,
    name() {
      return this.getTranslatedPhrase(vm);
    },
    disabled() {
      return this.countRows() === 0 || this.countCols() === 0 ? !0 : !(this.getSelectedRange() && !this.selection.isSelectedByCorner());
    },
    submenu: {
      items: [{
        key: `${Fs}:left`,
        name() {
          let s = this.getTranslatedPhrase(ym);
          return pn(this.getSelectedRange(), (t, n) => {
            const o = this.getCellMeta(t, n).className;
            if (o && o.indexOf("htLeft") !== -1)
              return !0;
          }) && (s = Bn(s)), s;
        },
        callback() {
          const s = this.getSelectedRange(), e = Di(s, (o, r) => this.getCellMeta(o, r).className), t = "horizontal", n = "htLeft";
          this.runHooks("beforeCellAlignment", e, s, t, n), ci(s, t, n, (o, r) => this.getCellMeta(o, r), (o, r, a, l) => this.setCellMeta(o, r, a, l)), this.render();
        },
        disabled: !1
      }, {
        key: `${Fs}:center`,
        name() {
          let s = this.getTranslatedPhrase(Sm);
          return pn(this.getSelectedRange(), (t, n) => {
            const o = this.getCellMeta(t, n).className;
            if (o && o.indexOf("htCenter") !== -1)
              return !0;
          }) && (s = Bn(s)), s;
        },
        callback() {
          const s = this.getSelectedRange(), e = Di(s, (o, r) => this.getCellMeta(o, r).className), t = "horizontal", n = "htCenter";
          this.runHooks("beforeCellAlignment", e, s, t, n), ci(s, t, n, (o, r) => this.getCellMeta(o, r), (o, r, a, l) => this.setCellMeta(o, r, a, l)), this.render();
        },
        disabled: !1
      }, {
        key: `${Fs}:right`,
        name() {
          let s = this.getTranslatedPhrase(bm);
          return pn(this.getSelectedRange(), (t, n) => {
            const o = this.getCellMeta(t, n).className;
            if (o && o.indexOf("htRight") !== -1)
              return !0;
          }) && (s = Bn(s)), s;
        },
        callback() {
          const s = this.getSelectedRange(), e = Di(s, (o, r) => this.getCellMeta(o, r).className), t = "horizontal", n = "htRight";
          this.runHooks("beforeCellAlignment", e, s, t, n), ci(s, t, n, (o, r) => this.getCellMeta(o, r), (o, r, a, l) => this.setCellMeta(o, r, a, l)), this.render();
        },
        disabled: !1
      }, {
        key: `${Fs}:justify`,
        name() {
          let s = this.getTranslatedPhrase(Rm);
          return pn(this.getSelectedRange(), (t, n) => {
            const o = this.getCellMeta(t, n).className;
            if (o && o.indexOf("htJustify") !== -1)
              return !0;
          }) && (s = Bn(s)), s;
        },
        callback() {
          const s = this.getSelectedRange(), e = Di(s, (o, r) => this.getCellMeta(o, r).className), t = "horizontal", n = "htJustify";
          this.runHooks("beforeCellAlignment", e, s, t, n), ci(s, t, n, (o, r) => this.getCellMeta(o, r), (o, r, a, l) => this.setCellMeta(o, r, a, l)), this.render();
        },
        disabled: !1
      }, {
        name: ze
      }, {
        key: `${Fs}:top`,
        name() {
          let s = this.getTranslatedPhrase(Em);
          return pn(this.getSelectedRange(), (t, n) => {
            const o = this.getCellMeta(t, n).className;
            if (o && o.indexOf("htTop") !== -1)
              return !0;
          }) && (s = Bn(s)), s;
        },
        callback() {
          const s = this.getSelectedRange(), e = Di(s, (o, r) => this.getCellMeta(o, r).className), t = "vertical", n = "htTop";
          this.runHooks("beforeCellAlignment", e, s, t, n), ci(s, t, n, (o, r) => this.getCellMeta(o, r), (o, r, a, l) => this.setCellMeta(o, r, a, l)), this.render();
        },
        disabled: !1
      }, {
        key: `${Fs}:middle`,
        name() {
          let s = this.getTranslatedPhrase(xm);
          return pn(this.getSelectedRange(), (t, n) => {
            const o = this.getCellMeta(t, n).className;
            if (o && o.indexOf("htMiddle") !== -1)
              return !0;
          }) && (s = Bn(s)), s;
        },
        callback() {
          const s = this.getSelectedRange(), e = Di(s, (o, r) => this.getCellMeta(o, r).className), t = "vertical", n = "htMiddle";
          this.runHooks("beforeCellAlignment", e, s, t, n), ci(s, t, n, (o, r) => this.getCellMeta(o, r), (o, r, a, l) => this.setCellMeta(o, r, a, l)), this.render();
        },
        disabled: !1
      }, {
        key: `${Fs}:bottom`,
        name() {
          let s = this.getTranslatedPhrase(Tm);
          return pn(this.getSelectedRange(), (t, n) => {
            const o = this.getCellMeta(t, n).className;
            if (o && o.indexOf("htBottom") !== -1)
              return !0;
          }) && (s = Bn(s)), s;
        },
        callback() {
          const s = this.getSelectedRange(), e = Di(s, (o, r) => this.getCellMeta(o, r).className), t = "vertical", n = "htBottom";
          this.runHooks("beforeCellAlignment", e, s, t, n), ci(s, t, n, (o, r) => this.getCellMeta(o, r), (o, r, a, l) => this.setCellMeta(o, r, a, l)), this.render();
        },
        disabled: !1
      }]
    }
  };
}
const bh = "clear_column";
function nz() {
  return {
    key: bh,
    name() {
      return this.getTranslatedPhrase(om);
    },
    callback(s, e) {
      const t = e[0].start.col, n = e[0].end.col;
      this.countRows() && this.populateFromArray(0, t, [[null]], Math.max(e[0].start.row, e[0].end.row), n, "ContextMenu.clearColumn");
    },
    disabled() {
      return uo(this) ? !this.selection.isSelectedByColumnHeader() : !0;
    }
  };
}
const Fa = "col_left";
function iz() {
  return {
    key: Fa,
    name() {
      return this.getTranslatedPhrase(Qg);
    },
    callback() {
      const s = this.getSelectedRangeLast().getTopLeftCorner(), e = this.isRtl() ? "insert_col_end" : "insert_col_start";
      this.alter(e, s.col, 1, "ContextMenu.columnLeft");
    },
    disabled() {
      return !this.isColumnModificationAllowed() || !uo(this) ? !0 : this.selection.isSelectedByCorner() ? this.countCols() === 0 : this.selection.isSelectedByRowHeader() || this.countCols() >= this.getSettings().maxCols;
    },
    hidden() {
      return !this.getSettings().allowInsertColumn;
    }
  };
}
const Va = "col_right";
function oz() {
  return {
    key: Va,
    name() {
      return this.getTranslatedPhrase(Jg);
    },
    callback() {
      const s = this.getSelectedRangeLast().getTopRightCorner(), e = this.isRtl() ? "insert_col_start" : "insert_col_end";
      this.alter(e, s.col, 1, "ContextMenu.columnRight");
    },
    disabled() {
      return !this.isColumnModificationAllowed() || !uo(this) ? !0 : this.selection.isSelectedByCorner() ? !1 : this.selection.isSelectedByRowHeader() || this.countCols() >= this.getSettings().maxCols;
    },
    hidden() {
      return !this.getSettings().allowInsertColumn;
    }
  };
}
const Ba = "make_read_only";
function rz() {
  return {
    key: Ba,
    name() {
      let s = this.getTranslatedPhrase(im);
      return pn(this.getSelectedRange(), (t, n) => this.getCellMeta(t, n).readOnly) && (s = Bn(s)), s;
    },
    callback() {
      const s = this.getSelectedRange(), e = pn(s, (t, n) => this.getCellMeta(t, n).readOnly);
      D(s, (t) => {
        t.forAll((n, o) => {
          n >= 0 && o >= 0 && this.setCellMeta(n, o, "readOnly", !e);
        });
      }), this.render();
    },
    disabled() {
      return !!(this.selection.isSelectedByCorner() || this.countRows() === 0 || this.countCols() === 0 || !this.getSelectedRange() || this.getSelectedRange().length === 0);
    }
  };
}
const Rh = "redo";
function az() {
  return {
    key: Rh,
    name() {
      return this.getTranslatedPhrase(nm);
    },
    callback() {
      this.redo();
    },
    hidden() {
      const s = this.getPlugin("undoRedo");
      return !s || !s.isEnabled();
    },
    disabled() {
      return !this.getPlugin("undoRedo").isRedoAvailable();
    }
  };
}
const Wa = "remove_col";
function lz() {
  return {
    key: Wa,
    name() {
      const s = this.getSelected();
      let e = 0;
      if (s)
        if (s.length > 1)
          e = 1;
        else {
          const [, t, , n] = s[0];
          t - n !== 0 && (e = 1);
        }
      return this.getTranslatedPhrase(tm, e);
    },
    callback() {
      this.alter("remove_col", EB(this.getSelected()), null, "ContextMenu.removeColumn");
    },
    disabled() {
      if (!this.isColumnModificationAllowed() || !uo(this))
        return !0;
      const e = this.countCols();
      return this.selection.isSelectedByCorner() ? e === 0 : this.selection.isSelectedByRowHeader() || e === 0;
    },
    hidden() {
      return !this.getSettings().allowRemoveColumn;
    }
  };
}
const Eh = "remove_row";
function cz() {
  return {
    key: Eh,
    name() {
      const s = this.getSelected();
      let e = 0;
      if (s)
        if (s.length > 1)
          e = 1;
        else {
          const [t, , n] = s[0];
          t - n !== 0 && (e = 1);
        }
      return this.getTranslatedPhrase(em, e);
    },
    callback() {
      this.alter("remove_row", xB(this.getSelected()), 1, "ContextMenu.removeRow");
    },
    disabled() {
      if (!uo(this))
        return !0;
      const e = this.countRows();
      return this.selection.isSelectedByCorner() ? e === 0 : this.selection.isSelectedByColumnHeader() || e === 0;
    },
    hidden() {
      return !this.getSettings().allowRemoveRow;
    }
  };
}
const xh = "row_above";
function hz() {
  return {
    key: xh,
    name() {
      return this.getTranslatedPhrase(qg);
    },
    callback() {
      const s = this.getSelectedRangeLast().getTopLeftCorner();
      this.alter("insert_row_above", s.row, 1, "ContextMenu.rowAbove");
    },
    disabled() {
      return uo(this) ? this.selection.isSelectedByCorner() ? this.countRows() === 0 : this.selection.isSelectedByColumnHeader() || this.countRows() >= this.getSettings().maxRows : !0;
    },
    hidden() {
      return !this.getSettings().allowInsertRow;
    }
  };
}
const Th = "row_below";
function uz() {
  return {
    key: Th,
    name() {
      return this.getTranslatedPhrase(Zg);
    },
    callback() {
      const s = this.getSelectedRangeLast().getBottomRightCorner();
      this.alter("insert_row_below", s.row, 1, "ContextMenu.rowBelow");
    },
    disabled() {
      return uo(this) ? this.selection.isSelectedByCorner() ? !1 : this.selection.isSelectedByColumnHeader() || this.countRows() >= this.getSettings().maxRows : !0;
    },
    hidden() {
      return !this.getSettings().allowInsertRow;
    }
  };
}
const ya = "no_items";
function dz() {
  return {
    key: ya,
    name() {
      return this.getTranslatedPhrase(Xg);
    },
    disabled: !0,
    isCommand: !1
  };
}
const Mh = "undo";
function fz() {
  return {
    key: Mh,
    name() {
      return this.getTranslatedPhrase(sm);
    },
    callback() {
      this.undo();
    },
    hidden() {
      const s = this.getPlugin("undoRedo");
      return !s || !s.isEnabled();
    },
    disabled() {
      return !this.getPlugin("undoRedo").isUndoAvailable();
    }
  };
}
const gz = [xh, Th, Fa, Va, bh, Eh, Wa, Mh, Rh, Ba, Fs, ze, ya], mz = {
  [ze]: _U,
  [ya]: dz,
  [xh]: hz,
  [Th]: uz,
  [Fa]: iz,
  [Va]: oz,
  [bh]: nz,
  [Eh]: cz,
  [Wa]: lz,
  [Mh]: fz,
  [Rh]: az,
  [Ba]: rz,
  [Fs]: sz
};
function y0() {
  const s = {};
  return je(mz, (e, t) => {
    s[t] = e();
  }), s;
}
class pz {
  constructor(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
    this.hot = e, this.predefinedItems = y0(), this.defaultOrderPattern = t;
  }
  /**
   * Set predefined items.
   *
   * @param {Array} predefinedItemsCollection Array of predefined items.
   */
  setPredefinedItems(e) {
    const t = {};
    this.defaultOrderPattern.length = 0, je(e, (n, o) => {
      let r = "";
      n.name === ze ? (t[ze] = n, r = ze) : isNaN(parseInt(o, 10)) ? (n.key = n.key === void 0 ? o : n.key, t[o] = n, r = n.key) : (t[n.key] = n, r = n.key), this.defaultOrderPattern.push(r);
    }), this.predefinedItems = t;
  }
  /**
   * Get all menu items based on pattern.
   *
   * @param {Array|object|boolean} pattern Pattern which you can define by displaying menu items order. If `true` default
   *                                       pattern will be used.
   * @returns {Array}
   */
  getItems() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
    return wz(e, this.defaultOrderPattern, this.predefinedItems);
  }
}
function wz() {
  let s = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null, e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [], t = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
  const n = [];
  let o = s;
  return o && o.items ? o = o.items : Array.isArray(o) || (o = e), Ge(o) ? je(o, (r, a) => {
    let l = t[typeof r == "string" ? r : a];
    l || (l = r), Ge(r) ? Ut(l, r) : typeof l == "string" && (l = {
      name: l
    }), l.key === void 0 && (l.key = a), n.push(l);
  }) : D(o, (r, a) => {
    let l = t[r];
    !l && gz.indexOf(r) >= 0 || (l || (l = {
      name: r,
      key: `${a}`
    }), Ge(r) && Ut(l, r), l.key === void 0 && (l.key = a), n.push(l));
  }), n;
}
const S0 = pz;
class Cz {
  constructor(e, t) {
    const n = fa(t), o = tr(t);
    let r, a, l, c, h, u;
    this.rootWindow = t, this.type = this.getSourceType(e), this.type === "literal" ? (r = parseInt(e.top, 10), l = parseInt(e.left, 10), h = e.height || 0, u = e.width || 0, a = r, c = l, r += n, l += o) : this.type === "event" && (r = parseInt(e.pageY, 10), l = parseInt(e.pageX, 10), h = e.target.clientHeight, u = e.target.clientWidth, a = r - n, c = l - o), this.top = r, this.topRelative = a, this.left = l, this.leftRelative = c, this.scrollTop = n, this.scrollLeft = o, this.cellHeight = h, this.cellWidth = u;
  }
  /**
   * Get source type name.
   *
   * @param {*} object Event or Object with coordinates.
   * @returns {string} Returns one of this values: `'literal'`, `'event'`.
   */
  getSourceType(e) {
    let t = "literal";
    return e instanceof Event && (t = "event"), t;
  }
  /**
   * Checks if element can be placed above the cursor.
   *
   * @param {HTMLElement} element Element to check if it's size will fit above the cursor.
   * @returns {boolean}
   */
  fitsAbove(e) {
    return this.topRelative >= e.offsetHeight;
  }
  /**
   * Checks if element can be placed below the cursor.
   *
   * @param {HTMLElement} element Element to check if it's size will fit below the cursor.
   * @param {number} [viewportHeight] The viewport height.
   * @returns {boolean}
   */
  fitsBelow(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.rootWindow.innerHeight;
    return this.topRelative + e.offsetHeight <= t;
  }
  /**
   * Checks if element can be placed on the right of the cursor.
   *
   * @param {HTMLElement} element Element to check if it's size will fit on the right of the cursor.
   * @param {number} [viewportWidth] The viewport width.
   * @returns {boolean}
   */
  fitsOnRight(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.rootWindow.innerWidth;
    return this.leftRelative + this.cellWidth + e.offsetWidth <= t;
  }
  /**
   * Checks if element can be placed on the left on the cursor.
   *
   * @param {HTMLElement} element Element to check if it's size will fit on the left of the cursor.
   * @returns {boolean}
   */
  fitsOnLeft(e) {
    return this.leftRelative >= e.offsetWidth;
  }
}
const vz = Cz, Fv = 215, b0 = "menu", yz = b0;
class _h {
  /**
   * @param {Core} hotInstance Handsontable instance.
   * @param {MenuOptions} [options] Menu options.
   */
  constructor(e, t) {
    this.hot = e, this.options = t || {
      parent: null,
      name: null,
      className: "",
      keepInViewport: !0,
      standalone: !1,
      minWidth: Fv,
      container: this.hot.rootDocument.documentElement
    }, this.eventManager = new Dt(this), this.container = this.createContainer(this.options.name), this.hotMenu = null, this.hotSubMenus = {}, this.parentMenu = this.options.parent || null, this.menuItems = null, this.origOutsideClickDeselects = null, this.keyEvent = !1, this.offset = {
      above: 0,
      below: 0,
      left: 0,
      right: 0
    }, this._afterScrollCallback = null, this.registerEvents();
  }
  /**
   * Register event listeners.
   *
   * @private
   */
  registerEvents() {
    let e = this.hot.rootWindow;
    for (; e; )
      this.eventManager.addEventListener(e.document, "mousedown", (t) => this.onDocumentMouseDown(t)), this.eventManager.addEventListener(e.document, "contextmenu", (t) => this.onDocumentContextMenu(t)), e = wc(e);
  }
  /**
   * Set array of objects which defines menu items.
   *
   * @param {Array} menuItems Menu items to display.
   */
  setMenuItems(e) {
    this.menuItems = e;
  }
  /**
   * Returns currently selected menu item. Returns `null` if no item was selected.
   *
   * @returns {object|null}
   */
  getSelectedItem() {
    return this.hasSelectedItem() ? this.hotMenu.getSourceDataAtRow(this.hotMenu.getSelectedLast()[0]) : null;
  }
  /**
   * Checks if the menu has selected (highlighted) any item from the menu list.
   *
   * @returns {boolean}
   */
  hasSelectedItem() {
    return Array.isArray(this.hotMenu.getSelectedLast());
  }
  /**
   * Set offset menu position for specified area (`above`, `below`, `left` or `right`).
   *
   * @param {string} area Specified area name (`above`, `below`, `left` or `right`).
   * @param {number} offset Offset value.
   */
  setOffset(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
    this.offset[e] = t;
  }
  /**
   * Check if menu is using as sub-menu.
   *
   * @returns {boolean}
   */
  isSubMenu() {
    return this.parentMenu !== null;
  }
  /**
   * Open menu.
   *
   * @fires Hooks#beforeContextMenuShow
   * @fires Hooks#afterContextMenuShow
   */
  open() {
    var e = this;
    this.runLocalHooks("beforeOpen"), this.container.removeAttribute("style"), this.container.style.display = "block";
    const t = $b((g) => this.openSubMenu(g), 300), n = this.options.minWidth || Fv;
    let o = !1, r = Ws(this.menuItems, (g) => (g.key === ya && (o = !0), HU(g, this.hot)));
    if (r.length < 1 && !o)
      r.push(y0()[ya]);
    else if (r.length === 0)
      return;
    r = LU(r, ze);
    let a = !1;
    const l = {
      data: r,
      colHeaders: !1,
      autoColumnSize: !0,
      autoWrapRow: !1,
      modifyColWidth(g) {
        return ue(g) && g < n ? n : g;
      },
      autoRowSize: !1,
      readOnly: !0,
      editor: !1,
      copyPaste: !1,
      maxCols: 1,
      columns: [{
        data: "name",
        renderer: (g, m, w, C, S, x) => this.menuItemRenderer(g, m, w, C, S, x)
      }],
      renderAllRows: !0,
      fragmentSelection: !1,
      outsideClickDeselects: !1,
      disableVisualSelection: "area",
      layoutDirection: this.hot.isRtl() ? "rtl" : "ltr",
      afterOnCellMouseOver: (g, m) => {
        this.isAllSubMenusClosed() ? t(m.row) : this.openSubMenu(m.row);
      },
      rowHeights: (g) => r[g].name === ze ? 1 : 23,
      afterOnCellContextMenu: (g) => {
        g.preventDefault(), DC() && a && this.hasSelectedItem() && this.close(!0);
      },
      beforeOnCellMouseUp: (g) => {
        this.hasSelectedItem() && (a = !this.isCommandPassive(this.getSelectedItem()), this.executeCommand(g));
      },
      afterOnCellMouseUp: (g) => {
        (!DC() || !Ji(g)) && a && this.hasSelectedItem() && (vn() || Gb() ? setTimeout(() => this.close(!0), 325) : this.close(!0));
      },
      afterUnlisten: () => {
        !this.hasSelectedItem() && this.isOpened() && this.hotMenu.listen();
      }
    };
    this.origOutsideClickDeselects = this.hot.getSettings().outsideClickDeselects, this.hot.getSettings().outsideClickDeselects = !1, this.hotMenu = new Cp(this.container, l), this.hotMenu.addHook("afterInit", () => this.onAfterInit()), this.hotMenu.addHook("afterSelection", function() {
      return e.onAfterSelection(...arguments);
    }), this.hotMenu.init(), this.hotMenu.listen();
    const c = this.hotMenu.getShortcutManager(), h = c.addContext(yz), f = {
      ...{
        group: b0
      },
      runOnlyIf: (g) => yc(g.target) === !1 || this.container.contains(g.target) === !1
    };
    c.setActiveContextName("menu"), h.addShortcuts([{
      keys: [["Escape"]],
      callback: () => {
        this.keyEvent = !0, this.close(), this.keyEvent = !1;
      }
    }, {
      keys: [["ArrowDown"]],
      callback: () => {
        const g = this.hotMenu.getSelectedLast();
        this.keyEvent = !0, g ? this.selectNextCell(g[0], g[1]) : this.selectFirstCell(), this.keyEvent = !1;
      }
    }, {
      keys: [["ArrowUp"]],
      callback: () => {
        const g = this.hotMenu.getSelectedLast();
        this.keyEvent = !0, g ? this.selectPrevCell(g[0], g[1]) : this.selectLastCell(), this.keyEvent = !1;
      }
    }, {
      keys: [["ArrowRight"]],
      callback: () => {
        const g = this.hotMenu.getSelectedLast();
        if (this.keyEvent = !0, g) {
          const m = this.openSubMenu(g[0]);
          m && m.selectFirstCell();
        }
        this.keyEvent = !1;
      }
    }, {
      keys: [["ArrowLeft"]],
      callback: () => {
        const g = this.hotMenu.getSelectedLast();
        this.keyEvent = !0, g && this.isSubMenu() && (this.close(), this.parentMenu && this.parentMenu.hotMenu.listen()), this.keyEvent = !1;
      }
    }, {
      keys: [["Enter"]],
      callback: (g) => {
        const m = this.hotMenu.getSelectedLast();
        this.keyEvent = !0, this.hotMenu.getSourceDataAtRow(m[0]).submenu || (this.executeCommand(g), this.close(!0)), this.keyEvent = !1;
      }
    }, {
      keys: [["PageUp"]],
      callback: () => {
        const g = this.hotMenu.getSelectedLast();
        this.keyEvent = !0, g ? this.hotMenu.selection.transformStart(-this.hotMenu.countVisibleRows(), 0) : this.selectFirstCell(), this.keyEvent = !1;
      }
    }, {
      keys: [["PageDown"]],
      callback: () => {
        const g = this.hotMenu.getSelectedLast();
        this.keyEvent = !0, g ? this.hotMenu.selection.transformStart(this.hotMenu.countVisibleRows(), 0) : this.selectLastCell(), this.keyEvent = !1;
      }
    }], f), this.blockMainTableCallbacks(), this.runLocalHooks("afterOpen");
  }
  /**
   * Close menu.
   *
   * @param {boolean} [closeParent=false] If `true` try to close parent menu if exists.
   */
  close() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
    this.isOpened() && (e && this.parentMenu ? this.parentMenu.close() : (this.closeAllSubMenus(), this.container.style.display = "none", this.releaseMainTableCallbacks(), this.hotMenu.destroy(), this.hotMenu = null, this.hot.getSettings().outsideClickDeselects = this.origOutsideClickDeselects, this.runLocalHooks("afterClose"), this.parentMenu && this.parentMenu.hotMenu.listen()));
  }
  /**
   * Open sub menu at the provided row index.
   *
   * @param {number} row Row index.
   * @returns {Menu|boolean} Returns created menu or `false` if no one menu was created.
   */
  openSubMenu(e) {
    if (!this.hotMenu)
      return !1;
    const t = this.hotMenu.getCell(e, 0);
    if (this.closeAllSubMenus(), !t || !OU(t))
      return !1;
    const n = this.hotMenu.getSourceDataAtRow(e), o = new _h(this.hot, {
      parent: this,
      name: n.name,
      className: this.options.className,
      keepInViewport: !0,
      container: this.options.container
    });
    return o.setMenuItems(n.submenu.items), o.open(), o.setPosition(t.getBoundingClientRect()), this.hotSubMenus[n.key] = o, o;
  }
  /**
   * Close sub menu at row index.
   *
   * @param {number} row Row index.
   */
  closeSubMenu(e) {
    const t = this.hotMenu.getSourceDataAtRow(e), n = this.hotSubMenus[t.key];
    n && (n.destroy(), delete this.hotSubMenus[t.key]);
  }
  /**
   * Close all opened sub menus.
   */
  closeAllSubMenus() {
    D(this.hotMenu.getData(), (e, t) => this.closeSubMenu(t));
  }
  /**
   * Checks if all created and opened sub menus are closed.
   *
   * @returns {boolean}
   */
  isAllSubMenusClosed() {
    return Object.keys(this.hotSubMenus).length === 0;
  }
  /**
   * Destroy instance.
   */
  destroy() {
    const e = this.container.parentNode;
    this.clearLocalHooks(), this.close(), this.parentMenu = null, this.eventManager.destroy(), e && e.removeChild(this.container);
  }
  /**
   * Checks if menu was opened.
   *
   * @returns {boolean} Returns `true` if menu was opened.
   */
  isOpened() {
    return this.hotMenu !== null;
  }
  /**
   * Execute menu command.
   *
   * The `executeCommand()` method works only for selected cells.
   *
   * When no cells are selected, `executeCommand()` doesn't do anything.
   *
   * @param {Event} [event] The mouse event object.
   */
  executeCommand(e) {
    if (!this.isOpened() || !this.hasSelectedItem())
      return;
    const t = this.getSelectedItem();
    if (this.runLocalHooks("select", t, e), this.isCommandPassive(t))
      return;
    const n = this.hot.getSelectedRange(), o = n ? IU(n) : [];
    this.runLocalHooks("executeCommand", t.key, o, e), this.isSubMenu() && this.parentMenu.runLocalHooks("executeCommand", t.key, o, e);
  }
  /**
   * Checks if the passed command is passive or not. The command is passive when it's marked as
   * disabled, the descriptor object contains `isCommand` property set to `false`, command
   * is a separator, or the item is recognized as submenu. For passive items the menu is not
   * closed automatically after the user trigger the command through the UI.
   *
   * @param {object} commandDescriptor Selected menu item from the menu data source.
   * @returns {boolean}
   */
  isCommandPassive(e) {
    const {
      isCommand: t,
      name: n,
      disabled: o,
      submenu: r
    } = e, a = o === !0 || typeof o == "function" && o.call(this.hot) === !0;
    return t === !1 || n === ze || a === !0 || r;
  }
  /**
   * Set menu position based on dom event or based on literal object.
   *
   * @param {Event|object} coords Event or literal Object with coordinates.
   */
  setPosition(e) {
    const t = new vz(e, this.container.ownerDocument.defaultView);
    this.options.keepInViewport ? (t.fitsBelow(this.container) ? this.setPositionBelowCursor(t) : t.fitsAbove(this.container) ? this.setPositionAboveCursor(t) : this.setPositionBelowCursor(t), this.hot.isLtr() ? this.setHorizontalPositionForLtr(t) : this.setHorizontalPositionForRtl(t)) : (this.setPositionBelowCursor(t), this.setPositionOnRightOfCursor(t));
  }
  /**
   * Set menu horizontal position for RTL mode.
   *
   * @param {Cursor} cursor `Cursor` object.
   */
  setHorizontalPositionForRtl(e) {
    e.fitsOnLeft(this.container) ? this.setPositionOnLeftOfCursor(e) : this.setPositionOnRightOfCursor(e);
  }
  /**
   * Set menu horizontal position for LTR mode.
   *
   * @param {Cursor} cursor `Cursor` object.
   */
  setHorizontalPositionForLtr(e) {
    e.fitsOnRight(this.container) ? this.setPositionOnRightOfCursor(e) : this.setPositionOnLeftOfCursor(e);
  }
  /**
   * Set menu position above cursor object.
   *
   * @param {Cursor} cursor `Cursor` object.
   */
  setPositionAboveCursor(e) {
    let t = this.offset.above + e.top - this.container.offsetHeight;
    this.isSubMenu() && (t = e.top + e.cellHeight - this.container.offsetHeight + 3), this.container.style.top = `${t}px`;
  }
  /**
   * Set menu position below cursor object.
   *
   * @param {Cursor} cursor `Cursor` object.
   */
  setPositionBelowCursor(e) {
    let t = this.offset.below + e.top + 1;
    this.isSubMenu() && (t = e.top - 1), this.container.style.top = `${t}px`;
  }
  /**
   * Set menu position on the right of cursor object.
   *
   * @param {Cursor} cursor `Cursor` object.
   */
  setPositionOnRightOfCursor(e) {
    let t = e.left;
    if (this.isSubMenu()) {
      const {
        right: n
      } = this.parentMenu.container.getBoundingClientRect();
      t += e.cellWidth + n - (e.left + e.cellWidth);
    } else
      t += this.offset.right;
    this.container.style.left = `${t}px`;
  }
  /**
   * Set menu position on the left of cursor object.
   *
   * @param {Cursor} cursor `Cursor` object.
   */
  setPositionOnLeftOfCursor(e) {
    let t = this.offset.left + e.left - this.container.offsetWidth;
    if (this.isSubMenu()) {
      const {
        left: n
      } = this.parentMenu.container.getBoundingClientRect();
      t -= e.left - n;
    }
    this.container.style.left = `${t}px`;
  }
  /**
   * Select first cell in opened menu.
   */
  selectFirstCell() {
    const e = this.hotMenu.getCell(0, 0);
    wl(e) || Cl(e) || vl(e) ? this.selectNextCell(0, 0) : this.hotMenu.selectCell(0, 0);
  }
  /**
   * Select last cell in opened menu.
   */
  selectLastCell() {
    const e = this.hotMenu.countRows() - 1, t = this.hotMenu.getCell(e, 0);
    wl(t) || Cl(t) || vl(t) ? this.selectPrevCell(e, 0) : (this.hotMenu.selectCell(e, 0, void 0, void 0, !1), this.hotMenu.scrollViewportTo(e, 0, !0, !1));
  }
  /**
   * Select next cell in opened menu.
   *
   * @param {number} row Row index.
   * @param {number} col Column index.
   */
  selectNextCell(e, t) {
    const n = e + 1, o = n < this.hotMenu.countRows() ? this.hotMenu.getCell(n, t) : null;
    o && (wl(o) || Cl(o) || vl(o) ? this.selectNextCell(n, t) : this.hotMenu.selectCell(n, t));
  }
  /**
   * Select previous cell in opened menu.
   *
   * @param {number} row Row index.
   * @param {number} col Column index.
   */
  selectPrevCell(e, t) {
    const n = e - 1, o = n >= 0 ? this.hotMenu.getCell(n, t) : null;
    o && (wl(o) || Cl(o) || vl(o) ? this.selectPrevCell(n, t) : this.hotMenu.selectCell(n, t));
  }
  /**
   * Menu item renderer.
   *
   * @private
   * @param {Core} hot The Handsontable instance.
   * @param {HTMLCellElement} TD The rendered cell element.
   * @param {number} row The visual index.
   * @param {number} col The visual index.
   * @param {string} prop The column property if used.
   * @param {string} value The cell value.
   */
  menuItemRenderer(e, t, n, o, r, a) {
    const l = e.getSourceDataAtRow(n), c = this.hot.rootDocument.createElement("div"), h = (w) => Lt(w, "submenu"), u = (w) => new RegExp(ze, "i").test(w.name), f = (w) => w.disabled === !0 || typeof w.disabled == "function" && w.disabled.call(this.hot) === !0, g = (w) => w.disableSelection;
    let m = a;
    typeof m == "function" && (m = m.call(this.hot)), bn(t), ie(c, "htItemWrapper"), t.appendChild(c), u(l) ? ie(t, "htSeparator") : typeof l.renderer == "function" ? (ie(t, "htCustomMenuRenderer"), t.appendChild(l.renderer(e, c, n, o, r, m))) : ur(c, m), f(l) ? (ie(t, "htDisabled"), this.eventManager.addEventListener(t, "mouseenter", () => e.deselectCell())) : g(l) ? (ie(t, "htSelectionDisabled"), this.eventManager.addEventListener(t, "mouseenter", () => e.deselectCell())) : h(l) ? (ie(t, "htSubmenu"), g(l) ? this.eventManager.addEventListener(t, "mouseenter", () => e.deselectCell()) : this.eventManager.addEventListener(t, "mouseenter", () => e.selectCell(n, o, void 0, void 0, !1, !1))) : ($e(t, ["htSubmenu", "htDisabled"]), g(l) ? this.eventManager.addEventListener(t, "mouseenter", () => e.deselectCell()) : this.eventManager.addEventListener(t, "mouseenter", () => e.selectCell(n, o, void 0, void 0, !1, !1)));
  }
  /**
   * Create container/wrapper for handsontable.
   *
   * @private
   * @param {string} [name] Class name.
   * @returns {HTMLElement}
   */
  createContainer() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
    const t = this.options.container.ownerDocument;
    let n = e, o;
    return n && (mt(n) && (n = n.call(this.hot), n === null || wt(n) ? n = "" : n = n.toString()), n = n.replace(/[^A-z0-9]/g, "_"), n = `${this.options.className}Sub_${n}`, o = t.querySelector(`.${this.options.className}.${n}`)), o || (o = t.createElement("div"), ie(o, `htMenu ${this.options.className}`), n && ie(o, n), this.options.container.appendChild(o)), o;
  }
  /**
   * @private
   */
  blockMainTableCallbacks() {
    this._afterScrollCallback = function() {
    }, this.hot.addHook("afterScrollVertically", this._afterScrollCallback), this.hot.addHook("afterScrollHorizontally", this._afterScrollCallback);
  }
  /**
   * @private
   */
  releaseMainTableCallbacks() {
    this._afterScrollCallback && (this.hot.removeHook("afterScrollVertically", this._afterScrollCallback), this.hot.removeHook("afterScrollHorizontally", this._afterScrollCallback), this._afterScrollCallback = null);
  }
  /**
   * On after init listener.
   *
   * @private
   */
  onAfterInit() {
    const {
      wtTable: e
    } = this.hotMenu.view._wt, t = this.hotMenu.getSettings().data, n = e.hider.style, o = e.holder.style, r = parseInt(n.width, 10), a = cs(t, (l, c) => l + (c.name === ze ? 1 : 26), 0);
    o.width = `${r + 3}px`, o.height = `${a + 3}px`, n.height = o.height;
  }
  /**
   * On after selection listener.
   *
   * @param {number} r Selection start row index.
   * @param {number} c Selection start column index.
   * @param {number} r2 Selection end row index.
   * @param {number} c2 Selection end column index.
   * @param {object} preventScrolling Object with `value` property where its value change will be observed.
   */
  onAfterSelection(e, t, n, o, r) {
    this.keyEvent === !1 && (r.value = !0);
  }
  /**
   * Document mouse down listener.
   *
   * @private
   * @param {Event} event The mouse event object.
   */
  onDocumentMouseDown(e) {
    this.isOpened() && (this.options.standalone && this.hotMenu && !Ki(e.target, this.hotMenu.rootElement) ? this.close(!0) : (this.isAllSubMenusClosed() || this.isSubMenu()) && !Ki(e.target, ".htMenu") && this.close(!0));
  }
  /**
   * Document's contextmenu listener.
   *
   * @private
   * @param {MouseEvent} event The mouse event object.
   */
  onDocumentContextMenu(e) {
    this.isOpened() && Ne(e.target, "htCore") && Ki(e.target, this.hotMenu.rootElement) && e.preventDefault();
  }
}
ft(_h, Rs);
const Dp = _h, bl = "contextMenu", Sz = 70;
me.getSingleton().register("afterContextMenuDefaultOptions");
me.getSingleton().register("beforeContextMenuShow");
me.getSingleton().register("afterContextMenuShow");
me.getSingleton().register("afterContextMenuHide");
me.getSingleton().register("afterContextMenuExecute");
class Ih extends at {
  static get PLUGIN_KEY() {
    return bl;
  }
  static get PLUGIN_PRIORITY() {
    return Sz;
  }
  static get PLUGIN_DEPS() {
    return ["plugin:AutoColumnSize"];
  }
  /**
   * Context menu default items order when `contextMenu` options is set as `true`.
   *
   * @returns {string[]}
   */
  static get DEFAULT_ITEMS() {
    return [xh, Th, ze, Fa, Va, ze, Eh, Wa, ze, Mh, Rh, ze, Ba, ze, Fs];
  }
  /**
   * @param {Core} hotInstance Handsontable instance.
   */
  constructor(e) {
    super(e), this.eventManager = new Dt(this), this.commandExecutor = new v0(this.hot), this.itemsFactory = null, this.menu = null;
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link ContextMenu#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return !!this.hot.getSettings()[bl];
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    var e = this;
    if (this.enabled)
      return;
    const t = this.hot.getSettings()[bl];
    typeof t.callback == "function" && this.commandExecutor.setCommonCallback(t.callback), this.menu = new Dp(this.hot, {
      className: "htContextMenu",
      keepInViewport: !0,
      container: t.uiContainer || this.hot.rootDocument.body
    }), this.menu.addLocalHook("beforeOpen", () => this.onMenuBeforeOpen()), this.menu.addLocalHook("afterOpen", () => this.onMenuAfterOpen()), this.menu.addLocalHook("afterClose", () => this.onMenuAfterClose()), this.menu.addLocalHook("executeCommand", function() {
      for (var n = arguments.length, o = new Array(n), r = 0; r < n; r++)
        o[r] = arguments[r];
      return e.executeCommand.call(e, ...o);
    }), this.addHook("afterOnCellContextMenu", (n) => this.onAfterOnCellContextMenu(n)), super.enablePlugin();
  }
  /**
   * Updates the plugin's state.
   *
   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
   *  - [`contextMenu`](@/api/options.md#contextmenu)
   */
  updatePlugin() {
    this.disablePlugin(), this.enablePlugin(), super.updatePlugin();
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    this.close(), this.menu && (this.menu.destroy(), this.menu = null), super.disablePlugin();
  }
  /**
   * Opens menu and re-position it based on the passed coordinates.
   *
   * @param {Event} event The mouse event object.
   */
  open(e) {
    if (!this.menu || (this.prepareMenuItems(), this.menu.open(), !this.menu.isOpened()))
      return;
    let t = 0, n = 0;
    if (this.hot.rootDocument !== this.menu.container.ownerDocument) {
      const {
        frameElement: o
      } = this.hot.rootWindow, {
        top: r,
        left: a
      } = o.getBoundingClientRect();
      t = r - fa(e.view), n = a - tr(e.view);
    } else
      t = -1 * fa(this.menu.hotMenu.rootWindow), n = -1 * tr(this.menu.hotMenu.rootWindow);
    this.menu.setPosition({
      top: parseInt(e.pageY, 10) + t,
      left: parseInt(e.pageX, 10) + n
    });
  }
  /**
   * Closes the menu.
   */
  close() {
    this.menu && (this.menu.close(), this.itemsFactory = null);
  }
  /**
   * Execute context menu command.
   *
   * The `executeCommand()` method works only for selected cells.
   *
   * When no cells are selected, `executeCommand()` doesn't do anything.
   *
   * You can execute all predefined commands:
   *  * `'row_above'` - Insert row above
   *  * `'row_below'` - Insert row below
   *  * `'col_left'` - Insert column left
   *  * `'col_right'` - Insert column right
   *  * `'clear_column'` - Clear selected column
   *  * `'remove_row'` - Remove row
   *  * `'remove_col'` - Remove column
   *  * `'undo'` - Undo last action
   *  * `'redo'` - Redo last action
   *  * `'make_read_only'` - Make cell read only
   *  * `'alignment:left'` - Alignment to the left
   *  * `'alignment:top'` - Alignment to the top
   *  * `'alignment:right'` - Alignment to the right
   *  * `'alignment:bottom'` - Alignment to the bottom
   *  * `'alignment:middle'` - Alignment to the middle
   *  * `'alignment:center'` - Alignment to the center (justify).
   *
   * Or you can execute command registered in settings where `key` is your command name.
   *
   * @param {string} commandName The command name to be executed.
   * @param {*} params Additional parameters passed to command executor module.
   */
  executeCommand(e) {
    this.itemsFactory === null && this.prepareMenuItems();
    for (var t = arguments.length, n = new Array(t > 1 ? t - 1 : 0), o = 1; o < t; o++)
      n[o - 1] = arguments[o];
    this.commandExecutor.execute(e, ...n);
  }
  /**
   * Prepares available contextMenu's items list and registers them in commandExecutor.
   *
   * @private
   * @fires Hooks#afterContextMenuDefaultOptions
   * @fires Hooks#beforeContextMenuSetItems
   */
  prepareMenuItems() {
    this.itemsFactory = new S0(this.hot, Ih.DEFAULT_ITEMS);
    const e = this.hot.getSettings()[bl], t = {
      items: this.itemsFactory.getItems(e)
    };
    this.hot.runHooks("afterContextMenuDefaultOptions", t), this.itemsFactory.setPredefinedItems(t.items);
    const n = this.itemsFactory.getItems(e);
    this.hot.runHooks("beforeContextMenuSetItems", n), this.menu.setMenuItems(n), D(n, (o) => this.commandExecutor.registerCommand(o.key, o));
  }
  /**
   * On contextmenu listener.
   *
   * @private
   * @param {Event} event The mouse event object.
   */
  onAfterOnCellContextMenu(e) {
    const t = this.hot.getSettings(), n = t.rowHeaders, o = t.colHeaders;
    function r(l) {
      return l.nodeName === "TD" || l.parentNode.nodeName === "TD";
    }
    const a = e.target;
    this.close(), !Ne(a, "handsontableInput") && (e.preventDefault(), e.stopPropagation(), !(!(n || o) && !r(a) && !(Ne(a, "current") && Ne(a, "wtBorder"))) && this.open(e));
  }
  /**
   * On menu before open listener.
   *
   * @private
   */
  onMenuBeforeOpen() {
    this.hot.runHooks("beforeContextMenuShow", this);
  }
  /**
   * On menu after open listener.
   *
   * @private
   */
  onMenuAfterOpen() {
    this.hot.runHooks("afterContextMenuShow", this);
  }
  /**
   * On menu after close listener.
   *
   * @private
   */
  onMenuAfterClose() {
    this.hot.listen(), this.hot.runHooks("afterContextMenuHide", this);
  }
  /**
   * Destroys the plugin instance.
   */
  destroy() {
    this.close(), this.menu && this.menu.destroy(), super.destroy();
  }
}
Ih.SEPARATOR = {
  name: ze
};
function bz(s) {
  return {
    key: "copy",
    name() {
      return this.getTranslatedPhrase(rm);
    },
    callback() {
      s.copyCellsOnly();
    },
    disabled() {
      if (this.countRows() === 0 || this.countCols() === 0)
        return !0;
      const e = this.getSelected();
      return !e || e.length > 1;
    },
    hidden: !1
  };
}
function Rz(s) {
  return {
    key: "copy_column_headers_only",
    name() {
      const e = this.getSelectedRangeLast(), t = e ? Math.min(e.getWidth() - 1, 1) : 0;
      return this.getTranslatedPhrase(cm, t);
    },
    callback() {
      s.copyColumnHeadersOnly();
    },
    disabled() {
      if (!this.hasColHeaders())
        return !0;
      const e = this.getSelected();
      return !e || e.length > 1;
    },
    hidden: !1
  };
}
function Ez(s) {
  return {
    key: "copy_with_column_group_headers",
    name() {
      const e = this.getSelectedRangeLast(), t = e ? Math.min(e.getWidth() - 1, 1) : 0;
      return this.getTranslatedPhrase(lm, t);
    },
    callback() {
      s.copyWithAllColumnHeaders();
    },
    disabled() {
      if (!this.hasColHeaders() || !this.getSettings().nestedHeaders)
        return !0;
      const e = this.getSelected();
      return !e || e.length > 1;
    },
    hidden: !1
  };
}
function xz(s) {
  return {
    key: "copy_with_column_headers",
    name() {
      const e = this.getSelectedRangeLast(), t = e ? Math.min(e.getWidth() - 1, 1) : 0;
      return this.getTranslatedPhrase(am, t);
    },
    callback() {
      s.copyWithColumnHeaders();
    },
    disabled() {
      if (!this.hasColHeaders())
        return !0;
      const e = this.getSelected();
      return !e || e.length > 1;
    },
    hidden: !1
  };
}
function Tz(s) {
  return {
    key: "cut",
    name() {
      return this.getTranslatedPhrase(hm);
    },
    callback() {
      s.cut();
    },
    disabled() {
      if (this.countRows() === 0 || this.countCols() === 0)
        return !0;
      const e = this.getSelected();
      return !e || e.length > 1;
    },
    hidden: !1
  };
}
class Mz {
  constructor() {
    this.data = {};
  }
  setData(e, t) {
    this.data[e] = t;
  }
  getData(e) {
    return this.data[e] || void 0;
  }
}
class _z {
  constructor() {
    this.clipboardData = new Mz();
  }
}
class Hp {
  constructor(e) {
    this.rootDocument = e.defaultView ? e : e.ownerDocument, this.mainElement = null, this.eventManager = new Dt(this), this.listenersCount = /* @__PURE__ */ new WeakSet(), this.container = e;
  }
  /**
   * Switch to the secondary focusable element. Used when no any main focusable element is provided.
   */
  useSecondaryElement() {
    const e = Az(this.container);
    this.listenersCount.has(e) || (this.listenersCount.add(e), Vv(this.eventManager, e, this)), this.mainElement = e;
  }
  /**
   * Switch to the main focusable element.
   *
   * @param {HTMLElement} element The DOM element.
   */
  setFocusableElement(e) {
    this.listenersCount.has(e) || (this.listenersCount.add(e), Vv(this.eventManager, e, this)), this.mainElement = e;
  }
  /**
   * Get currently set focusable element.
   *
   * @returns {HTMLElement}
   */
  getFocusableElement() {
    return this.mainElement;
  }
  /**
   * Set focus to the focusable element.
   */
  focus() {
    this.mainElement.value = " ", vn() || iL(this.mainElement);
  }
}
ft(Hp, Rs);
const Ic = /* @__PURE__ */ new WeakMap();
function Iz(s) {
  const e = new Hp(s);
  let t = Ic.get(s);
  return t = isNaN(t) ? 0 : t, Ic.set(s, t + 1), e;
}
function Oz(s) {
  s.eventManager.clear();
}
const Wu = (s, e) => (t) => e.runLocalHooks(s, t);
function Vv(s, e, t) {
  s.addEventListener(e, "copy", Wu("copy", t)), s.addEventListener(e, "cut", Wu("cut", t)), s.addEventListener(e, "paste", Wu("paste", t));
}
const Oc = /* @__PURE__ */ new WeakMap();
function Az(s) {
  const e = Oc.get(s);
  if (e)
    return e.parentElement || s.appendChild(e), e;
  const n = (s.defaultView ? s : s.ownerDocument).createElement("textarea");
  return Oc.set(s, n), n.setAttribute("data-hot-input", ""), n.className = "HandsontableCopyPaste", n.tabIndex = -1, n.autocomplete = "off", n.wrap = "hard", n.value = " ", s.appendChild(n), n;
}
function Bv(s) {
  if (!(s instanceof Hp))
    return;
  let e = Ic.get(s.container);
  if (e = isNaN(e) ? 0 : e, e > 0 && (e -= 1), Oz(s), e <= 0) {
    e = 0;
    const t = Oc.get(s.container);
    t && t.parentNode && (t.parentNode.removeChild(t), Oc.delete(s.container)), s.mainElement = null;
  }
  Ic.set(s.container, e);
}
function Wv(s, e) {
  R0(s, e), e.add(s);
}
function To(s, e, t) {
  R0(s, e), e.set(s, t);
}
function R0(s, e) {
  if (e.has(s))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function Rl(s, e, t) {
  if (!e.has(s))
    throw new TypeError("attempted to get private field on non-instance");
  return t;
}
function fs(s, e) {
  var t = E0(s, e, "get");
  return Pz(s, t);
}
function Pz(s, e) {
  return e.get ? e.get.call(s) : e.value;
}
function Mo(s, e, t) {
  var n = E0(s, e, "set");
  return Dz(s, n, t), t;
}
function E0(s, e, t) {
  if (!e.has(s))
    throw new TypeError("attempted to " + t + " private field on non-instance");
  return e.get(s);
}
function Dz(s, e, t) {
  if (e.set)
    e.set.call(s, t);
  else {
    if (!e.writable)
      throw new TypeError("attempted to set read only private field");
    e.value = t;
  }
}
var si = /* @__PURE__ */ new WeakMap(), Uu = /* @__PURE__ */ new WeakMap(), Or = /* @__PURE__ */ new WeakMap(), Sf = /* @__PURE__ */ new WeakMap(), bf = /* @__PURE__ */ new WeakMap(), Ar = /* @__PURE__ */ new WeakMap(), El = /* @__PURE__ */ new WeakSet(), Uv = /* @__PURE__ */ new WeakSet();
class Hz {
  /* eslint-disable jsdoc/require-description-complete-sentence */
  /**
   * @param {{
   *   countRows: function(): number,
   *   countColumns: function(): number,
   *   rowsLimit: function(): number,
   *   columnsLimit: function(): number,
   *   countColumnHeaders: function(): number
   * }} dependencies The utils class dependencies.
   */
  constructor(e) {
    let {
      countRows: t,
      countColumns: n,
      rowsLimit: o,
      columnsLimit: r,
      countColumnHeaders: a
    } = e;
    Wv(this, Uv), Wv(this, El), To(this, si, {
      writable: !0,
      value: void 0
    }), To(this, Uu, {
      writable: !0,
      value: void 0
    }), To(this, Or, {
      writable: !0,
      value: void 0
    }), To(this, Sf, {
      writable: !0,
      value: void 0
    }), To(this, bf, {
      writable: !0,
      value: void 0
    }), To(this, Ar, {
      writable: !0,
      value: void 0
    }), Mo(this, Uu, t), Mo(this, Or, n), Mo(this, Sf, o), Mo(this, bf, r), Mo(this, Ar, a);
  }
  /* eslint-enable jsdoc/require-description-complete-sentence */
  /**
   * Sets the selection range to be processed.
   *
   * @param {CellRange} selectedRange The selection range represented by the CellRange class.
   */
  setSelectedRange(e) {
    Mo(this, si, e);
  }
  /**
   * Returns a new coords object within the dataset range (cells) with `startRow`, `startCol`, `endRow`
   * and `endCol` keys.
   *
   * @returns {{startRow: number, startCol: number, endRow: number, endCol: number} | null}
   */
  getCellsRange() {
    if (fs(this, Uu).call(this) === 0 || fs(this, Or).call(this) === 0)
      return null;
    const {
      row: e,
      col: t
    } = fs(this, si).getTopStartCorner(), {
      row: n,
      col: o
    } = fs(this, si).getBottomEndCorner(), r = Rl(this, Uv, kz).call(this, e, n), a = Rl(this, El, zu).call(this, t, o);
    return {
      isRangeTrimmed: n !== r || o !== a,
      startRow: e,
      startCol: t,
      endRow: r,
      endCol: a
    };
  }
  /**
   * Returns a new coords object within the most-bottom column headers range with `startRow`,
   * `startCol`, `endRow` and `endCol` keys.
   *
   * @returns {{startRow: number, startCol: number, endRow: number, endCol: number} | null}
   */
  getMostBottomColumnHeadersRange() {
    if (fs(this, Or).call(this) === 0 || fs(this, Ar).call(this) === 0)
      return null;
    const {
      col: e
    } = fs(this, si).getTopStartCorner(), {
      col: t
    } = fs(this, si).getBottomEndCorner(), n = Rl(this, El, zu).call(this, e, t);
    return {
      isRangeTrimmed: t !== n,
      startRow: -1,
      startCol: e,
      endRow: -1,
      endCol: n
    };
  }
  /**
   * Returns a new coords object within all column headers layers (including nested headers) range with
   * `startRow`, `startCol`, `endRow` and `endCol` keys.
   *
   * @returns {{startRow: number, startCol: number, endRow: number, endCol: number} | null}
   */
  getAllColumnHeadersRange() {
    if (fs(this, Or).call(this) === 0 || fs(this, Ar).call(this) === 0)
      return null;
    const {
      col: e
    } = fs(this, si).getTopStartCorner(), {
      col: t
    } = fs(this, si).getBottomEndCorner(), n = Rl(this, El, zu).call(this, e, t);
    return {
      isRangeTrimmed: t !== n,
      startRow: -fs(this, Ar).call(this),
      startCol: e,
      endRow: -1,
      endCol: n
    };
  }
}
function zu(s, e) {
  return Math.min(e, Math.max(s + fs(this, bf).call(this) - 1, s));
}
function kz(s, e) {
  return Math.min(e, Math.max(s + fs(this, Sf).call(this) - 1, s));
}
function x0(s) {
  const e = [], t = [];
  return D(s, (n) => {
    const o = Math.min(n.startRow, n.endRow), r = Math.max(n.startRow, n.endRow);
    Se(o, r, (c) => {
      e.indexOf(c) === -1 && e.push(c);
    });
    const a = Math.min(n.startCol, n.endCol), l = Math.max(n.startCol, n.endCol);
    Se(a, l, (c) => {
      t.indexOf(c) === -1 && t.push(c);
    });
  }), {
    rows: e,
    columns: t
  };
}
function Nz(s, e) {
  T0(s, e), e.add(s);
}
function Hi(s, e, t) {
  T0(s, e), e.set(s, t);
}
function T0(s, e) {
  if (e.has(s))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function _o(s, e, t) {
  return e = Lz(e), e in s ? Object.defineProperty(s, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : s[e] = t, s;
}
function Lz(s) {
  var e = $z(s, "string");
  return typeof e == "symbol" ? e : String(e);
}
function $z(s, e) {
  if (typeof s != "object" || s === null)
    return s;
  var t = s[Symbol.toPrimitive];
  if (t !== void 0) {
    var n = t.call(s, e || "default");
    if (typeof n != "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(s);
}
function Fz(s, e, t) {
  if (!e.has(s))
    throw new TypeError("attempted to get private field on non-instance");
  return t;
}
function Es(s, e) {
  var t = M0(s, e, "get");
  return Vz(s, t);
}
function Vz(s, e) {
  return e.get ? e.get.call(s) : e.value;
}
function Pn(s, e, t) {
  var n = M0(s, e, "set");
  return Bz(s, n, t), t;
}
function M0(s, e, t) {
  if (!e.has(s))
    throw new TypeError("attempted to " + t + " private field on non-instance");
  return e.get(s);
}
function Bz(s, e, t) {
  if (e.set)
    e.set.call(s, t);
  else {
    if (!e.writable)
      throw new TypeError("attempted to set read only private field");
    e.value = t;
  }
}
me.getSingleton().register("afterCopyLimit");
me.getSingleton().register("modifyCopyableRange");
me.getSingleton().register("beforeCut");
me.getSingleton().register("afterCut");
me.getSingleton().register("beforePaste");
me.getSingleton().register("afterPaste");
me.getSingleton().register("beforeCopy");
me.getSingleton().register("afterCopy");
const xl = "copyPaste", Wz = 80, Uz = ["fragmentSelection"], zv = ['<meta name="generator" content="Handsontable"/>', '<style type="text/css">td{white-space:normal}br{mso-data-placement:same-cell}</style>'].join("");
var Yu = /* @__PURE__ */ new WeakMap(), Gu = /* @__PURE__ */ new WeakMap(), ju = /* @__PURE__ */ new WeakMap(), Io = /* @__PURE__ */ new WeakMap(), Tl = /* @__PURE__ */ new WeakMap(), Ml = /* @__PURE__ */ new WeakMap(), Oo = /* @__PURE__ */ new WeakMap(), Yv = /* @__PURE__ */ new WeakSet();
class zz extends at {
  constructor() {
    super(...arguments), Nz(this, Yv), _o(this, "columnsLimit", 1 / 0), _o(this, "rowsLimit", 1 / 0), _o(this, "pasteMode", "overwrite"), _o(this, "uiContainer", this.hot.rootDocument.body), Hi(this, Yu, {
      writable: !0,
      value: !1
    }), Hi(this, Gu, {
      writable: !0,
      value: !1
    }), Hi(this, ju, {
      writable: !0,
      value: !1
    }), Hi(this, Io, {
      writable: !0,
      value: "cells-only"
    }), Hi(this, Tl, {
      writable: !0,
      value: !1
    }), Hi(this, Ml, {
      writable: !0,
      value: !1
    }), Hi(this, Oo, {
      writable: !0,
      value: new Hz({
        countRows: () => this.hot.countRows(),
        countColumns: () => this.hot.countCols(),
        rowsLimit: () => this.rowsLimit,
        columnsLimit: () => this.columnsLimit,
        countColumnHeaders: () => this.hot.view.getColumnHeadersCount()
      })
    }), _o(this, "copyableRanges", []), _o(this, "focusableElement", void 0);
  }
  static get PLUGIN_KEY() {
    return xl;
  }
  static get SETTING_KEYS() {
    return [xl, ...Uz];
  }
  static get PLUGIN_PRIORITY() {
    return Wz;
  }
  /**
   * Checks if the [`CopyPaste`](#copypaste) plugin is enabled.
   *
   * This method gets called by Handsontable's [`beforeInit`](@/api/hooks.md#beforeinit) hook.
   * If it returns `true`, the [`enablePlugin()`](#enableplugin) method gets called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return !!this.hot.getSettings()[xl];
  }
  /**
   * Enables the [`CopyPaste`](#copypaste) plugin for your Handsontable instance.
   */
  enablePlugin() {
    if (this.enabled)
      return;
    const {
      [xl]: e
    } = this.hot.getSettings();
    if (typeof e == "object") {
      var t, n;
      this.pasteMode = (t = e.pasteMode) !== null && t !== void 0 ? t : this.pasteMode, this.rowsLimit = isNaN(e.rowsLimit) ? this.rowsLimit : e.rowsLimit, this.columnsLimit = isNaN(e.columnsLimit) ? this.columnsLimit : e.columnsLimit, Pn(this, Yu, !!e.copyColumnHeaders), Pn(this, Gu, !!e.copyColumnGroupHeaders), Pn(this, ju, !!e.copyColumnHeadersOnly), this.uiContainer = (n = e.uiContainer) !== null && n !== void 0 ? n : this.uiContainer;
    }
    this.addHook("afterContextMenuDefaultOptions", (o) => this.onAfterContextMenuDefaultOptions(o)), this.addHook("afterOnCellMouseUp", () => this.onAfterOnCellMouseUp()), this.addHook("afterSelectionEnd", () => this.onAfterSelectionEnd()), this.addHook("beforeKeyDown", () => this.onBeforeKeyDown()), this.focusableElement = Iz(this.uiContainer), this.focusableElement.addLocalHook("copy", (o) => this.onCopy(o)).addLocalHook("cut", (o) => this.onCut(o)).addLocalHook("paste", (o) => this.onPaste(o)), super.enablePlugin();
  }
  /**
   * Updates the state of the [`CopyPaste`](#copypaste) plugin.
   *
   * Gets called when [`updateSettings()`](@/api/core.md#updatesettings)
   * is invoked with any of the following configuration options:
   *  - [`copyPaste`](@/api/options.md#copypaste)
   *  - [`fragmentSelection`](@/api/options.md#fragmentselection)
   */
  updatePlugin() {
    this.disablePlugin(), this.enablePlugin(), this.getOrCreateFocusableElement(), super.updatePlugin();
  }
  /**
   * Disables the [`CopyPaste`](#copypaste) plugin for your Handsontable instance.
   */
  disablePlugin() {
    this.focusableElement && Bv(this.focusableElement), super.disablePlugin();
  }
  /**
   * Copies the contents of the selected cells (and/or their related column headers) to the system clipboard.
   *
   * Takes an optional parameter (`copyMode`) that defines the scope of copying:
   *
   * | `copyMode` value              | Description                                                     |
   * | ----------------------------- | --------------------------------------------------------------- |
   * | `'cells-only'` (default)      | Copy the selected cells                                         |
   * | `'with-column-headers'`       | - Copy the selected cells<br>- Copy the nearest column headers  |
   * | `'with-column-group-headers'` | - Copy the selected cells<br>- Copy all related columns headers |
   * | `'column-headers-only'`       | Copy the nearest column headers (without copying cells)         |
   *
   * @param {string} [copyMode='cells-only'] Copy mode.
   */
  copy() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "cells-only";
    Pn(this, Io, e), Pn(this, Tl, !0), this.getOrCreateFocusableElement(), this.focusableElement.focus(), this.hot.rootDocument.execCommand("copy");
  }
  /**
   * Copies the contents of the selected cells.
   */
  copyCellsOnly() {
    this.copy("cells-only");
  }
  /**
   * Copies the contents of column headers that are nearest to the selected cells.
   */
  copyColumnHeadersOnly() {
    this.copy("column-headers-only");
  }
  /**
   * Copies the contents of the selected cells and all their related column headers.
   */
  copyWithAllColumnHeaders() {
    this.copy("with-column-group-headers");
  }
  /**
   * Copies the contents of the selected cells and their nearest column headers.
   */
  copyWithColumnHeaders() {
    this.copy("with-column-headers");
  }
  /**
   * Cuts the contents of the selected cells to the system clipboard.
   */
  cut() {
    Pn(this, Ml, !0), this.getOrCreateFocusableElement(), this.focusableElement.focus(), this.hot.rootDocument.execCommand("cut");
  }
  /**
   * Converts the contents of multiple ranges (`ranges`) into a single string.
   *
   * @param {Array<{startRow: number, startCol: number, endRow: number, endCol: number}>} ranges Array of objects with properties `startRow`, `endRow`, `startCol` and `endCol`.
   * @returns {string} A string that will be copied to the clipboard.
   */
  getRangedCopyableData(e) {
    return Jr(this.getRangedData(e));
  }
  /**
   * Converts the contents of multiple ranges (`ranges`) into an array of arrays.
   *
   * @param {Array<{startRow: number, startCol: number, endRow: number, endCol: number}>} ranges Array of objects with properties `startRow`, `startCol`, `endRow` and `endCol`.
   * @returns {Array[]} An array of arrays that will be copied to the clipboard.
   */
  getRangedData(e) {
    const t = [], {
      rows: n,
      columns: o
    } = x0(e);
    return D(n, (r) => {
      const a = [];
      D(o, (l) => {
        r < 0 ? a.push(this.hot.getColHeader(l, r)) : a.push(this.hot.getCopyableData(r, l));
      }), t.push(a);
    }), t;
  }
  /**
   * Simulates the paste action.
   *
   * For security reasons, modern browsers don't allow reading from the system clipboard.
   *
   * @param {string} pastableText The value to paste, as a raw string.
   * @param {string} [pastableHtml=''] The value to paste, as HTML.
   */
  paste() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "", t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : e;
    if (!e && !t)
      return;
    const n = new _z();
    e && n.clipboardData.setData("text/plain", e), t && n.clipboardData.setData("text/html", t), this.getOrCreateFocusableElement(), this.onPaste(n);
  }
  /**
   * Prepares copyable text from the cells selection in the invisible textarea.
   */
  setCopyableText() {
    const e = this.hot.getSelectedRangeLast();
    if (!e)
      return;
    Es(this, Oo).setSelectedRange(e);
    const t = /* @__PURE__ */ new Map([["headers", null], ["cells", null]]);
    Es(this, Io) === "column-headers-only" ? t.set("headers", Es(this, Oo).getMostBottomColumnHeadersRange()) : (Es(this, Io) === "with-column-headers" ? t.set("headers", Es(this, Oo).getMostBottomColumnHeadersRange()) : Es(this, Io) === "with-column-group-headers" && t.set("headers", Es(this, Oo).getAllColumnHeadersRange()), t.set("cells", Es(this, Oo).getCellsRange())), this.copyableRanges = Array.from(t.values()).filter((o) => o !== null).map((o) => {
      let {
        startRow: r,
        startCol: a,
        endRow: l,
        endCol: c
      } = o;
      return {
        startRow: r,
        startCol: a,
        endRow: l,
        endCol: c
      };
    }), this.copyableRanges = this.hot.runHooks("modifyCopyableRange", this.copyableRanges);
    const n = t.get("cells");
    if (n !== null && n.isRangeTrimmed) {
      const {
        startRow: o,
        startCol: r,
        endRow: a,
        endCol: l
      } = n;
      this.hot.runHooks("afterCopyLimit", a - o + 1, l - r + 1, this.rowsLimit, this.columnsLimit);
    }
  }
  /**
   * Force focus on editable element.
   *
   * @private
   */
  getOrCreateFocusableElement() {
    var e;
    const t = (e = this.hot.getActiveEditor()) === null || e === void 0 ? void 0 : e.TEXTAREA;
    t ? this.focusableElement.setFocusableElement(t) : this.focusableElement.useSecondaryElement();
  }
  /**
   * Verifies if editor exists and is open.
   *
   * @private
   * @returns {boolean}
   */
  isEditorOpened() {
    var e;
    return (e = this.hot.getActiveEditor()) === null || e === void 0 ? void 0 : e.isOpened();
  }
  /**
   * Prepares new values to populate them into datasource.
   *
   * @private
   * @param {Array} inputArray An array of the data to populate.
   * @param {Array} [selection] The selection which indicates from what position the data will be populated.
   * @returns {Array} Range coordinates after populate data.
   */
  populateValues(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.hot.getSelectedRangeLast();
    if (!e.length)
      return;
    const n = e.length, o = e[0].length, r = [], {
      row: a,
      col: l
    } = t.getTopStartCorner(), {
      row: c,
      col: h
    } = t.getBottomEndCorner();
    let u = a, f = l, g = a, m = l;
    for (; r.length < n || u <= c; ) {
      const {
        skipRowOnPaste: w,
        visualRow: C
      } = this.hot.getCellMeta(u, l);
      if (u = C + 1, w === !0)
        continue;
      g = C, f = l;
      const S = [], x = r.length % n;
      for (; S.length < o || f <= h; ) {
        const {
          skipColumnOnPaste: T,
          visualCol: M
        } = this.hot.getCellMeta(a, f);
        if (f = M + 1, T === !0)
          continue;
        m = M;
        const _ = S.length % o;
        S.push(e[x][_]);
      }
      r.push(S);
    }
    return this.hot.populateFromArray(a, l, r, void 0, void 0, "CopyPaste.paste", this.pasteMode), [a, l, g, m];
  }
  /**
   * `copy` event callback on textarea element.
   *
   * @param {Event} event ClipboardEvent.
   * @private
   */
  onCopy(e) {
    if (!this.hot.isListening() && !Es(this, Tl) || this.isEditorOpened())
      return;
    this.setCopyableText(), Pn(this, Tl, !1);
    const t = this.getRangedData(this.copyableRanges), n = Fz(this, Yv, Yz).call(this, this.copyableRanges);
    if (!!this.hot.runHooks("beforeCopy", t, this.copyableRanges, n)) {
      const r = Jr(t);
      if (e && e.clipboardData) {
        const a = $C(t, this.hot.rootDocument);
        e.clipboardData.setData("text/plain", r), e.clipboardData.setData("text/html", [zv, a].join(""));
      } else
        typeof ClipboardEvent > "u" && this.hot.rootWindow.clipboardData.setData("Text", r);
      this.hot.runHooks("afterCopy", t, this.copyableRanges, n);
    }
    Pn(this, Io, "cells-only"), e.preventDefault();
  }
  /**
   * `cut` event callback on textarea element.
   *
   * @param {Event} event ClipboardEvent.
   * @private
   */
  onCut(e) {
    if (!this.hot.isListening() && !Es(this, Ml) || this.isEditorOpened())
      return;
    this.setCopyableText(), Pn(this, Ml, !1);
    const t = this.getRangedData(this.copyableRanges);
    if (!!this.hot.runHooks("beforeCut", t, this.copyableRanges)) {
      const o = Jr(t);
      if (e && e.clipboardData) {
        const r = $C(t, this.hot.rootDocument);
        e.clipboardData.setData("text/plain", o), e.clipboardData.setData("text/html", [zv, r].join(""));
      } else
        typeof ClipboardEvent > "u" && this.hot.rootWindow.clipboardData.setData("Text", o);
      this.hot.emptySelectedCells("CopyPaste.cut"), this.hot.runHooks("afterCut", t, this.copyableRanges);
    }
    e.preventDefault();
  }
  /**
   * `paste` event callback on textarea element.
   *
   * @param {Event} event ClipboardEvent or pseudo ClipboardEvent, if paste was called manually.
   * @private
   */
  onPaste(e) {
    if (!this.hot.isListening() || this.isEditorOpened())
      return;
    e && e.preventDefault && e.preventDefault();
    let t;
    if (e && typeof e.clipboardData < "u") {
      const l = pg(e.clipboardData.getData("text/html"), {
        ADD_TAGS: ["meta"],
        ADD_ATTR: ["content"],
        FORCE_BODY: !0
      });
      l && /(<table)|(<TABLE)/g.test(l) ? t = BL(l, this.hot.rootDocument).data : t = e.clipboardData.getData("text/plain");
    } else
      typeof ClipboardEvent > "u" && typeof this.hot.rootWindow.clipboardData < "u" && (t = this.hot.rootWindow.clipboardData.getData("Text"));
    if (typeof t == "string" && (t = _B(t)), t && t.length === 0 || this.hot.runHooks("beforePaste", t, this.copyableRanges) === !1)
      return;
    const [n, o, r, a] = this.populateValues(t);
    this.hot.selectCell(n, o, Math.min(this.hot.countRows() - 1, r), Math.min(this.hot.countCols() - 1, a)), this.hot.runHooks("afterPaste", t, this.copyableRanges);
  }
  /**
   * Add copy and cut options to the Context Menu.
   *
   * @private
   * @param {object} options Contains default added options of the Context Menu.
   */
  onAfterContextMenuDefaultOptions(e) {
    e.items.push({
      name: "---------"
    }, bz(this)), Es(this, Yu) && e.items.push(xz(this)), Es(this, Gu) && e.items.push(Ez(this)), Es(this, ju) && e.items.push(Rz(this)), e.items.push(Tz(this));
  }
  /**
   * Force focus on focusableElement.
   *
   * @private
   */
  onAfterOnCellMouseUp() {
    !this.hot.isListening() || this.isEditorOpened() || this.hot.getSettings().fragmentSelection || (this.getOrCreateFocusableElement(), this.focusableElement.focus());
  }
  /**
   * Force focus on focusableElement after end of the selection.
   *
   * @private
   */
  onAfterSelectionEnd() {
    this.isEditorOpened() || (this.getOrCreateFocusableElement(), !(this.hot.getSettings().fragmentSelection && this.focusableElement.getFocusableElement() !== this.hot.rootDocument.activeElement && eL()) && (this.setCopyableText(), this.focusableElement.focus()));
  }
  /**
   * `beforeKeyDown` listener to force focus of focusableElement.
   *
   * @private
   */
  onBeforeKeyDown() {
    if (!this.hot.isListening() || this.isEditorOpened())
      return;
    const e = this.hot.rootDocument.activeElement, t = this.hot.getActiveEditor();
    !t || e !== this.focusableElement.getFocusableElement() && e !== t.select || (this.getOrCreateFocusableElement(), this.focusableElement.focus());
  }
  /**
   * Destroys the `CopyPaste` plugin instance.
   */
  destroy() {
    this.focusableElement && (Bv(this.focusableElement), this.focusableElement = null), super.destroy();
  }
}
function Yz(s) {
  const {
    rows: e
  } = x0(s);
  let t = 0;
  for (let n = 0; n < e.length && !(e[n] >= 0); n++)
    t += 1;
  return {
    columnHeadersCount: t
  };
}
function _0(s, e) {
  return `border_row${s}col${e}`;
}
function zr() {
  return {
    width: 1,
    color: "#000"
  };
}
function Yn() {
  return {
    hide: !0
  };
}
function Gz() {
  return {
    width: 1,
    color: "#000",
    cornerVisible: !1
  };
}
function Ku(s) {
  if (ue(s.start) || ue(s.left)) {
    var e;
    s.start = (e = s.start) !== null && e !== void 0 ? e : s.left;
  }
  if (ue(s.end) || ue(s.right)) {
    var t;
    s.end = (t = s.end) !== null && t !== void 0 ? t : s.right;
  }
  return delete s.left, delete s.right, s;
}
function Pr(s) {
  return ue(s.start) && (s.left = s.start), ue(s.end) && (s.right = s.end), s;
}
function Xu(s, e) {
  return {
    id: _0(s, e),
    border: Gz(),
    row: s,
    col: e,
    top: Yn(),
    bottom: Yn(),
    start: Yn(),
    end: Yn()
  };
}
function jz(s, e) {
  return Lt(e, "border") && e.border && (s.border = e.border), Lt(e, "top") && ue(e.top) && (e.top ? (Ge(e.top) || (e.top = zr()), s.top = e.top) : (e.top = Yn(), s.top = e.top)), Lt(e, "bottom") && ue(e.bottom) && (e.bottom ? (Ge(e.bottom) || (e.bottom = zr()), s.bottom = e.bottom) : (e.bottom = Yn(), s.bottom = e.bottom)), Lt(e, "start") && ue(e.start) && (e.start ? (Ge(e.start) || (e.start = zr()), s.start = e.start) : (e.start = Yn(), s.start = e.start)), Lt(e, "end") && ue(e.end) && (e.end ? (Ge(e.end) || (e.end = zr()), s.end = e.end) : (e.end = Yn(), s.end = e.end)), s;
}
function Xn(s, e) {
  let t = !1;
  return D(s.getSelectedRange(), (n) => {
    n.forAll((o, r) => {
      if (o < 0 || r < 0)
        return;
      const a = s.getCellMeta(o, r).borders;
      if (a)
        if (e) {
          if (!Lt(a[e], "hide") || a[e].hide === !1)
            return t = !0, !1;
        } else
          return t = !0, !1;
    });
  }), t;
}
function Oh(s) {
  return `<span class="selected">${String.fromCharCode(10003)}</span>${s}`;
}
function Kz(s) {
  return s.some((e) => ue(e.left) || ue(e.right));
}
function Xz(s) {
  return s.some((e) => ue(e.start) || ue(e.end));
}
const qz = /* @__PURE__ */ new Map([["left", "start"], ["right", "end"]]);
function Zz(s) {
  var e;
  return (e = qz.get(s)) !== null && e !== void 0 ? e : s;
}
function Qz(s) {
  return {
    key: "borders:bottom",
    name() {
      let e = this.getTranslatedPhrase(Om);
      return Xn(this, "bottom") && (e = Oh(e)), e;
    },
    callback(e, t) {
      const n = Xn(this, "bottom");
      s.prepareBorder(t, "bottom", n);
    }
  };
}
function Jz(s) {
  const e = s.hot.isRtl() ? "end" : "start";
  return {
    key: "borders:left",
    name() {
      let t = this.getTranslatedPhrase(Am);
      return Xn(this, e) && (t = Oh(t)), t;
    },
    callback(t, n) {
      const o = Xn(this, e);
      s.prepareBorder(n, e, o);
    }
  };
}
function eY(s) {
  return {
    key: "borders:no_borders",
    name() {
      return this.getTranslatedPhrase(Pm);
    },
    callback(e, t) {
      s.prepareBorder(t, "noBorders");
    },
    disabled() {
      return !Xn(this);
    }
  };
}
function tY(s) {
  const e = s.hot.isRtl() ? "start" : "end";
  return {
    key: "borders:right",
    name() {
      let t = this.getTranslatedPhrase(Im);
      return Xn(this, e) && (t = Oh(t)), t;
    },
    callback(t, n) {
      const o = Xn(this, e);
      s.prepareBorder(n, e, o);
    }
  };
}
function sY(s) {
  return {
    key: "borders:top",
    name() {
      let e = this.getTranslatedPhrase(_m);
      return Xn(this, "top") && (e = Oh(e)), e;
    },
    callback(e, t) {
      const n = Xn(this, "top");
      s.prepareBorder(t, "top", n);
    }
  };
}
function nY(s, e, t) {
  return e = iY(e), e in s ? Object.defineProperty(s, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : s[e] = t, s;
}
function iY(s) {
  var e = oY(s, "string");
  return typeof e == "symbol" ? e : String(e);
}
function oY(s, e) {
  if (typeof s != "object" || s === null)
    return s;
  var t = s[Symbol.toPrimitive];
  if (t !== void 0) {
    var n = t.call(s, e || "default");
    if (typeof n != "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(s);
}
const _l = "customBorders", rY = 90;
class aY extends at {
  constructor() {
    super(...arguments), nY(this, "savedBorders", []);
  }
  static get PLUGIN_KEY() {
    return _l;
  }
  static get PLUGIN_PRIORITY() {
    return rY;
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link CustomBorders#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return !!this.hot.getSettings()[_l];
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    this.enabled || (this.addHook("afterContextMenuDefaultOptions", (e) => this.onAfterContextMenuDefaultOptions(e)), this.addHook("init", () => this.onAfterInit()), super.enablePlugin());
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    this.hideBorders(), super.disablePlugin();
  }
  /**
   * Updates the plugin's state.
   *
   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
   *  - [`customBorders`](@/api/options.md#customborders)
   */
  updatePlugin() {
    this.disablePlugin(), this.enablePlugin(), this.changeBorderSettings(), super.updatePlugin();
  }
  /**
   * Set custom borders.
   *
   * @example
   * ```js
   * const customBordersPlugin = hot.getPlugin('customBorders');
   *
   * // Using an array of arrays (produced by `.getSelected()` method).
   * customBordersPlugin.setBorders([[1, 1, 2, 2], [6, 2, 0, 2]], {start: {width: 2, color: 'blue'}});
   *
   * // Using an array of CellRange objects (produced by `.getSelectedRange()` method).
   * //  Selecting a cell range.
   * hot.selectCell(0, 0, 2, 2);
   * // Returning selected cells' range with the getSelectedRange method.
   * customBordersPlugin.setBorders(hot.getSelectedRange(), {start: {hide: false, width: 2, color: 'blue'}});
   * ```
   *
   * @param {Array[]|CellRange[]} selectionRanges Array of selection ranges.
   * @param {object} borderObject Object with `top`, `right`, `bottom` and `start` properties.
   */
  setBorders(e, t) {
    let n = ["top", "bottom", "start", "end"], o = null;
    t && (this.checkSettingsCohesion([t]), n = Object.keys(t), o = Ku(t));
    const r = ir(e), a = va(r);
    D(e, (l) => {
      const [c, h, u, f] = a(l);
      for (let g = c; g <= u; g += 1)
        for (let m = h; m <= f; m += 1)
          D(n, (w) => {
            this.prepareBorderFromCustomAdded(g, m, o, Zz(w));
          });
    }), this.hot.view.render();
  }
  /**
   * Get custom borders.
   *
   * @example
   * ```js
   * const customBordersPlugin = hot.getPlugin('customBorders');
   *
   * // Using an array of arrays (produced by `.getSelected()` method).
   * customBordersPlugin.getBorders([[1, 1, 2, 2], [6, 2, 0, 2]]);
   * // Using an array of CellRange objects (produced by `.getSelectedRange()` method).
   * customBordersPlugin.getBorders(hot.getSelectedRange());
   * // Using without param - return all customBorders.
   * customBordersPlugin.getBorders();
   * ```
   *
   * @param {Array[]|CellRange[]} selectionRanges Array of selection ranges.
   * @returns {object[]} Returns array of border objects.
   */
  getBorders(e) {
    if (!Array.isArray(e))
      return this.savedBorders;
    const t = ir(e), n = va(t), o = [];
    return D(e, (r) => {
      const [a, l, c, h] = n(r);
      for (let u = a; u <= c; u += 1)
        for (let f = l; f <= h; f += 1)
          D(this.savedBorders, (g) => {
            g.row === u && g.col === f && o.push(Pr(g));
          });
    }), o;
  }
  /**
   * Clear custom borders.
   *
   * @example
   * ```js
   * const customBordersPlugin = hot.getPlugin('customBorders');
   *
   * // Using an array of arrays (produced by `.getSelected()` method).
   * customBordersPlugin.clearBorders([[1, 1, 2, 2], [6, 2, 0, 2]]);
   * // Using an array of CellRange objects (produced by `.getSelectedRange()` method).
   * customBordersPlugin.clearBorders(hot.getSelectedRange());
   * // Using without param - clear all customBorders.
   * customBordersPlugin.clearBorders();
   * ```
   *
   * @param {Array[]|CellRange[]} selectionRanges Array of selection ranges.
   */
  clearBorders(e) {
    e ? this.setBorders(e) : (D(this.savedBorders, (t) => {
      this.clearBordersFromSelectionSettings(t.id), this.clearNullCellRange(), this.hot.removeCellMeta(t.row, t.col, "borders");
    }), this.savedBorders.length = 0);
  }
  /**
   * Insert WalkontableSelection instance into Walkontable settings.
   *
   * @private
   * @param {object} border Object with `row` and `col`, `start`, `end`, `top` and `bottom`, `id` and `border` ({Object} with `color`, `width` and `cornerVisible` property) properties.
   * @param {string} [place] Coordinate where add/remove border - `top`, `bottom`, `start`, `end`.
   */
  insertBorderIntoSettings(e, t) {
    this.checkSavedBorders(e) || this.savedBorders.push(e);
    const o = this.hot._createCellRange(this.hot._createCellCoords(e.row, e.col));
    this.checkCustomSelections(e, o, t) || this.hot.selection.highlight.addCustomSelection({
      border: e,
      visualCellRange: o
    });
  }
  /**
   * Prepare borders from setting (single cell).
   *
   * @private
   * @param {number} row Visual row index.
   * @param {number} column Visual column index.
   * @param {object} borderDescriptor Object with `row` and `col`, `start`, `end`, `top` and `bottom` properties.
   * @param {string} [place] Coordinate where add/remove border - `top`, `bottom`, `start`, `end`.
   */
  prepareBorderFromCustomAdded(e, t, n, o) {
    const r = this.hot.countRows(), a = this.hot.countCols();
    if (e >= r || t >= a)
      return;
    let l = Xu(e, t);
    n && (l = jz(l, n), D(this.hot.selection.highlight.customSelections, (c) => {
      if (l.id === c.settings.id)
        return Object.assign(c.settings, n), l.id = c.settings.id, l.top = c.settings.top, l.bottom = c.settings.bottom, l.start = c.settings.start, l.end = c.settings.end, !1;
    })), this.hot.setCellMeta(e, t, "borders", Pr(l)), this.insertBorderIntoSettings(l, o);
  }
  /**
   * Prepare borders from setting (object).
   *
   * @private
   * @param {object} range {CellRange} The CellRange object.
   * @param {object} customBorder Object with `start`, `end`, `top` and `bottom` properties.
   */
  prepareBorderFromCustomAddedRange(e, t) {
    const n = Math.min(e.to.row, this.hot.countRows() - 1), o = Math.min(e.to.col, this.hot.countCols() - 1);
    Se(e.from.row, n, (r) => {
      Se(e.from.col, o, (a) => {
        const l = Xu(r, a);
        let c = 0;
        r === e.from.row && Lt(t, "top") && (c += 1, l.top = t.top), r === e.to.row && Lt(t, "bottom") && (c += 1, l.bottom = t.bottom), a === e.from.col && Lt(t, "start") && (c += 1, l.start = t.start), a === e.to.col && Lt(t, "end") && (c += 1, l.end = t.end), c > 0 && (this.hot.setCellMeta(r, a, "borders", Pr(l)), this.insertBorderIntoSettings(l));
      });
    });
  }
  /**
   * Remove border (triggered from context menu).
   *
   * @private
   * @param {number} row Visual row index.
   * @param {number} column Visual column index.
   */
  removeAllBorders(e, t) {
    const n = _0(e, t);
    this.spliceBorder(n), this.clearBordersFromSelectionSettings(n), this.clearNullCellRange(), this.hot.removeCellMeta(e, t, "borders");
  }
  /**
   * Set borders for each cell re. To border position.
   *
   * @private
   * @param {number} row Visual row index.
   * @param {number} column Visual column index.
   * @param {string} place Coordinate where add/remove border - `top`, `bottom`, `start`, `end` and `noBorders`.
   * @param {boolean} remove True when remove borders, and false when add borders.
   */
  setBorder(e, t, n, o) {
    let r = this.hot.getCellMeta(e, t).borders;
    !r || r.border === void 0 ? r = Xu(e, t) : r = Ku(r), o ? (r[n] = Yn(), this.countHide(r) === 4 ? this.removeAllBorders(e, t) : (this.checkCustomSelectionsFromContextMenu(r, n, o) || this.insertBorderIntoSettings(r), this.hot.setCellMeta(e, t, "borders", Pr(r)))) : (r[n] = zr(), this.checkCustomSelectionsFromContextMenu(r, n, o) || this.insertBorderIntoSettings(r), this.hot.setCellMeta(e, t, "borders", Pr(r)));
  }
  /**
   * Prepare borders based on cell and border position.
   *
   * @private
   * @param {CellRange[]} selected An array of CellRange objects.
   * @param {string} place Coordinate where add/remove border - `top`, `bottom`, `left`, `right` and `noBorders`.
   * @param {boolean} remove True when remove borders, and false when add borders.
   */
  prepareBorder(e, t, n) {
    D(e, (o) => {
      let {
        start: r,
        end: a
      } = o;
      if (r.row === a.row && r.col === a.col)
        t === "noBorders" ? this.removeAllBorders(r.row, r.col) : this.setBorder(r.row, r.col, t, n);
      else
        switch (t) {
          case "noBorders":
            Se(r.col, a.col, (l) => {
              Se(r.row, a.row, (c) => {
                this.removeAllBorders(c, l);
              });
            });
            break;
          case "top":
            Se(r.col, a.col, (l) => {
              this.setBorder(r.row, l, t, n);
            });
            break;
          case "bottom":
            Se(r.col, a.col, (l) => {
              this.setBorder(a.row, l, t, n);
            });
            break;
          case "start":
            Se(r.row, a.row, (l) => {
              this.setBorder(l, r.col, t, n);
            });
            break;
          case "end":
            Se(r.row, a.row, (l) => {
              this.setBorder(l, a.col, t, n);
            });
            break;
        }
    });
  }
  /**
   * Create borders from settings.
   *
   * @private
   * @param {Array} customBorders Object with `row` and `col`, `start`, `end`, `top` and `bottom` properties.
   */
  createCustomBorders(e) {
    D(e, (t) => {
      const n = Ku(t);
      t.range ? this.prepareBorderFromCustomAddedRange(t.range, n) : this.prepareBorderFromCustomAdded(t.row, t.col, n);
    });
  }
  /**
   * Count hide property in border object.
   *
   * @private
   * @param {object} border Object with `row` and `col`, `start`, `end`, `top` and `bottom`, `id` and
   *                        `border` ({Object} with `color`, `width` and `cornerVisible` property) properties.
   * @returns {number}
   */
  countHide(e) {
    const {
      top: t,
      bottom: n,
      start: o,
      end: r
    } = e;
    return cs([t, n, o, r], (l, c) => {
      let h = l;
      return c && c.hide && (h += 1), h;
    }, 0);
  }
  /**
   * Clear borders settings from custom selections.
   *
   * @private
   * @param {string} borderId Border id name as string.
   */
  clearBordersFromSelectionSettings(e) {
    const t = Ye(this.hot.selection.highlight.customSelections, (n) => n.settings.id).indexOf(e);
    t > -1 && this.hot.selection.highlight.customSelections[t].clear();
  }
  /**
   * Clear cellRange with null value.
   *
   * @private
   */
  clearNullCellRange() {
    D(this.hot.selection.highlight.customSelections, (e, t) => {
      if (e.cellRange === null)
        return this.hot.selection.highlight.customSelections[t].destroy(), this.hot.selection.highlight.customSelections.splice(t, 1), !1;
    });
  }
  /**
   * Hide custom borders.
   *
   * @private
   */
  hideBorders() {
    D(this.savedBorders, (e) => {
      this.clearBordersFromSelectionSettings(e.id), this.clearNullCellRange();
    });
  }
  /**
   * Splice border from savedBorders.
   *
   * @private
   * @param {string} borderId Border id name as string.
   */
  spliceBorder(e) {
    const t = Ye(this.savedBorders, (n) => n.id).indexOf(e);
    t > -1 && this.savedBorders.splice(t, 1);
  }
  /**
   * Check if an border already exists in the savedBorders array, and if true update border in savedBorders.
   *
   * @private
   * @param {object} border Object with `row` and `col`, `start`, `end`, `top` and `bottom`, `id` and
   *                        `border` ({Object} with `color`, `width` and `cornerVisible` property) properties.
   *
   * @returns {boolean}
   */
  checkSavedBorders(e) {
    let t = !1;
    return this.countHide(e) === 4 ? (this.spliceBorder(e.id), t = !0) : D(this.savedBorders, (o, r) => {
      if (e.id === o.id)
        return this.savedBorders[r] = e, t = !0, !1;
    }), t;
  }
  /**
   * Check if an border already exists in the customSelections, and if true call toggleHiddenClass method.
   *
   * @private
   * @param {object} border Object with `row` and `col`, `start`, `end`, `top` and `bottom`, `id` and
   *                        `border` ({Object} with `color`, `width` and `cornerVisible` property) properties.
   * @param {string} place Coordinate where add/remove border - `top`, `bottom`, `start`, `end` and `noBorders`.
   * @param {boolean} remove True when remove borders, and false when add borders.
   *
   * @returns {boolean}
   */
  checkCustomSelectionsFromContextMenu(e, t, n) {
    let o = !1;
    return D(this.hot.selection.highlight.customSelections, (r) => {
      if (e.id === r.settings.id)
        return je(r.instanceBorders, (a) => {
          a.toggleHiddenClass(t, n);
        }), o = !0, !1;
    }), o;
  }
  /**
   * Check if an border already exists in the customSelections, and if true reset cellRange.
   *
   * @private
   * @param {object} border Object with `row` and `col`, `start`, `end`, `top` and `bottom`, `id` and
   *                        `border` ({Object} with `color`, `width` and `cornerVisible` property) properties.
   * @param {CellRange} cellRange The selection range to check.
   * @param {string} [place] Coordinate where add/remove border - `top`, `bottom`, `start`, `end`.
   * @returns {boolean}
   */
  checkCustomSelections(e, t, n) {
    const o = this.countHide(e);
    let r = !1;
    return o === 4 ? (this.removeAllBorders(e.row, e.col), r = !0) : D(this.hot.selection.highlight.customSelections, (a) => {
      if (e.id === a.settings.id)
        return a.visualCellRange = t, a.commit(), n && je(a.instanceBorders, (l) => {
          l.changeBorderStyle(n, e);
        }), r = !0, !1;
    }), r;
  }
  /**
   * Change borders from settings.
   *
   * @private
   */
  changeBorderSettings() {
    const e = this.hot.getSettings()[_l];
    if (Array.isArray(e)) {
      const t = ms(e);
      this.checkSettingsCohesion(t), t.length || (this.savedBorders = t), this.createCustomBorders(t);
    } else
      e !== void 0 && this.createCustomBorders(this.savedBorders);
  }
  /**
   * Checks the settings cohesion. The properties such like "left"/"right" are supported only
   * in the LTR mode and the "left"/"right" options can not be used together with "start"/"end" properties.
   *
   * @private
   * @param {object[]} customBorders The user defined custom border objects array.
   */
  checkSettingsCohesion(e) {
    const t = Kz(e), n = Xz(e);
    if (t && n)
      throw new Error('The "left"/"right" and "start"/"end" options should not be used together. Please use only the option "start"/"end".');
    if (this.hot.isRtl() && t)
      throw new Error('The "left"/"right" properties are not supported for RTL. Please use option "start"/"end".');
  }
  /**
   * Add border options to context menu.
   *
   * @private
   * @param {object} defaultOptions Context menu items.
   */
  onAfterContextMenuDefaultOptions(e) {
    this.hot.getSettings()[_l] && e.items.push({
      name: "---------"
    }, {
      key: "borders",
      name() {
        return this.getTranslatedPhrase(Mm);
      },
      disabled() {
        return this.selection.isSelectedByCorner();
      },
      submenu: {
        items: [sY(this), tY(this), Qz(this), Jz(this), eY(this)]
      }
    });
  }
  /**
   * `afterInit` hook callback.
   *
   * @private
   */
  onAfterInit() {
    this.changeBorderSettings();
  }
  /**
   * Destroys the plugin instance.
   */
  destroy() {
    super.destroy();
  }
}
const Gv = "dragToScroll", lY = 100;
class cY extends at {
  static get PLUGIN_KEY() {
    return Gv;
  }
  static get PLUGIN_PRIORITY() {
    return lY;
  }
  constructor(e) {
    super(e), this.eventManager = new Dt(this), this.boundaries = null, this.callback = null, this.listening = !1;
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link DragToScroll#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return !!this.hot.getSettings()[Gv];
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    this.enabled || (this.addHook("afterOnCellMouseDown", (e) => this.setupListening(e)), this.addHook("afterOnCellCornerMouseDown", (e) => this.setupListening(e)), this.registerEvents(), super.enablePlugin());
  }
  /**
   * Updates the plugin's state.
   *
   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
   *  - [`dragToScroll`](@/api/options.md#dragtoscroll)
   */
  updatePlugin() {
    this.disablePlugin(), this.enablePlugin(), super.updatePlugin();
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    this.unregisterEvents(), super.disablePlugin();
  }
  /**
   * Sets the value of the visible element.
   *
   * @param {DOMRect} boundaries An object with coordinates compatible with DOMRect.
   */
  setBoundaries(e) {
    this.boundaries = e;
  }
  /**
   * Changes callback function.
   *
   * @param {Function} callback The callback function.
   */
  setCallback(e) {
    this.callback = e;
  }
  /**
   * Checks if the mouse position (X, Y) is outside of the viewport and fires a callback with calculated X an Y diffs
   * between passed boundaries.
   *
   * @param {number} x Mouse X coordinate to check.
   * @param {number} y Mouse Y coordinate to check.
   */
  check(e, t) {
    let n = 0, o = 0;
    t < this.boundaries.top ? o = t - this.boundaries.top : t > this.boundaries.bottom && (o = t - this.boundaries.bottom), e < this.boundaries.left ? n = e - this.boundaries.left : e > this.boundaries.right && (n = e - this.boundaries.right), this.callback(n, o);
  }
  /**
   * Enables listening on `mousemove` event.
   *
   * @private
   */
  listen() {
    this.listening = !0;
  }
  /**
   * Disables listening on `mousemove` event.
   *
   * @private
   */
  unlisten() {
    this.listening = !1;
  }
  /**
   * Returns current state of listening.
   *
   * @private
   * @returns {boolean}
   */
  isListening() {
    return this.listening;
  }
  /**
   * Registers dom listeners.
   *
   * @private
   */
  registerEvents() {
    const {
      rootWindow: e
    } = this.hot;
    let t = e;
    for (; t; )
      this.eventManager.addEventListener(t.document, "contextmenu", () => this.unlisten()), this.eventManager.addEventListener(t.document, "mouseup", () => this.unlisten()), this.eventManager.addEventListener(t.document, "mousemove", (n) => this.onMouseMove(n)), t = wc(t);
  }
  /**
   * Unbinds the events used by the plugin.
   *
   * @private
   */
  unregisterEvents() {
    this.eventManager.clear();
  }
  /**
   * On after on cell/cellCorner mouse down listener.
   *
   * @private
   * @param {MouseEvent} event The mouse event object.
   */
  setupListening(e) {
    if (Ji(e))
      return;
    const t = this.hot.view._wt.wtTable.holder;
    t !== this.hot.rootWindow && (this.setBoundaries(t.getBoundingClientRect()), this.setCallback((n, o) => {
      n < 0 ? t.scrollLeft -= 50 : n > 0 && (t.scrollLeft += 50), o < 0 ? t.scrollTop -= 20 : o > 0 && (t.scrollTop += 20);
    }), this.listen());
  }
  /**
   * 'mouseMove' event callback.
   *
   * @private
   * @param {MouseEvent} event `mousemove` event properties.
   */
  onMouseMove(e) {
    this.isListening() && this.check(e.clientX, e.clientY);
  }
  /**
   * Destroys the plugin instance.
   */
  destroy() {
    super.destroy();
  }
}
me.getSingleton().register("afterDropdownMenuDefaultOptions");
me.getSingleton().register("beforeDropdownMenuShow");
me.getSingleton().register("afterDropdownMenuShow");
me.getSingleton().register("afterDropdownMenuHide");
me.getSingleton().register("afterDropdownMenuExecute");
const qu = "dropdownMenu", hY = 230, Zu = "changeType";
class Ah extends at {
  static get PLUGIN_KEY() {
    return qu;
  }
  static get PLUGIN_PRIORITY() {
    return hY;
  }
  static get PLUGIN_DEPS() {
    return ["plugin:AutoColumnSize"];
  }
  /**
   * Default menu items order when `dropdownMenu` is enabled by setting the config item to `true`.
   *
   * @returns {Array}
   */
  static get DEFAULT_ITEMS() {
    return [Fa, Va, ze, Wa, ze, bh, ze, Ba, ze, Fs];
  }
  constructor(e) {
    super(e), this.eventManager = new Dt(this), this.commandExecutor = new v0(this.hot), this.itemsFactory = null, this.menu = null, this.hot.addHook("afterGetColHeader", (t, n) => this.onAfterGetColHeader(t, n));
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link DropdownMenu#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return this.hot.getSettings()[qu];
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   *
   * @fires Hooks#afterDropdownMenuDefaultOptions
   * @fires Hooks#beforeDropdownMenuSetItems
   */
  enablePlugin() {
    var e = this;
    if (this.enabled)
      return;
    this.itemsFactory = new S0(this.hot, Ah.DEFAULT_ITEMS);
    const t = this.hot.getSettings()[qu], n = {
      items: this.itemsFactory.getItems(t)
    };
    this.registerEvents(), typeof t.callback == "function" && this.commandExecutor.setCommonCallback(t.callback), super.enablePlugin(), this.callOnPluginsReady(() => {
      this.hot.runHooks("afterDropdownMenuDefaultOptions", n), this.itemsFactory.setPredefinedItems(n.items);
      const o = this.itemsFactory.getItems(t);
      this.menu && this.menu.destroy(), this.menu = new Dp(this.hot, {
        className: "htDropdownMenu",
        keepInViewport: !0,
        container: t.uiContainer || this.hot.rootDocument.body
      }), this.hot.runHooks("beforeDropdownMenuSetItems", o), this.menu.setMenuItems(o), this.menu.addLocalHook("beforeOpen", () => this.onMenuBeforeOpen()), this.menu.addLocalHook("afterOpen", () => this.onMenuAfterOpen()), this.menu.addLocalHook("afterClose", () => this.onMenuAfterClose()), this.menu.addLocalHook("executeCommand", function() {
        for (var r = arguments.length, a = new Array(r), l = 0; l < r; l++)
          a[l] = arguments[l];
        return e.executeCommand.call(e, ...a);
      }), D(o, (r) => this.commandExecutor.registerCommand(r.key, r));
    });
  }
  /**
   * Updates the plugin's state.
   *
   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
   *  - [`dropdownMenu`](@/api/options.md#dropdownmenu)
   */
  updatePlugin() {
    this.disablePlugin(), this.enablePlugin(), super.updatePlugin();
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    this.close(), this.menu && this.menu.destroy(), super.disablePlugin();
  }
  /**
   * Registers the DOM listeners.
   *
   * @private
   */
  registerEvents() {
    this.eventManager.addEventListener(this.hot.rootElement, "click", (e) => this.onTableClick(e));
  }
  /**
   * Opens menu and re-position it based on the passed coordinates.
   *
   * @param {object|Event} position An object with `pageX` and `pageY` properties which contains values relative to
   *                                the top left of the fully rendered content area in the browser or with `clientX`
   *                                and `clientY`  properties which contains values relative to the upper left edge
   *                                of the content area (the viewport) of the browser window. This object is structurally
   *                                compatible with native mouse event so it can be used either.
   * @fires Hooks#beforeDropdownMenuShow
   * @fires Hooks#afterDropdownMenuShow
   */
  open(e) {
    this.menu && (this.menu.open(), e.width && this.menu.setOffset("left", e.width), this.menu.setPosition(e));
  }
  /**
   * Closes dropdown menu.
   */
  close() {
    this.menu && this.menu.close();
  }
  /**
   * Executes context menu command.
   *
   * The `executeCommand()` method works only for selected cells.
   *
   * When no cells are selected, `executeCommand()` doesn't do anything.
   *
   * You can execute all predefined commands:
   *  * `'row_above'` - Insert row above
   *  * `'row_below'` - Insert row below
   *  * `'col_left'` - Insert column left
   *  * `'col_right'` - Insert column right
   *  * `'clear_column'` - Clear selected column
   *  * `'remove_row'` - Remove row
   *  * `'remove_col'` - Remove column
   *  * `'undo'` - Undo last action
   *  * `'redo'` - Redo last action
   *  * `'make_read_only'` - Make cell read only
   *  * `'alignment:left'` - Alignment to the left
   *  * `'alignment:top'` - Alignment to the top
   *  * `'alignment:right'` - Alignment to the right
   *  * `'alignment:bottom'` - Alignment to the bottom
   *  * `'alignment:middle'` - Alignment to the middle
   *  * `'alignment:center'` - Alignment to the center (justify).
   *
   * Or you can execute command registered in settings where `key` is your command name.
   *
   * @param {string} commandName Command name to execute.
   * @param {*} params Additional parameters passed to the command executor.
   */
  executeCommand(e) {
    for (var t = arguments.length, n = new Array(t > 1 ? t - 1 : 0), o = 1; o < t; o++)
      n[o - 1] = arguments[o];
    this.commandExecutor.execute(e, ...n);
  }
  /**
   * Turns on / off listening on dropdown menu.
   *
   * @private
   * @param {boolean} listen Turn on listening when value is set to true, otherwise turn it off.
   */
  setListening() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !0;
    this.menu.isOpened() && (e ? this.menu.hotMenu.listen() : this.menu.hotMenu.unlisten());
  }
  /**
   * Table click listener.
   *
   * @private
   * @param {Event} event The mouse event object.
   */
  onTableClick(e) {
    if (e.stopPropagation(), Ne(e.target, Zu) && !this.menu.isOpened()) {
      let t = 0, n = 0;
      if (this.hot.rootDocument !== this.menu.container.ownerDocument) {
        const {
          frameElement: r
        } = this.hot.rootWindow, {
          top: a,
          left: l
        } = r.getBoundingClientRect();
        t = a, n = l;
      }
      const o = e.target.getBoundingClientRect();
      this.open({
        left: o.left + n,
        top: o.top + e.target.offsetHeight + 3 + t,
        width: o.width,
        height: o.height
      });
    }
  }
  /**
   * On after get column header listener.
   *
   * @private
   * @param {number} col Visual column index.
   * @param {HTMLTableCellElement} TH Header's TH element.
   */
  onAfterGetColHeader(e, t) {
    const n = t.parentNode;
    if (!n)
      return;
    const o = n.parentNode.childNodes, r = Array.prototype.indexOf.call(o, n);
    if (e < 0 || r !== o.length - 1)
      return;
    const a = t.querySelector(`.${Zu}`);
    if (this.enabled && a)
      return;
    if (!this.enabled) {
      a && a.parentNode.removeChild(a);
      return;
    }
    const l = this.hot.rootDocument.createElement("button");
    l.className = Zu, l.type = "button", l.onclick = function() {
      return !1;
    }, t.firstChild.insertBefore(l, t.firstChild.firstChild);
  }
  /**
   * On menu before open listener.
   *
   * @private
   * @fires Hooks#beforeDropdownMenuShow
   */
  onMenuBeforeOpen() {
    this.hot.runHooks("beforeDropdownMenuShow", this);
  }
  /**
   * On menu after open listener.
   *
   * @private
   * @fires Hooks#afterDropdownMenuShow
   */
  onMenuAfterOpen() {
    this.hot.runHooks("afterDropdownMenuShow", this);
  }
  /**
   * On menu after close listener.
   *
   * @private
   * @fires Hooks#afterDropdownMenuHide
   */
  onMenuAfterClose() {
    this.hot.listen(), this.hot.runHooks("afterDropdownMenuHide", this);
  }
  /**
   * Destroys the plugin instance.
   */
  destroy() {
    this.close(), this.menu && this.menu.destroy(), super.destroy();
  }
}
Ah.SEPARATOR = {
  name: ze
};
class uY {
  constructor(e) {
    this.hot = e, this.options = {};
  }
  /**
   * Set options for data provider.
   *
   * @param {object} options Object with specified options.
   */
  setOptions(e) {
    this.options = e;
  }
  /**
   * Get table data based on provided settings to the class constructor.
   *
   * @returns {Array}
   */
  getData() {
    const {
      startRow: e,
      startCol: t,
      endRow: n,
      endCol: o
    } = this._getDataRange(), r = this.options, a = [];
    return Se(e, n, (l) => {
      const c = [];
      !r.exportHiddenRows && this._isHiddenRow(l) || (Se(t, o, (h) => {
        !r.exportHiddenColumns && this._isHiddenColumn(h) || c.push(this.hot.getDataAtCell(l, h));
      }), a.push(c));
    }), a;
  }
  /**
   * Gets list of row headers.
   *
   * @returns {Array}
   */
  getRowHeaders() {
    const e = [];
    if (this.options.rowHeaders) {
      const {
        startRow: t,
        endRow: n
      } = this._getDataRange(), o = this.hot.getRowHeader();
      Se(t, n, (r) => {
        !this.options.exportHiddenRows && this._isHiddenRow(r) || e.push(o[r]);
      });
    }
    return e;
  }
  /**
   * Gets list of columns headers.
   *
   * @returns {Array}
   */
  getColumnHeaders() {
    const e = [];
    if (this.options.columnHeaders) {
      const {
        startCol: t,
        endCol: n
      } = this._getDataRange(), o = this.hot.getColHeader();
      Se(t, n, (r) => {
        !this.options.exportHiddenColumns && this._isHiddenColumn(r) || e.push(o[r]);
      });
    }
    return e;
  }
  /**
   * Get data range object based on settings provided in the class constructor.
   *
   * @private
   * @returns {object} Returns object with keys `startRow`, `startCol`, `endRow` and `endCol`.
   */
  _getDataRange() {
    const e = this.hot.countCols() - 1, t = this.hot.countRows() - 1;
    let [n = 0, o = 0, r = t, a = e] = this.options.range;
    return n = Math.max(n, 0), o = Math.max(o, 0), r = Math.min(r, t), a = Math.min(a, e), {
      startRow: n,
      startCol: o,
      endRow: r,
      endCol: a
    };
  }
  /**
   * Check if row at specified row index is hidden.
   *
   * @private
   * @param {number} row Row index.
   * @returns {boolean}
   */
  _isHiddenRow(e) {
    return this.hot.rowIndexMapper.isHidden(this.hot.toPhysicalRow(e));
  }
  /**
   * Check if column at specified column index is hidden.
   *
   * @private
   * @param {number} column Visual column index.
   * @returns {boolean}
   */
  _isHiddenColumn(e) {
    return this.hot.columnIndexMapper.isHidden(this.hot.toPhysicalColumn(e));
  }
}
const dY = uY;
class kp {
  /**
   * Default options.
   *
   * @returns {object}
   */
  static get DEFAULT_OPTIONS() {
    return {
      mimeType: "text/plain",
      fileExtension: "txt",
      filename: "Handsontable [YYYY]-[MM]-[DD]",
      encoding: "utf-8",
      bom: !1,
      columnHeaders: !1,
      rowHeaders: !1,
      exportHiddenColumns: !1,
      exportHiddenRows: !1,
      range: []
    };
  }
  constructor(e, t) {
    this.dataProvider = e, this.options = this._mergeOptions(t), this.dataProvider.setOptions(this.options);
  }
  /**
   * Merge options provided by users with defaults.
   *
   * @param {object} options An object with options to merge with.
   * @returns {object} Returns new options object.
   */
  _mergeOptions(e) {
    let t = Ss(this.constructor.DEFAULT_OPTIONS);
    const n = /* @__PURE__ */ new Date();
    return t = Ut(Ss(kp.DEFAULT_OPTIONS), t), t = Ut(t, e), t.filename = Db(t.filename, {
      YYYY: n.getFullYear(),
      MM: `${n.getMonth() + 1}`.padStart(2, "0"),
      DD: `${n.getDate()}`.padStart(2, "0")
    }), t;
  }
}
const fY = kp, gY = String.fromCharCode(13), mY = String.fromCharCode(34), pY = String.fromCharCode(10);
class wY extends fY {
  /**
   * Default options for exporting CSV format.
   *
   * @returns {object}
   */
  static get DEFAULT_OPTIONS() {
    return {
      mimeType: "text/csv",
      fileExtension: "csv",
      bom: !0,
      columnDelimiter: ",",
      rowDelimiter: `\r
`
    };
  }
  /**
   * Create string body in desired format.
   *
   * @returns {string}
   */
  export() {
    const e = this.options, t = this.dataProvider.getData();
    let n = this.dataProvider.getColumnHeaders();
    const o = n.length > 0, r = this.dataProvider.getRowHeaders(), a = r.length > 0;
    let l = e.bom ? String.fromCharCode(65279) : "";
    return o && (n = Ye(n, (c) => this._escapeCell(c, !0)), a && (l += e.columnDelimiter), l += n.join(e.columnDelimiter), l += e.rowDelimiter), D(t, (c, h) => {
      h > 0 && (l += e.rowDelimiter), a && (l += this._escapeCell(r[h]) + e.columnDelimiter), l += c.map((u) => this._escapeCell(u)).join(e.columnDelimiter);
    }), l;
  }
  /**
   * Escape cell value.
   *
   * @param {*} value Cell value.
   * @param {boolean} [force=false] Indicates if cell value will be escaped forcefully.
   * @returns {string}
   */
  _escapeCell(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1, n = Vt(e);
    return n !== "" && (t || n.indexOf(gY) >= 0 || n.indexOf(mY) >= 0 || n.indexOf(pY) >= 0 || n.indexOf(this.options.columnDelimiter) >= 0) && (n = n.replace(new RegExp('"', "g"), '""'), n = `"${n}"`), n;
  }
}
const CY = wY, vY = "csv", Rf = {
  [vY]: CY
};
function yY(s, e, t) {
  return typeof Rf[s] == "function" ? new Rf[s](e, t) : null;
}
const SY = "exportFile", bY = 240;
class RY extends at {
  static get PLUGIN_KEY() {
    return SY;
  }
  static get PLUGIN_PRIORITY() {
    return bY;
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link ExportFile#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return !0;
  }
  /**
   * @typedef ExportOptions
   * @memberof ExportFile
   * @type {object}
   * @property {boolean} [exportHiddenRows=false] Include hidden rows in the exported file.
   * @property {boolean} [exportHiddenColumns=false] Include hidden columns in the exported file.
   * @property {boolean} [columnHeaders=false] Include column headers in the exported file.
   * @property {boolean} [rowHeaders=false] Include row headers in the exported file.
   * @property {string} [columnDelimiter=','] Column delimiter.
   * @property {string} [range=[]] Cell range that will be exported to file.
   */
  /**
   * Exports table data as a string.
   *
   * @param {string} format Export format type eq. `'csv'`.
   * @param {ExportOptions} options Export options.
   * @returns {string}
   */
  exportAsString(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    return this._createTypeFormatter(e, t).export();
  }
  /**
   * Exports table data as a blob object.
   *
   * @param {string} format Export format type eq. `'csv'`.
   * @param {ExportOptions} options Export options.
   * @returns {Blob}
   */
  exportAsBlob(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    return this._createBlob(this._createTypeFormatter(e, t));
  }
  /**
   * Exports table data as a downloadable file.
   *
   * @param {string} format Export format type eq. `'csv'`.
   * @param {ExportOptions} options Export options.
   */
  downloadFile(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    const {
      rootDocument: n,
      rootWindow: o
    } = this.hot, r = this._createTypeFormatter(e, t), a = this._createBlob(r), l = o.URL || o.webkitURL, c = n.createElement("a"), h = `${r.options.filename}.${r.options.fileExtension}`;
    if (c.download !== void 0) {
      const u = l.createObjectURL(a);
      c.style.display = "none", c.setAttribute("href", u), c.setAttribute("download", h), n.body.appendChild(c), c.dispatchEvent(new MouseEvent("click")), n.body.removeChild(c), setTimeout(() => {
        l.revokeObjectURL(u);
      }, 100);
    } else
      navigator.msSaveOrOpenBlob && navigator.msSaveOrOpenBlob(a, h);
  }
  /**
   * Creates and returns class formatter for specified export type.
   *
   * @private
   * @param {string} format Export format type eq. `'csv'`.
   * @param {ExportOptions} options Export options.
   * @returns {BaseType}
   */
  _createTypeFormatter(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    if (!Rf[e])
      throw new Error(`Export format type "${e}" is not supported.`);
    return yY(e, new dY(this.hot), t);
  }
  /**
   * Creates blob object based on provided type formatter class.
   *
   * @private
   * @param {BaseType} typeFormatter The instance of the specyfic formatter/exporter.
   * @returns {Blob}
   */
  _createBlob(e) {
    let t = null;
    return typeof Blob < "u" && (t = new Blob([e.export()], {
      type: `${e.options.mimeType};charset=${e.options.encoding}`
    })), t;
  }
}
class I0 {
  constructor(e, t) {
    let {
      id: n,
      stateless: o = !0
    } = t;
    this.hot = e, this.id = n, this.elements = [], this.hidden = !1, this.stateId = `Filters.component.${this.id}`, this.state = o ? null : this.hot.columnIndexMapper.registerMap(this.stateId, new dh());
  }
  /**
   * Reset elements to its initial state.
   */
  reset() {
    D(this.elements, (e) => e.reset());
  }
  /**
   * Hide component.
   */
  hide() {
    this.hidden = !0;
  }
  /**
   * Show component.
   */
  show() {
    this.hidden = !1;
  }
  /**
   * Check if component is hidden.
   *
   * @returns {boolean}
   */
  isHidden() {
    return this.hot === null || this.hidden;
  }
  /**
   * Restores the component state from the given physical column index. The method
   * internally calls the `setState` method. The state then is individually processed
   * by each component.
   *
   * @param {number} physicalColumn The physical column index.
   */
  restoreState(e) {
    this.state && this.setState(this.state.getValueAtIndex(e));
  }
  /**
   * The custom logic for component state restoring.
   */
  setState() {
    throw new Error("The state setting logic is not implemented");
  }
  /**
   * Saves the component state to the given physical column index. The method
   * internally calls the `getState` method, which returns the current state of
   * the component.
   *
   * @param {number} physicalColumn The physical column index.
   */
  saveState(e) {
    this.state && this.state.setValueAtIndex(e, this.getState());
  }
  /**
   * The custom logic for component state gathering (for stateful components).
   */
  getState() {
    throw new Error("The state gathering logic is not implemented");
  }
  /**
   * Destroy element.
   */
  destroy() {
    this.hot.columnIndexMapper.unregisterMap(this.stateId), this.clearLocalHooks(), D(this.elements, (e) => e.destroy()), this.state = null, this.elements = null, this.hot = null;
  }
}
ft(I0, Rs);
const Ph = I0, Sa = {};
function vi(s, e) {
  if (!Sa[s])
    throw Error(`Filter condition "${s}" does not exist.`);
  const {
    condition: t,
    descriptor: n
  } = Sa[s];
  let o = e;
  return n.inputValuesDecorator && (o = n.inputValuesDecorator(o)), function(r) {
    return t.apply(r.meta.instance, [].concat([r], [o]));
  };
}
function zi(s) {
  if (!Sa[s])
    throw Error(`Filter condition "${s}" does not exist.`);
  return Sa[s].descriptor;
}
function Bt(s, e, t) {
  t.key = s, Sa[s] = {
    condition: e,
    descriptor: t
  };
}
const Xt = "none";
function EY() {
  return !0;
}
Bt(Xt, EY, {
  name: fh,
  inputsCount: 0,
  showOperators: !1
});
const sa = "empty";
function xY(s) {
  return Gt(s.value);
}
Bt(sa, xY, {
  name: Fm,
  inputsCount: 0,
  showOperators: !0
});
const sc = "not_empty";
function TY(s, e) {
  return !vi(sa, e)(s);
}
Bt(sc, TY, {
  name: Vm,
  inputsCount: 0,
  showOperators: !0
});
const na = "eq";
function MY(s, e) {
  let [t] = e;
  return Vt(s.value).toLocaleLowerCase(s.meta.locale) === Vt(t);
}
Bt(na, MY, {
  name: Bm,
  inputsCount: 1,
  showOperators: !0
});
const nc = "neq";
function _Y(s, e) {
  return !vi(na, e)(s);
}
Bt(nc, _Y, {
  name: Wm,
  inputsCount: 1,
  showOperators: !0
});
const O0 = "gt";
function IY(s, e) {
  let [t] = e, n = t;
  return s.meta.type === "numeric" && (n = parseFloat(n, 10)), s.value > n;
}
Bt(O0, IY, {
  name: jm,
  inputsCount: 1,
  showOperators: !0
});
const A0 = "gte";
function OY(s, e) {
  let [t] = e, n = t;
  return s.meta.type === "numeric" && (n = parseFloat(n, 10)), s.value >= n;
}
Bt(A0, OY, {
  name: Km,
  inputsCount: 1,
  showOperators: !0
});
const P0 = "lt";
function AY(s, e) {
  let [t] = e, n = t;
  return s.meta.type === "numeric" && (n = parseFloat(n, 10)), s.value < n;
}
Bt(P0, AY, {
  name: Xm,
  inputsCount: 1,
  showOperators: !0
});
const D0 = "lte";
function PY(s, e) {
  let [t] = e, n = t;
  return s.meta.type === "numeric" && (n = parseFloat(n, 10)), s.value <= n;
}
Bt(D0, PY, {
  name: qm,
  inputsCount: 1,
  showOperators: !0
});
const Np = "date_after";
function DY(s, e) {
  let [t] = e;
  const n = se(s.value, s.meta.dateFormat), o = se(t, s.meta.dateFormat);
  return !n.isValid() || !o.isValid() ? !1 : n.diff(o) >= 0;
}
Bt(Np, DY, {
  name: Jm,
  inputsCount: 1,
  showOperators: !0
});
const Lp = "date_before";
function HY(s, e) {
  let [t] = e;
  const n = se(s.value, s.meta.dateFormat), o = se(t, s.meta.dateFormat);
  return !n.isValid() || !o.isValid() ? !1 : n.diff(o) <= 0;
}
Bt(Lp, HY, {
  name: ep,
  inputsCount: 1,
  showOperators: !0
});
const Ac = "between";
function kY(s, e) {
  let [t, n] = e, o = t, r = n;
  if (s.meta.type === "numeric") {
    const a = parseFloat(o, 10), l = parseFloat(r, 10);
    o = Math.min(a, l), r = Math.max(a, l);
  } else if (s.meta.type === "date") {
    const a = vi(Lp, [r]), l = vi(Np, [o]);
    return a(s) && l(s);
  }
  return s.value >= o && s.value <= r;
}
Bt(Ac, kY, {
  name: Zm,
  inputsCount: 2,
  showOperators: !0
});
const H0 = "not_between";
function NY(s, e) {
  return !vi(Ac, e)(s);
}
Bt(H0, NY, {
  name: Qm,
  inputsCount: 2,
  showOperators: !0
});
const k0 = "begins_with";
function LY(s, e) {
  let [t] = e;
  return Vt(s.value).toLocaleLowerCase(s.meta.locale).startsWith(Vt(t));
}
Bt(k0, LY, {
  name: Um,
  inputsCount: 1,
  showOperators: !0
});
const N0 = "ends_with";
function $Y(s, e) {
  let [t] = e;
  return Vt(s.value).toLocaleLowerCase(s.meta.locale).endsWith(Vt(t));
}
Bt(N0, $Y, {
  name: zm,
  inputsCount: 1,
  showOperators: !0
});
const $p = "contains";
function FY(s, e) {
  let [t] = e;
  return Vt(s.value).toLocaleLowerCase(s.meta.locale).indexOf(Vt(t)) >= 0;
}
Bt($p, FY, {
  name: Ym,
  inputsCount: 1,
  showOperators: !0
});
const L0 = "not_contains";
function VY(s, e) {
  return !vi($p, e)(s);
}
Bt(L0, VY, {
  name: Gm,
  inputsCount: 1,
  showOperators: !0
});
const $0 = "date_tomorrow";
function BY(s) {
  const e = se(s.value, s.meta.dateFormat);
  return e.isValid() ? e.isSame(se().subtract(-1, "days").startOf("day"), "d") : !1;
}
Bt($0, BY, {
  name: sp,
  inputsCount: 0
});
const F0 = "date_today";
function WY(s) {
  const e = se(s.value, s.meta.dateFormat);
  return e.isValid() ? e.isSame(se().startOf("day"), "d") : !1;
}
Bt(F0, WY, {
  name: tp,
  inputsCount: 0
});
const V0 = "date_yesterday";
function UY(s) {
  const e = se(s.value, s.meta.dateFormat);
  return e.isValid() ? e.isSame(se().subtract(1, "days").startOf("day"), "d") : !1;
}
Bt(V0, UY, {
  name: np,
  inputsCount: 0
});
G$();
function zY(s, e) {
  let t = s;
  return t === "" && (t = `(${e})`), t;
}
const Ef = (/* @__PURE__ */ new Set([1])).has(1), YY = Ef && typeof Array.from == "function";
function Ua(s) {
  let e = s;
  return Ef && (e = new Set(e)), function(t) {
    let n;
    return Ef ? n = e.has(t) : n = !!~e.indexOf(t), n;
  };
}
function B0(s) {
  return s ?? "";
}
function xf(s) {
  let e = s;
  return YY ? e = Array.from(new Set(e)) : e = Ob(e), e = e.sort((t, n) => typeof t == "number" && typeof n == "number" ? t - n : t === n ? 0 : t > n ? 1 : -1), e;
}
function jv(s, e, t, n) {
  const o = [], r = s === e;
  let a;
  return r || (a = Ua(e)), D(s, (l) => {
    let c = !1;
    (r || a(l)) && (c = !0);
    const h = {
      checked: c,
      value: l,
      visualValue: zY(l, t)
    };
    n && n(h), o.push(h);
  }), o;
}
const Yi = "by_value";
function GY(s, e) {
  let [t] = e;
  return t(s.value);
}
Bt(Yi, GY, {
  name: "By value",
  inputsCount: 0,
  inputValuesDecorator(s) {
    let [e] = s;
    return [Ua(e)];
  },
  showOperators: !1
});
const ba = {};
function jY(s) {
  if (!ba[s])
    throw Error(`Operation with id "${s}" does not exist.`);
  const e = ba[s].func;
  return function(t, n) {
    return e(t, n);
  };
}
function KY(s) {
  return ba[s].name;
}
function Fp(s, e, t) {
  ba[s] = {
    name: e,
    func: t
  };
}
const wi = "conjunction", XY = rp;
function qY(s, e) {
  return s.every((t) => t.func(e));
}
Fp(wi, XY, qY);
const Pc = "disjunction", ZY = gh;
function QY(s, e) {
  return s.some((t) => t.func(e));
}
Fp(Pc, ZY, QY);
const Vp = "disjunctionWithExtraCondition", JY = gh;
function eG(s, e) {
  if (s.length < 3)
    throw Error("Operation doesn't work on less then three conditions.");
  return s.slice(0, s.length - 1).some((t) => t.func(e)) && s[s.length - 1].func(e);
}
Fp(Vp, JY, eG);
const tG = "numeric", W0 = "text", sG = "date", Kv = {
  [tG]: [Xt, ze, sa, sc, ze, na, nc, ze, O0, A0, P0, D0, Ac, H0],
  [W0]: [Xt, ze, sa, sc, ze, na, nc, ze, k0, N0, ze, $p, L0],
  [sG]: [Xt, ze, sa, sc, ze, na, nc, ze, Lp, Np, Ac, ze, $0, F0, V0]
};
function nG(s) {
  const e = [];
  let t = s;
  return Kv[t] || (t = W0), D(Kv[t], (n) => {
    let o;
    n === ze ? o = {
      name: ze
    } : o = Ss(zi(n)), e.push(o);
  }), e;
}
const Qu = "built", Ju = "building", Xv = ["click", "input", "keydown", "keypress", "keyup", "focus", "blur", "change"];
let U0 = class z0 {
  static get DEFAULTS() {
    return Ss({
      className: "",
      value: "",
      tagName: "div",
      children: [],
      wrapIt: !0
    });
  }
  constructor(e, t) {
    this.hot = e, this.eventManager = new Dt(this), this.options = Ut(z0.DEFAULTS, t), this._element = this.hot.rootDocument.createElement(this.options.wrapIt ? "div" : this.options.tagName), this.buildState = null;
  }
  /**
   * Set the element value.
   *
   * @param {*} value Set the component value.
   */
  setValue(e) {
    this.options.value = e, this.update();
  }
  /**
   * Get the element value.
   *
   * @returns {*}
   */
  getValue() {
    return this.options.value;
  }
  /**
   * Get element as a DOM object.
   *
   * @returns {Element}
   */
  get element() {
    return this.buildState === Ju ? this._element : this.buildState === Qu ? (this.update(), this._element) : (this.buildState = Ju, this.build(), this.buildState = Qu, this._element);
  }
  /**
   * Check if element was built (built whole DOM structure).
   *
   * @returns {boolean}
   */
  isBuilt() {
    return this.buildState === Qu;
  }
  /**
   * Translate value if it is possible. It's checked if value belongs to namespace of translated phrases.
   *
   * @param {*} value Value which will may be translated.
   * @returns {*} Translated value if translation was possible, original value otherwise.
   */
  translateIfPossible(e) {
    return typeof e == "string" && e.startsWith(ws) ? this.hot.getTranslatedPhrase(e) : e;
  }
  /**
   * Build DOM structure.
   */
  build() {
    const e = (t, n) => {
      this.eventManager.addEventListener(t, n, (o) => this.runLocalHooks(n, o, this));
    };
    if (this.buildState || (this.buildState = Ju), this.options.className && ie(this._element, this.options.className), this.options.children.length)
      D(this.options.children, (t) => this._element.appendChild(t.element));
    else if (this.options.wrapIt) {
      const t = this.hot.rootDocument.createElement(this.options.tagName);
      je(this.options, (n, o) => {
        t[o] !== void 0 && o !== "className" && o !== "tagName" && o !== "children" && (t[o] = this.translateIfPossible(n));
      }), this._element.appendChild(t), D(Xv, (n) => e(t, n));
    } else
      D(Xv, (t) => e(this._element, t));
  }
  /**
   * Update DOM structure.
   */
  update() {
  }
  /**
   * Reset to initial state.
   */
  reset() {
    this.options.value = "", this.update();
  }
  /**
   * Show element.
   */
  show() {
    this.element.style.display = "";
  }
  /**
   * Hide element.
   */
  hide() {
    this.element.style.display = "none";
  }
  /**
   * Focus element.
   */
  focus() {
  }
  destroy() {
    this.eventManager.destroy(), this.eventManager = null, this.hot = null, this._element.parentNode && this._element.parentNode.removeChild(this._element), this._element = null;
  }
};
ft(U0, Rs);
const Ci = U0, Il = /* @__PURE__ */ new WeakMap();
class Bp extends Ci {
  static get DEFAULTS() {
    return Ss({
      placeholder: "",
      type: "text",
      tagName: "input"
    });
  }
  constructor(e, t) {
    super(e, Ut(Bp.DEFAULTS, t)), Il.set(this, {}), this.registerHooks();
  }
  /**
   * Register all necessary hooks.
   */
  registerHooks() {
    this.addLocalHook("click", () => this.onClick()), this.addLocalHook("keyup", (e) => this.onKeyup(e));
  }
  /**
   * Build DOM structure.
   */
  build() {
    super.build();
    const e = Il.get(this), t = this.hot.rootDocument.createElement("div");
    e.input = this._element.firstChild, ie(this._element, "htUIInput"), ie(t, "htUIInputIcon"), this._element.appendChild(t), this.update();
  }
  /**
   * Update element.
   */
  update() {
    if (!this.isBuilt())
      return;
    const e = Il.get(this).input;
    e.type = this.options.type, e.placeholder = this.translateIfPossible(this.options.placeholder), e.value = this.translateIfPossible(this.options.value);
  }
  /**
   * Focus element.
   */
  focus() {
    this.isBuilt() && Il.get(this).input.focus();
  }
  /**
   * OnClick listener.
   */
  onClick() {
  }
  /**
   * OnKeyup listener.
   *
   * @param {Event} event The mouse event object.
   */
  onKeyup(e) {
    this.options.value = e.target.value;
  }
}
const qo = Bp, Ol = /* @__PURE__ */ new WeakMap();
class Wp extends Ci {
  static get DEFAULTS() {
    return Ss({
      className: "htUISelect",
      wrapIt: !1
    });
  }
  constructor(e, t) {
    super(e, Ut(Wp.DEFAULTS, t)), Ol.set(this, {}), this.menu = null, this.items = [], this.registerHooks();
  }
  /**
   * Register all necessary hooks.
   */
  registerHooks() {
    this.addLocalHook("click", () => this.onClick());
  }
  /**
   * Set options which can be selected in the list.
   *
   * @param {Array} items Array of objects with required keys `key` and `name`.
   */
  setItems(e) {
    this.items = this.translateNames(e), this.menu && this.menu.setMenuItems(this.items);
  }
  /**
   * Translate names of menu items.
   *
   * @param {Array} items Array of objects with required keys `key` and `name`.
   * @returns {Array} Items with translated `name` keys.
   */
  translateNames(e) {
    return D(e, (t) => {
      t.name = this.translateIfPossible(t.name);
    }), e;
  }
  /**
   * Build DOM structure.
   */
  build() {
    super.build(), this.menu = new Dp(this.hot, {
      className: "htSelectUI htFiltersConditionsMenu",
      keepInViewport: !1,
      standalone: !0,
      container: this.options.menuContainer
    }), this.menu.setMenuItems(this.items);
    const e = new Ci(this.hot, {
      className: "htUISelectCaption"
    }), t = new Ci(this.hot, {
      className: "htUISelectDropdown"
    }), n = Ol.get(this);
    n.caption = e, n.captionElement = e.element, n.dropdown = t, D([e, t], (o) => this._element.appendChild(o.element)), this.menu.addLocalHook("select", (o) => this.onMenuSelect(o)), this.menu.addLocalHook("afterClose", () => this.onMenuClosed()), this.update();
  }
  /**
   * Update DOM structure.
   */
  update() {
    if (!this.isBuilt())
      return;
    let e;
    this.options.value ? e = this.options.value.name : e = this.menu.hot.getTranslatedPhrase(fh), Ol.get(this).captionElement.textContent = e, super.update();
  }
  /**
   * Open select dropdown menu with available options.
   */
  openOptions() {
    const e = this.element.getBoundingClientRect();
    this.menu && (this.menu.open(), this.menu.setPosition({
      left: this.hot.isLtr() ? e.left - 5 : e.left - 31,
      top: e.top - 1,
      width: e.width,
      height: e.height
    }));
  }
  /**
   * Close select dropdown menu.
   */
  closeOptions() {
    this.menu && this.menu.close();
  }
  /**
   * On menu selected listener.
   *
   * @private
   * @param {object} command Selected item.
   */
  onMenuSelect(e) {
    e.name !== ze && (this.options.value = e, this.update(), this.runLocalHooks("select", this.options.value));
  }
  /**
   * On menu closed listener.
   *
   * @private
   */
  onMenuClosed() {
    this.runLocalHooks("afterClose");
  }
  /**
   * On element click listener.
   *
   * @private
   */
  onClick() {
    this.openOptions();
  }
  /**
   * Destroy instance.
   */
  destroy() {
    this.menu && (this.menu.destroy(), this.menu = null);
    const {
      caption: e,
      dropdown: t
    } = Ol.get(this);
    e && e.destroy(), t && t.destroy(), super.destroy();
  }
}
const qv = Wp;
class iG extends Ph {
  constructor(e, t) {
    super(e, {
      id: t.id,
      stateless: !1
    }), this.name = t.name, this.addSeparator = t.addSeparator, this.elements.push(new qv(this.hot, {
      menuContainer: t.menuContainer
    })), this.elements.push(new qo(this.hot, {
      placeholder: dp
    })), this.elements.push(new qo(this.hot, {
      placeholder: fp
    })), this.registerHooks();
  }
  /**
   * Register all necessary hooks.
   *
   * @private
   */
  registerHooks() {
    this.getSelectElement().addLocalHook("select", (e) => this.onConditionSelect(e)), this.getSelectElement().addLocalHook("afterClose", () => this.onSelectUIClosed()), D(this.getInputElements(), (e) => {
      e.addLocalHook("keydown", (t) => this.onInputKeyDown(t));
    });
  }
  /**
   * Set state of the component.
   *
   * @param {object} value State to restore.
   */
  setState(e) {
    if (this.reset(), !e)
      return;
    const t = Ss(e.command);
    t.name.startsWith(Ht) && (t.name = this.hot.getTranslatedPhrase(t.name)), this.getSelectElement().setValue(t), D(e.args, (n, o) => {
      if (o > t.inputsCount - 1)
        return !1;
      const r = this.getInputElement(o);
      r.setValue(n), r[t.inputsCount > o ? "show" : "hide"](), o || setTimeout(() => r.focus(), 10);
    });
  }
  /**
   * Export state of the component (get selected filter and filter arguments).
   *
   * @returns {object} Returns object where `command` key keeps used condition filter and `args` key its arguments.
   */
  getState() {
    const e = this.getSelectElement().getValue() || zi(Xt), t = [];
    return D(this.getInputElements(), (n, o) => {
      e.inputsCount > o && t.push(n.getValue());
    }), {
      command: e,
      args: t
    };
  }
  /**
   * Update state of component.
   *
   * @param {object} condition The condition object.
   * @param {object} condition.command The command object with condition name as `key` property.
   * @param {Array} condition.args An array of values to compare.
   * @param {number} column Physical column index.
   */
  updateState(e, t) {
    const n = zi(e ? e.name : Xt);
    this.state.setValueAtIndex(t, {
      command: n,
      args: e ? e.args : []
    }), e || D(this.getInputElements(), (o) => o.setValue(null));
  }
  /**
   * Get select element.
   *
   * @returns {SelectUI}
   */
  getSelectElement() {
    return this.elements.filter((e) => e instanceof qv)[0];
  }
  /**
   * Get input element.
   *
   * @param {number} index Index an array of elements.
   * @returns {InputUI}
   */
  getInputElement() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
    return this.getInputElements()[e];
  }
  /**
   * Get input elements.
   *
   * @returns {Array}
   */
  getInputElements() {
    return this.elements.filter((e) => e instanceof qo);
  }
  /**
   * Get menu object descriptor.
   *
   * @returns {object}
   */
  getMenuItemDescriptor() {
    return {
      key: this.id,
      name: this.name,
      isCommand: !1,
      disableSelection: !0,
      hidden: () => this.isHidden(),
      renderer: (e, t, n, o, r, a) => {
        ie(t.parentNode, "htFiltersMenuCondition"), this.addSeparator && ie(t.parentNode, "border");
        const l = this.hot.rootDocument.createElement("div");
        return ie(l, "htFiltersMenuLabel"), l.textContent = a, t.appendChild(l), t.parentNode.hasAttribute("ghost-table") || D(this.elements, (c) => t.appendChild(c.element)), t;
      }
    };
  }
  /**
   * Reset elements to their initial state.
   */
  reset() {
    const e = this.hot.getPlugin("filters").getSelectedColumn();
    let t = [zi(Xt)];
    if (e !== null) {
      const {
        visualIndex: n
      } = e;
      t = nG(this.hot.getDataType(0, n, this.hot.countRows(), n));
    }
    D(this.getInputElements(), (n) => n.hide()), this.getSelectElement().setItems(t), super.reset(), this.getSelectElement().setValue(t[0]);
  }
  /**
   * On condition select listener.
   *
   * @private
   * @param {object} command Menu item object (command).
   */
  onConditionSelect(e) {
    D(this.getInputElements(), (t, n) => {
      t[e.inputsCount > n ? "show" : "hide"](), n === 0 && setTimeout(() => t.focus(), 10);
    }), this.runLocalHooks("change", e);
  }
  /**
   * On component SelectUI closed listener.
   *
   * @private
   */
  onSelectUIClosed() {
    this.runLocalHooks("afterClose");
  }
  /**
   * Key down listener.
   *
   * @private
   * @param {Event} event The DOM event object.
   */
  onInputKeyDown(e) {
    pa(e.keyCode, "ENTER") ? (this.runLocalHooks("accept"), Rn(e)) : pa(e.keyCode, "ESCAPE") && (this.runLocalHooks("cancel"), Rn(e));
  }
}
const ed = iG, Al = /* @__PURE__ */ new WeakMap();
class Up extends Ci {
  static get DEFAULTS() {
    return Ss({
      type: "radio",
      tagName: "input",
      className: "htUIRadio",
      label: {}
    });
  }
  constructor(e, t) {
    super(e, Ut(Up.DEFAULTS, t)), Al.set(this, {});
  }
  /**
   * Build DOM structure.
   */
  build() {
    super.build();
    const e = Al.get(this);
    e.input = this._element.firstChild;
    const t = this.hot.rootDocument.createElement("label");
    t.textContent = this.translateIfPossible(this.options.label.textContent), t.htmlFor = this.translateIfPossible(this.options.label.htmlFor), e.label = t, this._element.appendChild(t), this.update();
  }
  /**
   * Update element.
   */
  update() {
    if (!this.isBuilt())
      return;
    const e = Al.get(this);
    e.input.checked = this.options.checked, e.label.textContent = this.translateIfPossible(this.options.label.textContent);
  }
  /**
   * Check if radio button is checked.
   *
   * @returns {boolean}
   */
  isChecked() {
    return this.options.checked;
  }
  /**
   * Set input checked attribute.
   *
   * @param {boolean} value Set the component state.
   */
  setChecked() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !0;
    this.options.checked = e, this.update();
  }
  /**
   * Focus element.
   */
  focus() {
    this.isBuilt() && Al.get(this).input.focus();
  }
}
const Zv = Up, Qv = 0;
class oG extends Ph {
  constructor(e, t) {
    super(e, {
      id: t.id,
      stateless: !1
    }), this.name = t.name, this.buildOperatorsElement();
  }
  /**
   * Get menu object descriptor.
   *
   * @returns {object}
   */
  getMenuItemDescriptor() {
    return {
      key: this.id,
      name: this.name,
      isCommand: !1,
      disableSelection: !0,
      hidden: () => this.isHidden(),
      renderer: (e, t) => (ie(t.parentNode, "htFiltersMenuOperators"), t.parentNode.hasAttribute("ghost-table") || D(this.elements, (n) => t.appendChild(n.element)), t)
    };
  }
  /**
   * Add RadioInputUI elements to component.
   *
   * @private
   */
  buildOperatorsElement() {
    const e = [wi, Pc];
    D(e, (t) => {
      const n = new Zv(this.hot, {
        name: "operator",
        label: {
          htmlFor: t,
          textContent: KY(t)
        },
        value: t,
        checked: t === e[Qv],
        id: t
      });
      n.addLocalHook("change", (o) => this.onRadioInputChange(o)), this.elements.push(n);
    });
  }
  /**
   * Set state of operators component to check radio input at specific `index`.
   *
   * @param {number} searchedIndex Index of radio input to check.
   */
  setChecked(e) {
    if (this.elements.length < e)
      throw Error(ut`Radio button with index ${e} doesn't exist.`);
    D(this.elements, (t, n) => {
      t.setChecked(n === e);
    });
  }
  /**
   * Get `id` of active operator.
   *
   * @returns {string}
   */
  getActiveOperationId() {
    const e = this.elements.find((t) => t instanceof Zv && t.isChecked());
    return e ? e.getValue() : wi;
  }
  /**
   * Export state of the component (get selected operator).
   *
   * @returns {string} Returns `id` of selected operator.
   */
  getState() {
    return this.getActiveOperationId();
  }
  /**
   * Set state of the component.
   *
   * @param {object} value State to restore.
   */
  setState(e) {
    this.reset(), e && this.getActiveOperationId() !== e && D(this.elements, (t) => {
      t.setChecked(t.getValue() === e);
    });
  }
  /**
   * Update state of component.
   *
   * @param {string} [operationId='conjunction'] Id of selected operation.
   * @param {number} column Physical column index.
   */
  updateState() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : wi, t = arguments.length > 1 ? arguments[1] : void 0, n = e;
    n === Vp && (n = Pc), this.state.setValueAtIndex(t, n);
  }
  /**
   * Reset elements to their initial state.
   */
  reset() {
    this.setChecked(Qv);
  }
  /**
   * OnChange listener.
   *
   * @private
   * @param {Event} event The DOM event object.
   */
  onRadioInputChange(e) {
    this.setState(e.target.value);
  }
}
const rG = oG, td = /* @__PURE__ */ new WeakMap();
class zp extends Ci {
  static get DEFAULTS() {
    return Ss({
      href: "#",
      tagName: "a"
    });
  }
  constructor(e, t) {
    super(e, Ut(zp.DEFAULTS, t)), td.set(this, {});
  }
  /**
   * Build DOM structure.
   */
  build() {
    super.build();
    const e = td.get(this);
    e.link = this._element.firstChild;
  }
  /**
   * Update element.
   */
  update() {
    this.isBuilt() && (td.get(this).link.textContent = this.translateIfPossible(this.options.textContent));
  }
}
const Jv = zp, aG = /* @__PURE__ */ new WeakMap(), lG = "multipleSelect.itemBox";
class Yp extends Ci {
  static get DEFAULTS() {
    return Ss({
      className: "htUIMultipleSelect",
      value: []
    });
  }
  constructor(e, t) {
    super(e, Ut(Yp.DEFAULTS, t)), aG.set(this, {}), this.searchInput = new qo(this.hot, {
      placeholder: up,
      className: "htUIMultipleSelectSearch"
    }), this.selectAllUI = new Jv(this.hot, {
      textContent: ap,
      className: "htUISelectAll"
    }), this.clearAllUI = new Jv(this.hot, {
      textContent: lp,
      className: "htUIClearAll"
    }), this.items = [], this.itemsBox = null, this.registerHooks();
  }
  /**
   * Register all necessary hooks.
   */
  registerHooks() {
    this.searchInput.addLocalHook("keydown", (e) => this.onInputKeyDown(e)), this.searchInput.addLocalHook("input", (e) => this.onInput(e)), this.selectAllUI.addLocalHook("click", (e) => this.onSelectAllClick(e)), this.clearAllUI.addLocalHook("click", (e) => this.onClearAllClick(e));
  }
  /**
   * Set available options.
   *
   * @param {Array} items Array of objects with `checked` and `label` property.
   */
  setItems(e) {
    this.items = e, this.itemsBox && this.itemsBox.loadData(this.items);
  }
  /**
   * Set a locale for the component.
   *
   * @param {string} locale Locale used for filter actions performed on data, ie. `en-US`.
   */
  setLocale(e) {
    this.locale = e;
  }
  /**
   * Get a locale for the component.
   *
   * @returns {string}
   */
  getLocale() {
    return this.locale;
  }
  /**
   * Get all available options.
   *
   * @returns {Array}
   */
  getItems() {
    return [...this.items];
  }
  /**
   * Get element value.
   *
   * @returns {Array} Array of selected values.
   */
  getValue() {
    return hG(this.items);
  }
  /**
   * Check if all values listed in element are selected.
   *
   * @returns {boolean}
   */
  isSelectedAllValues() {
    return this.items.length === this.getValue().length;
  }
  /**
   * Build DOM structure.
   */
  build() {
    super.build();
    const {
      rootDocument: e
    } = this.hot, t = e.createElement("div"), n = new Ci(this.hot, {
      className: "htUISelectionControls",
      children: [this.selectAllUI, this.clearAllUI]
    });
    this._element.appendChild(this.searchInput.element), this._element.appendChild(n.element), this._element.appendChild(t);
    const o = (r) => {
      if (!this._element)
        return;
      this.itemsBox && this.itemsBox.destroy(), ie(r, "htUIMultipleSelectHot"), this.itemsBox = new this.hot.constructor(r, {
        data: this.items,
        columns: [{
          data: "checked",
          type: "checkbox",
          label: {
            property: "visualValue",
            position: "after"
          }
        }],
        beforeRenderer: (c, h, u, f, g, m) => {
          c.title = m.instance.getDataAtRowProp(h, m.label.property);
        },
        maxCols: 1,
        autoWrapCol: !0,
        height: 110,
        // Workaround for #151.
        colWidths: () => this.itemsBox.container.scrollWidth - qt(e),
        copyPaste: !1,
        disableVisualSelection: "area",
        fillHandle: !1,
        fragmentSelection: "cell",
        tabMoves: {
          row: 1,
          col: 0
        },
        layoutDirection: this.hot.isRtl() ? "rtl" : "ltr"
      }), this.itemsBox.init(), this.itemsBox.getShortcutManager().getContext("grid").addShortcut({
        // TODO: Is this shortcut really needed? We have one test for that case, but focus is performed programmatically.
        keys: [["Escape"]],
        callback: (c) => {
          this.runLocalHooks("keydown", c, this);
        },
        group: lG
      });
    };
    o(t), setTimeout(() => o(t), 100);
  }
  /**
   * Reset DOM structure.
   */
  reset() {
    this.searchInput.reset(), this.selectAllUI.reset(), this.clearAllUI.reset();
  }
  /**
   * Update DOM structure.
   */
  update() {
    this.isBuilt() && (this.itemsBox.loadData(cG(this.items, this.options.value)), super.update());
  }
  /**
   * Destroy instance.
   */
  destroy() {
    this.itemsBox && this.itemsBox.destroy(), this.searchInput.destroy(), this.clearAllUI.destroy(), this.selectAllUI.destroy(), this.searchInput = null, this.clearAllUI = null, this.selectAllUI = null, this.itemsBox = null, this.items = null, super.destroy();
  }
  /**
   * 'input' event listener for input element.
   *
   * @private
   * @param {Event} event DOM event.
   */
  onInput(e) {
    const t = e.target.value.toLocaleLowerCase(this.getLocale());
    let n;
    t === "" ? n = [...this.items] : n = Ws(this.items, (o) => `${o.value}`.toLocaleLowerCase(this.getLocale()).indexOf(t) >= 0), this.itemsBox.loadData(n);
  }
  /**
   * 'keydown' event listener for input element.
   *
   * @private
   * @param {Event} event DOM event.
   */
  onInputKeyDown(e) {
    this.runLocalHooks("keydown", e, this), Fb(pa, e.keyCode)("ARROW_DOWN|TAB") && !this.itemsBox.isListening() && (Rn(e), this.itemsBox.listen(), this.itemsBox.selectCell(0, 0));
  }
  /**
   * On click listener for "Select all" link.
   *
   * @private
   * @param {DOMEvent} event The mouse event object.
   */
  onSelectAllClick(e) {
    const t = [];
    e.preventDefault(), D(this.itemsBox.getSourceData(), (n, o) => {
      n.checked = !0, t.push(iv(n, o)[0]);
    }), this.itemsBox.setSourceDataAtCell(t);
  }
  /**
   * On click listener for "Clear" link.
   *
   * @private
   * @param {DOMEvent} event The mouse event object.
   */
  onClearAllClick(e) {
    const t = [];
    e.preventDefault(), D(this.itemsBox.getSourceData(), (n, o) => {
      n.checked = !1, t.push(iv(n, o)[0]);
    }), this.itemsBox.setSourceDataAtCell(t);
  }
}
const ey = Yp;
function cG(s, e) {
  const t = Ua(e);
  return Ye(s, (n) => (n.checked = t(n.value), n));
}
function hG(s) {
  const e = [];
  return D(s, (t) => {
    t.checked && e.push(t.value);
  }), e;
}
class uG extends Ph {
  constructor(e, t) {
    super(e, {
      id: t.id,
      stateless: !1
    }), this.name = t.name, this.elements.push(new ey(this.hot)), this.registerHooks();
  }
  /**
   * Register all necessary hooks.
   *
   * @private
   */
  registerHooks() {
    this.getMultipleSelectElement().addLocalHook("keydown", (e) => this.onInputKeyDown(e));
  }
  /**
   * Set state of the component.
   *
   * @param {object} value The component value.
   */
  setState(e) {
    if (this.reset(), e && e.command.key === Yi) {
      const t = this.getMultipleSelectElement();
      t.setItems(e.itemsSnapshot), t.setValue(e.args[0]), t.setLocale(e.locale);
    }
  }
  /**
   * Export state of the component (get selected filter and filter arguments).
   *
   * @returns {object} Returns object where `command` key keeps used condition filter and `args` key its arguments.
   */
  getState() {
    const e = this.getMultipleSelectElement(), t = e.getItems();
    return {
      command: {
        key: e.isSelectedAllValues() || !t.length ? Xt : Yi
      },
      args: [e.getValue()],
      itemsSnapshot: t
    };
  }
  /**
   * Update state of component.
   *
   * @param {object} stateInfo Information about state containing stack of edited column,
   * stack of dependent conditions, data factory and optional condition arguments change. It's described by object containing keys:
   * `editedConditionStack`, `dependentConditionStacks`, `visibleDataFactory` and `conditionArgsChange`.
   */
  updateState(e) {
    const t = (n, o, r, a, l) => {
      const [c] = Ws(o, (f) => f.name === Yi), h = {}, u = this.hot.getTranslatedPhrase(xc);
      if (c) {
        const f = xf(Ye(a(n, l), (C) => C.value));
        r && (c.args[0] = r);
        const g = [], m = jv(f, c.args[0], u, (C) => {
          C.checked && g.push(C.value);
        }), w = e.editedConditionStack.column;
        h.locale = this.hot.getCellMeta(0, w).locale, h.args = [g], h.command = zi(Yi), h.itemsSnapshot = m;
      } else
        h.args = [], h.command = zi(Xt);
      this.state.setValueAtIndex(n, h);
    };
    t(e.editedConditionStack.column, e.editedConditionStack.conditions, e.conditionArgsChange, e.filteredRowsFactory), e.dependentConditionStacks.length && t(e.dependentConditionStacks[0].column, e.dependentConditionStacks[0].conditions, e.conditionArgsChange, e.filteredRowsFactory, e.editedConditionStack);
  }
  /**
   * Get multiple select element.
   *
   * @returns {MultipleSelectUI}
   */
  getMultipleSelectElement() {
    return this.elements.filter((e) => e instanceof ey)[0];
  }
  /**
   * Get object descriptor for menu item entry.
   *
   * @returns {object}
   */
  getMenuItemDescriptor() {
    return {
      key: this.id,
      name: this.name,
      isCommand: !1,
      disableSelection: !0,
      hidden: () => this.isHidden(),
      renderer: (e, t, n, o, r, a) => {
        ie(t.parentNode, "htFiltersMenuValue");
        const l = this.hot.rootDocument.createElement("div");
        return ie(l, "htFiltersMenuLabel"), l.textContent = a, t.appendChild(l), t.parentNode.hasAttribute("ghost-table") || D(this.elements, (c) => t.appendChild(c.element)), t;
      }
    };
  }
  /**
   * Reset elements to their initial state.
   */
  reset() {
    const e = this.hot.getTranslatedPhrase(xc), t = xf(this._getColumnVisibleValues()), n = jv(t, t, e);
    this.getMultipleSelectElement().setItems(n), super.reset(), this.getMultipleSelectElement().setValue(t);
    const o = this.hot.getPlugin("filters").getSelectedColumn();
    o !== null && this.getMultipleSelectElement().setLocale(this.hot.getCellMeta(0, o.visualIndex).locale);
  }
  /**
   * Key down listener.
   *
   * @private
   * @param {Event} event The DOM event object.
   */
  onInputKeyDown(e) {
    pa(e.keyCode, "ESCAPE") && (this.runLocalHooks("cancel"), Rn(e));
  }
  /**
   * Get data for currently selected column.
   *
   * @returns {Array}
   * @private
   */
  _getColumnVisibleValues() {
    const e = this.hot.getPlugin("filters").getSelectedColumn();
    return e === null ? [] : Ye(this.hot.getDataAtCol(e.visualIndex), (t) => B0(t));
  }
}
const dG = uG;
class ia extends Ph {
  static get BUTTON_OK() {
    return "ok";
  }
  static get BUTTON_CANCEL() {
    return "cancel";
  }
  constructor(e, t) {
    super(e, {
      id: t.id,
      stateless: !0
    }), this.name = t.name, this.elements.push(new qo(this.hot, {
      type: "button",
      value: cp,
      className: "htUIButton htUIButtonOK",
      identifier: ia.BUTTON_OK
    })), this.elements.push(new qo(this.hot, {
      type: "button",
      value: hp,
      className: "htUIButton htUIButtonCancel",
      identifier: ia.BUTTON_CANCEL
    })), this.registerHooks();
  }
  /**
   * Register all necessary hooks.
   *
   * @private
   */
  registerHooks() {
    D(this.elements, (e) => {
      e.addLocalHook("click", (t, n) => this.onButtonClick(t, n));
    });
  }
  /**
   * Get menu object descriptor.
   *
   * @returns {object}
   */
  getMenuItemDescriptor() {
    return {
      key: this.id,
      name: this.name,
      isCommand: !1,
      disableSelection: !0,
      hidden: () => this.isHidden(),
      renderer: (e, t) => (ie(t.parentNode, "htFiltersMenuActionBar"), t.parentNode.hasAttribute("ghost-table") || D(this.elements, (n) => t.appendChild(n.element)), t)
    };
  }
  /**
   * Fire accept event.
   */
  accept() {
    this.runLocalHooks("accept");
  }
  /**
   * Fire cancel event.
   */
  cancel() {
    this.runLocalHooks("cancel");
  }
  /**
   * On button click listener.
   *
   * @private
   * @param {Event} event DOM event.
   * @param {InputUI} button InputUI object.
   */
  onButtonClick(e, t) {
    t.options.identifier === ia.BUTTON_OK ? this.accept() : this.cancel();
  }
}
const fG = ia, ty = "ConditionCollection.filteringStates";
class Y0 {
  constructor(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0;
    this.hot = e, this.isMapRegistrable = t, this.filteringStates = new dh(), this.isMapRegistrable === !0 ? this.hot.columnIndexMapper.registerMap(ty, this.filteringStates) : this.filteringStates.init(this.hot.columnIndexMapper.getNumberOfIndexes());
  }
  /**
   * Check if condition collection is empty (so no needed to filter data).
   *
   * @returns {boolean}
   */
  isEmpty() {
    return this.getFilteredColumns().length === 0;
  }
  /**
   * Check if value is matched to the criteria of conditions chain.
   *
   * @param {object} value Object with `value` and `meta` keys.
   * @param {number} column The physical column index.
   * @returns {boolean}
   */
  isMatch(e, t) {
    var n;
    const o = this.filteringStates.getValueAtIndex(t), r = (n = o == null ? void 0 : o.conditions) !== null && n !== void 0 ? n : [], a = o == null ? void 0 : o.operation;
    return this.isMatchInConditions(r, e, a);
  }
  /**
   * Check if the value is matches the conditions.
   *
   * @param {Array} conditions List of conditions.
   * @param {object} value Object with `value` and `meta` keys.
   * @param {string} [operationType='conjunction'] Type of conditions operation.
   * @returns {boolean}
   */
  isMatchInConditions(e, t) {
    let n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : wi;
    return e.length ? jY(n)(e, t) : !0;
  }
  /**
   * Add condition to the collection.
   *
   * @param {number} column The physical column index.
   * @param {object} conditionDefinition Object with keys:
   *  * `command` Object, Command object with condition name as `key` property.
   *  * `args` Array, Condition arguments.
   * @param {string} [operation='conjunction'] Type of conditions operation.
   * @param {number} [position] Position to which condition will be added. When argument is undefined
   * the condition will be processed as the last condition.
   * @fires ConditionCollection#beforeAdd
   * @fires ConditionCollection#afterAdd
   */
  addCondition(e, t) {
    let n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : wi, o = arguments.length > 3 ? arguments[3] : void 0;
    const r = this.hot.getCellMeta(0, e).locale, a = Ye(t.args, (u) => typeof u == "string" ? u.toLocaleLowerCase(r) : u), l = t.name || t.command.key;
    this.runLocalHooks("beforeAdd", e);
    const c = this.getOperation(e);
    if (c) {
      if (c !== n)
        throw Error(ut`The column of index ${e} has been already applied with a \`${c}\`\x20
        filter operation. Use \`removeConditions\` to clear the current conditions and then add new ones.\x20
        Mind that you cannot mix different types of operations (for instance, if you use \`conjunction\`,\x20
        use it consequently for a particular column).`);
    } else if (wt(ba[n]))
      throw new Error(ut`Unexpected operation named \`${n}\`. Possible ones are\x20
        \`disjunction\` and \`conjunction\`.`);
    const h = this.getConditions(e);
    h.length === 0 ? this.filteringStates.setValueAtIndex(e, {
      operation: n,
      conditions: [{
        name: l,
        args: a,
        func: vi(l, a)
      }]
    }, o) : h.push({
      name: l,
      args: a,
      func: vi(l, a)
    }), this.runLocalHooks("afterAdd", e);
  }
  /**
   * Get all added conditions from the collection at specified column index.
   *
   * @param {number} column The physical column index.
   * @returns {Array} Returns conditions collection as an array.
   */
  getConditions(e) {
    var t, n;
    return (t = (n = this.filteringStates.getValueAtIndex(e)) === null || n === void 0 ? void 0 : n.conditions) !== null && t !== void 0 ? t : [];
  }
  /**
   * Get operation for particular column.
   *
   * @param {number} column The physical column index.
   * @returns {string|undefined}
   */
  getOperation(e) {
    var t;
    return (t = this.filteringStates.getValueAtIndex(e)) === null || t === void 0 ? void 0 : t.operation;
  }
  /**
   * Get all filtered physical columns in the order in which actions are performed.
   *
   * @returns {Array}
   */
  getFilteredColumns() {
    return this.filteringStates.getEntries().map((e) => {
      let [t] = e;
      return t;
    });
  }
  /**
   * Gets position in the filtering states stack for the specific column.
   *
   * @param {number} column The physical column index.
   * @returns {number} Returns -1 when the column doesn't exist in the stack.
   */
  getColumnStackPosition(e) {
    return this.getFilteredColumns().indexOf(e);
  }
  /**
   * Export all previously added conditions.
   *
   * @returns {Array}
   */
  exportAllConditions() {
    return cs(this.filteringStates.getEntries(), (e, t) => {
      let [n, {
        operation: o,
        conditions: r
      }] = t;
      return e.push({
        column: n,
        operation: o,
        conditions: Ye(r, (a) => {
          let {
            name: l,
            args: c
          } = a;
          return {
            name: l,
            args: c
          };
        })
      }), e;
    }, []);
  }
  /**
   * Import conditions to the collection.
   *
   * @param {Array} conditions The collection of the conditions.
   */
  importAllConditions(e) {
    this.clean(), D(e, (t) => {
      D(t.conditions, (n) => this.addCondition(t.column, n));
    });
  }
  /**
   * Remove conditions at given column index.
   *
   * @param {number} column The physical column index.
   * @fires ConditionCollection#beforeRemove
   * @fires ConditionCollection#afterRemove
   */
  removeConditions(e) {
    this.runLocalHooks("beforeRemove", e), this.filteringStates.clearValue(e), this.runLocalHooks("afterRemove", e);
  }
  /**
   * Clean all conditions collection and reset order stack.
   *
   * @fires ConditionCollection#beforeClean
   * @fires ConditionCollection#afterClean
   */
  clean() {
    this.runLocalHooks("beforeClean"), this.filteringStates.clear(), this.runLocalHooks("afterClean");
  }
  /**
   * Check if at least one condition was added at specified column index. And if second parameter is passed then additionally
   * check if condition exists under its name.
   *
   * @param {number} column The physical column index.
   * @param {string} [name] Condition name.
   * @returns {boolean}
   */
  hasConditions(e, t) {
    const n = this.getConditions(e);
    return t ? n.some((o) => o.name === t) : n.length > 0;
  }
  /**
   * Destroy object.
   */
  destroy() {
    this.isMapRegistrable && this.hot.columnIndexMapper.unregisterMap(ty), this.filteringStates = null, this.clearLocalHooks();
  }
}
ft(Y0, Rs);
const G0 = Y0;
class gG {
  constructor(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : () => [];
    this.conditionCollection = e, this.columnDataFactory = t;
  }
  /**
   * Filter data based on the conditions collection.
   *
   * @returns {Array}
   */
  filter() {
    let e = [];
    return D(this.conditionCollection.getFilteredColumns(), (t, n) => {
      let o = this.columnDataFactory(t);
      n && (o = this._getIntersectData(o, e)), e = this.filterByColumn(t, o);
    }), e;
  }
  /**
   * Filter data based on specified physical column index.
   *
   * @param {number} column The physical column index.
   * @param {Array} [dataSource] Data source as array of objects with `value` and `meta` keys (e.g. `{value: 'foo', meta: {}}`).
   * @returns {Array} Returns filtered data.
   */
  filterByColumn(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    const n = [];
    return D(t, (o) => {
      o !== void 0 && this.conditionCollection.isMatch(o, e) && n.push(o);
    }), n;
  }
  /**
   * Intersect data.
   *
   * @private
   * @param {Array} data The data to intersect.
   * @param {Array} needles The collection intersected rows with the data.
   * @returns {Array}
   */
  _getIntersectData(e, t) {
    const n = [];
    return D(t, (o) => {
      const r = o.meta.visualRow;
      e[r] !== void 0 && (n[r] = e[r]);
    }), n;
  }
}
const j0 = gG;
class K0 {
  constructor(e, t) {
    let n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : () => [];
    this.hot = e, this.conditionCollection = t, this.columnDataFactory = n, this.changes = [], this.grouping = !1, this.latestEditedColumnPosition = -1, this.latestOrderStack = [], this.conditionCollection.addLocalHook("beforeRemove", (o) => this._onConditionBeforeModify(o)), this.conditionCollection.addLocalHook("afterRemove", (o) => this.updateStatesAtColumn(o)), this.conditionCollection.addLocalHook("afterAdd", (o) => this.updateStatesAtColumn(o)), this.conditionCollection.addLocalHook("beforeClean", () => this._onConditionBeforeClean()), this.conditionCollection.addLocalHook("afterClean", () => this._onConditionAfterClean());
  }
  /**
   * Enable grouping changes. Grouping is helpful in situations when a lot of conditions is added in one moment. Instead of
   * trigger `update` hook for every condition by adding/removing you can group this changes and call `flush` method to trigger
   * it once.
   */
  groupChanges() {
    this.grouping = !0;
  }
  /**
   * Flush all collected changes. This trigger `update` hook for every previously collected change from condition collection.
   */
  flush() {
    this.grouping = !1, D(this.changes, (e) => {
      this.updateStatesAtColumn(e);
    }), this.changes.length = 0;
  }
  /**
   * On before modify condition (add or remove from collection),.
   *
   * @param {number} column Column index.
   * @private
   */
  _onConditionBeforeModify(e) {
    this.latestEditedColumnPosition = this.conditionCollection.getColumnStackPosition(e);
  }
  /**
   * Update all related states which should be changed after invoking changes applied to current column.
   *
   * @param {number} column The column index.
   * @param {object} conditionArgsChange Object describing condition changes which can be handled by filters on `update` hook.
   * It contains keys `conditionKey` and `conditionValue` which refers to change specified key of condition to specified value
   * based on referred keys.
   */
  updateStatesAtColumn(e, t) {
    var n = this;
    if (this.grouping) {
      this.changes.indexOf(e) === -1 && this.changes.push(e);
      return;
    }
    const o = this.conditionCollection.exportAllConditions();
    let r = this.conditionCollection.getColumnStackPosition(e);
    r === -1 && (r = this.latestEditedColumnPosition);
    const a = o.slice(0, r), l = o.slice(r);
    l.length && l[0].column === e && l.shift();
    const c = rL(function(u, f) {
      let g = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];
      const m = new G0(n.hot, !1), w = [].concat(u, g);
      m.importAllConditions(w);
      const C = n.columnDataFactory(f);
      let S;
      m.isEmpty() ? S = C : S = new j0(m, (T) => n.columnDataFactory(T)).filter(), S = Ye(S, (T) => T.meta.visualRow);
      const x = Ua(S);
      return m.destroy(), Ws(C, (T) => x(T.meta.visualRow));
    })(a), h = [].concat(this.conditionCollection.getConditions(e));
    this.runLocalHooks("update", {
      editedConditionStack: {
        column: e,
        conditions: h
      },
      dependentConditionStacks: l,
      filteredRowsFactory: c,
      conditionArgsChange: t
    });
  }
  /**
   * On before conditions clean listener.
   *
   * @private
   */
  _onConditionBeforeClean() {
    this.latestOrderStack = this.conditionCollection.getFilteredColumns();
  }
  /**
   * On after conditions clean listener.
   *
   * @private
   */
  _onConditionAfterClean() {
    D(this.latestOrderStack, (e) => {
      this.updateStatesAtColumn(e);
    });
  }
  /**
   * Destroy instance.
   */
  destroy() {
    this.clearLocalHooks(), je(this, (e, t) => {
      this[t] = null;
    });
  }
}
ft(K0, Rs);
const mG = K0, sy = "filters", pG = 250;
class wG extends at {
  static get PLUGIN_KEY() {
    return sy;
  }
  static get PLUGIN_PRIORITY() {
    return pG;
  }
  static get PLUGIN_DEPS() {
    return ["plugin:DropdownMenu", "plugin:HiddenRows", "cell-type:checkbox"];
  }
  constructor(e) {
    super(e), this.eventManager = new Dt(this), this.dropdownMenuPlugin = null, this.conditionCollection = null, this.conditionUpdateObserver = null, this.components = /* @__PURE__ */ new Map([["filter_by_condition", null], ["filter_operators", null], ["filter_by_condition2", null], ["filter_by_value", null], ["filter_action_bar", null]]), this.filtersRowsMap = null, this.hot.addHook("afterGetColHeader", (t, n) => this.onAfterGetColHeader(t, n));
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link Filters#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return !!this.hot.getSettings()[sy];
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    if (this.enabled)
      return;
    this.filtersRowsMap = this.hot.rowIndexMapper.registerMap(this.pluginName, new Na()), this.dropdownMenuPlugin = this.hot.getPlugin("dropdownMenu");
    const e = this.hot.getSettings().dropdownMenu, t = e && e.uiContainer || this.hot.rootDocument.body, n = (a) => (a.addLocalHook("accept", () => this.onActionBarSubmit("accept")), a.addLocalHook("cancel", () => this.onActionBarSubmit("cancel")), a.addLocalHook("change", (l) => this.onComponentChange(a, l)), a), o = () => `${this.hot.getTranslatedPhrase(ip)}:`, r = () => `${this.hot.getTranslatedPhrase(op)}:`;
    if (!this.components.get("filter_by_condition")) {
      const a = new ed(this.hot, {
        id: "filter_by_condition",
        name: o,
        addSeparator: !1,
        menuContainer: t
      });
      a.addLocalHook("afterClose", () => this.onSelectUIClosed()), this.components.set("filter_by_condition", n(a));
    }
    if (this.components.get("filter_operators") || this.components.set("filter_operators", new rG(this.hot, {
      id: "filter_operators",
      name: "Operators"
    })), !this.components.get("filter_by_condition2")) {
      const a = new ed(this.hot, {
        id: "filter_by_condition2",
        name: "",
        addSeparator: !0,
        menuContainer: t
      });
      a.addLocalHook("afterClose", () => this.onSelectUIClosed()), this.components.set("filter_by_condition2", n(a));
    }
    this.components.get("filter_by_value") || this.components.set("filter_by_value", n(new dG(this.hot, {
      id: "filter_by_value",
      name: r
    }))), this.components.get("filter_action_bar") || this.components.set("filter_action_bar", n(new fG(this.hot, {
      id: "filter_action_bar",
      name: "Action bar"
    }))), this.conditionCollection || (this.conditionCollection = new G0(this.hot)), this.conditionUpdateObserver || (this.conditionUpdateObserver = new mG(this.hot, this.conditionCollection, (a) => this.getDataMapAtColumn(a)), this.conditionUpdateObserver.addLocalHook("update", (a) => this.updateComponents(a))), this.components.forEach((a) => a.show()), this.addHook("beforeDropdownMenuSetItems", (a) => this.onBeforeDropdownMenuSetItems(a)), this.addHook("afterDropdownMenuDefaultOptions", (a) => this.onAfterDropdownMenuDefaultOptions(a)), this.addHook("afterDropdownMenuShow", () => this.onAfterDropdownMenuShow()), this.addHook("afterDropdownMenuHide", () => this.onAfterDropdownMenuHide()), this.addHook("afterChange", (a) => this.onAfterChange(a)), this.hot.getSettings().dropdownMenu && this.dropdownMenuPlugin && (this.dropdownMenuPlugin.disablePlugin(), this.dropdownMenuPlugin.enablePlugin()), super.enablePlugin();
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    if (this.enabled) {
      var e;
      (e = this.dropdownMenuPlugin) !== null && e !== void 0 && e.enabled && this.dropdownMenuPlugin.menu.clearLocalHooks(), this.components.forEach((t, n) => {
        t.destroy(), this.components.set(n, null);
      }), this.conditionCollection.destroy(), this.conditionCollection = null, this.hot.rowIndexMapper.unregisterMap(this.pluginName);
    }
    super.disablePlugin();
  }
  /* eslint-disable jsdoc/require-description-complete-sentence */
  /**
   * @memberof Filters#
   * @function addCondition
   * @description
   * Adds condition to the conditions collection at specified column index.
   *
   * Possible predefined conditions:
   *  * `begins_with` - Begins with
   *  * `between` - Between
   *  * `by_value` - By value
   *  * `contains` - Contains
   *  * `date_after` - After a date
   *  * `date_before` - Before a date
   *  * `date_today` - Today
   *  * `date_tomorrow` - Tomorrow
   *  * `date_yesterday` - Yesterday
   *  * `empty` - Empty
   *  * `ends_with` - Ends with
   *  * `eq` - Equal
   *  * `gt` - Greater than
   *  * `gte` - Greater than or equal
   *  * `lt` - Less than
   *  * `lte` - Less than or equal
   *  * `none` - None (no filter)
   *  * `not_between` - Not between
   *  * `not_contains` - Not contains
   *  * `not_empty` - Not empty
   *  * `neq` - Not equal.
   *
   * Possible operations on collection of conditions:
   *  * `conjunction` - [**Conjunction**](https://en.wikipedia.org/wiki/Logical_conjunction) on conditions collection (by default), i.e. for such operation: <br/> c1 AND c2 AND c3 AND c4 ... AND cn === TRUE, where c1 ... cn are conditions.
   *  * `disjunction` - [**Disjunction**](https://en.wikipedia.org/wiki/Logical_disjunction) on conditions collection, i.e. for such operation: <br/> c1 OR c2 OR c3 OR c4 ... OR cn === TRUE, where c1, c2, c3, c4 ... cn are conditions.
   *  * `disjunctionWithExtraCondition` - **Disjunction** on first `n - 1`\* conditions from collection with an extra requirement computed from the last condition, i.e. for such operation: <br/> c1 OR c2 OR c3 OR c4 ... OR cn-1 AND cn === TRUE, where c1, c2, c3, c4 ... cn are conditions.
   *
   * \* when `n` is collection size; it's used i.e. for one operation introduced from UI (when choosing from filter's drop-down menu two conditions with OR operator between them, mixed with choosing values from the multiple choice select)
   *
   * **Note**: Mind that you cannot mix different types of operations (for instance, if you use `conjunction`, use it consequently for a particular column).
   *
   * @example
   * ::: only-for javascript
   * ```js
   * const container = document.getElementById('example');
   * const hot = new Handsontable(container, {
   *   data: getData(),
   *   filters: true
   * });
   *
   * // access to filters plugin instance
   * const filtersPlugin = hot.getPlugin('filters');
   *
   * // add filter "Greater than" 95 to column at index 1
   * filtersPlugin.addCondition(1, 'gt', [95]);
   * filtersPlugin.filter();
   *
   * // add filter "By value" to column at index 1
   * // in this case all value's that don't match will be filtered.
   * filtersPlugin.addCondition(1, 'by_value', [['ing', 'ed', 'as', 'on']]);
   * filtersPlugin.filter();
   *
   * // add filter "Begins with" with value "de" AND "Not contains" with value "ing"
   * filtersPlugin.addCondition(1, 'begins_with', ['de'], 'conjunction');
   * filtersPlugin.addCondition(1, 'not_contains', ['ing'], 'conjunction');
   * filtersPlugin.filter();
   *
   * // add filter "Begins with" with value "de" OR "Not contains" with value "ing"
   * filtersPlugin.addCondition(1, 'begins_with', ['de'], 'disjunction');
   * filtersPlugin.addCondition(1, 'not_contains', ['ing'], 'disjunction');
   * filtersPlugin.filter();
   * ```
   * :::
   *
   * ::: only-for react
   * ```jsx
   * const hotRef = useRef(null);
   *
   * ...
   *
   * <HotTable
   *   ref={hotRef}
   *   data={getData()}
   *   filters={true}
   * />
   *
   * // access to filters plugin instance
   * const hot = hotRef.current.hotInstance;
   * const filtersPlugin = hot.getPlugin('filters');
   *
   * // add filter "Greater than" 95 to column at index 1
   * filtersPlugin.addCondition(1, 'gt', [95]);
   * filtersPlugin.filter();
   *
   * // add filter "By value" to column at index 1
   * // in this case all value's that don't match will be filtered.
   * filtersPlugin.addCondition(1, 'by_value', [['ing', 'ed', 'as', 'on']]);
   * filtersPlugin.filter();
   *
   * // add filter "Begins with" with value "de" AND "Not contains" with value "ing"
   * filtersPlugin.addCondition(1, 'begins_with', ['de'], 'conjunction');
   * filtersPlugin.addCondition(1, 'not_contains', ['ing'], 'conjunction');
   * filtersPlugin.filter();
   *
   * // add filter "Begins with" with value "de" OR "Not contains" with value "ing"
   * filtersPlugin.addCondition(1, 'begins_with', ['de'], 'disjunction');
   * filtersPlugin.addCondition(1, 'not_contains', ['ing'], 'disjunction');
   * filtersPlugin.filter();
   * ```
   * :::
   *
   * @param {number} column Visual column index.
   * @param {string} name Condition short name.
   * @param {Array} args Condition arguments.
   * @param {string} [operationId=conjunction] `id` of operation which is performed on the column.
   */
  /* eslint-enable jsdoc/require-description-complete-sentence */
  addCondition(e, t, n) {
    let o = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : wi;
    const r = this.hot.toPhysicalColumn(e);
    this.conditionCollection.addCondition(r, {
      command: {
        key: t
      },
      args: n
    }, o);
  }
  /**
   * Removes conditions at specified column index.
   *
   * @param {number} column Visual column index.
   */
  removeConditions(e) {
    const t = this.hot.toPhysicalColumn(e);
    this.conditionCollection.removeConditions(t);
  }
  /**
   * Clears all conditions previously added to the collection for the specified column index or, if the column index
   * was not passed, clear the conditions for all columns.
   *
   * @param {number} [column] Visual column index.
   */
  clearConditions(e) {
    if (e === void 0)
      this.conditionCollection.clean();
    else {
      const t = this.hot.toPhysicalColumn(e);
      this.conditionCollection.removeConditions(t);
    }
  }
  /**
   * Filters data based on added filter conditions.
   *
   * @fires Hooks#beforeFilter
   * @fires Hooks#afterFilter
   */
  filter() {
    const e = this._createDataFilter(), t = !this.conditionCollection.isEmpty();
    let n = [];
    const o = this.conditionCollection.exportAllConditions();
    if (this.hot.runHooks("beforeFilter", o) !== !1)
      if (t) {
        const a = [];
        this.hot.batchExecution(() => {
          this.filtersRowsMap.clear(), n = Ye(e.filter(), (c) => c.meta.visualRow);
          const l = Ua(n);
          Se(this.hot.countSourceRows() - 1, (c) => {
            l(c) || a.push(c);
          }), D(a, (c) => {
            this.filtersRowsMap.setValueAtIndex(c, !0);
          });
        }, !0), n.length || this.hot.deselectCell();
      } else
        this.filtersRowsMap.clear();
    this.hot.runHooks("afterFilter", o), this.hot.view.adjustElementsSize(!0), this.hot.render(), this.clearColumnSelection();
  }
  /**
   * Gets last selected column index.
   *
   * @returns {{visualIndex: number, physicalIndex: number} | null} Returns `null` when a column is
   * not selected. Otherwise, returns an object with `visualIndex` and `physicalIndex` properties containing
   * the index of the column.
   */
  getSelectedColumn() {
    var e;
    const t = (e = this.hot.getSelectedRangeLast()) === null || e === void 0 ? void 0 : e.highlight;
    return t ? {
      visualIndex: t.col,
      physicalIndex: this.hot.toPhysicalColumn(t.col)
    } : null;
  }
  /**
   * Clears column selection.
   *
   * @private
   */
  clearColumnSelection() {
    const e = this.getSelectedColumn();
    e !== null && this.hot.selectCell(0, e.visualIndex);
  }
  /**
   * Returns handsontable source data with cell meta based on current selection.
   *
   * @param {number} [column] The physical column index. By default column index accept the value of the selected column.
   * @returns {Array} Returns array of objects where keys as row index.
   */
  getDataMapAtColumn(e) {
    const t = this.hot.toVisualColumn(e), n = [];
    return D(this.hot.getSourceDataAtCol(t), (o, r) => {
      var a;
      const {
        row: l,
        col: c,
        visualCol: h,
        visualRow: u,
        type: f,
        instance: g,
        dateFormat: m,
        locale: w
      } = this.hot.getCellMeta(r, t), C = (a = this.hot.getDataAtCell(this.hot.toVisualRow(r), t)) !== null && a !== void 0 ? a : o;
      n.push({
        meta: {
          row: l,
          col: c,
          visualCol: h,
          visualRow: u,
          type: f,
          instance: g,
          dateFormat: m,
          locale: w
        },
        value: B0(C)
      });
    }), n;
  }
  /**
   * `afterChange` listener.
   *
   * @private
   * @param {Array} changes Array of changes.
   */
  onAfterChange(e) {
    e && D(e, (t) => {
      const [, n] = t, o = this.hot.propToCol(n);
      this.conditionCollection.hasConditions(o) && this.updateValueComponentCondition(o);
    });
  }
  /**
   * Update the condition of ValueComponent, based on the handled changes.
   *
   * @private
   * @param {number} columnIndex Column index of handled ValueComponent condition.
   */
  updateValueComponentCondition(e) {
    const t = this.hot.getDataAtCol(e), n = xf(t);
    this.conditionUpdateObserver.updateStatesAtColumn(e, n);
  }
  /**
   * Restores components to its saved state.
   *
   * @private
   * @param {Array} components List of components.
   */
  restoreComponents(e) {
    var t;
    const n = (t = this.getSelectedColumn()) === null || t === void 0 ? void 0 : t.physicalIndex;
    e.forEach((o) => {
      o.isHidden() || o.restoreState(n);
    }), this.updateDependentComponentsVisibility();
  }
  /**
   * After dropdown menu show listener.
   *
   * @private
   */
  onAfterDropdownMenuShow() {
    this.restoreComponents(Array.from(this.components.values()));
  }
  /**
   * After dropdown menu hide listener.
   *
   * @private
   */
  onAfterDropdownMenuHide() {
    this.components.get("filter_by_condition").getSelectElement().closeOptions(), this.components.get("filter_by_condition2").getSelectElement().closeOptions();
  }
  /**
   * Before dropdown menu set menu items listener.
   *
   * @private
   */
  onBeforeDropdownMenuSetItems() {
    this.dropdownMenuPlugin && this.dropdownMenuPlugin.menu.addLocalHook("afterOpen", () => {
      this.dropdownMenuPlugin.menu.hotMenu.updateSettings({
        hiddenRows: !0
      });
    });
  }
  /**
   * After dropdown menu default options listener.
   *
   * @private
   * @param {object} defaultOptions ContextMenu default item options.
   */
  onAfterDropdownMenuDefaultOptions(e) {
    e.items.push({
      name: ze
    }), this.components.forEach((t) => {
      e.items.push(t.getMenuItemDescriptor());
    });
  }
  /**
   * Get an operation, based on the number and types of arguments (where arguments are states of components).
   *
   * @param {string} suggestedOperation Operation which was chosen by user from UI.
   * @param {object} byConditionState1 State of first condition component.
   * @param {object} byConditionState2 State of second condition component.
   * @param {object} byValueState State of value component.
   * @private
   * @returns {string}
   */
  getOperationBasedOnArguments(e, t, n, o) {
    let r = e;
    return r === Pc && t.command.key !== Xt && n.command.key !== Xt && o.command.key !== Xt ? r = Vp : o.command.key !== Xt && (t.command.key === Xt || n.command.key === Xt) && (r = wi), r;
  }
  /**
   * On action bar submit listener.
   *
   * @private
   * @param {string} submitType The submit type.
   */
  onActionBarSubmit(e) {
    var t;
    if (e === "accept") {
      const o = this.getSelectedColumn();
      if (o === null) {
        var n;
        (n = this.dropdownMenuPlugin) === null || n === void 0 || n.close();
        return;
      }
      const {
        physicalIndex: r
      } = o, a = this.components.get("filter_by_condition").getState(), l = this.components.get("filter_by_condition2").getState(), c = this.components.get("filter_by_value").getState(), h = this.getOperationBasedOnArguments(this.components.get("filter_operators").getActiveOperationId(), a, l, c);
      this.conditionUpdateObserver.groupChanges();
      let u = this.conditionCollection.getColumnStackPosition(r);
      u === -1 && (u = void 0), this.conditionCollection.removeConditions(r), a.command.key !== Xt && (this.conditionCollection.addCondition(r, a, h, u), l.command.key !== Xt && this.conditionCollection.addCondition(r, l, h, u)), c.command.key !== Xt && this.conditionCollection.addCondition(r, c, h, u), this.conditionUpdateObserver.flush(), this.components.forEach((f) => f.saveState(r)), this.filtersRowsMap.clear(), this.filter();
    }
    (t = this.dropdownMenuPlugin) === null || t === void 0 || t.close();
  }
  /**
   * On component change listener.
   *
   * @private
   * @param {BaseComponent} component Component inheriting BaseComponent.
   * @param {object} command Menu item object (command).
   */
  onComponentChange(e, t) {
    this.updateDependentComponentsVisibility(), e.constructor === ed && !t.inputsCount && this.setListeningDropdownMenu();
  }
  /**
   * On component SelectUI closed listener.
   *
   * @private
   */
  onSelectUIClosed() {
    this.setListeningDropdownMenu();
  }
  /**
   * Listen to the keyboard input on document body and forward events to instance of Handsontable
   * created by DropdownMenu plugin.
   *
   * @private
   */
  setListeningDropdownMenu() {
    this.dropdownMenuPlugin && this.dropdownMenuPlugin.setListening();
  }
  /**
   * Updates visibility of some of the components, based on the state of the parent component.
   *
   * @private
   */
  updateDependentComponentsVisibility() {
    const e = this.components.get("filter_by_condition"), {
      command: t
    } = e.getState(), n = [this.components.get("filter_by_condition2"), this.components.get("filter_operators")];
    t.showOperators ? this.showComponents(...n) : this.hideComponents(...n);
  }
  /**
   * On after get column header listener.
   *
   * @private
   * @param {number} col Visual column index.
   * @param {HTMLTableCellElement} TH Header's TH element.
   */
  onAfterGetColHeader(e, t) {
    const n = this.hot.toPhysicalColumn(e);
    this.enabled && this.conditionCollection.hasConditions(n) ? ie(t, "htFiltersActive") : $e(t, "htFiltersActive");
  }
  /**
   * Creates DataFilter instance based on condition collection.
   *
   * @private
   * @param {ConditionCollection} conditionCollection Condition collection object.
   * @returns {DataFilter}
   */
  _createDataFilter() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.conditionCollection;
    return new j0(e, (t) => this.getDataMapAtColumn(t));
  }
  /**
   * It updates the components state. The state is triggered by ConditionUpdateObserver, which
   * reacts to any condition added to the condition collection. It may be added through the UI
   * components or by API call.
   *
   * @private
   * @param {object} conditionsState An object with the state generated by UI components.
   */
  updateComponents(e) {
    var t;
    if (!((t = this.dropdownMenuPlugin) !== null && t !== void 0 && t.enabled))
      return;
    const {
      editedConditionStack: {
        conditions: n,
        column: o
      }
    } = e, r = n.filter((l) => l.name === Yi), a = n.filter((l) => l.name !== Yi);
    if (r.length >= 2 || a.length >= 3)
      pt(ut`The filter conditions have been applied properly, but couldn’t be displayed visually.\x20
        The overall amount of conditions exceed the capability of the dropdown menu.\x20
        For more details see the documentation.`);
    else {
      const l = this.conditionCollection.getOperation(o);
      this.components.get("filter_by_condition").updateState(a[0], o), this.components.get("filter_by_condition2").updateState(a[1], o), this.components.get("filter_operators").updateState(l, o), this.components.get("filter_by_value").updateState(e);
    }
  }
  /**
   * Returns indexes of passed components inside list of `dropdownMenu` items.
   *
   * @private
   * @param {...BaseComponent} components List of components.
   * @returns {Array}
   */
  getIndexesOfComponents() {
    const e = [];
    if (!this.dropdownMenuPlugin)
      return e;
    const t = this.dropdownMenuPlugin.menu;
    for (var n = arguments.length, o = new Array(n), r = 0; r < n; r++)
      o[r] = arguments[r];
    return D(o, (a) => {
      D(t.menuItems, (l, c) => {
        l.key === a.getMenuItemDescriptor().key && e.push(c);
      });
    }), e;
  }
  /**
   * Changes visibility of component.
   *
   * @private
   * @param {boolean} visible Determine if components should be visible.
   * @param {...BaseComponent} components List of components.
   */
  changeComponentsVisibility() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !0;
    if (!this.dropdownMenuPlugin)
      return;
    const n = this.dropdownMenuPlugin.menu.hotMenu, o = n.getPlugin("hiddenRows");
    for (var r = arguments.length, a = new Array(r > 1 ? r - 1 : 0), l = 1; l < r; l++)
      a[l - 1] = arguments[l];
    const c = this.getIndexesOfComponents(...a);
    e ? o.showRows(c) : o.hideRows(c), n.render();
  }
  /**
   * Hides components of filters `dropdownMenu`.
   *
   * @private
   * @param {...BaseComponent} components List of components.
   */
  hideComponents() {
    for (var e = arguments.length, t = new Array(e), n = 0; n < e; n++)
      t[n] = arguments[n];
    this.changeComponentsVisibility(!1, ...t);
  }
  /**
   * Shows components of filters `dropdownMenu`.
   *
   * @private
   * @param {...BaseComponent} components List of components.
   */
  showComponents() {
    for (var e = arguments.length, t = new Array(e), n = 0; n < e; n++)
      t[n] = arguments[n];
    this.changeComponentsVisibility(!0, ...t);
  }
  /**
   * Destroys the plugin instance.
   */
  destroy() {
    this.enabled && (this.components.forEach((e, t) => {
      e !== null && (e.destroy(), this.components.set(t, null));
    }), this.conditionCollection.destroy(), this.conditionUpdateObserver.destroy(), this.hot.rowIndexMapper.unregisterMap(this.pluginName)), super.destroy();
  }
}
const X0 = "internal-use-in-handsontable", Tf = {
  licenseKey: X0,
  useArrayArithmetic: !0,
  useColumnIndex: !1,
  useStats: !1,
  evaluateNullToZero: !0,
  precisionEpsilon: 1e-13,
  precisionRounding: 14,
  smartRounding: !0,
  leapYear1900: !1,
  nullDate: {
    year: 1899,
    month: 12,
    day: 30
  },
  nullYear: 30,
  dateFormats: ["DD/MM/YYYY", "DD/MM/YY"],
  timeFormats: ["hh:mm", "hh:mm:ss.sss"],
  matchWholeCell: !0,
  useRegularExpressions: !1,
  useWildcards: !0,
  functionArgSeparator: ",",
  thousandSeparator: "",
  decimalSeparator: ".",
  language: "enGB"
};
function q0(s) {
  var e;
  return {
    maxColumns: s.maxColumns,
    maxRows: s.maxRows,
    language: (e = s[ts]) === null || e === void 0 || (e = e.language) === null || e === void 0 ? void 0 : e.langCode
  };
}
function Z0(s) {
  return Object.keys(s).reduce((e, t) => (t !== "hyperformula" && (e[t] = s[t]), e), {});
}
function CG(s) {
  var e;
  const t = s[ts], n = Z0(t != null && (e = t.engine) !== null && e !== void 0 && e.hyperformula ? t.engine : {}), o = q0(s);
  return {
    ...Tf,
    ...n,
    ...o
  };
}
function vG(s) {
  var e;
  const t = s[ts], n = Z0(t != null && (e = t.engine) !== null && e !== void 0 && e.hyperformula ? t.engine : {}), o = q0(s);
  return {
    ...n,
    ...o
  };
}
function yG(s, e) {
  return Object.keys(e).some((t) => e[t] !== void 0 && e[t] !== s[t]);
}
function Dh() {
  const s = "engine_relationship", e = Gs(ts);
  return e.hasItem(s) || e.register(s, /* @__PURE__ */ new Map()), e.getItem(s);
}
function Gp() {
  const s = "shared_engine_usage", e = Gs(ts);
  return e.hasItem(s) || e.register(s, /* @__PURE__ */ new Map()), e.getItem(s);
}
function SG(s) {
  const e = s.getSettings(), t = e[ts], n = t == null ? void 0 : t.engine;
  if (t === !0 || wt(n))
    return null;
  if (typeof n.hyperformula == "function" || typeof n == "function") {
    var o;
    return bG((o = n.hyperformula) !== null && o !== void 0 ? o : n, e, s);
  } else if (typeof n == "object" && wt(n.hyperformula)) {
    const r = Dh(), a = Gp().get(n);
    return r.has(n) || r.set(n, []), r.get(n).push(s), a && a.push(s.guid), n.getConfig().licenseKey || n.updateConfig({
      licenseKey: X0
    }), (n.getConfig().leapYear1900 !== Tf.leapYear1900 || vg(n.getConfig().nullDate, Tf.nullDate) === !1) && pt(ut`If you use HyperFormula with Handsontable, keep the default \`leapYear1900\` and \`nullDate\` 
      settings. Otherwise, HyperFormula's dates may not sync correctly with Handsontable's dates.`), n;
  }
  return null;
}
function bG(s, e, t) {
  const n = e[ts], o = CG(e), r = Dh(), a = Gp();
  RG(s, n.functions), EG(s, n.language);
  const l = s.buildEmpty(o);
  return r.set(l, [t]), a.set(l, [t.guid]), xG(l, n.namedExpressions), l.on("sheetAdded", () => {
    l.rebuildAndRecalculate();
  }), l.on("sheetRemoved", () => {
    l.rebuildAndRecalculate();
  }), l;
}
function ny(s) {
  var e;
  const t = Dh(), n = t.size === 0 ? [] : Array.from((e = t.get(s)) !== null && e !== void 0 ? e : []);
  return new Map(n.map((o) => [o.getPlugin("formulas").sheetId, o]));
}
function iy(s, e) {
  if (s) {
    const t = Dh(), n = t.get(s), o = Gp(), r = o.get(s);
    n && n.includes(e) && (n.splice(n.indexOf(e), 1), n.length === 0 && t.delete(s)), r && r.includes(e.guid) && (r.splice(r.indexOf(e.guid), 1), r.length === 0 && (o.delete(s), s.destroy()));
  }
}
function RG(s, e) {
  e && e.forEach((t) => {
    const {
      name: n,
      plugin: o,
      translations: r
    } = t;
    try {
      s.registerFunction(n, o, r);
    } catch (a) {
      pt(a.message);
    }
  });
}
function EG(s, e) {
  if (e) {
    const {
      langCode: t
    } = e;
    try {
      s.registerLanguage(t, e);
    } catch (n) {
      pt(n.message);
    }
  }
}
function xG(s, e) {
  e && (s.suspendEvaluation(), e.forEach((t) => {
    const {
      name: n,
      expression: o,
      scope: r,
      options: a
    } = t;
    try {
      s.addNamedExpression(n, o, r, a);
    } catch (l) {
      pt(l.message);
    }
  }), s.resumeEvaluation());
}
function TG(s, e) {
  return (wt(e) || !s.doesSheetExist(e)) && (e = s.addSheet(e)), e;
}
const Q0 = "DD/MM/YYYY";
function J0(s) {
  return typeof s == "string" && s.charAt(0) === "'" && s.charAt(1) === "=";
}
function MG(s) {
  return J0(s) ? s.substr(1) : s;
}
function _G(s) {
  return typeof s == "string" && s.startsWith("=");
}
function sd(s, e) {
  return typeof s == "string" && e === "date";
}
function oy(s, e) {
  return se(s, e, !0).isValid();
}
function ry(s, e) {
  return se(s, e, !0).format(Q0);
}
function IG(s, e) {
  return se(s, Q0, !0).format(e);
}
function ay(s, e) {
  const n = new Date(Date.UTC(0, 0, s + -1));
  return se(n).format(e);
}
function ki(s, e, t) {
  OG(s, e), e.set(s, t);
}
function OG(s, e) {
  if (e.has(s))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function vt(s, e) {
  var t = eE(s, e, "get");
  return AG(s, t);
}
function AG(s, e) {
  return e.get ? e.get.call(s) : e.value;
}
function ni(s, e, t) {
  var n = eE(s, e, "set");
  return PG(s, n, t), t;
}
function eE(s, e, t) {
  if (!e.has(s))
    throw new TypeError("attempted to " + t + " private field on non-instance");
  return e.get(s);
}
function PG(s, e, t) {
  if (e.set)
    e.set.call(s, t);
  else {
    if (!e.writable)
      throw new TypeError("attempted to set read only private field");
    e.value = t;
  }
}
var Dr = /* @__PURE__ */ new WeakMap(), ii = /* @__PURE__ */ new WeakMap(), xs = /* @__PURE__ */ new WeakMap(), Pl = /* @__PURE__ */ new WeakMap(), nd = /* @__PURE__ */ new WeakMap(), id = /* @__PURE__ */ new WeakMap(), Dl = /* @__PURE__ */ new WeakMap();
class DG {
  constructor(e, t, n) {
    ki(this, Dr, {
      writable: !0,
      value: void 0
    }), ki(this, ii, {
      writable: !0,
      value: void 0
    }), ki(this, xs, {
      writable: !0,
      value: void 0
    }), ki(this, Pl, {
      writable: !0,
      value: []
    }), ki(this, nd, {
      writable: !0,
      value: []
    }), ki(this, id, {
      writable: !0,
      value: void 0
    }), ki(this, Dl, {
      writable: !0,
      value: []
    }), ni(this, Dr, e), ni(this, ii, t), ni(this, xs, n);
  }
  /**
   * Sets removed HF indexes (it should be done right before performing move on HOT).
   *
   * @param {Array<number>} removedIndexes List of removed physical indexes.
   * @returns {Array<number>} List of removed visual indexes.
   */
  setRemovedHfIndexes(e) {
    return ni(this, Dl, e.map((t) => {
      const n = vt(this, ii).getVisualFromPhysicalIndex(t);
      return this.getHfIndexFromVisualIndex(n);
    })), vt(this, Dl);
  }
  /**
   * Gets removed HF indexes (right before performing removal on HOT).
   *
   * @returns {Array<number>} List of removed HF indexes.
   */
  getRemovedHfIndexes() {
    return vt(this, Dl);
  }
  /**
   * Gets corresponding HyperFormula index for particular visual index. It's respecting the idea that HF's engine
   * is fed also with trimmed indexes (business requirements for formula result calculation also for trimmed elements).
   *
   * @param {number} visualIndex Visual index.
   * @returns {number}
   */
  getHfIndexFromVisualIndex(e) {
    const t = vt(this, ii).getIndexesSequence(), n = vt(this, ii).getNotTrimmedIndexes();
    return t.indexOf(n[e]);
  }
  /**
   * Synchronizes moves done on HOT to HF engine (based on previously calculated positions).
   *
   * @private
   * @param {Array<{from: number, to: number}>} moves Calculated HF's move positions.
   */
  syncMoves(e) {
    const n = `move${Js(vt(this, Dr))}s`;
    vt(this, xs).getEngine().batch(() => {
      e.forEach((o) => {
        const r = o.from !== o.to, a = o.from + 1 !== o.to;
        r && a && vt(this, xs).getEngine()[n](vt(this, xs).getSheetId(), o.from, 1, o.to);
      });
    });
  }
  /**
   * Stores information about performed HOT moves for purpose of calculating where to move HF elements.
   *
   * @param {Array<number>} movedVisualIndexes Sequence of moved visual indexes for certain axis.
   * @param {number} visualFinalIndex Final visual place where to move HOT indexes.
   * @param {boolean} movePossible Indicates if it's possible to move HOT indexes to the desired position.
   */
  storeMovesInformation(e, t, n) {
    n !== !1 && (ni(this, nd, e.map((o) => this.getHfIndexFromVisualIndex(o))), ni(this, id, this.getHfIndexFromVisualIndex(t)));
  }
  /**
   * Gets first position where to move element (respecting the fact that some element will be sooner or later
   * taken out of the dataset in order to move them).
   *
   * @param {Array<number>} movedHfIndexes Sequence of moved HF indexes for certain axis.
   * @param {number} finalHfIndex Final HF place where to move rows.
   * @returns {number} HF's index informing where to move the first element.
   * @private
   */
  getMoveLine(e, t) {
    const n = vt(this, ii).getNumberOfIndexes(), o = Array.from(Array(n).keys()).filter((a) => e.includes(a) === !1);
    if (t === 0) {
      var r;
      return (r = o[t]) !== null && r !== void 0 ? r : 0;
    }
    return o[t - 1] + 1;
  }
  /**
   * Gets initially calculated HF's move positions.
   *
   * @private
   * @param {Array<number>} movedHfIndexes Sequence of moved HF indexes for certain axis.
   * @param {number} finalHfIndex Final HF place where to move rows.
   * @returns {Array<{from: number, to: number}>} Initially calculated HF's move positions.
   */
  getInitiallyCalculatedMoves(e, t) {
    let n = this.getMoveLine(e, t);
    const o = [];
    return e.forEach((r) => {
      const a = {
        from: r,
        to: n
      };
      o.forEach((l) => {
        const c = l.from > l.to, h = l.to <= a.from;
        l.from > a.from && h && c && (a.from += 1);
      }), a.from >= n && (n += 1), o.push(a);
    }), o;
  }
  /**
   * Gets finally calculated HF's move positions (after adjusting).
   *
   * @private
   * @param {Array<{from: number, to: number}>} moves Initially calculated HF's move positions.
   * @returns {Array<{from: number, to: number}>} Finally calculated HF's move positions (after adjusting).
   */
  adjustedCalculatedMoves(e) {
    return e.forEach((t, n) => {
      e.slice(n + 1).forEach((r) => {
        const a = r.from < r.to;
        r.from > t.from && a && (r.from -= 1);
      });
    }), e;
  }
  /**
   * Calculating where to move HF elements and performing already calculated moves.
   *
   * @param {boolean} movePossible Indicates if it was possible to move HOT indexes to the desired position.
   * @param {boolean} orderChanged Indicates if order of HOT indexes was changed by move.
   */
  calculateAndSyncMoves(e, t) {
    if (vt(this, xs).isPerformingUndoRedo() || e === !1 || t === !1)
      return;
    const n = this.adjustedCalculatedMoves(this.getInitiallyCalculatedMoves(vt(this, nd), vt(this, id)));
    vt(this, xs).getSheetId() === null ? vt(this, xs).getPostponeAction(() => this.syncMoves(n)) : this.syncMoves(n);
  }
  /**
   * Gets callback for hook triggered after performing change of indexes order.
   *
   * @returns {Function}
   */
  getIndexesChangeSyncMethod() {
    const e = `set${Js(vt(this, Dr))}Order`;
    return (t) => {
      if (vt(this, xs).isPerformingUndoRedo())
        return;
      const n = vt(this, ii).getIndexesSequence();
      if (t === "update") {
        const o = vt(this, Pl).map((c) => n.indexOf(c)), r = vt(this, xs).getEngine().getSheetDimensions(vt(this, xs).getSheetId());
        let a;
        vt(this, Dr) === "row" ? a = r.height : a = r.width;
        const l = o.length;
        for (let c = l; c < a; c += 1)
          o.push(c);
        vt(this, xs).getEngine()[e](vt(this, xs).getSheetId(), o);
      }
      ni(this, Pl, n);
    };
  }
  /**
   * Initialize the AxisSyncer.
   */
  init() {
    ni(this, Pl, vt(this, ii).getIndexesSequence());
  }
}
const ly = DG;
function Ni(s, e, t) {
  HG(s, e), e.set(s, t);
}
function HG(s, e) {
  if (e.has(s))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function Dn(s, e) {
  var t = tE(s, e, "get");
  return kG(s, t);
}
function kG(s, e) {
  return e.get ? e.get.call(s) : e.value;
}
function Li(s, e, t) {
  var n = tE(s, e, "set");
  return NG(s, n, t), t;
}
function tE(s, e, t) {
  if (!e.has(s))
    throw new TypeError("attempted to " + t + " private field on non-instance");
  return e.get(s);
}
function NG(s, e, t) {
  if (e.set)
    e.set.call(s, t);
  else {
    if (!e.writable)
      throw new TypeError("attempted to set read only private field");
    e.value = t;
  }
}
var Hl = /* @__PURE__ */ new WeakMap(), kl = /* @__PURE__ */ new WeakMap(), od = /* @__PURE__ */ new WeakMap(), rd = /* @__PURE__ */ new WeakMap(), ad = /* @__PURE__ */ new WeakMap(), ld = /* @__PURE__ */ new WeakMap(), cd = /* @__PURE__ */ new WeakMap();
class LG {
  constructor(e, t, n) {
    Ni(this, Hl, {
      writable: !0,
      value: void 0
    }), Ni(this, kl, {
      writable: !0,
      value: void 0
    }), Ni(this, od, {
      writable: !0,
      value: void 0
    }), Ni(this, rd, {
      writable: !0,
      value: !1
    }), Ni(this, ad, {
      writable: !0,
      value: !1
    }), Ni(this, ld, {
      writable: !0,
      value: null
    }), Ni(this, cd, {
      writable: !0,
      value: null
    }), Li(this, Hl, new ly("row", e, this)), Li(this, kl, new ly("column", t, this)), Li(this, od, n);
  }
  /**
   * Gets index synchronizer for a particular axis.
   *
   * @param {'row'|'column'} indexType Type of indexes.
   * @returns {AxisSyncer}
   */
  getForAxis(e) {
    return e === "row" ? Dn(this, Hl) : Dn(this, kl);
  }
  /**
   * Sets flag informing whether an undo action is already performed (we don't execute synchronization in such case).
   *
   * @param {boolean} flagValue Boolean value for the flag.
   */
  setPerformUndo(e) {
    Li(this, rd, e);
  }
  /**
   * Sets flag informing whether a redo action is already performed (we don't execute synchronization in such case).
   *
   * @param {boolean} flagValue Boolean value for the flag.
   */
  setPerformRedo(e) {
    Li(this, ad, e);
  }
  /**
   * Gets information whether redo or undo action is already performed (we don't execute synchronization in such case).
   *
   * @private
   * @returns {boolean}
   */
  isPerformingUndoRedo() {
    return Dn(this, rd) || Dn(this, ad);
  }
  /**
   * Gets HyperFormula's sheet id.
   *
   * @returns {string|null}
   */
  getSheetId() {
    return Dn(this, cd);
  }
  /**
   * Gets engine instance that will be used for handled instance of Handsontable.
   *
   * @type {HyperFormula|null}
   */
  getEngine() {
    return Dn(this, ld);
  }
  /**
   * Gets method which will postpone execution of some action (needed when synchronization endpoint isn't setup yet).
   *
   * @returns {Function}
   */
  getPostponeAction() {
    return Dn(this, od);
  }
  /**
   * Setups a synchronization endpoint.
   *
   * @param {HyperFormula|null} engine The HF's engine instance which will be synced.
   * @param {string|null} sheetId HyperFormula's sheet name.
   */
  setupSyncEndpoint(e, t) {
    Li(this, ld, e), Li(this, cd, t), Dn(this, Hl).init(), Dn(this, kl).init();
  }
}
const $G = LG;
function Ao(s, e, t) {
  return e = FG(e), e in s ? Object.defineProperty(s, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : s[e] = t, s;
}
function FG(s) {
  var e = VG(s, "string");
  return typeof e == "symbol" ? e : String(e);
}
function VG(s, e) {
  if (typeof s != "object" || s === null)
    return s;
  var t = s[Symbol.toPrimitive];
  if (t !== void 0) {
    var n = t.call(s, e || "default");
    if (typeof n != "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(s);
}
function hd(s, e, t) {
  BG(s, e), e.set(s, t);
}
function BG(s, e) {
  if (e.has(s))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function oi(s, e, t) {
  var n = sE(s, e, "set");
  return WG(s, n, t), t;
}
function WG(s, e, t) {
  if (e.set)
    e.set.call(s, t);
  else {
    if (!e.writable)
      throw new TypeError("attempted to set read only private field");
    e.value = t;
  }
}
function Po(s, e) {
  var t = sE(s, e, "get");
  return UG(s, t);
}
function sE(s, e, t) {
  if (!e.has(s))
    throw new TypeError("attempted to " + t + " private field on non-instance");
  return e.get(s);
}
function UG(s, e) {
  return e.get ? e.get.call(s) : e.value;
}
const ts = "formulas", zG = ["maxRows", "maxColumns", "language"], YG = 260;
me.getSingleton().register("afterNamedExpressionAdded");
me.getSingleton().register("afterNamedExpressionRemoved");
me.getSingleton().register("afterSheetAdded");
me.getSingleton().register("afterSheetRemoved");
me.getSingleton().register("afterSheetRenamed");
me.getSingleton().register("afterFormulasValuesUpdate");
const Do = (s) => s === "UndoRedo.undo" || s === "UndoRedo.redo" || s === "auto";
var Hn = /* @__PURE__ */ new WeakMap(), ud = /* @__PURE__ */ new WeakMap(), Hr = /* @__PURE__ */ new WeakMap();
class GG extends at {
  constructor() {
    var e;
    super(...arguments), e = this, hd(this, Hn, {
      writable: !0,
      value: !1
    }), hd(this, ud, {
      writable: !0,
      value: !1
    }), hd(this, Hr, {
      writable: !0,
      value: [["valuesUpdated", function() {
        return e.onEngineValuesUpdated(...arguments);
      }], ["namedExpressionAdded", function() {
        return e.onEngineNamedExpressionsAdded(...arguments);
      }], ["namedExpressionRemoved", function() {
        return e.onEngineNamedExpressionsRemoved(...arguments);
      }], ["sheetAdded", function() {
        return e.onEngineSheetAdded(...arguments);
      }], ["sheetRenamed", function() {
        return e.onEngineSheetRenamed(...arguments);
      }], ["sheetRemoved", function() {
        return e.onEngineSheetRemoved(...arguments);
      }]]
    }), Ao(this, "staticRegister", Gs("formulas")), Ao(this, "engine", null), Ao(this, "sheetName", null), Ao(this, "indexSyncer", null), Ao(this, "rowAxisSyncer", null), Ao(this, "columnAxisSyncer", null);
  }
  static get PLUGIN_KEY() {
    return ts;
  }
  static get PLUGIN_PRIORITY() {
    return YG;
  }
  static get SETTING_KEYS() {
    return [ts, ...zG];
  }
  /**
   * HyperFormula's sheet id.
   *
   * @type {number|null}
   */
  get sheetId() {
    return this.sheetName === null ? null : this.engine.getSheetId(this.sheetName);
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link Formulas#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return !!this.hot.getSettings()[ts];
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    var e, t = this;
    if (!this.enabled) {
      if (this.engine = (e = SG(this.hot)) !== null && e !== void 0 ? e : this.engine, !this.engine) {
        pt("Missing the required `engine` key in the Formulas settings. Please fill it with either an engine class or an engine instance.");
        return;
      }
      if (this.sheetName !== null && !this.engine.doesSheetExist(this.sheetName)) {
        const n = this.addSheet(this.sheetName, this.hot.getSourceDataArray());
        n !== !1 && (this.sheetName = n);
      }
      this.addHook("beforeLoadData", function() {
        return t.onBeforeLoadData(...arguments);
      }), this.addHook("afterLoadData", function() {
        return t.onAfterLoadData(...arguments);
      }), this.addHook("beforeUpdateData", function() {
        return t.onBeforeLoadData(...arguments);
      }), this.addHook("afterUpdateData", function() {
        return t.onAfterLoadData(...arguments);
      }), this.addHook("modifyData", function() {
        return t.onModifyData(...arguments);
      }), this.addHook("modifySourceData", function() {
        return t.onModifySourceData(...arguments);
      }), this.addHook("beforeValidate", function() {
        return t.onBeforeValidate(...arguments);
      }), this.addHook("afterSetSourceDataAtCell", function() {
        return t.onAfterSetSourceDataAtCell(...arguments);
      }), this.addHook("afterSetDataAtCell", function() {
        return t.onAfterSetDataAtCell(...arguments);
      }), this.addHook("afterSetDataAtRowProp", function() {
        return t.onAfterSetDataAtCell(...arguments);
      }), this.addHook("beforeCreateRow", function() {
        return t.onBeforeCreateRow(...arguments);
      }), this.addHook("beforeCreateCol", function() {
        return t.onBeforeCreateCol(...arguments);
      }), this.addHook("afterCreateRow", function() {
        return t.onAfterCreateRow(...arguments);
      }), this.addHook("afterCreateCol", function() {
        return t.onAfterCreateCol(...arguments);
      }), this.addHook("beforeRemoveRow", function() {
        return t.onBeforeRemoveRow(...arguments);
      }), this.addHook("beforeRemoveCol", function() {
        return t.onBeforeRemoveCol(...arguments);
      }), this.addHook("afterRemoveRow", function() {
        return t.onAfterRemoveRow(...arguments);
      }), this.addHook("afterRemoveCol", function() {
        return t.onAfterRemoveCol(...arguments);
      }), this.indexSyncer = new $G(this.hot.rowIndexMapper, this.hot.columnIndexMapper, (n) => {
        this.hot.addHookOnce("init", () => {
          n();
        });
      }), this.rowAxisSyncer = this.indexSyncer.getForAxis("row"), this.columnAxisSyncer = this.indexSyncer.getForAxis("column"), this.hot.addHook("afterRowSequenceChange", this.rowAxisSyncer.getIndexesChangeSyncMethod()), this.hot.addHook("afterColumnSequenceChange", this.columnAxisSyncer.getIndexesChangeSyncMethod()), this.hot.addHook("beforeRowMove", (n, o, r, a) => {
        this.rowAxisSyncer.storeMovesInformation(n, o, a);
      }), this.hot.addHook("beforeColumnMove", (n, o, r, a) => {
        this.columnAxisSyncer.storeMovesInformation(n, o, a);
      }), this.hot.addHook("afterRowMove", (n, o, r, a, l) => {
        this.rowAxisSyncer.calculateAndSyncMoves(a, l);
      }), this.hot.addHook("afterColumnMove", (n, o, r, a, l) => {
        this.columnAxisSyncer.calculateAndSyncMoves(a, l);
      }), this.hot.addHook("beforeColumnFreeze", (n, o) => {
        this.columnAxisSyncer.storeMovesInformation([n], this.hot.getSettings().fixedColumnsStart, o);
      }), this.hot.addHook("afterColumnFreeze", (n, o) => {
        this.columnAxisSyncer.calculateAndSyncMoves(o, o);
      }), this.hot.addHook("beforeColumnUnfreeze", (n, o) => {
        this.columnAxisSyncer.storeMovesInformation([n], this.hot.getSettings().fixedColumnsStart - 1, o);
      }), this.hot.addHook("afterColumnUnfreeze", (n, o) => {
        this.columnAxisSyncer.calculateAndSyncMoves(o, o);
      }), this.addHook("afterCellMetaReset", function() {
        return t.onAfterCellMetaReset(...arguments);
      }), this.addHook("beforeUndo", () => {
        this.indexSyncer.setPerformUndo(!0), this.engine.undo();
      }), this.addHook("beforeRedo", () => {
        this.indexSyncer.setPerformRedo(!0), this.engine.redo();
      }), this.addHook("afterUndo", () => {
        this.indexSyncer.setPerformUndo(!1);
      }), this.addHook("afterUndo", () => {
        this.indexSyncer.setPerformRedo(!1);
      }), this.addHook("afterDetachChild", function() {
        return t.onAfterDetachChild(...arguments);
      }), this.addHook("beforeAutofill", function() {
        return t.onBeforeAutofill(...arguments);
      }), Po(this, Hr).forEach((n) => {
        let [o, r] = n;
        return this.engine.on(o, r);
      }), super.enablePlugin();
    }
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    Po(this, Hr).forEach((e) => {
      let [t, n] = e;
      return this.engine.off(t, n);
    }), iy(this.engine, this.hot), this.engine = null, super.disablePlugin();
  }
  /**
   * Triggered on `updateSettings`.
   *
   * @private
   * @param {object} newSettings New set of settings passed to the `updateSettings` method.
   */
  updatePlugin(e) {
    const t = vG(this.hot.getSettings());
    yG(this.engine.getConfig(), t) && this.engine.updateConfig(t);
    const n = this.hot.getSettings()[ts];
    if (ue(n) && ue(n.sheetName) && n.sheetName !== this.sheetName && this.switchSheet(n.sheetName), !e.data && this.sheetName === null) {
      const o = this.hot.getSettings()[ts].sheetName;
      o && this.engine.doesSheetExist(o) ? this.switchSheet(this.sheetName) : this.sheetName = this.addSheet(o ?? void 0, this.hot.getSourceDataArray());
    }
    super.updatePlugin(e);
  }
  /**
   * Destroys the plugin instance.
   */
  destroy() {
    Po(this, Hr).forEach((e) => {
      var t;
      let [n, o] = e;
      return (t = this.engine) === null || t === void 0 ? void 0 : t.off(n, o);
    }), oi(this, Hr, null), iy(this.engine, this.hot), this.engine = null, super.destroy();
  }
  /**
   * Add a sheet to the shared HyperFormula instance.
   *
   * @param {string|null} [sheetName] The new sheet name. If not provided (or a null is passed), will be
   * auto-generated by HyperFormula.
   * @param {Array} [sheetData] Data passed to the shared HyperFormula instance. Has to be declared as an array of
   * arrays - array of objects is not supported in this scenario.
   * @returns {boolean|string} `false` if the data format is unusable or it is impossible to add a new sheet to the
   * engine, the created sheet name otherwise.
   */
  addSheet(e, t) {
    if (ue(t) && !EV(t))
      return pt("The provided data should be an array of arrays."), !1;
    if (e != null && this.engine.doesSheetExist(e))
      return pt("Sheet with the provided name already exists."), !1;
    try {
      const n = this.engine.addSheet(e ?? void 0);
      return t && this.engine.setSheetContent(this.engine.getSheetId(n), t), n;
    } catch (n) {
      return pt(n.message), !1;
    }
  }
  /**
   * Switch the sheet used as data in the Handsontable instance (it loads the data from the shared HyperFormula
   * instance).
   *
   * @param {string} sheetName Sheet name used in the shared HyperFormula instance.
   */
  switchSheet(e) {
    if (!this.engine.doesSheetExist(e)) {
      bg(`The sheet named \`${e}\` does not exist, switch aborted.`);
      return;
    }
    this.sheetName = e;
    const t = this.engine.getSheetSerialized(this.sheetId);
    t.length > 0 && this.hot.loadData(t, `${Js(ts)}.switchSheet`);
  }
  /**
   * Get the cell type under specified visual coordinates.
   *
   * @param {number} row Visual row index.
   * @param {number} column Visual column index.
   * @param {number} [sheet] The target sheet id, defaults to the current sheet.
   * @returns {string} Possible values: 'FORMULA' | 'VALUE' | 'ARRAYFORMULA' | 'EMPTY'.
   */
  getCellType(e, t) {
    let n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : this.sheetId;
    const o = this.hot.toPhysicalRow(e), r = this.hot.toPhysicalColumn(t);
    return o !== null && r !== null ? this.engine.getCellType({
      sheet: n,
      row: this.rowAxisSyncer.getHfIndexFromVisualIndex(e),
      col: this.columnAxisSyncer.getHfIndexFromVisualIndex(t)
    }) : "EMPTY";
  }
  /**
   * Returns `true` if under specified visual coordinates is formula.
   *
   * @param {number} row Visual row index.
   * @param {number} column Visual column index.
   * @param {number} [sheet] The target sheet id, defaults to the current sheet.
   * @returns {boolean}
   */
  isFormulaCellType(e, t) {
    let n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : this.sheetId;
    return this.engine.doesCellHaveFormula({
      sheet: n,
      row: this.rowAxisSyncer.getHfIndexFromVisualIndex(e),
      col: this.columnAxisSyncer.getHfIndexFromVisualIndex(t)
    });
  }
  /**
   * Renders dependent sheets (handsontable instances) based on the changes - list of the
   * recalculated dependent cells.
   *
   * @private
   * @param {object[]} dependentCells The values and location of applied changes within HF engine.
   * @param {boolean} [renderSelf] `true` if it's supposed to render itself, `false` otherwise.
   */
  renderDependentSheets(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;
    const n = /* @__PURE__ */ new Set();
    e.forEach((o) => {
      var r;
      const a = o == null || (r = o.address) === null || r === void 0 ? void 0 : r.sheet;
      a !== void 0 && (n.has(a) || n.add(a));
    }), ny(this.engine).forEach((o, r) => {
      if ((t || r !== this.sheetId) && n.has(r)) {
        var a;
        o.render(), (a = o.view) === null || a === void 0 || a.adjustElementsSize();
      }
    });
  }
  /**
   * Validates dependent cells based on the cells that are modified by the change.
   *
   * @private
   * @param {object[]} dependentCells The values and location of applied changes within HF engine.
   * @param {object[]} [changedCells] The values and location of applied changes by developer (through API or UI).
   */
  validateDependentCells(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    const n = (r) => {
      var a;
      const {
        row: l,
        col: c,
        sheet: h
      } = (a = r == null ? void 0 : r.address) !== null && a !== void 0 ? a : {};
      return ue(h) ? `${h}:${l}x${c}` : "";
    }, o = new Set(t.map((r) => n(r)));
    e.forEach((r) => {
      var a, l;
      const {
        row: c,
        col: h
      } = (a = r.address) !== null && a !== void 0 ? a : {};
      if (ue(c) === !1 || ue(h) === !1 || c >= this.hot.countRows() || h >= this.hot.countCols())
        return;
      const u = r == null || (l = r.address) === null || l === void 0 ? void 0 : l.sheet, f = n(r);
      if (u !== void 0 && !o.has(f)) {
        const g = ny(this.engine).get(u);
        if (!g)
          return;
        g.validateCell(g.getDataAtCell(c, h), g.getCellMeta(c, h), () => {
        });
      }
    });
  }
  /**
   * Sync a change from the change-related hooks with the engine.
   *
   * @private
   * @param {number} row Visual row index.
   * @param {number} column Visual column index.
   * @param {Handsontable.CellValue} newValue New value.
   * @returns {Array} Array of changes exported from the engine.
   */
  syncChangeWithEngine(e, t, n) {
    const o = {
      row: this.rowAxisSyncer.getHfIndexFromVisualIndex(e),
      col: this.columnAxisSyncer.getHfIndexFromVisualIndex(t),
      sheet: this.sheetId
    };
    if (!this.engine.isItPossibleToSetCellContents(o)) {
      pt(`Not possible to set cell data at ${JSON.stringify(o)}`);
      return;
    }
    const r = this.hot.getCellMeta(e, t);
    return sd(n, r.type) && (oy(n, r.dateFormat) ? n = ry(n, r.dateFormat) : _G(n) === !1 && (n = `'${n}`)), this.engine.setCellContents(o, n);
  }
  /**
   * The hook allows to translate the formula value to calculated value before it goes to the
   * validator function.
   *
   * @private
   * @param {*} value The cell value to validate.
   * @param {number} visualRow The visual row index.
   * @param {number|string} prop The visual column index or property name of the column.
   * @returns {*} Returns value to validate.
   */
  onBeforeValidate(e, t, n) {
    const o = this.hot.propToCol(n);
    if (this.isFormulaCellType(t, o)) {
      const r = {
        row: this.rowAxisSyncer.getHfIndexFromVisualIndex(t),
        col: this.columnAxisSyncer.getHfIndexFromVisualIndex(o),
        sheet: this.sheetId
      }, a = this.hot.getCellMeta(t, o);
      let l = this.engine.getCellValue(r);
      return a.type === "date" && ys(l) && (l = ay(l, a.dateFormat)), typeof l == "object" && l !== null ? l.value : l;
    }
    return e;
  }
  /**
   * `onBeforeAutofill` hook callback.
   *
   * @private
   * @param {Array[]} fillData The data that was used to fill the `targetRange`. If `beforeAutofill` was used
   * and returned `[[]]`, this will be the same object that was returned from `beforeAutofill`.
   * @param {CellRange} sourceRange The range values will be filled from.
   * @param {CellRange} targetRange The range new values will be filled into.
   * @returns {boolean|*}
   */
  onBeforeAutofill(e, t, n) {
    const {
      row: o,
      col: r
    } = t.getTopStartCorner(), {
      row: a,
      col: l
    } = t.getBottomEndCorner(), {
      row: c,
      col: h
    } = n.getTopStartCorner(), {
      row: u,
      col: f
    } = n.getBottomEndCorner(), g = {
      start: {
        row: this.rowAxisSyncer.getHfIndexFromVisualIndex(o),
        col: this.columnAxisSyncer.getHfIndexFromVisualIndex(r),
        sheet: this.sheetId
      },
      end: {
        row: this.rowAxisSyncer.getHfIndexFromVisualIndex(a),
        col: this.columnAxisSyncer.getHfIndexFromVisualIndex(l),
        sheet: this.sheetId
      }
    }, m = {
      start: {
        row: this.rowAxisSyncer.getHfIndexFromVisualIndex(c),
        col: this.columnAxisSyncer.getHfIndexFromVisualIndex(h),
        sheet: this.sheetId
      },
      end: {
        row: this.rowAxisSyncer.getHfIndexFromVisualIndex(u),
        col: this.columnAxisSyncer.getHfIndexFromVisualIndex(f),
        sheet: this.sheetId
      }
    };
    if (this.engine.isItPossibleToSetCellContents(m) === !1)
      return !1;
    const w = this.engine.getFillRangeData(g, m), {
      row: C,
      col: S
    } = g.start, {
      row: x,
      col: T
    } = g.end, M = x - C + 1, _ = T - S + 1;
    for (let P = 0; P < w.length; P += 1)
      for (let j = 0; j < w[P].length; j += 1) {
        const H = w[P][j], Z = P % M, X = j % _, F = this.hot.getCellMeta(Z, X);
        sd(H, F.type) && (H.startsWith("'") ? w[P][j] = H.slice(1) : this.isFormulaCellType(Z, X, this.sheetId) === !1 && (w[P][j] = IG(H, F.dateFormat)));
      }
    return w;
  }
  /**
   * `beforeLoadData` hook callback.
   *
   * @param {Array} sourceData Array of arrays or array of objects containing data.
   * @param {boolean} initialLoad Flag that determines whether the data has been loaded during the initialization.
   * @param {string} [source] Source of the call.
   * @private
   */
  onBeforeLoadData(e, t) {
    (arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "").includes(Js(ts)) || oi(this, ud, wt(this.hot.getSettings().data));
  }
  /**
   * Callback to `afterCellMetaReset` hook which is triggered after setting cell meta.
   *
   * @private
   */
  onAfterCellMetaReset() {
    const e = this.hot.getSourceDataArray();
    let t = !1;
    e.forEach((n, o) => {
      n.forEach((r, a) => {
        const l = this.hot.getCellMeta(o, a), c = l.dateFormat;
        sd(r, l.type) && (t = !0, oy(r, c) ? e[o][a] = ry(r, c) : this.isFormulaCellType(o, a) === !1 && (e[o][a] = `'${r}`));
      });
    }), t === !0 && (oi(this, Hn, !0), this.engine.setSheetContent(this.sheetId, e), oi(this, Hn, !1));
  }
  /**
   * `afterLoadData` hook callback.
   *
   * @param {Array} sourceData Array of arrays or array of objects containing data.
   * @param {boolean} initialLoad Flag that determines whether the data has been loaded during the initialization.
   * @param {string} [source] Source of the call.
   * @private
   */
  onAfterLoadData(e, t) {
    if (!(arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "").includes(Js(ts)))
      if (this.sheetName = TG(this.engine, this.hot.getSettings()[ts].sheetName), Po(this, ud))
        this.switchSheet(this.sheetName);
      else {
        const o = this.hot.getSourceDataArray();
        if (this.engine.isItPossibleToReplaceSheetContent(this.sheetId, o)) {
          oi(this, Hn, !0);
          const r = this.engine.setSheetContent(this.sheetId, o);
          this.indexSyncer.setupSyncEndpoint(this.engine, this.sheetId), this.renderDependentSheets(r), oi(this, Hn, !1);
        }
      }
  }
  /**
   * `modifyData` hook callback.
   *
   * @private
   * @param {number} physicalRow Physical row index.
   * @param {number} visualColumn Visual column index.
   * @param {object} valueHolder Object which contains original value which can be modified by overwriting `.value`
   *   property.
   * @param {string} ioMode String which indicates for what operation hook is fired (`get` or `set`).
   */
  onModifyData(e, t, n, o) {
    if (o !== "get" || Po(this, Hn) || this.sheetName === null || !this.engine.doesSheetExist(this.sheetName))
      return;
    const r = this.hot.toVisualRow(e);
    if (r === null || t === null)
      return;
    if (!this.isFormulaCellType(r, t) && this.getCellType(r, t) !== "ARRAY") {
      J0(n.value) && (n.value = MG(n.value));
      return;
    }
    const l = {
      row: this.rowAxisSyncer.getHfIndexFromVisualIndex(r),
      col: this.columnAxisSyncer.getHfIndexFromVisualIndex(t),
      sheet: this.sheetId
    };
    let c = this.engine.getCellValue(l);
    const h = this.hot.getCellMeta(r, t);
    h.type === "date" && ys(c) && (c = ay(c, h.dateFormat));
    const u = typeof c == "object" && c !== null ? c.value : c;
    n.value = u;
  }
  /**
   * `modifySourceData` hook callback.
   *
   * @private
   * @param {number} row Physical row index.
   * @param {number|string} columnOrProp Physical column index or prop.
   * @param {object} valueHolder Object which contains original value which can be modified by overwriting `.value`
   *   property.
   * @param {string} ioMode String which indicates for what operation hook is fired (`get` or `set`).
   */
  onModifySourceData(e, t, n, o) {
    if (o !== "get" || Po(this, Hn) || this.sheetName === null || !this.engine.doesSheetExist(this.sheetName))
      return;
    const r = this.hot.toVisualRow(e), a = this.hot.propToCol(t);
    if (r === null || a === null || !this.isFormulaCellType(r, a) && this.getCellType(r, a) !== "ARRAY")
      return;
    const c = this.engine.getSheetDimensions(this.engine.getSheetId(this.sheetName));
    if (c.width === 0 && c.height === 0)
      return;
    const h = {
      row: this.rowAxisSyncer.getHfIndexFromVisualIndex(r),
      col: this.columnAxisSyncer.getHfIndexFromVisualIndex(a),
      sheet: this.sheetId
    };
    n.value = this.engine.getCellSerialized(h);
  }
  /**
   * `onAfterSetDataAtCell` hook callback.
   *
   * @private
   * @param {Array[]} changes An array of changes in format [[row, prop, oldValue, value], ...].
   * @param {string} [source] String that identifies source of hook call
   *                          ([list of all available sources]{@link https://handsontable.com/docs/javascript-data-grid/events-and-hooks/#handsontable-hooks}).
   */
  onAfterSetDataAtCell(e, t) {
    if (Do(t))
      return;
    const n = [], o = [], r = this.engine.batch(() => {
      e.forEach((a) => {
        let [l, c, , h] = a;
        const u = this.hot.propToCol(c), f = this.hot.toPhysicalRow(l), g = this.hot.toPhysicalColumn(u), m = {
          row: this.rowAxisSyncer.getHfIndexFromVisualIndex(l),
          col: this.columnAxisSyncer.getHfIndexFromVisualIndex(u),
          sheet: this.sheetId
        };
        f !== null && g !== null ? this.syncChangeWithEngine(l, u, h) : n.push([l, u, h]), o.push({
          address: m
        });
      });
    });
    n.length && this.hot.addHookOnce("afterChange", () => {
      const a = this.engine.batch(() => {
        n.forEach((l) => {
          let [c, h, u] = l;
          this.syncChangeWithEngine(c, h, u);
        });
      });
      this.renderDependentSheets(a, !0);
    }), this.renderDependentSheets(r), this.validateDependentCells(r, o);
  }
  /**
   * `onAfterSetSourceDataAtCell` hook callback.
   *
   * @private
   * @param {Array[]} changes An array of changes in format [[row, column, oldValue, value], ...].
   * @param {string} [source] String that identifies source of hook call
   *                          ([list of all available sources]{@link https://handsontable.com/docs/javascript-data-grid/events-and-hooks/#handsontable-hooks}).
   */
  onAfterSetSourceDataAtCell(e, t) {
    if (Do(t))
      return;
    const n = [], o = [];
    e.forEach((r) => {
      let [a, l, , c] = r;
      const h = this.hot.propToCol(l);
      if (!ys(h))
        return;
      const u = {
        row: this.rowAxisSyncer.getHfIndexFromVisualIndex(a),
        col: this.columnAxisSyncer.getHfIndexFromVisualIndex(h),
        sheet: this.sheetId
      };
      if (!this.engine.isItPossibleToSetCellContents(u)) {
        pt(`Not possible to set source cell data at ${JSON.stringify(u)}`);
        return;
      }
      o.push({
        address: u
      }), n.push(...this.engine.setCellContents(u, c));
    }), this.renderDependentSheets(n), this.validateDependentCells(n, o);
  }
  /**
   * `beforeCreateRow` hook callback.
   *
   * @private
   * @param {number} visualRow Represents the visual index of first newly created row in the data source array.
   * @param {number} amount Number of newly created rows in the data source array.
   * @returns {*|boolean} If false is returned the action is canceled.
   */
  onBeforeCreateRow(e, t) {
    let n = this.rowAxisSyncer.getHfIndexFromVisualIndex(e);
    if (e >= this.hot.countRows() && (n = e), this.sheetId === null || !this.engine.doesSheetExist(this.sheetName) || !this.engine.isItPossibleToAddRows(this.sheetId, [n, t]))
      return !1;
  }
  /**
   * `beforeCreateCol` hook callback.
   *
   * @private
   * @param {number} visualColumn Represents the visual index of first newly created column in the data source.
   * @param {number} amount Number of newly created columns in the data source.
   * @returns {*|boolean} If false is returned the action is canceled.
   */
  onBeforeCreateCol(e, t) {
    let n = this.columnAxisSyncer.getHfIndexFromVisualIndex(e);
    if (e >= this.hot.countCols() && (n = e), this.sheetId === null || !this.engine.doesSheetExist(this.sheetName) || !this.engine.isItPossibleToAddColumns(this.sheetId, [n, t]))
      return !1;
  }
  /**
   * `beforeRemoveRow` hook callback.
   *
   * @private
   * @param {number} row Visual index of starter row.
   * @param {number} amount Amount of rows to be removed.
   * @param {number[]} physicalRows An array of physical rows removed from the data source.
   * @returns {*|boolean} If false is returned the action is canceled.
   */
  onBeforeRemoveRow(e, t, n) {
    return this.rowAxisSyncer.setRemovedHfIndexes(n).every((a) => this.engine.isItPossibleToRemoveRows(this.sheetId, [a, 1])) === !1 ? !1 : void 0;
  }
  /**
   * `beforeRemoveCol` hook callback.
   *
   * @private
   * @param {number} col Visual index of starter column.
   * @param {number} amount Amount of columns to be removed.
   * @param {number[]} physicalColumns An array of physical columns removed from the data source.
   * @returns {*|boolean} If false is returned the action is canceled.
   */
  onBeforeRemoveCol(e, t, n) {
    return this.columnAxisSyncer.setRemovedHfIndexes(n).every((a) => this.engine.isItPossibleToRemoveColumns(this.sheetId, [a, 1])) === !1 ? !1 : void 0;
  }
  /**
   * `afterCreateRow` hook callback.
   *
   * @private
   * @param {number} visualRow Represents the visual index of first newly created row in the data source array.
   * @param {number} amount Number of newly created rows in the data source array.
   * @param {string} [source] String that identifies source of hook call
   *                          ([list of all available sources]{@link https://handsontable.com/docs/javascript-data-grid/events-and-hooks/#handsontable-hooks}).
   */
  onAfterCreateRow(e, t, n) {
    if (Do(n))
      return;
    const o = this.engine.addRows(this.sheetId, [this.rowAxisSyncer.getHfIndexFromVisualIndex(e), t]);
    this.renderDependentSheets(o);
  }
  /**
   * `afterCreateCol` hook callback.
   *
   * @private
   * @param {number} visualColumn Represents the visual index of first newly created column in the data source.
   * @param {number} amount Number of newly created columns in the data source.
   * @param {string} [source] String that identifies source of hook call
   *                          ([list of all available sources]{@link https://handsontable.com/docs/javascript-data-grid/events-and-hooks/#handsontable-hooks}).
   */
  onAfterCreateCol(e, t, n) {
    if (Do(n))
      return;
    const o = this.engine.addColumns(this.sheetId, [this.columnAxisSyncer.getHfIndexFromVisualIndex(e), t]);
    this.renderDependentSheets(o);
  }
  /**
   * `afterRemoveRow` hook callback.
   *
   * @private
   * @param {number} row Visual index of starter row.
   * @param {number} amount An amount of removed rows.
   * @param {number[]} physicalRows An array of physical rows removed from the data source.
   * @param {string} [source] String that identifies source of hook call
   *                          ([list of all available sources]{@link https://handsontable.com/docs/javascript-data-grid/events-and-hooks/#handsontable-hooks}).
   */
  onAfterRemoveRow(e, t, n, o) {
    if (Do(o))
      return;
    const r = this.rowAxisSyncer.getRemovedHfIndexes().sort().reverse(), a = this.engine.batch(() => {
      r.forEach((l) => {
        this.engine.removeRows(this.sheetId, [l, 1]);
      });
    });
    this.renderDependentSheets(a);
  }
  /**
   * `afterRemoveCol` hook callback.
   *
   * @private
   * @param {number} col Visual index of starter column.
   * @param {number} amount An amount of removed columns.
   * @param {number[]} physicalColumns An array of physical columns removed from the data source.
   * @param {string} [source] String that identifies source of hook call
   *                          ([list of all available sources]{@link https://handsontable.com/docs/javascript-data-grid/events-and-hooks/#handsontable-hooks}).
   */
  onAfterRemoveCol(e, t, n, o) {
    if (Do(o))
      return;
    const r = this.columnAxisSyncer.getRemovedHfIndexes().sort().reverse(), a = this.engine.batch(() => {
      r.forEach((l) => {
        this.engine.removeColumns(this.sheetId, [l, 1]);
      });
    });
    this.renderDependentSheets(a);
  }
  /**
   * `afterDetachChild` hook callback.
   * Used to sync the data of the rows detached in the Nested Rows plugin with the engine's dataset.
   *
   * @private
   * @param {object} parent An object representing the parent from which the element was detached.
   * @param {object} element The detached element.
   * @param {number} finalElementRowIndex The final row index of the detached element.
   */
  onAfterDetachChild(e, t, n) {
    var o;
    oi(this, Hn, !0);
    const r = this.hot.getSourceDataArray(n, 0, n + (((o = t.__children) === null || o === void 0 ? void 0 : o.length) || 0), this.hot.countSourceCols());
    oi(this, Hn, !1), r.forEach((a, l) => {
      a.forEach((c, h) => {
        this.engine.setCellContents({
          col: h,
          row: n + l,
          sheet: this.sheetId
        }, [[c]]);
      });
    });
  }
  /**
   * Called when a value is updated in the engine.
   *
   * @private
   * @fires Hooks#afterFormulasValuesUpdate
   * @param {Array} changes The values and location of applied changes.
   */
  onEngineValuesUpdated(e) {
    this.hot.runHooks("afterFormulasValuesUpdate", e);
  }
  /**
   * Called when a named expression is added to the engine instance.
   *
   * @private
   * @fires Hooks#afterNamedExpressionAdded
   * @param {string} namedExpressionName The name of the added expression.
   * @param {Array} changes The values and location of applied changes.
   */
  onEngineNamedExpressionsAdded(e, t) {
    this.hot.runHooks("afterNamedExpressionAdded", e, t);
  }
  /**
   * Called when a named expression is removed from the engine instance.
   *
   * @private
   * @fires Hooks#afterNamedExpressionRemoved
   * @param {string} namedExpressionName The name of the removed expression.
   * @param {Array} changes The values and location of applied changes.
   */
  onEngineNamedExpressionsRemoved(e, t) {
    this.hot.runHooks("afterNamedExpressionRemoved", e, t);
  }
  /**
   * Called when a new sheet is added to the engine instance.
   *
   * @private
   * @fires Hooks#afterSheetAdded
   * @param {string} addedSheetDisplayName The name of the added sheet.
   */
  onEngineSheetAdded(e) {
    this.hot.runHooks("afterSheetAdded", e);
  }
  /**
   * Called when a sheet in the engine instance is renamed.
   *
   * @private
   * @fires Hooks#afterSheetRenamed
   * @param {string} oldDisplayName The old name of the sheet.
   * @param {string} newDisplayName The new name of the sheet.
   */
  onEngineSheetRenamed(e, t) {
    this.hot.runHooks("afterSheetRenamed", e, t);
  }
  /**
   * Called when a sheet is removed from the engine instance.
   *
   * @private
   * @fires Hooks#afterSheetRemoved
   * @param {string} removedSheetDisplayName The removed sheet name.
   * @param {Array} changes The values and location of applied changes.
   */
  onEngineSheetRemoved(e, t) {
    this.hot.runHooks("afterSheetRemoved", e, t);
  }
}
function jG(s) {
  return {
    key: "hidden_columns_hide",
    name() {
      const e = this.getSelectedLast();
      let t = 0;
      if (Array.isArray(e)) {
        const [, n, , o] = e;
        n - o !== 0 && (t = 1);
      }
      return this.getTranslatedPhrase(km, t);
    },
    callback() {
      const {
        from: e,
        to: t
      } = this.getSelectedRangeLast(), n = Math.max(Math.min(e.col, t.col), 0), o = Math.max(e.col, t.col), r = [];
      for (let c = n; c <= o; c += 1)
        r.push(c);
      s.hideColumns(r);
      const a = r[r.length - 1], l = this.columnIndexMapper.getNearestNotHiddenIndex(a, 1, !0);
      Number.isInteger(l) && l >= 0 ? this.selectColumns(l) : this.deselectCell(), this.render(), this.view.adjustElementsSize(!0);
    },
    disabled: !1,
    hidden() {
      return !(this.selection.isSelectedByColumnHeader() || this.selection.isSelectedByCorner());
    }
  };
}
function KG(s) {
  const e = [];
  return {
    key: "hidden_columns_show",
    name() {
      const t = e.length > 1 ? 1 : 0;
      return this.getTranslatedPhrase(Nm, t);
    },
    callback() {
      var t, n;
      if (e.length === 0)
        return;
      let o = e[0], r = e[e.length - 1];
      o = (t = this.columnIndexMapper.getNearestNotHiddenIndex(o - 1, -1)) !== null && t !== void 0 ? t : 0, r = (n = this.columnIndexMapper.getNearestNotHiddenIndex(r + 1, 1)) !== null && n !== void 0 ? n : this.countCols() - 1, s.showColumns(e), this.render(), this.view.adjustElementsSize(!0), r - o + 1 === this.countCols() || this.selectColumns(o, r);
    },
    disabled: !1,
    hidden() {
      const t = Ye(s.getHiddenColumns(), (f) => this.toPhysicalColumn(f));
      if (!(this.selection.isSelectedByColumnHeader() || this.selection.isSelectedByCorner()) || t.length < 1)
        return !0;
      e.length = 0;
      const n = this.getSelectedRangeLast(), o = n.getTopStartCorner().col, r = n.getBottomEndCorner().col, a = this.columnIndexMapper, l = a.getRenderableFromVisualIndex(o), c = a.getRenderableFromVisualIndex(r), h = a.getNotTrimmedIndexes(), u = [];
      if (o !== r) {
        const f = r - o + 1, g = c - l + 1;
        if (f > g) {
          const m = h.slice(o, r + 1);
          u.push(...m.filter((w) => t.includes(w)));
        }
      } else if (l === 0 && l < o)
        u.push(...h.slice(0, o));
      else if (l === null)
        u.push(...h.slice(0, this.countCols()));
      else {
        const f = this.countCols() - 1, g = a.getRenderableFromVisualIndex(a.getNearestNotHiddenIndex(f, -1));
        c === g && f > r && u.push(...h.slice(r + 1));
      }
      return D(u, (f) => {
        e.push(this.toVisualColumn(f));
      }), e.length === 0;
    }
  };
}
function cy(s, e, t) {
  XG(s, e), e.set(s, t);
}
function XG(s, e) {
  if (e.has(s))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function Ts(s, e) {
  var t = nE(s, e, "get");
  return qG(s, t);
}
function qG(s, e) {
  return e.get ? e.get.call(s) : e.value;
}
function kr(s, e, t) {
  var n = nE(s, e, "set");
  return ZG(s, n, t), t;
}
function nE(s, e, t) {
  if (!e.has(s))
    throw new TypeError("attempted to " + t + " private field on non-instance");
  return e.get(s);
}
function ZG(s, e, t) {
  if (e.set)
    e.set.call(s, t);
  else {
    if (!e.writable)
      throw new TypeError("attempted to set read only private field");
    e.value = t;
  }
}
me.getSingleton().register("beforeHideColumns");
me.getSingleton().register("afterHideColumns");
me.getSingleton().register("beforeUnhideColumns");
me.getSingleton().register("afterUnhideColumns");
const dd = "hiddenColumns", QG = 310;
var hn = /* @__PURE__ */ new WeakMap(), un = /* @__PURE__ */ new WeakMap();
class JG extends at {
  constructor() {
    super(...arguments), cy(this, hn, {
      writable: !0,
      value: {}
    }), cy(this, un, {
      writable: !0,
      value: null
    });
  }
  static get PLUGIN_KEY() {
    return dd;
  }
  static get PLUGIN_PRIORITY() {
    return QG;
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link HiddenColumns#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return !!this.hot.getSettings()[dd];
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    var e = this;
    if (this.enabled)
      return;
    const t = this.hot.getSettings()[dd];
    Ge(t) && (kr(this, hn, t), wt(t.copyPasteEnabled) && (t.copyPasteEnabled = !0)), kr(this, un, new uh()), Ts(this, un).addLocalHook("init", () => this.onMapInit()), this.hot.columnIndexMapper.registerMap(this.pluginName, Ts(this, un)), this.addHook("afterContextMenuDefaultOptions", function() {
      return e.onAfterContextMenuDefaultOptions(...arguments);
    }), this.addHook("afterGetCellMeta", (n, o, r) => this.onAfterGetCellMeta(n, o, r)), this.addHook("modifyColWidth", (n, o) => this.onModifyColWidth(n, o)), this.addHook("afterGetColHeader", function() {
      return e.onAfterGetColHeader(...arguments);
    }), this.addHook("modifyCopyableRange", (n) => this.onModifyCopyableRange(n)), super.enablePlugin();
  }
  /**
   * Updates the plugin's state.
   *
   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
   *  - [`hiddenColumns`](@/api/options.md#hiddencolumns)
   */
  updatePlugin() {
    this.disablePlugin(), this.enablePlugin(), super.updatePlugin();
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    this.hot.columnIndexMapper.unregisterMap(this.pluginName), kr(this, hn, {}), super.disablePlugin(), this.resetCellsMeta();
  }
  /**
   * Shows the provided columns.
   *
   * @param {number[]} columns Array of visual column indexes.
   */
  showColumns(e) {
    const t = this.getHiddenColumns(), n = this.isValidConfig(e);
    let o = t;
    const r = Ts(this, un).getValues().slice(), a = e.length > 0;
    if (n && a) {
      const c = e.map((h) => this.hot.toPhysicalColumn(h));
      D(c, (h) => {
        r[h] = !1;
      }), o = cs(r, (h, u, f) => (u && h.push(this.hot.toVisualColumn(f)), h), []);
    }
    this.hot.runHooks("beforeUnhideColumns", t, o, n && a) !== !1 && (n && a && Ts(this, un).setValues(r), this.hot.view.adjustElementsSize(), this.hot.runHooks("afterUnhideColumns", t, o, n && a, n && o.length < t.length));
  }
  /**
   * Shows a single column.
   *
   * @param {...number} column Visual column index.
   */
  showColumn() {
    for (var e = arguments.length, t = new Array(e), n = 0; n < e; n++)
      t[n] = arguments[n];
    this.showColumns(t);
  }
  /**
   * Hides the columns provided in the array.
   *
   * @param {number[]} columns Array of visual column indexes.
   */
  hideColumns(e) {
    const t = this.getHiddenColumns(), n = this.isValidConfig(e);
    let o = t;
    n && (o = Array.from(new Set(t.concat(e)))), this.hot.runHooks("beforeHideColumns", t, o, n) !== !1 && (n && this.hot.batchExecution(() => {
      D(e, (a) => {
        Ts(this, un).setValueAtIndex(this.hot.toPhysicalColumn(a), !0);
      });
    }, !0), this.hot.runHooks("afterHideColumns", t, o, n, n && o.length > t.length));
  }
  /**
   * Hides a single column.
   *
   * @param {...number} column Visual column index.
   */
  hideColumn() {
    for (var e = arguments.length, t = new Array(e), n = 0; n < e; n++)
      t[n] = arguments[n];
    this.hideColumns(t);
  }
  /**
   * Returns an array of visual indexes of hidden columns.
   *
   * @returns {number[]}
   */
  getHiddenColumns() {
    return Ye(Ts(this, un).getHiddenIndexes(), (e) => this.hot.toVisualColumn(e));
  }
  /**
   * Checks if the provided column is hidden.
   *
   * @param {number} column Visual column index.
   * @returns {boolean}
   */
  isHidden(e) {
    return Ts(this, un).getValueAtIndex(this.hot.toPhysicalColumn(e)) || !1;
  }
  /**
   * Get if trim config is valid. Check whether all of the provided column indexes are within the bounds of the table.
   *
   * @param {Array} hiddenColumns List of hidden column indexes.
   * @returns {boolean}
   */
  isValidConfig(e) {
    const t = this.hot.countCols();
    return Array.isArray(e) && e.length > 0 ? e.every((n) => Number.isInteger(n) && n >= 0 && n < t) : !1;
  }
  /**
   * Reset all rendered cells meta.
   *
   * @private
   */
  resetCellsMeta() {
    D(this.hot.getCellsMeta(), (e) => {
      e && (e.skipColumnOnPaste = !1);
    });
  }
  /**
   * Adds the additional column width for the hidden column indicators.
   *
   * @private
   * @param {number|undefined} width Column width.
   * @param {number} column Visual column index.
   * @returns {number}
   */
  onModifyColWidth(e, t) {
    if (this.isHidden(t))
      return 0;
    if (Ts(this, hn).indicators && (this.isHidden(t + 1) || this.isHidden(t - 1)) && typeof e == "number" && this.hot.hasColHeaders())
      return e + 15;
  }
  /**
   * Sets the copy-related cell meta.
   *
   * @private
   * @param {number} row Visual row index.
   * @param {number} column Visual column index.
   * @param {object} cellProperties Object containing the cell properties.
   */
  onAfterGetCellMeta(e, t, n) {
    if (Ts(this, hn).copyPasteEnabled === !1 && this.isHidden(t) && (n.skipColumnOnPaste = !0), this.isHidden(t - 1))
      n.className = n.className || "", n.className.indexOf("afterHiddenColumn") === -1 && (n.className += " afterHiddenColumn");
    else if (n.className) {
      const o = n.className.split(" ");
      if (o.length > 0) {
        const r = o.indexOf("afterHiddenColumn");
        r > -1 && o.splice(r, 1), n.className = o.join(" ");
      }
    }
  }
  /**
   * Modifies the copyable range, accordingly to the provided config.
   *
   * @private
   * @param {Array} ranges An array of objects defining copyable cells.
   * @returns {Array}
   */
  onModifyCopyableRange(e) {
    if (Ts(this, hn).copyPasteEnabled)
      return e;
    const t = [], n = (o, r, a, l) => {
      t.push({
        startRow: o,
        endRow: r,
        startCol: a,
        endCol: l
      });
    };
    return D(e, (o) => {
      let r = !0, a = 0;
      Se(o.startCol, o.endCol, (l) => {
        this.isHidden(l) ? (r || n(o.startRow, o.endRow, a, l - 1), r = !0) : (r && (a = l), l === o.endCol && n(o.startRow, o.endRow, a, l), r = !1);
      });
    }), t;
  }
  /**
   * Adds the needed classes to the headers.
   *
   * @private
   * @param {number} column Visual column index.
   * @param {HTMLElement} TH Header's TH element.
   */
  onAfterGetColHeader(e, t) {
    if (!Ts(this, hn).indicators || e < 0)
      return;
    const n = [];
    e >= 1 && this.isHidden(e - 1) && n.push("afterHiddenColumn"), e < this.hot.countCols() - 1 && this.isHidden(e + 1) && n.push("beforeHiddenColumn"), ie(t, n);
  }
  /**
   * Add Show-hide columns to context menu.
   *
   * @private
   * @param {object} options An array of objects containing information about the pre-defined Context Menu items.
   */
  onAfterContextMenuDefaultOptions(e) {
    e.items.push({
      name: ze
    }, jG(this), KG(this));
  }
  /**
   * On map initialized hook callback.
   *
   * @private
   */
  onMapInit() {
    Array.isArray(Ts(this, hn).columns) && this.hideColumns(Ts(this, hn).columns);
  }
  /**
   * Destroys the plugin instance.
   */
  destroy() {
    kr(this, hn, null), kr(this, un, null), super.destroy();
  }
}
function ej(s) {
  return {
    key: "hidden_rows_hide",
    name() {
      const e = this.getSelectedLast();
      let t = 0;
      if (Array.isArray(e)) {
        const [n, , o] = e;
        n - o !== 0 && (t = 1);
      }
      return this.getTranslatedPhrase(Lm, t);
    },
    callback() {
      const {
        from: e,
        to: t
      } = this.getSelectedRangeLast(), n = Math.max(Math.min(e.row, t.row), 0), o = Math.max(e.row, t.row), r = [];
      for (let c = n; c <= o; c += 1)
        r.push(c);
      s.hideRows(r);
      const a = r[r.length - 1], l = this.rowIndexMapper.getNearestNotHiddenIndex(a, 1, !0);
      Number.isInteger(l) && l >= 0 ? this.selectRows(l) : this.deselectCell(), this.render(), this.view.adjustElementsSize(!0);
    },
    disabled: !1,
    hidden() {
      return !(this.selection.isSelectedByRowHeader() || this.selection.isSelectedByCorner());
    }
  };
}
function tj(s) {
  const e = [];
  return {
    key: "hidden_rows_show",
    name() {
      const t = e.length > 1 ? 1 : 0;
      return this.getTranslatedPhrase($m, t);
    },
    callback() {
      var t, n;
      if (e.length === 0)
        return;
      let o = e[0], r = e[e.length - 1];
      o = (t = this.rowIndexMapper.getNearestNotHiddenIndex(o - 1, -1)) !== null && t !== void 0 ? t : 0, r = (n = this.rowIndexMapper.getNearestNotHiddenIndex(r + 1, 1)) !== null && n !== void 0 ? n : this.countRows() - 1, s.showRows(e), this.render(), this.view.adjustElementsSize(!0), r - o + 1 === this.countRows() || this.selectRows(o, r);
    },
    disabled: !1,
    hidden() {
      const t = Ye(s.getHiddenRows(), (f) => this.toPhysicalRow(f));
      if (!(this.selection.isSelectedByRowHeader() || this.selection.isSelectedByCorner()) || t.length < 1)
        return !0;
      e.length = 0;
      const n = this.getSelectedRangeLast(), o = n.getTopStartCorner().row, r = n.getBottomEndCorner().row, a = this.rowIndexMapper, l = a.getRenderableFromVisualIndex(o), c = a.getRenderableFromVisualIndex(r), h = a.getNotTrimmedIndexes(), u = [];
      if (o !== r) {
        const f = r - o + 1, g = c - l + 1;
        if (f > g) {
          const m = h.slice(o, r + 1);
          u.push(...m.filter((w) => t.includes(w)));
        }
      } else if (l === 0 && l < o)
        u.push(...h.slice(0, o));
      else if (l === null)
        u.push(...h.slice(0, this.countRows()));
      else {
        const f = this.countRows() - 1, g = a.getRenderableFromVisualIndex(a.getNearestNotHiddenIndex(f, -1));
        c === g && f > r && u.push(...h.slice(r + 1));
      }
      return D(u, (f) => {
        e.push(this.toVisualRow(f));
      }), e.length === 0;
    }
  };
}
function hy(s, e, t) {
  sj(s, e), e.set(s, t);
}
function sj(s, e) {
  if (e.has(s))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function Ns(s, e) {
  var t = iE(s, e, "get");
  return nj(s, t);
}
function nj(s, e) {
  return e.get ? e.get.call(s) : e.value;
}
function Nr(s, e, t) {
  var n = iE(s, e, "set");
  return ij(s, n, t), t;
}
function iE(s, e, t) {
  if (!e.has(s))
    throw new TypeError("attempted to " + t + " private field on non-instance");
  return e.get(s);
}
function ij(s, e, t) {
  if (e.set)
    e.set.call(s, t);
  else {
    if (!e.writable)
      throw new TypeError("attempted to set read only private field");
    e.value = t;
  }
}
me.getSingleton().register("beforeHideRows");
me.getSingleton().register("afterHideRows");
me.getSingleton().register("beforeUnhideRows");
me.getSingleton().register("afterUnhideRows");
const fd = "hiddenRows", oj = 320;
var kn = /* @__PURE__ */ new WeakMap(), dn = /* @__PURE__ */ new WeakMap();
class rj extends at {
  constructor() {
    super(...arguments), hy(this, kn, {
      writable: !0,
      value: {}
    }), hy(this, dn, {
      writable: !0,
      value: null
    });
  }
  static get PLUGIN_KEY() {
    return fd;
  }
  static get PLUGIN_PRIORITY() {
    return oj;
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link HiddenRows#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return !!this.hot.getSettings()[fd];
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    var e = this;
    if (this.enabled)
      return;
    const t = this.hot.getSettings()[fd];
    Ge(t) && (Nr(this, kn, t), wt(t.copyPasteEnabled) && (t.copyPasteEnabled = !0)), Nr(this, dn, new uh()), Ns(this, dn).addLocalHook("init", () => this.onMapInit()), this.hot.rowIndexMapper.registerMap(this.pluginName, Ns(this, dn)), this.addHook("afterContextMenuDefaultOptions", function() {
      return e.onAfterContextMenuDefaultOptions(...arguments);
    }), this.addHook("afterGetCellMeta", (n, o, r) => this.onAfterGetCellMeta(n, o, r)), this.addHook("modifyRowHeight", (n, o) => this.onModifyRowHeight(n, o)), this.addHook("afterGetRowHeader", function() {
      return e.onAfterGetRowHeader(...arguments);
    }), this.addHook("modifyCopyableRange", (n) => this.onModifyCopyableRange(n)), super.enablePlugin();
  }
  /**
   * Updates the plugin's state.
   *
   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
   *  - [`hiddenRows`](@/api/options.md#hiddenrows)
   */
  updatePlugin() {
    this.disablePlugin(), this.enablePlugin(), super.updatePlugin();
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    this.hot.rowIndexMapper.unregisterMap(this.pluginName), Nr(this, kn, {}), super.disablePlugin(), this.resetCellsMeta();
  }
  /**
   * Shows the rows provided in the array.
   *
   * @param {number[]} rows Array of visual row indexes.
   */
  showRows(e) {
    const t = this.getHiddenRows(), n = this.isValidConfig(e);
    let o = t;
    const r = Ns(this, dn).getValues().slice(), a = e.length > 0;
    if (n && a) {
      const c = e.map((h) => this.hot.toPhysicalRow(h));
      D(c, (h) => {
        r[h] = !1;
      }), o = cs(r, (h, u, f) => (u && h.push(this.hot.toVisualRow(f)), h), []);
    }
    this.hot.runHooks("beforeUnhideRows", t, o, n && a) !== !1 && (n && a && Ns(this, dn).setValues(r), this.hot.runHooks("afterUnhideRows", t, o, n && a, n && o.length < t.length));
  }
  /**
   * Shows the row provided as row index (counting from 0).
   *
   * @param {...number} row Visual row index.
   */
  showRow() {
    for (var e = arguments.length, t = new Array(e), n = 0; n < e; n++)
      t[n] = arguments[n];
    this.showRows(t);
  }
  /**
   * Hides the rows provided in the array.
   *
   * @param {number[]} rows Array of visual row indexes.
   */
  hideRows(e) {
    const t = this.getHiddenRows(), n = this.isValidConfig(e);
    let o = t;
    n && (o = Array.from(new Set(t.concat(e)))), this.hot.runHooks("beforeHideRows", t, o, n) !== !1 && (n && this.hot.batchExecution(() => {
      D(e, (a) => {
        Ns(this, dn).setValueAtIndex(this.hot.toPhysicalRow(a), !0);
      });
    }, !0), this.hot.runHooks("afterHideRows", t, o, n, n && o.length > t.length));
  }
  /**
   * Hides the row provided as row index (counting from 0).
   *
   * @param {...number} row Visual row index.
   */
  hideRow() {
    for (var e = arguments.length, t = new Array(e), n = 0; n < e; n++)
      t[n] = arguments[n];
    this.hideRows(t);
  }
  /**
   * Returns an array of visual indexes of hidden rows.
   *
   * @returns {number[]}
   */
  getHiddenRows() {
    return Ye(Ns(this, dn).getHiddenIndexes(), (e) => this.hot.toVisualRow(e));
  }
  /**
   * Checks if the provided row is hidden.
   *
   * @param {number} row Visual row index.
   * @returns {boolean}
   */
  isHidden(e) {
    return Ns(this, dn).getValueAtIndex(this.hot.toPhysicalRow(e)) || !1;
  }
  /**
   * Checks whether all of the provided row indexes are within the bounds of the table.
   *
   * @param {Array} hiddenRows List of hidden visual row indexes.
   * @returns {boolean}
   */
  isValidConfig(e) {
    const t = this.hot.countRows();
    return Array.isArray(e) && e.length > 0 ? e.every((n) => Number.isInteger(n) && n >= 0 && n < t) : !1;
  }
  /**
   * Resets all rendered cells meta.
   *
   * @private
   */
  resetCellsMeta() {
    D(this.hot.getCellsMeta(), (e) => {
      e && (e.skipRowOnPaste = !1);
    });
  }
  /**
   * Adds the additional row height for the hidden row indicators.
   *
   * @private
   * @param {number|undefined} height Row height.
   * @param {number} row Visual row index.
   * @returns {number}
   */
  onModifyRowHeight(e, t) {
    return this.isHidden(t) ? 0 : e;
  }
  /**
   * Sets the copy-related cell meta.
   *
   * @private
   * @param {number} row Visual row index.
   * @param {number} column Visual column index.
   * @param {object} cellProperties Object containing the cell properties.
   */
  onAfterGetCellMeta(e, t, n) {
    if (Ns(this, kn).copyPasteEnabled === !1 && this.isHidden(e) && (n.skipRowOnPaste = !0), this.isHidden(e - 1))
      n.className = n.className || "", n.className.indexOf("afterHiddenRow") === -1 && (n.className += " afterHiddenRow");
    else if (n.className) {
      const o = n.className.split(" ");
      if (o.length > 0) {
        const r = o.indexOf("afterHiddenRow");
        r > -1 && o.splice(r, 1), n.className = o.join(" ");
      }
    }
  }
  /**
   * Modifies the copyable range, accordingly to the provided config.
   *
   * @private
   * @param {Array} ranges An array of objects defining copyable cells.
   * @returns {Array}
   */
  onModifyCopyableRange(e) {
    if (Ns(this, kn).copyPasteEnabled)
      return e;
    const t = [], n = (o, r, a, l) => {
      t.push({
        startRow: o,
        endRow: r,
        startCol: a,
        endCol: l
      });
    };
    return D(e, (o) => {
      let r = !0, a = 0;
      Se(o.startRow, o.endRow, (l) => {
        this.isHidden(l) ? (r || n(a, l - 1, o.startCol, o.endCol), r = !0) : (r && (a = l), l === o.endRow && n(a, l, o.startCol, o.endCol), r = !1);
      });
    }), t;
  }
  /**
   * Adds the needed classes to the headers.
   *
   * @private
   * @param {number} row Visual row index.
   * @param {HTMLElement} TH Header's TH element.
   */
  onAfterGetRowHeader(e, t) {
    if (!Ns(this, kn).indicators || e < 0)
      return;
    const n = [];
    e >= 1 && this.isHidden(e - 1) && n.push("afterHiddenRow"), e < this.hot.countRows() - 1 && this.isHidden(e + 1) && n.push("beforeHiddenRow"), ie(t, n);
  }
  /**
   * Add Show-hide rows to context menu.
   *
   * @private
   * @param {object} options An array of objects containing information about the pre-defined Context Menu items.
   */
  onAfterContextMenuDefaultOptions(e) {
    e.items.push({
      name: ze
    }, ej(this), tj(this));
  }
  /**
   * On map initialized hook callback.
   *
   * @private
   */
  onMapInit() {
    Array.isArray(Ns(this, kn).rows) && this.hideRows(Ns(this, kn).rows);
  }
  /**
   * Destroys the plugin instance.
   */
  destroy() {
    Nr(this, kn, null), Nr(this, dn, null), super.destroy();
  }
}
function aj(s) {
  return {
    key: "freeze_column",
    name() {
      return this.getTranslatedPhrase(um);
    },
    callback(e, t) {
      const [{
        start: {
          col: n
        }
      }] = t;
      s.freezeColumn(n), this.render(), this.view.adjustElementsSize(!0);
    },
    hidden() {
      const e = this.getSelectedRange();
      let t = !1;
      return (e === void 0 || e.length > 1 || e[0].from.col !== e[0].to.col || e[0].from.col <= this.getSettings().fixedColumnsStart - 1) && (t = !0), t;
    }
  };
}
function lj(s) {
  return {
    key: "unfreeze_column",
    name() {
      return this.getTranslatedPhrase(dm);
    },
    callback(e, t) {
      const [{
        start: {
          col: n
        }
      }] = t;
      s.unfreezeColumn(n), this.render(), this.view.adjustElementsSize(!0);
    },
    hidden() {
      const e = this.getSelectedRange();
      let t = !1;
      return (e === void 0 || e.length > 1 || e[0].from.col !== e[0].to.col || e[0].from.col >= this.getSettings().fixedColumnsStart) && (t = !0), t;
    }
  };
}
me.getSingleton().register("beforeColumnFreeze");
me.getSingleton().register("afterColumnFreeze");
me.getSingleton().register("beforeColumnUnfreeze");
me.getSingleton().register("afterColumnUnfreeze");
const uy = "manualColumnFreeze", cj = 110, Lr = /* @__PURE__ */ new WeakMap();
class hj extends at {
  static get PLUGIN_KEY() {
    return uy;
  }
  static get PLUGIN_PRIORITY() {
    return cj;
  }
  constructor(e) {
    super(e), Lr.set(this, {
      afterFirstUse: !1
    });
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link ManualColumnFreeze#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return !!this.hot.getSettings()[uy];
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    this.enabled || (this.addHook("afterContextMenuDefaultOptions", (e) => this.addContextMenuEntry(e)), this.addHook("beforeColumnMove", (e, t) => this.onBeforeColumnMove(e, t)), super.enablePlugin());
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    const e = Lr.get(this);
    e.afterFirstUse = !1, super.disablePlugin();
  }
  /**
   * Updates the plugin's state.
   *
   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
   *  - [`manualColumnFreeze`](@/api/options.md#manualcolumnfreeze)
   */
  updatePlugin() {
    this.disablePlugin(), this.enablePlugin(), super.updatePlugin();
  }
  /**
   * Freezes the specified column (adds it to fixed columns).
   *
   * `freezeColumn()` doesn't re-render the table,
   * so you need to call the `render()` method afterward.
   *
   * @param {number} column Visual column index.
   */
  freezeColumn(e) {
    const t = Lr.get(this), n = this.hot.getSettings(), o = n.fixedColumnsStart < this.hot.countCols() && e > n.fixedColumnsStart - 1;
    t.afterFirstUse || (t.afterFirstUse = !0), this.hot.runHooks("beforeColumnFreeze", e, o) !== !1 && (o && (this.hot.columnIndexMapper.moveIndexes(e, n.fixedColumnsStart), n._fixedColumnsStart += 1), this.hot.runHooks("afterColumnFreeze", e, o));
  }
  /**
   * Unfreezes the given column (remove it from fixed columns and bring to it's previous position).
   *
   * @param {number} column Visual column index.
   */
  unfreezeColumn(e) {
    const t = Lr.get(this), n = this.hot.getSettings(), o = n.fixedColumnsStart > 0 && e <= n.fixedColumnsStart - 1;
    t.afterFirstUse || (t.afterFirstUse = !0), this.hot.runHooks("beforeColumnUnfreeze", e, o) !== !1 && (o && (n._fixedColumnsStart -= 1, this.hot.columnIndexMapper.moveIndexes(e, n.fixedColumnsStart)), this.hot.runHooks("afterColumnUnfreeze", e, o));
  }
  /**
   * Adds the manualColumnFreeze context menu entries.
   *
   * @private
   * @param {object} options Context menu options.
   */
  addContextMenuEntry(e) {
    e.items.push({
      name: "---------"
    }, aj(this), lj(this));
  }
  /**
   * Prevents moving the columns from/to fixed area.
   *
   * @private
   * @param {Array} columns Array of visual column indexes to be moved.
   * @param {number} finalIndex Visual column index, being a start index for the moved columns. Points to where the elements will be placed after the moving action.
   * @returns {boolean|undefined}
   */
  onBeforeColumnMove(e, t) {
    if (Lr.get(this).afterFirstUse) {
      const o = this.hot.getSettings().fixedColumnsStart;
      if (t < o || e.some((r) => r < o))
        return !1;
    }
  }
}
const gd = 0, dy = 1, fy = 2, Ho = "px";
let uj = class {
  constructor(e) {
    this.hot = e, this._element = null, this.state = gd, this.inlineProperty = e.isRtl() ? "right" : "left";
  }
  /**
   * Add created UI elements to table.
   *
   * @param {HTMLElement} wrapper Element which are parent for our UI element.
   */
  appendTo(e) {
    e.appendChild(this._element), this.state = fy;
  }
  /**
   * Method for create UI element. Only create, without append to table.
   */
  build() {
    this.state === gd && (this._element = this.hot.rootDocument.createElement("div"), this.state = dy);
  }
  /**
   * Method for remove UI element.
   */
  destroy() {
    this.isAppended() && this._element.parentElement.removeChild(this._element), this._element = null, this.state = gd;
  }
  /**
   * Check if UI element are appended.
   *
   * @returns {boolean}
   */
  isAppended() {
    return this.state === fy;
  }
  /**
   * Check if UI element are built.
   *
   * @returns {boolean}
   */
  isBuilt() {
    return this.state >= dy;
  }
  /**
   * Setter for position.
   *
   * @param {number} top New top position of the element.
   * @param {number} inlinePosition New left/right (depends on LTR/RTL document mode) position of the element.
   */
  setPosition(e, t) {
    ys(e) && (this._element.style.top = e + Ho), ys(t) && (this._element.style[this.inlineProperty] = t + Ho);
  }
  /**
   * Getter for the element position.
   *
   * @returns {object} Object contains left and top position of the element.
   */
  getPosition() {
    const e = this._element.style;
    return {
      top: e.top ? parseInt(e.top, 10) : 0,
      start: e[this.inlineProperty] ? parseInt(e[this.inlineProperty], 10) : 0
    };
  }
  /**
   * Setter for the element size.
   *
   * @param {number} width New width of the element.
   * @param {number} height New height of the element.
   */
  setSize(e, t) {
    ys(e) && (this._element.style.width = e + Ho), ys(t) && (this._element.style.height = t + Ho);
  }
  /**
   * Getter for the element position.
   *
   * @returns {object} Object contains height and width of the element.
   */
  getSize() {
    return {
      width: this._element.style.width ? parseInt(this._element.style.width, 10) : 0,
      height: this._element.style.height ? parseInt(this._element.style.height, 10) : 0
    };
  }
  /**
   * Setter for the element offset. Offset means marginTop and marginLeft of the element.
   *
   * @param {number} top New margin top of the element.
   * @param {number} inlineOffset New margin left/right (depends on LTR/RTL document mode) of the element.
   */
  setOffset(e, t) {
    ys(e) && (this._element.style.marginTop = e + Ho), ys(t) && (this._element.style[`margin${Js(this.inlineProperty)}`] = t + Ho);
  }
  /**
   * Getter for the element offset.
   *
   * @returns {object} Object contains top and left offset of the element.
   */
  getOffset() {
    const e = this._element.style, t = `margin${Js(this.inlineProperty)}`;
    return {
      top: e.marginTop ? parseInt(e.marginTop, 10) : 0,
      start: e[t] ? parseInt(e[t], 10) : 0
    };
  }
};
const oE = uj, dj = "ht__manualColumnMove--backlight";
let fj = class extends oE {
  /**
   * Custom className on build process.
   */
  build() {
    super.build(), ie(this._element, dj);
  }
};
const gj = fj, mj = "ht__manualColumnMove--guideline";
let pj = class extends oE {
  /**
   * Custom className on build process.
   */
  build() {
    super.build(), ie(this._element, mj);
  }
};
const wj = pj;
me.getSingleton().register("beforeColumnMove");
me.getSingleton().register("afterColumnMove");
const md = "manualColumnMove", Cj = 120, ri = /* @__PURE__ */ new WeakMap(), gy = "ht__manualColumnMove", Nl = "show-ui", pd = "on-moving--columns", wd = "after-selection--columns";
class vj extends at {
  static get PLUGIN_KEY() {
    return md;
  }
  static get PLUGIN_PRIORITY() {
    return Cj;
  }
  constructor(e) {
    super(e), ri.set(this, {
      columnsToMove: [],
      countCols: 0,
      fixedColumns: 0,
      pressed: void 0,
      target: {
        eventPageX: void 0,
        coords: void 0,
        TD: void 0,
        col: void 0
      },
      cachedDropIndex: void 0
    }), this.eventManager = new Dt(this), this.backlight = new gj(e), this.guideline = new wj(e);
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link ManualColumnMove#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return !!this.hot.getSettings()[md];
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    var e = this;
    this.enabled || (this.addHook("beforeOnCellMouseDown", function() {
      return e.onBeforeOnCellMouseDown(...arguments);
    }), this.addHook("beforeOnCellMouseOver", function() {
      return e.onBeforeOnCellMouseOver(...arguments);
    }), this.addHook("afterScrollVertically", () => this.onAfterScrollVertically()), this.addHook("afterLoadData", function() {
      return e.onAfterLoadData(...arguments);
    }), this.buildPluginUI(), this.registerEvents(), ie(this.hot.rootElement, gy), super.enablePlugin());
  }
  /**
   * Updates the plugin's state.
   *
   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
   *  - [`manualColumnMove`](@/api/options.md#manualcolumnmove)
   */
  updatePlugin() {
    this.disablePlugin(), this.enablePlugin(), this.moveBySettingsOrLoad(), super.updatePlugin();
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    $e(this.hot.rootElement, gy), this.unregisterEvents(), this.backlight.destroy(), this.guideline.destroy(), super.disablePlugin();
  }
  /**
   * Moves a single column.
   *
   * @param {number} column Visual column index to be moved.
   * @param {number} finalIndex Visual column index, being a start index for the moved columns. Points to where the elements will be placed after the moving action.
   * To check the visualization of the final index, please take a look at [documentation](@/guides/columns/column-moving.md#drag-and-move-actions-of-manualcolumnmove-plugin).
   * @fires Hooks#beforeColumnMove
   * @fires Hooks#afterColumnMove
   * @returns {boolean}
   */
  moveColumn(e, t) {
    return this.moveColumns([e], t);
  }
  /**
   * Moves a multiple columns.
   *
   * @param {Array} columns Array of visual column indexes to be moved.
   * @param {number} finalIndex Visual column index, being a start index for the moved columns. Points to where the elements will be placed after the moving action.
   * To check the visualization of the final index, please take a look at [documentation](@/guides/columns/column-moving.md#drag-and-move-actions-of-manualcolumnmove-plugin).
   * @fires Hooks#beforeColumnMove
   * @fires Hooks#afterColumnMove
   * @returns {boolean}
   */
  moveColumns(e, t) {
    const n = ri.get(this), o = n.cachedDropIndex, r = this.isMovePossible(e, t), a = this.hot.runHooks("beforeColumnMove", e, t, o, r);
    if (n.cachedDropIndex = void 0, a === !1)
      return;
    r && this.hot.columnIndexMapper.moveIndexes(e, t);
    const l = r && this.isColumnOrderChanged(e, t);
    return this.hot.runHooks("afterColumnMove", e, t, o, r, l), l;
  }
  /**
   * Drag a single column to drop index position.
   *
   * @param {number} column Visual column index to be dragged.
   * @param {number} dropIndex Visual column index, being a drop index for the moved columns. Points to where we are going to drop the moved elements.
   * To check visualization of drop index please take a look at [documentation](@/guides/columns/column-moving.md#drag-and-move-actions-of-manualcolumnmove-plugin).
   * @fires Hooks#beforeColumnMove
   * @fires Hooks#afterColumnMove
   * @returns {boolean}
   */
  dragColumn(e, t) {
    return this.dragColumns([e], t);
  }
  /**
   * Drag multiple columns to drop index position.
   *
   * @param {Array} columns Array of visual column indexes to be dragged.
   * @param {number} dropIndex Visual column index, being a drop index for the moved columns. Points to where we are going to drop the moved elements.
   * To check visualization of drop index please take a look at [documentation](@/guides/columns/column-moving.md#drag-and-move-actions-of-manualcolumnmove-plugin).
   * @fires Hooks#beforeColumnMove
   * @fires Hooks#afterColumnMove
   * @returns {boolean}
   */
  dragColumns(e, t) {
    const n = this.countFinalIndex(e, t), o = ri.get(this);
    return o.cachedDropIndex = t, this.moveColumns(e, n);
  }
  /**
   * Indicates if it's possible to move columns to the desired position. Some of the actions aren't
   * possible, i.e. You can’t move more than one element to the last position.
   *
   * @param {Array} movedColumns Array of visual column indexes to be moved.
   * @param {number} finalIndex Visual column index, being a start index for the moved columns. Points to where the elements will be placed after the moving action.
   * To check the visualization of the final index, please take a look at [documentation](@/guides/columns/column-moving.md#drag-and-move-actions-of-manualcolumnmove-plugin).
   * @returns {boolean}
   */
  isMovePossible(e, t) {
    const n = this.hot.columnIndexMapper.getNotTrimmedIndexesLength(), o = e.length + t > n, r = t < 0, a = e.some((c) => c < 0), l = e.some((c) => c >= n);
    return !(o || r || a || l);
  }
  /**
   * Indicates if order of columns was changed.
   *
   * @private
   * @param {Array} movedColumns Array of visual column indexes to be moved.
   * @param {number} finalIndex Visual column index, being a start index for the moved columns. Points to where the elements will be placed after the moving action.
   * To check the visualization of the final index, please take a look at [documentation](@/guides/columns/column-moving.md#drag-and-move-actions-of-manualcolumnmove-plugin).
   * @returns {boolean}
   */
  isColumnOrderChanged(e, t) {
    return e.some((n, o) => n - o !== t);
  }
  /**
   * Count the final column index from the drop index.
   *
   * @private
   * @param {Array} movedColumns Array of visual column indexes to be moved.
   * @param {number} dropIndex Visual column index, being a drop index for the moved columns.
   * @returns {number} Visual column index, being a start index for the moved columns.
   */
  countFinalIndex(e, t) {
    const n = cs(e, (o, r) => (r < t && (o += 1), o), 0);
    return t - n;
  }
  /**
   * Gets the sum of the widths of columns in the provided range.
   *
   * @private
   * @param {number} fromColumn Visual column index.
   * @param {number} toColumn Visual column index.
   * @returns {number}
   */
  getColumnsWidth(e, t) {
    const n = this.hot.columnIndexMapper;
    let o = 0;
    for (let r = e; r <= t; r += 1) {
      const a = n.getRenderableFromVisualIndex(r);
      r < 0 ? o += this.hot.view._wt.wtViewport.getRowHeaderWidth() || 0 : a !== null && (o += this.hot.view._wt.wtTable.getStretchedColumnWidth(a) || 0);
    }
    return o;
  }
  /**
   * Loads initial settings when persistent state is saved or when plugin was initialized as an array.
   *
   * @private
   */
  moveBySettingsOrLoad() {
    const e = this.hot.getSettings()[md];
    if (Array.isArray(e))
      this.moveColumns(e, 0);
    else if (e !== void 0) {
      const t = this.persistentStateLoad();
      t.length && this.moveColumns(t, 0);
    }
  }
  /**
   * Checks if the provided column is in the fixedColumnsTop section.
   *
   * @private
   * @param {number} column Visual column index to check.
   * @returns {boolean}
   */
  isFixedColumnsStart(e) {
    return e < this.hot.getSettings().fixedColumnsStart;
  }
  /**
   * Saves the manual column positions to the persistent state (the {@link Options#persistentState} option has to be enabled).
   *
   * @private
   * @fires Hooks#persistentStateSave
   */
  persistentStateSave() {
    this.hot.runHooks("persistentStateSave", "manualColumnMove", this.hot.columnIndexMapper.getIndexesSequence());
  }
  /**
   * Loads the manual column positions from the persistent state (the {@link Options#persistentState} option has to be enabled).
   *
   * @private
   * @fires Hooks#persistentStateLoad
   * @returns {Array} Stored state.
   */
  persistentStateLoad() {
    const e = {};
    return this.hot.runHooks("persistentStateLoad", "manualColumnMove", e), e.value ? e.value : [];
  }
  /**
   * Prepares an array of indexes based on actual selection.
   *
   * @private
   * @param {number} start The start index.
   * @param {number} end The end index.
   * @returns {Array}
   */
  prepareColumnsToMoving(e, t) {
    const n = [];
    return Se(e, t, (o) => {
      n.push(o);
    }), n;
  }
  /**
   * Update the UI visual position.
   *
   * @private
   */
  refreshPositions() {
    const e = ri.get(this), t = this.hot.view.getFirstFullyVisibleColumn();
    this.isFixedColumnsStart(e.hoveredColumn) && t > 0 && this.hot.scrollViewportTo(void 0, this.hot.columnIndexMapper.getNearestNotHiddenIndex(t - 1, -1));
    const n = this.hot.view._wt.wtTable, o = this.hot.view._wt.wtOverlays.scrollableElement, r = typeof o.scrollX == "number" ? o.scrollX : o.scrollLeft;
    let a = this.hot.view.THEAD.offsetLeft + this.getColumnsWidth(0, e.hoveredColumn - 1);
    const l = n.hider.offsetWidth, c = n.TBODY.offsetLeft, h = this.backlight.getOffset().start, u = this.backlight.getSize().width;
    let f = 0, g = 0;
    if (this.hot.isRtl()) {
      const C = this.hot.rootWindow, S = ht(this.hot.rootElement), x = C.innerWidth - e.rootElementOffset - S;
      g = C.innerWidth - e.target.eventPageX - x - (o.scrollX === void 0 ? r : 0);
    } else
      g = e.target.eventPageX - (e.rootElementOffset - (o.scrollX === void 0 ? r : 0));
    if (e.hasRowHeaders && (f = this.hot.view._wt.wtOverlays.inlineStartOverlay.clone.wtTable.getColumnHeader(-1).offsetWidth), this.isFixedColumnsStart(e.hoveredColumn) && (a += r), a += f, e.hoveredColumn < 0)
      e.fixedColumnsStart > 0 ? e.target.col = 0 : e.target.col = t > 0 ? t - 1 : t;
    else if (e.target.TD.offsetWidth / 2 + a <= g) {
      const C = e.hoveredColumn >= e.countCols ? e.countCols - 1 : e.hoveredColumn;
      e.target.col = C + 1, a += e.target.TD.offsetWidth;
    } else
      e.target.col = e.hoveredColumn;
    let m = g, w = a;
    g + u + h >= l ? m = l - u - h : g + h < c + f && (m = c + f + Math.abs(h)), a >= l - 1 ? w = l - 1 : w === 0 ? w = 1 : o.scrollX !== void 0 && e.hoveredColumn < e.fixedColumnsStart && (w -= e.rootElementOffset <= o.scrollX ? e.rootElementOffset : 0), this.backlight.setPosition(null, m), this.guideline.setPosition(null, w);
  }
  /**
   * Binds the events used by the plugin.
   *
   * @private
   */
  registerEvents() {
    const {
      documentElement: e
    } = this.hot.rootDocument;
    this.eventManager.addEventListener(e, "mousemove", (t) => this.onMouseMove(t)), this.eventManager.addEventListener(e, "mouseup", () => this.onMouseUp());
  }
  /**
   * Unbinds the events used by the plugin.
   *
   * @private
   */
  unregisterEvents() {
    this.eventManager.clear();
  }
  /**
   * Change the behavior of selection / dragging.
   *
   * @private
   * @param {MouseEvent} event `mousedown` event properties.
   * @param {CellCoords} coords Visual cell coordinates where was fired event.
   * @param {HTMLElement} TD Cell represented as HTMLElement.
   * @param {object} controller An object with properties `row`, `column` and `cell`. Each property contains
   *                            a boolean value that allows or disallows changing the selection for that particular area.
   */
  onBeforeOnCellMouseDown(e, t, n, o) {
    const r = this.hot.view._wt.wtTable, a = this.hot.selection.isSelectedByColumnHeader(), l = this.hot.getSelectedRangeLast(), c = ri.get(this), h = Ne(e.target, "sortAction");
    if (!l || !a || c.pressed || e.button !== 0 || h) {
      c.pressed = !1, c.columnsToMove.length = 0, $e(this.hot.rootElement, [pd, Nl]);
      return;
    }
    const u = this.guideline.isBuilt() && !this.guideline.isAppended(), f = this.backlight.isBuilt() && !this.backlight.isAppended();
    u && f && (this.guideline.appendTo(r.hider), this.backlight.appendTo(r.hider));
    const {
      from: g,
      to: m
    } = l, w = Math.min(g.col, m.col), C = Math.max(g.col, m.col);
    if (t.row < 0 && t.col >= w && t.col <= C) {
      o.column = !0, c.pressed = !0, c.target.eventPageX = e.pageX, c.target.eventOffsetX = e.offsetX, c.hoveredColumn = t.col, c.target.TD = n, c.target.col = t.col, c.columnsToMove = this.prepareColumnsToMoving(w, C), c.hasRowHeaders = !!this.hot.getSettings().rowHeaders, c.countCols = this.hot.countCols(), c.fixedColumnsStart = this.hot.getSettings().fixedColumnsStart, c.rootElementOffset = Wt(this.hot.rootElement).left;
      const S = c.hasRowHeaders ? -1 : 0, x = r.holder.scrollTop + r.getColumnHeaderHeight(0) + 1, T = t.col < c.fixedColumnsStart, M = Math.abs(this.hot.view._wt.wtOverlays.inlineStartOverlay.getScrollPosition()), _ = Math.abs(e.offsetX - (this.hot.isRtl() ? e.target.offsetWidth : 0)), P = this.getColumnsWidth(w, t.col - 1) + _, j = this.getColumnsWidth(S, w - 1) + (T ? M : 0) + P;
      this.backlight.setPosition(x, j), this.backlight.setSize(this.getColumnsWidth(w, C), r.hider.offsetHeight - x), this.backlight.setOffset(null, -P), ie(this.hot.rootElement, pd);
    } else
      $e(this.hot.rootElement, wd), c.pressed = !1, c.columnsToMove.length = 0;
  }
  /**
   * 'mouseMove' event callback. Fired when pointer move on document.documentElement.
   *
   * @private
   * @param {MouseEvent} event `mousemove` event properties.
   */
  onMouseMove(e) {
    const t = ri.get(this);
    if (t.pressed) {
      if (e.target === this.backlight.element) {
        const n = this.backlight.getSize().width;
        this.backlight.setSize(0), setTimeout(function() {
          this.backlight.setPosition(n);
        });
      }
      t.target.eventPageX = e.pageX, this.refreshPositions();
    }
  }
  /**
   * 'beforeOnCellMouseOver' hook callback. Fired when pointer was over cell.
   *
   * @private
   * @param {MouseEvent} event `mouseover` event properties.
   * @param {CellCoords} coords Visual cell coordinates where was fired event.
   * @param {HTMLElement} TD Cell represented as HTMLElement.
   * @param {object} controller An object with properties `row`, `column` and `cell`. Each property contains
   *                            a boolean value that allows or disallows changing the selection for that particular area.
   */
  onBeforeOnCellMouseOver(e, t, n, o) {
    const r = this.hot.getSelectedRangeLast(), a = ri.get(this);
    !r || !a.pressed || (a.columnsToMove.indexOf(t.col) > -1 ? $e(this.hot.rootElement, Nl) : ie(this.hot.rootElement, Nl), o.row = !0, o.column = !0, o.cell = !0, a.hoveredColumn = t.col, a.target.TD = n);
  }
  /**
   * `onMouseUp` hook callback.
   *
   * @private
   */
  onMouseUp() {
    const e = ri.get(this), t = e.target.col, n = e.columnsToMove.length;
    if (e.hoveredColumn = void 0, e.pressed = !1, e.backlightWidth = 0, $e(this.hot.rootElement, [pd, Nl, wd]), this.hot.selection.isSelectedByColumnHeader() && ie(this.hot.rootElement, wd), n < 1 || t === void 0)
      return;
    const o = e.columnsToMove[0], r = this.hot.toPhysicalColumn(o), a = this.dragColumns(e.columnsToMove, t);
    if (e.columnsToMove.length = 0, a === !0) {
      this.persistentStateSave(), this.hot.render(), this.hot.view.adjustElementsSize(!0);
      const l = this.hot.toVisualColumn(r), c = l + n - 1;
      this.hot.selectColumns(l, c);
    }
  }
  /**
   * `afterScrollHorizontally` hook callback. Fired the table was scrolled horizontally.
   *
   * @private
   */
  onAfterScrollVertically() {
    const e = this.hot.view._wt.wtTable, t = e.getColumnHeaderHeight(0) + 1, n = e.holder.scrollTop, o = t + n;
    this.backlight.setPosition(o), this.backlight.setSize(null, e.hider.offsetHeight - o);
  }
  /**
   * Builds the plugin's UI.
   *
   * @private
   */
  buildPluginUI() {
    this.backlight.build(), this.guideline.build();
  }
  /**
   * Callback for the `afterLoadData` hook.
   *
   * @private
   */
  onAfterLoadData() {
    this.moveBySettingsOrLoad();
  }
  /**
   * Destroys the plugin instance.
   */
  destroy() {
    this.backlight.destroy(), this.guideline.destroy(), super.destroy();
  }
}
const Ll = "manualColumnResize", yj = 130, my = "manualColumnWidths", Cd = /* @__PURE__ */ new WeakMap();
class Sj extends at {
  static get PLUGIN_KEY() {
    return Ll;
  }
  static get PLUGIN_PRIORITY() {
    return yj;
  }
  constructor(e) {
    super(e);
    const {
      rootDocument: t
    } = this.hot;
    this.currentTH = null, this.currentCol = null, this.selectedCols = [], this.currentWidth = null, this.newSize = null, this.startY = null, this.startWidth = null, this.startOffset = null, this.handle = t.createElement("DIV"), this.guide = t.createElement("DIV"), this.eventManager = new Dt(this), this.pressed = null, this.isTriggeredByRMB = !1, this.dblclick = 0, this.autoresizeTimeout = null, this.columnWidthsMap = void 0, Cd.set(this, {
      config: void 0
    }), ie(this.handle, "manualColumnResizer"), ie(this.guide, "manualColumnResizerGuide");
  }
  /**
   * @private
   * @returns {string}
   */
  get inlineDir() {
    return this.hot.isRtl() ? "right" : "left";
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link ManualColumnResize#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return this.hot.getSettings()[Ll];
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    this.enabled || (this.columnWidthsMap = new bi(), this.columnWidthsMap.addLocalHook("init", () => this.onMapInit()), this.hot.columnIndexMapper.registerMap(this.pluginName, this.columnWidthsMap), this.addHook("modifyColWidth", (e, t) => this.onModifyColWidth(e, t)), this.addHook("beforeStretchingColumnWidth", (e, t) => this.onBeforeStretchingColumnWidth(e, t)), this.addHook("beforeColumnResize", (e, t, n) => this.onBeforeColumnResize(e, t, n)), this.bindEvents(), super.enablePlugin());
  }
  /**
   * Updates the plugin's state.
   *
   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
   *  - [`manualColumnResize`](@/api/options.md#manualcolumnresize)
   */
  updatePlugin() {
    this.disablePlugin(), this.enablePlugin(), super.updatePlugin();
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    const e = Cd.get(this);
    e.config = this.columnWidthsMap.getValues(), this.hot.columnIndexMapper.unregisterMap(this.pluginName), super.disablePlugin();
  }
  /**
   * Saves the current sizes using the persistentState plugin (the {@link Options#persistentState} option has to be enabled).
   *
   * @fires Hooks#persistentStateSave
   */
  saveManualColumnWidths() {
    this.hot.runHooks("persistentStateSave", my, this.columnWidthsMap.getValues());
  }
  /**
   * Loads the previously saved sizes using the persistentState plugin (the {@link Options#persistentState} option has to be enabled).
   *
   * @returns {Array}
   * @fires Hooks#persistentStateLoad
   */
  loadManualColumnWidths() {
    const e = {};
    return this.hot.runHooks("persistentStateLoad", my, e), e.value;
  }
  /**
   * Sets the new width for specified column index.
   *
   * @param {number} column Visual column index.
   * @param {number} width Column width (no less than 20px).
   * @returns {number} Returns new width.
   */
  setManualSize(e, t) {
    const n = Math.max(t, 20), o = this.hot.toPhysicalColumn(e);
    return this.columnWidthsMap.setValueAtIndex(o, n), n;
  }
  /**
   * Clears the cache for the specified column index.
   *
   * @param {number} column Visual column index.
   */
  clearManualSize(e) {
    const t = this.hot.toPhysicalColumn(e);
    this.columnWidthsMap.setValueAtIndex(t, null);
  }
  /**
   * Callback to call on map's `init` local hook.
   *
   * @private
   */
  onMapInit() {
    const e = Cd.get(this), t = this.hot.getSettings()[Ll], n = this.loadManualColumnWidths();
    typeof n < "u" ? this.hot.batchExecution(() => {
      n.forEach((o, r) => {
        this.columnWidthsMap.setValueAtIndex(r, o);
      });
    }, !0) : Array.isArray(t) ? (this.hot.batchExecution(() => {
      t.forEach((o, r) => {
        this.columnWidthsMap.setValueAtIndex(r, o);
      });
    }, !0), e.config = t) : t === !0 && Array.isArray(e.config) && this.hot.batchExecution(() => {
      e.config.forEach((o, r) => {
        this.columnWidthsMap.setValueAtIndex(r, o);
      });
    }, !0);
  }
  /**
   * Set the resize handle position.
   *
   * @private
   * @param {HTMLCellElement} TH TH HTML element.
   */
  setupHandlePosition(e) {
    if (!e.parentNode)
      return;
    this.currentTH = e;
    const {
      _wt: t
    } = this.hot.view, n = t.wtTable.getCoords(this.currentTH), o = n.col;
    if (o < 0)
      return;
    const r = At(this.currentTH), a = this.currentTH.getBoundingClientRect(), l = o < t.getSetting("fixedColumnsStart");
    let c;
    l && (c = t.wtOverlays.topInlineStartCornerOverlay.getRelativeCellPosition(this.currentTH, n.row, n.col)), c || (c = t.wtOverlays.topOverlay.getRelativeCellPosition(this.currentTH, n.row, n.col)), this.currentCol = this.hot.columnIndexMapper.getVisualFromRenderableIndex(o), this.selectedCols = [];
    const h = this.hot.selection.isSelectedByCorner() || this.hot.selection.isSelectedByColumnHeader();
    if (this.hot.selection.isSelected() && h) {
      const u = this.hot.getSelectedRange();
      D(u, (f) => {
        const g = f.getTopStartCorner().col, m = f.getBottomEndCorner().col;
        Se(g, m, (w) => {
          this.selectedCols.includes(w) || this.selectedCols.push(w);
        });
      });
    }
    this.selectedCols.includes(this.currentCol) || (this.selectedCols = [this.currentCol]), this.startOffset = c.start - 6, this.startWidth = parseInt(a.width, 10), this.handle.style.top = `${c.top}px`, this.handle.style[this.inlineDir] = `${this.startOffset + this.startWidth}px`, this.handle.style.height = `${r}px`, this.hot.rootElement.appendChild(this.handle);
  }
  /**
   * Refresh the resize handle position.
   *
   * @private
   */
  refreshHandlePosition() {
    this.handle.style[this.inlineDir] = `${this.startOffset + this.currentWidth}px`;
  }
  /**
   * Sets the resize guide position.
   *
   * @private
   */
  setupGuidePosition() {
    const e = parseInt(At(this.handle), 10), t = parseInt(this.handle.style.top, 10) + e, n = parseInt(this.hot.view.maximumVisibleElementHeight(0), 10);
    ie(this.handle, "active"), ie(this.guide, "active"), this.guide.style.top = `${t}px`, this.refreshGuidePosition(), this.guide.style.height = `${n - e}px`, this.hot.rootElement.appendChild(this.guide);
  }
  /**
   * Refresh the resize guide position.
   *
   * @private
   */
  refreshGuidePosition() {
    this.guide.style[this.inlineDir] = this.handle.style[this.inlineDir];
  }
  /**
   * Hides both the resize handle and resize guide.
   *
   * @private
   */
  hideHandleAndGuide() {
    $e(this.handle, "active"), $e(this.guide, "active");
  }
  /**
   * Checks if provided element is considered a column header.
   *
   * @private
   * @param {HTMLElement} element HTML element.
   * @returns {boolean}
   */
  checkIfColumnHeader(e) {
    return !!ji(e, ["THEAD"], this.hot.rootElement);
  }
  /**
   * Gets the TH element from the provided element.
   *
   * @private
   * @param {HTMLElement} element HTML element.
   * @returns {HTMLElement}
   */
  getClosestTHParent(e) {
    return e.tagName !== "TABLE" ? e.tagName === "TH" ? e : this.getClosestTHParent(e.parentNode) : null;
  }
  /**
   * 'mouseover' event callback - set the handle position.
   *
   * @private
   * @param {MouseEvent} event The mouse event.
   */
  onMouseOver(e) {
    if (!Lb(e.target) && this.isTriggeredByRMB !== !0 && this.checkIfColumnHeader(e.target)) {
      const t = this.getClosestTHParent(e.target);
      if (!t)
        return;
      const n = t.getAttribute("colspan");
      t && (n === null || n === "1") && (this.pressed || this.setupHandlePosition(t));
    }
  }
  /**
   * Auto-size row after doubleclick - callback.
   *
   * @private
   * @fires Hooks#beforeColumnResize
   * @fires Hooks#afterColumnResize
   */
  afterMouseDownTimeout() {
    const e = () => {
      this.hot.forceFullRender = !0, this.hot.view.render(), this.hot.view.adjustElementsSize(!0);
    }, t = (n, o) => {
      const r = this.hot.runHooks("beforeColumnResize", this.newSize, n, !0);
      r !== void 0 && (this.newSize = r), this.hot.getSettings().stretchH === "all" ? this.clearManualSize(n) : this.setManualSize(n, this.newSize), this.saveManualColumnWidths(), this.hot.runHooks("afterColumnResize", this.newSize, n, !0), o && e();
    };
    this.dblclick >= 2 && (this.selectedCols.length > 1 ? (D(this.selectedCols, (o) => {
      t(o);
    }), e()) : D(this.selectedCols, (o) => {
      t(o, !0);
    })), this.dblclick = 0, this.autoresizeTimeout = null;
  }
  /**
   * 'mousedown' event callback.
   *
   * @private
   * @param {MouseEvent} event The mouse event.
   */
  onMouseDown(e) {
    Ne(e.target, "manualColumnResizer") && (this.setupHandlePosition(this.currentTH), this.setupGuidePosition(), this.pressed = !0, this.autoresizeTimeout === null && (this.autoresizeTimeout = setTimeout(() => this.afterMouseDownTimeout(), 500), this.hot._registerTimeout(this.autoresizeTimeout)), this.dblclick += 1, this.startX = e.pageX, this.newSize = this.startWidth);
  }
  /**
   * 'mousemove' event callback - refresh the handle and guide positions, cache the new column width.
   *
   * @private
   * @param {MouseEvent} event The mouse event.
   */
  onMouseMove(e) {
    if (this.pressed) {
      const t = (e.pageX - this.startX) * this.hot.getDirectionFactor();
      this.currentWidth = this.startWidth + t, D(this.selectedCols, (n) => {
        this.newSize = this.setManualSize(n, this.currentWidth);
      }), this.refreshHandlePosition(), this.refreshGuidePosition();
    }
  }
  /**
   * 'mouseup' event callback - apply the column resizing.
   *
   * @private
   *
   * @fires Hooks#beforeColumnResize
   * @fires Hooks#afterColumnResize
   */
  onMouseUp() {
    const e = () => {
      this.hot.forceFullRender = !0, this.hot.view.render(), this.hot.view.adjustElementsSize(!0);
    }, t = (n, o) => {
      this.hot.runHooks("beforeColumnResize", this.newSize, n, !1), o && e(), this.saveManualColumnWidths(), this.hot.runHooks("afterColumnResize", this.newSize, n, !1);
    };
    this.pressed && (this.hideHandleAndGuide(), this.pressed = !1, this.newSize !== this.startWidth && (this.selectedCols.length > 1 ? (D(this.selectedCols, (o) => {
      t(o);
    }), e()) : D(this.selectedCols, (o) => {
      t(o, !0);
    })), this.setupHandlePosition(this.currentTH));
  }
  /**
   * Callback for "contextmenu" event triggered on element showing move handle. It removes handle and guide elements.
   *
   * @private
   */
  onContextMenu() {
    this.hideHandleAndGuide(), this.hot.rootElement.removeChild(this.handle), this.hot.rootElement.removeChild(this.guide), this.pressed = !1, this.isTriggeredByRMB = !0, this.hot._registerImmediate(() => {
      this.isTriggeredByRMB = !1;
    });
  }
  /**
   * Binds the mouse events.
   *
   * @private
   */
  bindEvents() {
    const {
      rootWindow: e,
      rootElement: t
    } = this.hot;
    this.eventManager.addEventListener(t, "mouseover", (n) => this.onMouseOver(n)), this.eventManager.addEventListener(t, "mousedown", (n) => this.onMouseDown(n)), this.eventManager.addEventListener(e, "mousemove", (n) => this.onMouseMove(n)), this.eventManager.addEventListener(e, "mouseup", () => this.onMouseUp()), this.eventManager.addEventListener(this.handle, "contextmenu", () => this.onContextMenu());
  }
  /**
   * Modifies the provided column width, based on the plugin settings.
   *
   * @private
   * @param {number} width Column width.
   * @param {number} column Visual column index.
   * @returns {number}
   */
  onModifyColWidth(e, t) {
    let n = e;
    if (this.enabled) {
      const o = this.hot.toPhysicalColumn(t), r = this.columnWidthsMap.getValueAtIndex(o);
      this.hot.getSettings()[Ll] && r && (n = r);
    }
    return n;
  }
  /**
   * Modifies the provided column stretched width. This hook decides if specified column should be stretched or not.
   *
   * @private
   * @param {number} stretchedWidth Stretched width.
   * @param {number} column Visual column index.
   * @returns {number}
   */
  onBeforeStretchingColumnWidth(e, t) {
    let n = this.columnWidthsMap.getValueAtIndex(t);
    return n === null && (n = e), n;
  }
  /**
   * `beforeColumnResize` hook callback.
   *
   * @private
   */
  onBeforeColumnResize() {
    this.hot.view._wt.wtViewport.resetHasOversizedColumnHeadersMarked();
  }
  /**
   * Destroys the plugin instance.
   */
  destroy() {
    super.destroy();
  }
}
const vd = 0, py = 1, wy = 2, ko = "px";
let bj = class {
  constructor(e) {
    this.hot = e, this._element = null, this.state = vd;
  }
  /**
   * Add created UI elements to table.
   *
   * @param {HTMLElement} wrapper Element which are parent for our UI element.
   */
  appendTo(e) {
    e.appendChild(this._element), this.state = wy;
  }
  /**
   * Method for create UI element. Only create, without append to table.
   */
  build() {
    this.state === vd && (this._element = this.hot.rootDocument.createElement("div"), this.state = py);
  }
  /**
   * Method for remove UI element.
   */
  destroy() {
    this.isAppended() && this._element.parentElement.removeChild(this._element), this._element = null, this.state = vd;
  }
  /**
   * Check if UI element are appended.
   *
   * @returns {boolean}
   */
  isAppended() {
    return this.state === wy;
  }
  /**
   * Check if UI element are built.
   *
   * @returns {boolean}
   */
  isBuilt() {
    return this.state >= py;
  }
  /**
   * Setter for position.
   *
   * @param {number} top New top position of the element.
   * @param {number} left New left position of the element.
   */
  setPosition(e, t) {
    e !== void 0 && (this._element.style.top = e + ko), t !== void 0 && (this._element.style.left = t + ko);
  }
  /**
   * Getter for the element position.
   *
   * @returns {object} Object contains left and top position of the element.
   */
  getPosition() {
    return {
      top: this._element.style.top ? parseInt(this._element.style.top, 10) : 0,
      left: this._element.style.left ? parseInt(this._element.style.left, 10) : 0
    };
  }
  /**
   * Setter for the element size.
   *
   * @param {number} width New width of the element.
   * @param {number} height New height of the element.
   */
  setSize(e, t) {
    e && (this._element.style.width = e + ko), t && (this._element.style.height = t + ko);
  }
  /**
   * Getter for the element position.
   *
   * @returns {object} Object contains height and width of the element.
   */
  getSize() {
    return {
      width: this._element.style.width ? parseInt(this._element.style.width, 10) : 0,
      height: this._element.style.height ? parseInt(this._element.style.height, 10) : 0
    };
  }
  /**
   * Setter for the element offset. Offset means marginTop and marginLeft of the element.
   *
   * @param {number} top New margin top of the element.
   * @param {number} left New margin left of the element.
   */
  setOffset(e, t) {
    e && (this._element.style.marginTop = e + ko), t && (this._element.style.marginLeft = t + ko);
  }
  /**
   * Getter for the element offset.
   *
   * @returns {object} Object contains top and left offset of the element.
   */
  getOffset() {
    return {
      top: this._element.style.marginTop ? parseInt(this._element.style.marginTop, 10) : 0,
      left: this._element.style.marginLeft ? parseInt(this._element.style.marginLeft, 10) : 0
    };
  }
};
const rE = bj, Rj = "ht__manualRowMove--backlight";
class Ej extends rE {
  /**
   * Custom className on build process.
   */
  build() {
    super.build(), ie(this._element, Rj);
  }
}
const xj = Ej, Tj = "ht__manualRowMove--guideline";
class Mj extends rE {
  /**
   * Custom className on build process.
   */
  build() {
    super.build(), ie(this._element, Tj);
  }
}
const _j = Mj;
me.getSingleton().register("beforeRowMove");
me.getSingleton().register("afterRowMove");
const yd = "manualRowMove", Ij = 140, ai = /* @__PURE__ */ new WeakMap(), Cy = "ht__manualRowMove", $l = "show-ui", Sd = "on-moving--rows", bd = "after-selection--rows";
class Oj extends at {
  static get PLUGIN_KEY() {
    return yd;
  }
  static get PLUGIN_PRIORITY() {
    return Ij;
  }
  constructor(e) {
    super(e), ai.set(this, {
      rowsToMove: [],
      pressed: void 0,
      target: {
        eventPageY: void 0,
        coords: void 0,
        TD: void 0,
        row: void 0
      },
      cachedDropIndex: void 0
    }), this.eventManager = new Dt(this), this.backlight = new xj(e), this.guideline = new _j(e);
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link ManualRowMove#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return !!this.hot.getSettings()[yd];
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    var e = this;
    this.enabled || (this.addHook("beforeOnCellMouseDown", function() {
      return e.onBeforeOnCellMouseDown(...arguments);
    }), this.addHook("beforeOnCellMouseOver", function() {
      return e.onBeforeOnCellMouseOver(...arguments);
    }), this.addHook("afterScrollHorizontally", () => this.onAfterScrollHorizontally()), this.addHook("afterLoadData", function() {
      return e.onAfterLoadData(...arguments);
    }), this.buildPluginUI(), this.registerEvents(), ie(this.hot.rootElement, Cy), super.enablePlugin());
  }
  /**
   * Updates the plugin's state.
   *
   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
   *  - [`manualRowMove`](@/api/options.md#manualrowmove)
   */
  updatePlugin() {
    this.disablePlugin(), this.enablePlugin(), this.moveBySettingsOrLoad(), super.updatePlugin();
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    $e(this.hot.rootElement, Cy), this.unregisterEvents(), this.backlight.destroy(), this.guideline.destroy(), super.disablePlugin();
  }
  /**
   * Moves a single row.
   *
   * To see the outcome, rerender your grid by calling [`render()`](@/api/core.md#render).
   *
   * @param {number} row Visual row index to be moved.
   * @param {number} finalIndex Visual row index, being a start index for the moved rows. Points to where the elements will be placed after the moving action.
   * To check the visualization of the final index, please take a look at [documentation](@/guides/rows/row-moving.md#drag-and-move-actions-of-manualrowmove-plugin).
   * @fires Hooks#beforeRowMove
   * @fires Hooks#afterRowMove
   * @returns {boolean}
   */
  moveRow(e, t) {
    return this.moveRows([e], t);
  }
  /**
   * Moves multiple rows.
   *
   * To see the outcome, rerender your grid by calling [`render()`](@/api/core.md#render).
   *
   * @param {Array} rows Array of visual row indexes to be moved.
   * @param {number} finalIndex Visual row index, being a start index for the moved rows. Points to where the elements will be placed after the moving action.
   * To check the visualization of the final index, please take a look at [documentation](@/guides/rows/row-moving.md#drag-and-move-actions-of-manualrowmove-plugin).
   * @fires Hooks#beforeRowMove
   * @fires Hooks#afterRowMove
   * @returns {boolean}
   */
  moveRows(e, t) {
    const n = ai.get(this), o = n.cachedDropIndex, r = this.isMovePossible(e, t), a = this.hot.runHooks("beforeRowMove", e, t, o, r);
    if (n.cachedDropIndex = void 0, a === !1)
      return;
    r && this.hot.rowIndexMapper.moveIndexes(e, t);
    const l = r && this.isRowOrderChanged(e, t);
    return this.hot.runHooks("afterRowMove", e, t, o, r, l), l;
  }
  /**
   * Drag a single row to drop index position.
   *
   * @param {number} row Visual row index to be dragged.
   * @param {number} dropIndex Visual row index, being a drop index for the moved rows. Points to where we are going to drop the moved elements.
   * To check visualization of drop index please take a look at [documentation](@/guides/rows/row-moving.md#drag-and-move-actions-of-manualrowmove-plugin).
   * @fires Hooks#beforeRowMove
   * @fires Hooks#afterRowMove
   * @returns {boolean}
   */
  dragRow(e, t) {
    return this.dragRows([e], t);
  }
  /**
   * Drag multiple rows to drop index position.
   *
   * @param {Array} rows Array of visual row indexes to be dragged.
   * @param {number} dropIndex Visual row index, being a drop index for the moved rows. Points to where we are going to drop the moved elements.
   * To check visualization of drop index please take a look at [documentation](@/guides/rows/row-moving.md#drag-and-move-actions-of-manualrowmove-plugin).
   * @fires Hooks#beforeRowMove
   * @fires Hooks#afterRowMove
   * @returns {boolean}
   */
  dragRows(e, t) {
    const n = this.countFinalIndex(e, t), o = ai.get(this);
    return o.cachedDropIndex = t, this.moveRows(e, n);
  }
  /**
   * Indicates if it's possible to move rows to the desired position. Some of the actions aren't possible, i.e. You can’t move more than one element to the last position.
   *
   * @param {Array} movedRows Array of visual row indexes to be moved.
   * @param {number} finalIndex Visual row index, being a start index for the moved rows. Points to where the elements will be placed after the moving action.
   * To check the visualization of the final index, please take a look at [documentation](@/guides/rows/row-moving.md#drag-and-move-actions-of-manualrowmove-plugin).
   * @returns {boolean}
   */
  isMovePossible(e, t) {
    const n = this.hot.rowIndexMapper.getNotTrimmedIndexesLength(), o = e.length + t > n, r = t < 0, a = e.some((c) => c < 0), l = e.some((c) => c >= n);
    return !(o || r || a || l);
  }
  /**
   * Indicates if order of rows was changed.
   *
   * @private
   * @param {Array} movedRows Array of visual row indexes to be moved.
   * @param {number} finalIndex Visual row index, being a start index for the moved rows. Points to where the elements will be placed after the moving action.
   * To check the visualization of the final index, please take a look at [documentation](@/guides/rows/row-moving.md#drag-and-move-actions-of-manualrowmove-plugin).
   * @returns {boolean}
   */
  isRowOrderChanged(e, t) {
    return e.some((n, o) => n - o !== t);
  }
  /**
   * Count the final row index from the drop index.
   *
   * @private
   * @param {Array} movedRows Array of visual row indexes to be moved.
   * @param {number} dropIndex Visual row index, being a drop index for the moved rows.
   * @returns {number} Visual row index, being a start index for the moved rows.
   */
  countFinalIndex(e, t) {
    const n = cs(e, (o, r) => (r < t && (o += 1), o), 0);
    return t - n;
  }
  /**
   * Gets the sum of the heights of rows in the provided range.
   *
   * @private
   * @param {number} fromRow Visual row index.
   * @param {number} toRow Visual row index.
   * @returns {number}
   */
  getRowsHeight(e, t) {
    const n = this.hot.rowIndexMapper;
    let o = 0;
    for (let r = e; r <= t; r++) {
      const a = n.getRenderableFromVisualIndex(r);
      a !== null && (o += this.hot.view._wt.wtTable.getRowHeight(a) || 23);
    }
    return o;
  }
  /**
   * Loads initial settings when persistent state is saved or when plugin was initialized as an array.
   *
   * @private
   */
  moveBySettingsOrLoad() {
    const e = this.hot.getSettings()[yd];
    if (Array.isArray(e))
      this.moveRows(e, 0);
    else if (e !== void 0) {
      const t = this.persistentStateLoad();
      t.length && this.moveRows(t, 0);
    }
  }
  /**
   * Checks if the provided row is in the fixedRowsTop section.
   *
   * @private
   * @param {number} row Visual row index to check.
   * @returns {boolean}
   */
  isFixedRowTop(e) {
    return e < this.hot.getSettings().fixedRowsTop;
  }
  /**
   * Checks if the provided row is in the fixedRowsBottom section.
   *
   * @private
   * @param {number} row Visual row index to check.
   * @returns {boolean}
   */
  isFixedRowBottom(e) {
    return e > this.hot.countRows() - 1 - this.hot.getSettings().fixedRowsBottom;
  }
  /**
   * Saves the manual row positions to the persistent state (the {@link Options#persistentState} option has to be enabled).
   *
   * @private
   * @fires Hooks#persistentStateSave
   */
  persistentStateSave() {
    this.hot.runHooks("persistentStateSave", "manualRowMove", this.hot.rowIndexMapper.getIndexesSequence());
  }
  /**
   * Loads the manual row positions from the persistent state (the {@link Options#persistentState} option has to be enabled).
   *
   * @private
   * @fires Hooks#persistentStateLoad
   * @returns {Array} Stored state.
   */
  persistentStateLoad() {
    const e = {};
    return this.hot.runHooks("persistentStateLoad", "manualRowMove", e), e.value ? e.value : [];
  }
  /**
   * Prepares an array of indexes based on actual selection.
   *
   * @private
   * @returns {Array}
   */
  prepareRowsToMoving() {
    const e = this.hot.getSelectedRangeLast(), t = [];
    if (!e)
      return t;
    const {
      from: n,
      to: o
    } = e, r = Math.min(n.row, o.row), a = Math.max(n.row, o.row);
    return Se(r, a, (l) => {
      t.push(l);
    }), t;
  }
  /**
   * Update the UI visual position.
   *
   * @private
   */
  refreshPositions() {
    const e = ai.get(this), t = e.target.coords, n = this.hot.view.getFirstFullyVisibleRow(), o = this.hot.view.getLastFullyVisibleRow(), r = this.hot.countRows();
    this.isFixedRowTop(t.row) && n > 0 && this.hot.scrollViewportTo(this.hot.rowIndexMapper.getNearestNotHiddenIndex(n - 1, -1)), this.isFixedRowBottom(t.row) && o < r && this.hot.scrollViewportTo(this.hot.rowIndexMapper.getNearestNotHiddenIndex(o + 1, 1), void 0, !0);
    const a = this.hot.view._wt.wtTable, l = e.target.TD, c = this.hot.rootElement, h = Wt(c), u = sr(c), f = a.holder.scrollTop;
    let g;
    this.hot.rootWindow === u ? g = u.scrollY : g = u.scrollTop;
    const m = h.top - g, w = e.target.eventPageY - m + f, C = a.hider.offsetHeight, S = a.TBODY.offsetTop, x = this.backlight.getOffset().top, T = this.backlight.getSize().height, M = l.offsetHeight / 2, _ = l.offsetHeight;
    let P = this.hot.view.THEAD.offsetHeight + this.getRowsHeight(0, t.row - 1);
    const j = w >= P + M;
    this.isFixedRowTop(t.row) && (P += a.holder.scrollTop), t.row < 0 ? e.target.row = n > 0 ? n - 1 : n : j ? (e.target.row = t.row + 1, P += t.row === 0 ? _ - 1 : _) : e.target.row = t.row;
    let H = w, Z = P;
    w + T + x >= C ? H = C - T - x : w + x < S && (H = S + Math.abs(x)), P >= C - 1 && (Z = C - 1), this.backlight.setPosition(H), this.guideline.setPosition(Z);
  }
  /**
   * Binds the events used by the plugin.
   *
   * @private
   */
  registerEvents() {
    const {
      documentElement: e
    } = this.hot.rootDocument;
    this.eventManager.addEventListener(e, "mousemove", (t) => this.onMouseMove(t)), this.eventManager.addEventListener(e, "mouseup", () => this.onMouseUp());
  }
  /**
   * Unbinds the events used by the plugin.
   *
   * @private
   */
  unregisterEvents() {
    this.eventManager.clear();
  }
  /**
   * Change the behavior of selection / dragging.
   *
   * @private
   * @param {MouseEvent} event `mousedown` event properties.
   * @param {CellCoords} coords Visual cell coordinates where was fired event.
   * @param {HTMLElement} TD Cell represented as HTMLElement.
   * @param {object} controller An object with properties `row`, `column` and `cell`. Each property contains
   *                            a boolean value that allows or disallows changing the selection for that particular area.
   */
  onBeforeOnCellMouseDown(e, t, n, o) {
    const {
      wtTable: r,
      wtViewport: a
    } = this.hot.view._wt, l = this.hot.selection.isSelectedByRowHeader(), c = this.hot.getSelectedRangeLast(), h = ai.get(this);
    if (!c || !l || h.pressed || e.button !== 0) {
      h.pressed = !1, h.rowsToMove.length = 0, $e(this.hot.rootElement, [Sd, $l]);
      return;
    }
    const u = this.guideline.isBuilt() && !this.guideline.isAppended(), f = this.backlight.isBuilt() && !this.backlight.isAppended();
    u && f && (this.guideline.appendTo(r.hider), this.backlight.appendTo(r.hider));
    const {
      from: g,
      to: m
    } = c, w = Math.min(g.row, m.row), C = Math.max(g.row, m.row);
    if (t.col < 0 && t.row >= w && t.row <= C) {
      o.row = !0, h.pressed = !0, h.target.eventPageY = e.pageY, h.target.coords = t, h.target.TD = n, h.rowsToMove = this.prepareRowsToMoving();
      const S = r.holder.scrollLeft + a.getRowHeaderWidth();
      this.backlight.setPosition(null, S), this.backlight.setSize(r.hider.offsetWidth - S, this.getRowsHeight(w, C)), this.backlight.setOffset((this.getRowsHeight(w, t.row - 1) + e.offsetY) * -1, null), ie(this.hot.rootElement, Sd), this.refreshPositions();
    } else
      $e(this.hot.rootElement, bd), h.pressed = !1, h.rowsToMove.length = 0;
  }
  /**
   * 'mouseMove' event callback. Fired when pointer move on document.documentElement.
   *
   * @private
   * @param {MouseEvent} event `mousemove` event properties.
   */
  onMouseMove(e) {
    const t = ai.get(this);
    if (t.pressed) {
      if (e.target === this.backlight.element) {
        const n = this.backlight.getSize().height;
        this.backlight.setSize(null, 0), setTimeout(function() {
          this.backlight.setPosition(null, n);
        });
      }
      t.target.eventPageY = e.pageY, this.refreshPositions();
    }
  }
  /**
   * 'beforeOnCellMouseOver' hook callback. Fired when pointer was over cell.
   *
   * @private
   * @param {MouseEvent} event `mouseover` event properties.
   * @param {CellCoords} coords Visual cell coordinates where was fired event.
   * @param {HTMLElement} TD Cell represented as HTMLElement.
   * @param {object} controller An object with properties `row`, `column` and `cell`. Each property contains
   *                            a boolean value that allows or disallows changing the selection for that particular area.
   */
  onBeforeOnCellMouseOver(e, t, n, o) {
    const r = this.hot.getSelectedRangeLast(), a = ai.get(this);
    !r || !a.pressed || (a.rowsToMove.indexOf(t.row) > -1 ? $e(this.hot.rootElement, $l) : ie(this.hot.rootElement, $l), o.row = !0, o.column = !0, o.cell = !0, a.target.coords = t, a.target.TD = n);
  }
  /**
   * `onMouseUp` hook callback.
   *
   * @private
   */
  onMouseUp() {
    const e = ai.get(this), t = e.target.row, n = e.rowsToMove.length;
    if (e.pressed = !1, e.backlightHeight = 0, $e(this.hot.rootElement, [Sd, $l, bd]), this.hot.selection.isSelectedByRowHeader() && ie(this.hot.rootElement, bd), n < 1 || t === void 0)
      return;
    const o = e.rowsToMove[0], r = this.hot.toPhysicalRow(o), a = this.dragRows(e.rowsToMove, t);
    if (e.rowsToMove.length = 0, a === !0) {
      this.persistentStateSave(), this.hot.render(), this.hot.view.adjustElementsSize(!0);
      const l = this.hot.toVisualRow(r), c = l + n - 1;
      this.hot.selectRows(l, c);
    }
  }
  /**
   * `afterScrollHorizontally` hook callback. Fired the table was scrolled horizontally.
   *
   * @private
   */
  onAfterScrollHorizontally() {
    const e = this.hot.view._wt.wtTable, t = this.hot.view._wt.wtViewport.getRowHeaderWidth(), n = e.holder.scrollLeft, o = t + n;
    this.backlight.setPosition(null, o), this.backlight.setSize(e.hider.offsetWidth - o);
  }
  /**
   * Builds the plugin's UI.
   *
   * @private
   */
  buildPluginUI() {
    this.backlight.build(), this.guideline.build();
  }
  /**
   * Callback for the `afterLoadData` hook.
   *
   * @private
   */
  onAfterLoadData() {
    this.moveBySettingsOrLoad();
  }
  /**
   * Destroys the plugin instance.
   */
  destroy() {
    this.backlight.destroy(), this.guideline.destroy(), super.destroy();
  }
}
const Fl = "manualRowResize", Aj = 30, vy = "manualRowHeights", Rd = /* @__PURE__ */ new WeakMap();
class Pj extends at {
  static get PLUGIN_KEY() {
    return Fl;
  }
  static get PLUGIN_PRIORITY() {
    return Aj;
  }
  constructor(e) {
    super(e);
    const {
      rootDocument: t
    } = this.hot;
    this.currentTH = null, this.currentRow = null, this.selectedRows = [], this.currentHeight = null, this.newSize = null, this.startY = null, this.startHeight = null, this.startOffset = null, this.handle = t.createElement("DIV"), this.guide = t.createElement("DIV"), this.eventManager = new Dt(this), this.pressed = null, this.isTriggeredByRMB = !1, this.dblclick = 0, this.autoresizeTimeout = null, this.rowHeightsMap = void 0, Rd.set(this, {
      config: void 0
    }), ie(this.handle, "manualRowResizer"), ie(this.guide, "manualRowResizerGuide");
  }
  /**
   * @private
   * @returns {string}
   */
  get inlineDir() {
    return this.hot.isRtl() ? "right" : "left";
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link ManualRowResize#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return this.hot.getSettings()[Fl];
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    this.enabled || (this.rowHeightsMap = new bi(), this.rowHeightsMap.addLocalHook("init", () => this.onMapInit()), this.hot.rowIndexMapper.registerMap(this.pluginName, this.rowHeightsMap), this.addHook("modifyRowHeight", (e, t) => this.onModifyRowHeight(e, t)), this.bindEvents(), super.enablePlugin());
  }
  /**
   * Updates the plugin's state.
   *
   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
   *  - [`manualRowResize`](@/api/options.md#manualrowresize)
   */
  updatePlugin() {
    this.disablePlugin(), this.enablePlugin(), super.updatePlugin();
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    const e = Rd.get(this);
    e.config = this.rowHeightsMap.getValues(), this.hot.rowIndexMapper.unregisterMap(this.pluginName), super.disablePlugin();
  }
  /**
   * Saves the current sizes using the persistentState plugin (the {@link Options#persistentState} option has to be
   * enabled).
   *
   * @fires Hooks#persistentStateSave
   */
  saveManualRowHeights() {
    this.hot.runHooks("persistentStateSave", vy, this.rowHeightsMap.getValues());
  }
  /**
   * Loads the previously saved sizes using the persistentState plugin (the {@link Options#persistentState} option
   * has be enabled).
   *
   * @returns {Array}
   * @fires Hooks#persistentStateLoad
   */
  loadManualRowHeights() {
    const e = {};
    return this.hot.runHooks("persistentStateLoad", vy, e), e.value;
  }
  /**
   * Sets the new height for specified row index.
   *
   * @param {number} row Visual row index.
   * @param {number} height Row height.
   * @returns {number} Returns new height.
   */
  setManualSize(e, t) {
    const n = this.hot.toPhysicalRow(e), o = Math.max(t, lR.DEFAULT_HEIGHT);
    return this.rowHeightsMap.setValueAtIndex(n, o), o;
  }
  /**
   * Sets the resize handle position.
   *
   * @private
   * @param {HTMLCellElement} TH TH HTML element.
   */
  setupHandlePosition(e) {
    this.currentTH = e;
    const {
      view: t
    } = this.hot, {
      _wt: n
    } = t, o = n.wtTable.getCoords(this.currentTH), r = o.row;
    if (r < 0)
      return;
    const a = ht(this.currentTH), l = this.currentTH.getBoundingClientRect(), c = r < n.getSetting("fixedRowsTop"), h = r >= t.countNotHiddenRowIndexes(0, 1) - n.getSetting("fixedRowsBottom");
    let u;
    c ? u = n.wtOverlays.topInlineStartCornerOverlay.getRelativeCellPosition(this.currentTH, o.row, o.col) : h && (u = n.wtOverlays.bottomInlineStartCornerOverlay.getRelativeCellPosition(this.currentTH, o.row, o.col)), u || (u = n.wtOverlays.inlineStartOverlay.getRelativeCellPosition(this.currentTH, o.row, o.col)), this.currentRow = this.hot.rowIndexMapper.getVisualFromRenderableIndex(r), this.selectedRows = [];
    const f = this.hot.selection.isSelectedByCorner() || this.hot.selection.isSelectedByRowHeader();
    if (this.hot.selection.isSelected() && f) {
      const g = this.hot.getSelectedRange();
      D(g, (m) => {
        const w = m.getTopStartCorner().row, C = m.getBottomStartCorner().row;
        Se(w, C, (S) => {
          this.selectedRows.includes(S) || this.selectedRows.push(S);
        });
      });
    }
    this.selectedRows.includes(this.currentRow) || (this.selectedRows = [this.currentRow]), this.startOffset = u.top - 6, this.startHeight = parseInt(l.height, 10), this.handle.style.top = `${this.startOffset + this.startHeight}px`, this.handle.style[this.inlineDir] = `${u.start}px`, this.handle.style.width = `${a}px`, this.hot.rootElement.appendChild(this.handle);
  }
  /**
   * Refresh the resize handle position.
   *
   * @private
   */
  refreshHandlePosition() {
    this.handle.style.top = `${this.startOffset + this.currentHeight}px`;
  }
  /**
   * Sets the resize guide position.
   *
   * @private
   */
  setupGuidePosition() {
    const e = parseInt(ht(this.handle), 10), t = parseInt(this.handle.style[this.inlineDir], 10) + e, n = parseInt(this.hot.view.maximumVisibleElementWidth(0), 10);
    ie(this.handle, "active"), ie(this.guide, "active"), this.guide.style.top = this.handle.style.top, this.guide.style[this.inlineDir] = `${t}px`, this.guide.style.width = `${n - e}px`, this.hot.rootElement.appendChild(this.guide);
  }
  /**
   * Refresh the resize guide position.
   *
   * @private
   */
  refreshGuidePosition() {
    this.guide.style.top = this.handle.style.top;
  }
  /**
   * Hides both the resize handle and resize guide.
   *
   * @private
   */
  hideHandleAndGuide() {
    $e(this.handle, "active"), $e(this.guide, "active");
  }
  /**
   * Checks if provided element is considered as a row header.
   *
   * @private
   * @param {HTMLElement} element HTML element.
   * @returns {boolean}
   */
  checkIfRowHeader(e) {
    var t;
    return ji(e, ["TH"], this.hot.rootElement) && ((t = e.parentNode) === null || t === void 0 || (t = t.parentNode) === null || t === void 0 ? void 0 : t.tagName) === "TBODY";
  }
  /**
   * Gets the TH element from the provided element.
   *
   * @private
   * @param {HTMLElement} element HTML element.
   * @returns {HTMLElement}
   */
  getClosestTHParent(e) {
    return e.tagName !== "TABLE" ? e.tagName === "TH" ? e : this.getClosestTHParent(e.parentNode) : null;
  }
  /**
   * Returns the actual height for the provided row index.
   *
   * @private
   * @param {number} row Visual row index.
   * @returns {number} Actual row height.
   */
  getActualRowHeight(e) {
    const t = this.hot.view._wt.wtTable.getRowHeight(e);
    return t !== void 0 && this.newSize < t ? t : this.newSize;
  }
  /**
   * 'mouseover' event callback - set the handle position.
   *
   * @private
   * @param {MouseEvent} event The mouse event.
   */
  onMouseOver(e) {
    if (!Lb(e.target) && this.isTriggeredByRMB !== !0 && this.checkIfRowHeader(e.target)) {
      const t = this.getClosestTHParent(e.target);
      t && (this.pressed || this.setupHandlePosition(t));
    }
  }
  /**
   * Auto-size row after doubleclick - callback.
   *
   * @private
   * @fires Hooks#beforeRowResize
   * @fires Hooks#afterRowResize
   */
  afterMouseDownTimeout() {
    const e = () => {
      this.hot.forceFullRender = !0, this.hot.view.render(), this.hot.view.adjustElementsSize(!0);
    }, t = (n, o) => {
      const r = this.hot.runHooks("beforeRowResize", this.getActualRowHeight(n), n, !0);
      r !== void 0 && (this.newSize = r), this.setManualSize(n, this.newSize), this.hot.runHooks("afterRowResize", this.getActualRowHeight(n), n, !0), o && e();
    };
    this.dblclick >= 2 && (this.selectedRows.length > 1 ? (D(this.selectedRows, (o) => {
      t(o);
    }), e()) : D(this.selectedRows, (o) => {
      t(o, !0);
    })), this.dblclick = 0, this.autoresizeTimeout = null;
  }
  /**
   * 'mousedown' event callback.
   *
   * @private
   * @param {MouseEvent} event The mouse event.
   */
  onMouseDown(e) {
    Ne(e.target, "manualRowResizer") && (this.setupHandlePosition(this.currentTH), this.setupGuidePosition(), this.pressed = !0, this.autoresizeTimeout === null && (this.autoresizeTimeout = setTimeout(() => this.afterMouseDownTimeout(), 500), this.hot._registerTimeout(this.autoresizeTimeout)), this.dblclick += 1, this.startY = e.pageY, this.newSize = this.startHeight);
  }
  /**
   * 'mousemove' event callback - refresh the handle and guide positions, cache the new row height.
   *
   * @private
   * @param {MouseEvent} event The mouse event.
   */
  onMouseMove(e) {
    this.pressed && (this.currentHeight = this.startHeight + (e.pageY - this.startY), D(this.selectedRows, (t) => {
      this.newSize = this.setManualSize(t, this.currentHeight);
    }), this.refreshHandlePosition(), this.refreshGuidePosition());
  }
  /**
   * 'mouseup' event callback - apply the row resizing.
   *
   * @private
   *
   * @fires Hooks#beforeRowResize
   * @fires Hooks#afterRowResize
   */
  onMouseUp() {
    const e = () => {
      this.hot.forceFullRender = !0, this.hot.view.render(), this.hot.view.adjustElementsSize(!0);
    }, t = (n, o) => {
      this.hot.runHooks("beforeRowResize", this.getActualRowHeight(n), n, !1), o && e(), this.saveManualRowHeights(), this.hot.runHooks("afterRowResize", this.getActualRowHeight(n), n, !1);
    };
    this.pressed && (this.hideHandleAndGuide(), this.pressed = !1, this.newSize !== this.startHeight && (this.selectedRows.length > 1 ? (D(this.selectedRows, (o) => {
      t(o);
    }), e()) : D(this.selectedRows, (o) => {
      t(o, !0);
    })), this.setupHandlePosition(this.currentTH));
  }
  /**
   * Callback for "contextmenu" event triggered on element showing move handle. It removes handle and guide elements.
   *
   * @private
   */
  onContextMenu() {
    this.hideHandleAndGuide(), this.hot.rootElement.removeChild(this.handle), this.hot.rootElement.removeChild(this.guide), this.pressed = !1, this.isTriggeredByRMB = !0, this.hot._registerImmediate(() => {
      this.isTriggeredByRMB = !1;
    });
  }
  /**
   * Binds the mouse events.
   *
   * @private
   */
  bindEvents() {
    const {
      rootElement: e,
      rootWindow: t
    } = this.hot;
    this.eventManager.addEventListener(e, "mouseover", (n) => this.onMouseOver(n)), this.eventManager.addEventListener(e, "mousedown", (n) => this.onMouseDown(n)), this.eventManager.addEventListener(t, "mousemove", (n) => this.onMouseMove(n)), this.eventManager.addEventListener(t, "mouseup", () => this.onMouseUp()), this.eventManager.addEventListener(this.handle, "contextmenu", () => this.onContextMenu());
  }
  /**
   * Modifies the provided row height, based on the plugin settings.
   *
   * @private
   * @param {number} height Row height.
   * @param {number} row Visual row index.
   * @returns {number}
   */
  onModifyRowHeight(e, t) {
    let n = e;
    if (this.enabled) {
      const o = this.hot.toPhysicalRow(t), r = this.rowHeightsMap.getValueAtIndex(o);
      this.hot.getSettings()[Fl] && r && (n = r);
    }
    return n;
  }
  /**
   * Callback to call on map's `init` local hook.
   *
   * @private
   */
  onMapInit() {
    const e = Rd.get(this), t = this.hot.getSettings()[Fl], n = this.loadManualRowHeights();
    this.hot.batchExecution(() => {
      typeof n < "u" ? n.forEach((o, r) => {
        this.rowHeightsMap.setValueAtIndex(r, o);
      }) : Array.isArray(t) ? (t.forEach((o, r) => {
        this.rowHeightsMap.setValueAtIndex(r, o);
      }), e.config = t) : t === !0 && Array.isArray(e.config) && e.config.forEach((o, r) => {
        this.rowHeightsMap.setValueAtIndex(r, o);
      });
    }, !0);
  }
  /**
   * Destroys the plugin instance.
   */
  destroy() {
    super.destroy();
  }
}
class Dj {
  constructor(e, t, n, o, r, a) {
    this.row = e, this.col = t, this.rowspan = n, this.colspan = o, this.removed = !1, this.cellCoordsFactory = r, this.cellRangeFactory = a;
  }
  /**
   * Get a warning message for when the declared merged cell data contains negative values.
   *
   * @param {object} newMergedCell Object containg information about the merged cells that was about to be added.
   * @returns {string}
   */
  static NEGATIVE_VALUES_WARNING(e) {
    return ut`The merged cell declared with {row: ${e.row}, col: ${e.col},\x20
      rowspan: ${e.rowspan}, colspan: ${e.colspan}} contains negative values, which is\x20
      not supported. It will not be added to the collection.`;
  }
  /**
   * Get a warning message for when the declared merged cell data contains values exceeding the table limits.
   *
   * @param {object} newMergedCell Object containg information about the merged cells that was about to be added.
   * @returns {string}
   */
  static IS_OUT_OF_BOUNDS_WARNING(e) {
    return ut`The merged cell declared at [${e.row}, ${e.col}] is positioned\x20
      (or positioned partially) outside of the table range. It was not added to the table, please fix your setup.`;
  }
  /**
   * Get a warning message for when the declared merged cell data represents a single cell.
   *
   * @param {object} newMergedCell Object containg information about the merged cells that was about to be added.
   * @returns {string}
   */
  static IS_SINGLE_CELL(e) {
    return ut`The merged cell declared at [${e.row}, ${e.col}] has both "rowspan"\x20
      and "colspan" declared as "1", which makes it a single cell. It cannot be added to the collection.`;
  }
  /**
   * Get a warning message for when the declared merged cell data contains "colspan" or "rowspan", that equals 0.
   *
   * @param {object} newMergedCell Object containg information about the merged cells that was about to be added.
   * @returns {string}
   */
  static ZERO_SPAN_WARNING(e) {
    return ut`The merged cell declared at [${e.row}, ${e.col}] has "rowspan"\x20
      or "colspan" declared as "0", which is not supported. It cannot be added to the collection.`;
  }
  /**
   * Check whether the values provided for a merged cell contain any negative values.
   *
   * @param {object} mergedCellInfo Object containing the `row`, `col`, `rowspan` and `colspan` properties.
   * @returns {boolean}
   */
  static containsNegativeValues(e) {
    return e.row < 0 || e.col < 0 || e.rowspan < 0 || e.colspan < 0;
  }
  /**
   * Check whether the provided merged cell information object represents a single cell.
   *
   * @private
   * @param {object} mergedCellInfo An object with `row`, `col`, `rowspan` and `colspan` properties.
   * @returns {boolean}
   */
  static isSingleCell(e) {
    return e.colspan === 1 && e.rowspan === 1;
  }
  /**
   * Check whether the provided merged cell information object contains a rowspan or colspan of 0.
   *
   * @private
   * @param {object} mergedCellInfo An object with `row`, `col`, `rowspan` and `colspan` properties.
   * @returns {boolean}
   */
  static containsZeroSpan(e) {
    return e.colspan === 0 || e.rowspan === 0;
  }
  /**
   * Check whether the provided merged cell object is to be declared out of bounds of the table.
   *
   * @param {object} mergeCell Object containing the `row`, `col`, `rowspan` and `colspan` properties.
   * @param {number} rowCount Number of rows in the table.
   * @param {number} columnCount Number of rows in the table.
   * @returns {boolean}
   */
  static isOutOfBounds(e, t, n) {
    return e.row < 0 || e.col < 0 || e.row >= t || e.row + e.rowspan - 1 >= t || e.col >= n || e.col + e.colspan - 1 >= n;
  }
  /**
   * Sanitize (prevent from going outside the boundaries) the merged cell.
   *
   * @param {Core} hotInstance The Handsontable instance.
   */
  normalize(e) {
    const t = e.countRows(), n = e.countCols();
    this.row < 0 ? this.row = 0 : this.row > t - 1 && (this.row = t - 1), this.col < 0 ? this.col = 0 : this.col > n - 1 && (this.col = n - 1), this.row + this.rowspan > t - 1 && (this.rowspan = t - this.row), this.col + this.colspan > n - 1 && (this.colspan = n - this.col);
  }
  /**
   * Returns `true` if the provided coordinates are inside the merged cell.
   *
   * @param {number} row The row index.
   * @param {number} column The column index.
   * @returns {boolean}
   */
  includes(e, t) {
    return this.row <= e && this.col <= t && this.row + this.rowspan - 1 >= e && this.col + this.colspan - 1 >= t;
  }
  /**
   * Returns `true` if the provided `column` property is within the column span of the merged cell.
   *
   * @param {number} column The column index.
   * @returns {boolean}
   */
  includesHorizontally(e) {
    return this.col <= e && this.col + this.colspan - 1 >= e;
  }
  /**
   * Returns `true` if the provided `row` property is within the row span of the merged cell.
   *
   * @param {number} row Row index.
   * @returns {boolean}
   */
  includesVertically(e) {
    return this.row <= e && this.row + this.rowspan - 1 >= e;
  }
  /**
   * Shift (and possibly resize, if needed) the merged cell.
   *
   * @param {Array} shiftVector 2-element array containing the information on the shifting in the `x` and `y` axis.
   * @param {number} indexOfChange Index of the preceding change.
   * @returns {boolean} Returns `false` if the whole merged cell was removed.
   */
  shift(e, t) {
    const n = e[0] || e[1], o = t + Math.abs(e[0] || e[1]) - 1, r = e[0] ? "colspan" : "rowspan", a = e[0] ? "col" : "row", l = Math.min(t, o), c = Math.max(t, o), h = this[a], u = this[a] + this[r] - 1;
    if (h >= t && (this[a] += n), n > 0)
      t <= u && t > h && (this[r] += n);
    else if (n < 0) {
      if (l <= h && c >= u)
        return this.removed = !0, !1;
      if (h >= l && h <= c) {
        const f = c - h + 1, g = Math.abs(n) - f;
        this[a] -= g + n, this[r] -= f;
      } else if (h <= l && u >= c)
        this[r] += n;
      else if (h <= l && u >= l && u < c) {
        const f = u - l + 1;
        this[r] -= f;
      }
    }
    return !0;
  }
  /**
   * Check if the second provided merged cell is "farther" in the provided direction.
   *
   * @param {MergedCellCoords} mergedCell The merged cell to check.
   * @param {string} direction Drag direction.
   * @returns {boolean|null} `true` if the second provided merged cell is "farther".
   */
  isFarther(e, t) {
    return e ? t === "down" ? e.row + e.rowspan - 1 < this.row + this.rowspan - 1 : t === "up" ? e.row > this.row : t === "right" ? e.col + e.colspan - 1 < this.col + this.colspan - 1 : t === "left" ? e.col > this.col : null : !0;
  }
  /**
   * Get the bottom row index of the merged cell.
   *
   * @returns {number}
   */
  getLastRow() {
    return this.row + this.rowspan - 1;
  }
  /**
   * Get the rightmost column index of the merged cell.
   *
   * @returns {number}
   */
  getLastColumn() {
    return this.col + this.colspan - 1;
  }
  /**
   * Get the range coordinates of the merged cell.
   *
   * @returns {CellRange}
   */
  getRange() {
    return this.cellRangeFactory(this.cellCoordsFactory(this.row, this.col), this.cellCoordsFactory(this.row, this.col), this.cellCoordsFactory(this.getLastRow(), this.getLastColumn()));
  }
}
const mn = Dj;
function Mf(s, e, t, n) {
  e ? e.row === t && e.col === n ? (s.setAttribute("rowspan", e.rowspan.toString()), s.setAttribute("colspan", e.colspan.toString())) : (s.removeAttribute("rowspan"), s.removeAttribute("colspan"), s.style.display = "none") : (s.removeAttribute("rowspan"), s.removeAttribute("colspan"), s.style.display = "");
}
class jp {
  constructor(e) {
    this.plugin = e, this.mergedCells = [], this.hot = e.hot;
  }
  /**
   * Get a warning message for when the declared merged cell data overlaps already existing merged cells.
   *
   * @param {object} newMergedCell Object containg information about the merged cells that was about to be added.
   * @returns {string}
   */
  static IS_OVERLAPPING_WARNING(e) {
    return ut`The merged cell declared at [${e.row}, ${e.col}], overlaps\x20
      with the other declared merged cell. The overlapping merged cell was not added to the table, please\x20
      fix your setup.`;
  }
  /**
   * Get a merged cell from the container, based on the provided arguments. You can provide either the "starting coordinates"
   * of a merged cell, or any coordinates from the body of the merged cell.
   *
   * @param {number} row Row index.
   * @param {number} column Column index.
   * @returns {MergedCellCoords|boolean} Returns a wanted merged cell on success and `false` on failure.
   */
  get(e, t) {
    const n = this.mergedCells;
    let o = !1;
    return D(n, (r) => r.row <= e && r.row + r.rowspan - 1 >= e && r.col <= t && r.col + r.colspan - 1 >= t ? (o = r, !1) : !0), o;
  }
  /**
   * Get a merged cell containing the provided range.
   *
   * @param {CellRange|object} range The range to search merged cells for.
   * @returns {MergedCellCoords|boolean}
   */
  getByRange(e) {
    const t = this.mergedCells;
    let n = !1;
    return D(t, (o) => o.row <= e.from.row && o.row + o.rowspan - 1 >= e.to.row && o.col <= e.from.col && o.col + o.colspan - 1 >= e.to.col ? (n = o, n) : !0), n;
  }
  /**
   * Get a merged cell contained in the provided range.
   *
   * @param {CellRange|object} range The range to search merged cells in.
   * @param {boolean} [countPartials=false] If set to `true`, all the merged cells overlapping the range will be taken into calculation.
   * @returns {Array|boolean} Array of found merged cells of `false` if none were found.
   */
  getWithinRange(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;
    const n = this.mergedCells, o = [];
    let r = e;
    if (!r.includesRange) {
      const a = this.hot._createCellCoords(r.from.row, r.from.col), l = this.hot._createCellCoords(r.to.row, r.to.col);
      r = this.hot._createCellRange(a, a, l);
    }
    return D(n, (a) => {
      const l = this.hot._createCellCoords(a.row, a.col), c = this.hot._createCellCoords(a.row + a.rowspan - 1, a.col + a.colspan - 1), h = this.hot._createCellRange(l, l, c);
      t ? r.overlaps(h) && o.push(a) : r.includesRange(h) && o.push(a);
    }), o.length ? o : !1;
  }
  /**
   * Add a merged cell to the container.
   *
   * @param {object} mergedCellInfo The merged cell information object. Has to contain `row`, `col`, `colspan` and `rowspan` properties.
   * @returns {MergedCellCoords|boolean} Returns the new merged cell on success and `false` on failure.
   */
  add(e) {
    const t = this.mergedCells, n = e.row, o = e.col, r = e.rowspan, a = e.colspan, l = new mn(n, o, r, a, this.hot._createCellCoords, this.hot._createCellRange), c = this.get(n, o), h = this.isOverlapping(l);
    return !c && !h ? (this.hot && l.normalize(this.hot), t.push(l), l) : (pt(jp.IS_OVERLAPPING_WARNING(l)), !1);
  }
  /**
   * Remove a merged cell from the container. You can provide either the "starting coordinates"
   * of a merged cell, or any coordinates from the body of the merged cell.
   *
   * @param {number} row Row index.
   * @param {number} column Column index.
   * @returns {MergedCellCoords|boolean} Returns the removed merged cell on success and `false` on failure.
   */
  remove(e, t) {
    const n = this.mergedCells, o = this.get(e, t), r = o ? this.mergedCells.indexOf(o) : -1;
    return o && r !== -1 ? (n.splice(r, 1), o) : !1;
  }
  /**
   * Clear all the merged cells.
   */
  clear() {
    const e = this.mergedCells, t = [], n = [];
    D(e, (o) => {
      const r = this.hot.getCell(o.row, o.col);
      r && t.push([r, this.get(o.row, o.col), o.row, o.col]);
    }), this.mergedCells.length = 0, D(t, (o, r) => {
      Se(0, o.rowspan - 1, (a) => {
        Se(0, o.colspan - 1, (l) => {
          if (l !== 0 || a !== 0) {
            const c = this.hot.getCell(o.row + a, o.col + l);
            c && n.push([c, null, null, null]);
          }
        });
      }), t[r][1] = null;
    }), D(t, (o) => {
      Mf(...o);
    }), D(n, (o) => {
      Mf(...o);
    });
  }
  /**
   * Check if the provided merged cell overlaps with the others in the container.
   *
   * @param {MergedCellCoords} mergedCell The merged cell to check against all others in the container.
   * @returns {boolean} `true` if the provided merged cell overlaps with the others, `false` otherwise.
   */
  isOverlapping(e) {
    const t = this.hot._createCellRange(this.hot._createCellCoords(0, 0), this.hot._createCellCoords(e.row, e.col), this.hot._createCellCoords(e.row + e.rowspan - 1, e.col + e.colspan - 1));
    let n = !1;
    return D(this.mergedCells, (o) => this.hot._createCellRange(this.hot._createCellCoords(0, 0), this.hot._createCellCoords(o.row, o.col), this.hot._createCellCoords(o.row + o.rowspan - 1, o.col + o.colspan - 1)).overlaps(t) ? (n = !0, !1) : !0), n;
  }
  /**
   * Check whether the provided row/col coordinates direct to a first not hidden cell within merge area.
   *
   * @param {number} row Visual row index.
   * @param {number} column Visual column index.
   * @returns {boolean}
   */
  isFirstRenderableMergedCell(e, t) {
    const n = this.get(e, t);
    return n && this.hot.rowIndexMapper.getNearestNotHiddenIndex(n.row, 1) === e && this.hot.columnIndexMapper.getNearestNotHiddenIndex(n.col, 1) === t;
  }
  /**
   * Get the first renderable coords of the merged cell at the provided coordinates.
   *
   * @param {number} row Visual row index.
   * @param {number} column Visual column index.
   * @returns {CellCoords} A `CellCoords` object with the coordinates to the first renderable cell within the
   *                        merged cell.
   */
  getFirstRenderableCoords(e, t) {
    const n = this.get(e, t);
    if (!n || this.isFirstRenderableMergedCell(e, t))
      return this.hot._createCellCoords(e, t);
    const o = this.hot.rowIndexMapper.getNearestNotHiddenIndex(n.row, 1), r = this.hot.columnIndexMapper.getNearestNotHiddenIndex(n.col, 1);
    return this.hot._createCellCoords(o, r);
  }
  /**
   * Shift the merged cell in the direction and by an offset defined in the arguments.
   *
   * @param {string} direction `right`, `left`, `up` or `down`.
   * @param {number} index Index where the change, which caused the shifting took place.
   * @param {number} count Number of rows/columns added/removed in the preceding action.
   */
  shiftCollections(e, t, n) {
    const o = [0, 0];
    switch (e) {
      case "right":
        o[0] += n;
        break;
      case "left":
        o[0] -= n;
        break;
      case "down":
        o[1] += n;
        break;
      case "up":
        o[1] -= n;
        break;
    }
    D(this.mergedCells, (r) => {
      r.shift(o, t);
    }), af(this.mergedCells.length - 1, 0, (r) => {
      const a = this.mergedCells[r];
      a && a.removed && this.mergedCells.splice(this.mergedCells.indexOf(a), 1);
    });
  }
}
const Hj = jp;
class kj {
  constructor(e) {
    this.plugin = e, this.mergedCellsCollection = this.plugin.mergedCellsCollection, this.currentFillData = null;
  }
  /**
   * Correct the provided selection area, so it's not selecting only a part of a merged cell.
   *
   * @param {Array} selectionArea The selection to correct.
   */
  correctSelectionAreaSize(e) {
    if (e[0] === e[2] && e[1] === e[3]) {
      const t = this.mergedCellsCollection.get(e[0], e[1]);
      t && (e[2] = e[0] + t.rowspan - 1, e[3] = e[1] + t.colspan - 1);
    }
  }
  /**
   * Get the direction of the autofill process.
   *
   * @param {Array} selectionArea The selection area.
   * @param {Array} finalArea The final area (base + drag).
   * @returns {string} `up`, `down`, `left` or `right`.
   */
  getDirection(e, t) {
    let n = null;
    return t[0] === e[0] && t[1] === e[1] && t[3] === e[3] ? n = "down" : t[2] === e[2] && t[1] === e[1] && t[3] === e[3] ? n = "up" : t[1] === e[1] && t[2] === e[2] ? n = "right" : n = "left", n;
  }
  /**
   * Snap the drag area to the farthest merged cell, so it won't clip any of the merged cells.
   *
   * @param {Array} baseArea The base selected area.
   * @param {Array} dragArea The drag area.
   * @param {string} dragDirection The autofill drag direction.
   * @param {Array} foundMergedCells MergeCellCoords found in the base selection area.
   * @returns {Array} The new drag area.
   */
  snapDragArea(e, t, n, o) {
    const r = t.slice(0), a = this.getAutofillSize(e, t, n), [l, c, h, u] = e, g = ["up", "down"].indexOf(n) > -1 ? h - l + 1 : u - c + 1, m = Math.floor(a / g) * g, w = a - m, C = this.getFarthestCollection(e, t, n, o);
    if (C) {
      if (n === "down") {
        const S = C.row + C.rowspan - l - w;
        r[2] + S >= this.plugin.hot.countRows() ? r[2] -= w : r[2] += w ? S : 0;
      } else if (n === "right") {
        const S = C.col + C.colspan - c - w;
        r[3] + S >= this.plugin.hot.countCols() ? r[3] -= w : r[3] += w ? S : 0;
      } else if (n === "up") {
        const S = h - w - C.row + 1;
        r[0] + S < 0 ? r[0] += w : r[0] -= w ? S : 0;
      } else if (n === "left") {
        const S = u - w - C.col + 1;
        r[1] + S < 0 ? r[1] += w : r[1] -= w ? S : 0;
      }
    }
    return this.updateCurrentFillCache({
      baseArea: e,
      dragDirection: n,
      foundMergedCells: o,
      fillSize: a,
      dragArea: r,
      cycleLength: g
    }), r;
  }
  /**
   * Update the current fill cache with the provided object.
   *
   * @private
   * @param {object} updateObject The current filled object cache.
   */
  updateCurrentFillCache(e) {
    this.currentFillData || (this.currentFillData = {}), Ut(this.currentFillData, e);
  }
  /**
   * Get the "length" of the drag area.
   *
   * @private
   * @param {Array} baseArea The base selection area.
   * @param {Array} dragArea The drag area (containing the base area).
   * @param {string} direction The drag direction.
   * @returns {number|null} The "length" (height or width, depending on the direction) of the drag.
   */
  getAutofillSize(e, t, n) {
    const [o, r, a, l] = e, [c, h, u, f] = t;
    switch (n) {
      case "up":
        return o - c;
      case "down":
        return u - a;
      case "left":
        return r - h;
      case "right":
        return f - l;
      default:
        return null;
    }
  }
  /**
   * Trim the default drag area (containing the selection area) to the drag-only area.
   *
   * @private
   * @param {Array} baseArea The base selection area.
   * @param {Array} dragArea The base selection area extended by the drag area.
   * @param {string} direction Drag direction.
   * @returns {Array|null} Array representing the drag area coordinates.
   */
  getDragArea(e, t, n) {
    const [o, r, a, l] = e, [c, h, u, f] = t;
    switch (n) {
      case "up":
        return [c, h, o - 1, l];
      case "down":
        return [a + 1, r, u, l];
      case "left":
        return [c, h, a, r - 1];
      case "right":
        return [o, l + 1, u, f];
      default:
        return null;
    }
  }
  /**
   * Get the to-be-farthest merged cell in the newly filled area.
   *
   * @private
   * @param {Array} baseArea The base selection area.
   * @param {Array} dragArea The drag area (containing the base area).
   * @param {string} direction The drag direction.
   * @param {Array} mergedCellArray Array of the merged cells found in the base area.
   * @returns {MergedCellCoords|null}
   */
  getFarthestCollection(e, t, n, o) {
    const [r, a, l, c] = e, h = ["up", "down"].indexOf(n) > -1, u = h ? l : c, f = h ? r : a, g = this.getAutofillSize(e, t, n), m = h ? l - r + 1 : c - a + 1, w = Math.floor(g / m) * m, C = g - w;
    let S = null, x = null, T = null;
    switch (n) {
      case "up":
        S = "includesVertically", T = u - C + 1;
        break;
      case "left":
        S = "includesHorizontally", T = u - C + 1;
        break;
      case "down":
        S = "includesVertically", T = f + C - 1;
        break;
      case "right":
        S = "includesHorizontally", T = f + C - 1;
        break;
    }
    return D(o, (M) => {
      M[S](T) && M.isFarther(x, n) && (x = M);
    }), x;
  }
  /**
   * Recreate the merged cells after the autofill process.
   *
   * @param {Array} changes Changes made.
   */
  recreateAfterDataPopulation(e) {
    if (!this.currentFillData)
      return;
    const t = this.getRangeFromChanges(e), n = this.currentFillData.foundMergedCells, o = this.currentFillData.dragDirection, r = (h, u) => {
      switch (o) {
        case "up":
          return h.row - u >= t.from.row;
        case "down":
          return h.row + h.rowspan - 1 + u <= t.to.row;
        case "left":
          return h.col - u >= t.from.column;
        case "right":
          return h.col + h.colspan - 1 + u <= t.to.column;
        default:
          return null;
      }
    };
    let a = 0, l = null, c = 1;
    do
      for (let h = 0; h < n.length; h += 1) {
        if (l = n[h], a = c * this.currentFillData.cycleLength, r(l, a))
          switch (o) {
            case "up":
              this.plugin.mergedCellsCollection.add({
                row: l.row - a,
                rowspan: l.rowspan,
                col: l.col,
                colspan: l.colspan
              });
              break;
            case "down":
              this.plugin.mergedCellsCollection.add({
                row: l.row + a,
                rowspan: l.rowspan,
                col: l.col,
                colspan: l.colspan
              });
              break;
            case "left":
              this.plugin.mergedCellsCollection.add({
                row: l.row,
                rowspan: l.rowspan,
                col: l.col - a,
                colspan: l.colspan
              });
              break;
            case "right":
              this.plugin.mergedCellsCollection.add({
                row: l.row,
                rowspan: l.rowspan,
                col: l.col + a,
                colspan: l.colspan
              });
              break;
          }
        h === n.length - 1 && (c += 1);
      }
    while (r(l, a));
    this.currentFillData = null, this.plugin.hot.render(), n.length > 0 && this.plugin.ifChromeForceRepaint();
  }
  /**
   * Get the drag range from the changes made.
   *
   * @private
   * @param {Array} changes The changes made.
   * @returns {object} Object with `from` and `to` properties, both containing `row` and `column` keys.
   */
  getRangeFromChanges(e) {
    const t = {
      min: null,
      max: null
    }, n = {
      min: null,
      max: null
    };
    return D(e, (o) => {
      const r = o[0], a = this.plugin.hot.propToCol(o[1]);
      (t.min === null || r < t.min) && (t.min = r), (t.max === null || r > t.max) && (t.max = r), (n.min === null || a < n.min) && (n.min = a), (n.max === null || a > n.max) && (n.max = a);
    }), {
      from: {
        row: t.min,
        column: n.min
      },
      to: {
        row: t.max,
        column: n.max
      }
    };
  }
  /**
   * Check if the drag area contains any merged cells.
   *
   * @param {Array} baseArea The base selection area.
   * @param {Array} fullArea The base area extended by the drag area.
   * @param {string} direction Drag direction.
   * @returns {boolean}
   */
  dragAreaOverlapsCollections(e, t, n) {
    const o = this.getDragArea(e, t, n), [r, a, l, c] = o, h = this.plugin.hot._createCellCoords(r, a), u = this.plugin.hot._createCellCoords(l, c), f = this.plugin.hot._createCellRange(h, h, u);
    return !!this.mergedCellsCollection.getWithinRange(f, !0);
  }
}
const Nj = kj;
class Lj {
  constructor(e) {
    this.plugin = e, this.hot = e.hot, this.fullySelectedMergedCellClassName = "fullySelectedMergedCell";
  }
  /**
   * "Snap" the delta value according to defined merged cells. (In other words, compensate the rowspan -
   * e.g. Going up with `delta.row = -1` over a merged cell with `rowspan = 3`, `delta.row` should change to `-3`.).
   *
   * @param {object} delta The delta object containing `row` and `col` properties.
   * @param {CellRange} selectionRange The selection range.
   * @param {object} mergedCell A merged cell object.
   */
  snapDelta(e, t, n) {
    const o = t.to, r = o.row + e.row, a = o.col + e.col;
    e.row ? this.jumpOverMergedCell(e, n, r) : e.col && this.jumpOverMergedCell(e, n, a);
  }
  /**
   * "Jump" over the merged cell (compensate for the indexes within the merged cell to get past it).
   *
   * @private
   * @param {object} delta The delta object.
   * @param {MergedCellCoords} mergedCell The merge cell object.
   * @param {number} newIndex New row/column index, created with the delta.
   */
  jumpOverMergedCell(e, t, n) {
    let o = e.row || e.col, r = null, a = null, l = null;
    e.row ? (r = t.includesVertically(n), a = t.row, l = t.getLastRow()) : e.col && (r = t.includesHorizontally(n), a = t.col, l = t.getLastColumn()), o !== 0 && (o > 0 ? r && n !== a && (o += l - n + 1) : r && n !== l && (o -= n - a + 1), e.row ? e.row = o : e.col && (e.col = o));
  }
  /**
   * Get a selection range with `to` property incremented by the provided delta.
   *
   * @param {CellRange} oldSelectionRange The base selection range.
   * @param {object} delta The delta object with `row` and `col` properties.
   * @returns {CellRange} A new `CellRange` object.
   */
  getUpdatedSelectionRange(e, t) {
    return this.hot._createCellRange(e.highlight, e.from, this.hot._createCellCoords(e.to.row + t.row, e.to.col + t.col));
  }
  /**
   * Generate an additional class name for the entirely-selected merged cells.
   *
   * @param {number} currentRow Visual row index of the currently processed cell.
   * @param {number} currentColumn Visual column index of the currently cell.
   * @param {Array} cornersOfSelection Array of the current selection in a form of `[startRow, startColumn, endRow, endColumn]`.
   * @param {number|undefined} layerLevel Number indicating which layer of selection is currently processed.
   * @returns {string|undefined} A `String`, which will act as an additional `className` to be added to the currently processed cell.
   */
  getSelectedMergedCellClassName(e, t, n, o) {
    const r = Math.min(n[0], n[2]), a = Math.min(n[1], n[3]), l = Math.max(n[0], n[2]), c = Math.max(n[1], n[3]);
    if (o === void 0 || !this.plugin.mergedCellsCollection.isFirstRenderableMergedCell(e, t))
      return;
    const u = this.plugin.mergedCellsCollection.get(e, t);
    if (!u)
      return;
    const f = u.getLastRow(), g = u.getLastColumn();
    if (r <= u.row && a <= u.col && l >= f && c >= g)
      return `${this.fullySelectedMergedCellClassName}-${o}`;
    if (this.plugin.selectionCalculations.isMergeCellFullySelected(u, this.plugin.hot.getSelectedRange()))
      return `${this.fullySelectedMergedCellClassName}-multiple`;
  }
  /**
   * Check if the provided merged cell is fully selected (by one or many layers of selection).
   *
   * @param {MergedCellCoords} mergedCell The merged cell to be processed.
   * @param {CellRange[]} selectionRangesArray Array of selection ranges.
   * @returns {boolean}
   */
  isMergeCellFullySelected(e, t) {
    const n = [];
    if (!t || !e)
      return !1;
    for (let o = 0; o < e.rowspan; o += 1)
      for (let r = 0; r < e.colspan; r += 1)
        n.push(this.hot._createCellCoords(e.row + o, e.col + r));
    for (let o = 0; o < n.length; o += 1) {
      const r = [];
      for (let a = 0; a < t.length; a += 1)
        r[a] = t[a].includes(n[o]);
      if (!r.includes(!0))
        return !1;
    }
    return !0;
  }
  /**
   * Generate an array of the entirely-selected merged cells' class names.
   *
   * @returns {string[]} An `Array` of `String`s. Each of these strings will act like class names to be removed from all the cells in the table.
   */
  getSelectedMergedCellClassNameToRemove() {
    const e = [];
    for (let t = 0; t <= 7; t += 1)
      e.push(`${this.fullySelectedMergedCellClassName}-${t}`);
    return e.push(`${this.fullySelectedMergedCellClassName}-multiple`), e;
  }
}
const $j = Lj;
function Fj(s) {
  return {
    key: "mergeCells",
    name() {
      const e = this.getSelectedLast();
      if (e) {
        const t = s.mergedCellsCollection.get(e[0], e[1]);
        if (t.row === e[0] && t.col === e[1] && t.row + t.rowspan - 1 === e[2] && t.col + t.colspan - 1 === e[3])
          return this.getTranslatedPhrase(gm);
      }
      return this.getTranslatedPhrase(fm);
    },
    callback() {
      s.toggleMergeOnSelection();
    },
    disabled() {
      const e = this.getSelectedLast();
      return e ? mn.isSingleCell({
        row: e[0],
        col: e[1],
        rowspan: e[2] - e[0] + 1,
        colspan: e[3] - e[1] + 1
      }) || this.selection.isSelectedByCorner() : !0;
    },
    hidden: !1
  };
}
me.getSingleton().register("beforeMergeCells");
me.getSingleton().register("afterMergeCells");
me.getSingleton().register("beforeUnmergeCells");
me.getSingleton().register("afterUnmergeCells");
const Yr = "mergeCells", Vj = 150, yy = /* @__PURE__ */ new WeakMap(), Sy = Yr;
class Bj extends at {
  static get PLUGIN_KEY() {
    return Yr;
  }
  static get PLUGIN_PRIORITY() {
    return Vj;
  }
  constructor(e) {
    super(e), yy.set(this, {
      lastDesiredCoords: null
    }), this.mergedCellsCollection = null, this.autofillCalculations = null, this.selectionCalculations = null;
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link MergeCells#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return !!this.hot.getSettings()[Yr];
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    var e = this;
    this.enabled || (this.mergedCellsCollection = new Hj(this), this.autofillCalculations = new Nj(this), this.selectionCalculations = new $j(this), this.addHook("afterInit", function() {
      return e.onAfterInit(...arguments);
    }), this.addHook("modifyTransformStart", function() {
      return e.onModifyTransformStart(...arguments);
    }), this.addHook("afterModifyTransformStart", function() {
      return e.onAfterModifyTransformStart(...arguments);
    }), this.addHook("modifyTransformEnd", function() {
      return e.onModifyTransformEnd(...arguments);
    }), this.addHook("modifyGetCellCoords", function() {
      return e.onModifyGetCellCoords(...arguments);
    }), this.addHook("beforeSetRangeStart", function() {
      return e.onBeforeSetRangeStart(...arguments);
    }), this.addHook("beforeSetRangeStartOnly", function() {
      return e.onBeforeSetRangeStart(...arguments);
    }), this.addHook("beforeSetRangeEnd", function() {
      return e.onBeforeSetRangeEnd(...arguments);
    }), this.addHook("afterIsMultipleSelection", function() {
      return e.onAfterIsMultipleSelection(...arguments);
    }), this.addHook("afterRenderer", function() {
      return e.onAfterRenderer(...arguments);
    }), this.addHook("afterContextMenuDefaultOptions", function() {
      return e.addMergeActionsToContextMenu(...arguments);
    }), this.addHook("afterGetCellMeta", function() {
      return e.onAfterGetCellMeta(...arguments);
    }), this.addHook("afterViewportRowCalculatorOverride", function() {
      return e.onAfterViewportRowCalculatorOverride(...arguments);
    }), this.addHook("afterViewportColumnCalculatorOverride", function() {
      return e.onAfterViewportColumnCalculatorOverride(...arguments);
    }), this.addHook("modifyAutofillRange", function() {
      return e.onModifyAutofillRange(...arguments);
    }), this.addHook("afterCreateCol", function() {
      return e.onAfterCreateCol(...arguments);
    }), this.addHook("afterRemoveCol", function() {
      return e.onAfterRemoveCol(...arguments);
    }), this.addHook("afterCreateRow", function() {
      return e.onAfterCreateRow(...arguments);
    }), this.addHook("afterRemoveRow", function() {
      return e.onAfterRemoveRow(...arguments);
    }), this.addHook("afterChange", function() {
      return e.onAfterChange(...arguments);
    }), this.addHook("beforeDrawBorders", function() {
      return e.onBeforeDrawAreaBorders(...arguments);
    }), this.addHook("afterDrawSelection", function() {
      return e.onAfterDrawSelection(...arguments);
    }), this.addHook("beforeRemoveCellClassNames", function() {
      return e.onBeforeRemoveCellClassNames(...arguments);
    }), this.addHook("beforeUndoStackChange", (t, n) => {
      if (n === "MergeCells")
        return !1;
    }), this.registerShortcuts(), super.enablePlugin());
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    this.clearCollections(), this.unregisterShortcuts(), this.hot.render(), super.disablePlugin();
  }
  /**
   * Updates the plugin's state.
   *
   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the
   * following configuration options:
   *  - [`mergeCells`](@/api/options.md#mergecells)
   */
  updatePlugin() {
    const e = this.hot.getSettings()[Yr];
    this.disablePlugin(), this.enablePlugin(), this.generateFromSettings(e), super.updatePlugin();
  }
  /**
   * If the browser is recognized as Chrome, force an additional repaint to prevent showing the effects of a Chrome bug.
   *
   * Issue described in https://github.com/handsontable/dev-handsontable/issues/521.
   *
   * @private
   */
  ifChromeForceRepaint() {
    if (!zb())
      return;
    const e = [];
    let t = [];
    this.mergedCellsCollection.mergedCells.forEach((n) => {
      const {
        row: o,
        rowspan: r
      } = n;
      for (let a = o + 1; a < o + r; a++)
        t.push(a);
    }), t = [...new Set(t)], t.forEach((n) => {
      const o = this.hot.rowIndexMapper.getRenderableFromVisualIndex(n);
      this.hot.view._wt.wtOverlays.getOverlays(!0).map((r) => (r == null ? void 0 : r.name) === "master" ? r : r.clone.wtTable).forEach((r) => {
        const a = r.getRow(o);
        a && (a.style.background = ga(a, "backgroundColor").replace(")", ", 0.99)"), e.push(a));
      });
    }), this.hot._registerTimeout(() => {
      e.forEach((n) => {
        n.style.background = ga(n, "backgroundColor").replace(", 0.99)", ")");
      });
    }, 1);
  }
  /**
   * Validates a single setting object, represented by a single merged cell information object.
   *
   * @private
   * @param {object} setting An object with `row`, `col`, `rowspan` and `colspan` properties.
   * @returns {boolean}
   */
  validateSetting(e) {
    let t = !0;
    return e ? (mn.containsNegativeValues(e) ? (pt(mn.NEGATIVE_VALUES_WARNING(e)), t = !1) : mn.isOutOfBounds(e, this.hot.countRows(), this.hot.countCols()) ? (pt(mn.IS_OUT_OF_BOUNDS_WARNING(e)), t = !1) : mn.isSingleCell(e) ? (pt(mn.IS_SINGLE_CELL(e)), t = !1) : mn.containsZeroSpan(e) && (pt(mn.ZERO_SPAN_WARNING(e)), t = !1), t) : !1;
  }
  /**
   * Generates the merged cells from the settings provided to the plugin.
   *
   * @private
   * @param {Array|boolean} settings The settings provided to the plugin.
   */
  generateFromSettings(e) {
    if (Array.isArray(e)) {
      const t = [];
      if (D(e, (n) => {
        if (!this.validateSetting(n))
          return;
        const o = this.hot._createCellCoords(n.row, n.col), r = this.hot._createCellCoords(n.row + n.rowspan - 1, n.col + n.colspan - 1), a = this.hot._createCellRange(o, o, r);
        this.mergeRange(a, !0, !0), Se(n.row, n.row + n.rowspan - 1, (l) => {
          Se(n.col, n.col + n.colspan - 1, (c) => {
            l === n.row && c === n.col || t.push([l, c, null]);
          });
        });
      }), t.length === 0)
        return;
      this.hot.setDataAtCell(t);
    }
  }
  /**
   * Clears the merged cells from the merged cell container.
   */
  clearCollections() {
    this.mergedCellsCollection.clear();
  }
  /**
   * Returns `true` if a range is mergeable.
   *
   * @private
   * @param {object} newMergedCellInfo Merged cell information object to test.
   * @param {boolean} [auto=false] `true` if triggered at initialization.
   * @returns {boolean}
   */
  canMergeRange(e) {
    return (arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1) ? !0 : this.validateSetting(e);
  }
  /**
   * Merge or unmerge, based on last selected range.
   *
   * @private
   */
  toggleMergeOnSelection() {
    const e = this.hot.getSelectedRangeLast();
    if (!e)
      return;
    e.setDirection(this.hot.isRtl() ? "NE-SW" : "NW-SE");
    const {
      from: t,
      to: n
    } = e;
    this.toggleMerge(e), this.hot.selectCell(t.row, t.col, n.row, n.col, !1);
  }
  /**
   * Merges the selection provided as a cell range.
   *
   * @param {CellRange} [cellRange] Selection cell range.
   */
  mergeSelection() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.hot.getSelectedRangeLast();
    if (!e)
      return;
    e.setDirection(this.hot.isRtl() ? "NE-SW" : "NW-SE");
    const {
      from: t,
      to: n
    } = e;
    this.unmergeRange(e, !0), this.mergeRange(e), this.hot.selectCell(t.row, t.col, n.row, n.col, !1);
  }
  /**
   * Unmerges the selection provided as a cell range.
   *
   * @param {CellRange} [cellRange] Selection cell range.
   */
  unmergeSelection() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.hot.getSelectedRangeLast();
    if (!e)
      return;
    const {
      from: t,
      to: n
    } = e;
    this.unmergeRange(e, !0), this.hot.selectCell(t.row, t.col, n.row, n.col, !1);
  }
  /**
   * Merges cells in the provided cell range.
   *
   * @private
   * @param {CellRange} cellRange Cell range to merge.
   * @param {boolean} [auto=false] `true` if is called automatically, e.g. At initialization.
   * @param {boolean} [preventPopulation=false] `true`, if the method should not run `populateFromArray` at the end,
   *   but rather return its arguments.
   * @returns {Array|boolean} Returns an array of [row, column, dataUnderCollection] if preventPopulation is set to
   *   true. If the the merging process went successful, it returns `true`, otherwise - `false`.
   * @fires Hooks#beforeMergeCells
   * @fires Hooks#afterMergeCells
   */
  mergeRange(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1, n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1;
    const o = e.getTopStartCorner(), r = e.getBottomEndCorner(), a = {
      row: o.row,
      col: o.col,
      rowspan: r.row - o.row + 1,
      colspan: r.col - o.col + 1
    }, l = [];
    let c = null;
    return this.canMergeRange(a, t) ? (this.hot.runHooks("beforeMergeCells", e, t), Se(0, a.rowspan - 1, (u) => {
      Se(0, a.colspan - 1, (f) => {
        let g = null;
        l[u] || (l[u] = []), u === 0 && f === 0 ? g = this.hot.getSourceDataAtCell(this.hot.toPhysicalRow(a.row), this.hot.toPhysicalColumn(a.col)) : this.hot.setCellMeta(a.row + u, a.col + f, "hidden", !0), l[u][f] = g;
      });
    }), this.hot.setCellMeta(a.row, a.col, "spanned", !0), this.mergedCellsCollection.add(a) ? (n ? c = [a.row, a.col, l] : this.hot.populateFromArray(a.row, a.col, l, void 0, void 0, this.pluginName), t || this.ifChromeForceRepaint(), this.hot.runHooks("afterMergeCells", e, a, t), c) : !0) : !1;
  }
  /**
   * Unmerges the selection provided as a cell range. If no cell range is provided, it uses the current selection.
   *
   * @private
   * @param {CellRange} cellRange Selection cell range.
   * @param {boolean} [auto=false] `true` if called automatically by the plugin.
   *
   * @fires Hooks#beforeUnmergeCells
   * @fires Hooks#afterUnmergeCells
   */
  unmergeRange(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;
    const n = this.mergedCellsCollection.getWithinRange(e);
    n && (this.hot.runHooks("beforeUnmergeCells", e, t), D(n, (o) => {
      this.mergedCellsCollection.remove(o.row, o.col), Se(0, o.rowspan - 1, (r) => {
        Se(0, o.colspan - 1, (a) => {
          this.hot.removeCellMeta(o.row + r, o.col + a, "hidden"), this.hot.removeCellMeta(o.row + r, o.col + a, "copyable");
        });
      }), this.hot.removeCellMeta(o.row, o.col, "spanned");
    }), this.hot.runHooks("afterUnmergeCells", e, t), this.hot.render());
  }
  /**
   * Merges or unmerges, based on the cell range provided as `cellRange`.
   *
   * @private
   * @param {CellRange} cellRange The cell range to merge or unmerged.
   */
  toggleMerge(e) {
    const t = this.mergedCellsCollection.get(e.from.row, e.from.col);
    t.row === e.from.row && t.col === e.from.col && t.row + t.rowspan - 1 === e.to.row && t.col + t.colspan - 1 === e.to.col ? this.unmergeRange(e) : this.mergeSelection(e);
  }
  /**
   * Merges the specified range.
   *
   * @param {number} startRow Start row of the merged cell.
   * @param {number} startColumn Start column of the merged cell.
   * @param {number} endRow End row of the merged cell.
   * @param {number} endColumn End column of the merged cell.
   * @fires Hooks#beforeMergeCells
   * @fires Hooks#afterMergeCells
   */
  merge(e, t, n, o) {
    const r = this.hot._createCellCoords(e, t), a = this.hot._createCellCoords(n, o);
    this.mergeRange(this.hot._createCellRange(r, r, a));
  }
  /**
   * Unmerges the merged cell in the provided range.
   *
   * @param {number} startRow Start row of the merged cell.
   * @param {number} startColumn Start column of the merged cell.
   * @param {number} endRow End row of the merged cell.
   * @param {number} endColumn End column of the merged cell.
   * @fires Hooks#beforeUnmergeCells
   * @fires Hooks#afterUnmergeCells
   */
  unmerge(e, t, n, o) {
    const r = this.hot._createCellCoords(e, t), a = this.hot._createCellCoords(n, o);
    this.unmergeRange(this.hot._createCellRange(r, r, a));
  }
  /**
   * `afterInit` hook callback.
   *
   * @private
   */
  onAfterInit() {
    this.generateFromSettings(this.hot.getSettings()[Yr]), this.hot.render();
  }
  /**
   * Register shortcuts responsible for toggling a merge.
   *
   * @private
   */
  registerShortcuts() {
    this.hot.getShortcutManager().getContext("grid").addShortcut({
      keys: [["Control", "m"]],
      callback: () => {
        this.toggleMerge(this.hot.getSelectedRangeLast()), this.hot.render();
      },
      runOnlyIf: (n) => !n.altKey,
      // right ALT in some systems triggers ALT+CTRL
      group: Sy
    });
  }
  /**
   * Unregister shortcuts responsible for toggling a merge.
   *
   * @private
   */
  unregisterShortcuts() {
    this.hot.getShortcutManager().getContext("grid").removeShortcutsByGroup(Sy);
  }
  /**
   * Modifies the information on whether the current selection contains multiple cells. The `afterIsMultipleSelection`
   * hook callback.
   *
   * @private
   * @param {boolean} isMultiple Determines whether the current selection contains multiple cells.
   * @returns {boolean}
   */
  onAfterIsMultipleSelection(e) {
    if (e) {
      const t = this.mergedCellsCollection.mergedCells, n = this.hot.getSelectedRangeLast();
      for (let o = 0; o < t.length; o += 1)
        if (n.from.row === t[o].row && n.from.col === t[o].col && n.to.row === t[o].row + t[o].rowspan - 1 && n.to.col === t[o].col + t[o].colspan - 1)
          return !1;
    }
    return e;
  }
  /**
   * `modifyTransformStart` hook callback.
   *
   * @private
   * @param {object} delta The transformation delta.
   */
  onModifyTransformStart(e) {
    const t = yy.get(this), n = this.hot.getSelectedRangeLast();
    let o = {
      row: e.row,
      col: e.col
    }, r = null;
    const a = this.hot._createCellCoords(n.highlight.row, n.highlight.col), l = this.mergedCellsCollection.get(a.row, a.col);
    if (t.lastDesiredCoords || (t.lastDesiredCoords = this.hot._createCellCoords(null, null)), l) {
      const h = this.hot._createCellCoords(l.row, l.col), u = this.hot._createCellCoords(l.row + l.rowspan - 1, l.col + l.colspan - 1);
      this.hot._createCellRange(h, h, u).includes(t.lastDesiredCoords) || (t.lastDesiredCoords = this.hot._createCellCoords(null, null)), o.row = t.lastDesiredCoords.row ? t.lastDesiredCoords.row - a.row : o.row, o.col = t.lastDesiredCoords.col ? t.lastDesiredCoords.col - a.col : o.col, e.row > 0 ? o.row = l.row + l.rowspan - 1 - a.row + e.row : e.row < 0 && (o.row = a.row - l.row + e.row), e.col > 0 ? o.col = l.col + l.colspan - 1 - a.col + e.col : e.col < 0 && (o.col = a.col - l.col + e.col);
    }
    r = this.hot._createCellCoords(n.highlight.row + o.row, n.highlight.col + o.col);
    const c = this.mergedCellsCollection.get(r.row, r.col);
    if (c) {
      const h = this.mergedCellsCollection.getFirstRenderableCoords(c.row, c.col);
      t.lastDesiredCoords = r, o = {
        row: h.row - a.row,
        col: h.col - a.col
      };
    }
    o.row !== 0 && (e.row = o.row), o.col !== 0 && (e.col = o.col);
  }
  /**
   * `modifyTransformEnd` hook callback. Needed to handle "jumping over" merged merged cells, while selecting.
   *
   * @private
   * @param {object} delta The transformation delta.
   */
  onModifyTransformEnd(e) {
    const t = this.hot.getSelectedRangeLast(), n = Ss(e), o = this.selectionCalculations.getUpdatedSelectionRange(t, e);
    let r = Ss(n);
    const a = this.mergedCellsCollection.getWithinRange(o, !0);
    do
      r = Ss(n), this.selectionCalculations.getUpdatedSelectionRange(t, n), D(a, (l) => {
        this.selectionCalculations.snapDelta(n, t, l);
      });
    while (n.row !== r.row || n.col !== r.col);
    e.row = n.row, e.col = n.col;
  }
  /**
   * `modifyGetCellCoords` hook callback. Swaps the `getCell` coords with the merged parent coords.
   *
   * @private
   * @param {number} row Row index.
   * @param {number} column Visual column index.
   * @returns {Array|undefined} Visual coordinates of the merge.
   */
  onModifyGetCellCoords(e, t) {
    if (e < 0 || t < 0)
      return;
    const n = this.mergedCellsCollection.get(e, t);
    if (!n)
      return;
    const {
      row: o,
      col: r,
      colspan: a,
      rowspan: l
    } = n;
    return [
      // Most top-left merged cell coords.
      o,
      r,
      // Most bottom-right merged cell coords.
      o + l - 1,
      r + a - 1
    ];
  }
  /**
   * `afterContextMenuDefaultOptions` hook callback.
   *
   * @private
   * @param {object} defaultOptions The default context menu options.
   */
  addMergeActionsToContextMenu(e) {
    e.items.push({
      name: "---------"
    }, Fj(this));
  }
  /**
   * `afterRenderer` hook callback.
   *
   * @private
   * @param {HTMLElement} TD The cell to be modified.
   * @param {number} row Row index.
   * @param {number} col Visual column index.
   */
  onAfterRenderer(e, t, n) {
    const o = this.mergedCellsCollection.get(t, n), r = Ge(o) ? Ss(o) : void 0;
    if (Ge(r)) {
      const {
        rowIndexMapper: a,
        columnIndexMapper: l
      } = this.hot, {
        row: c,
        col: h,
        colspan: u,
        rowspan: f
      } = r, [g, m] = this.translateMergedCellToRenderable(c, f, h, u), w = a.getRenderableFromVisualIndex(t), C = l.getRenderableFromVisualIndex(n), S = g - w + 1, x = m - C + 1;
      r.row = a.getNearestNotHiddenIndex(r.row, 1), r.col = l.getNearestNotHiddenIndex(r.col, 1), r.rowspan = Math.min(r.rowspan, S), r.colspan = Math.min(r.colspan, x);
    }
    Mf(e, r, t, n);
  }
  /**
   * `beforeSetRangeStart` and `beforeSetRangeStartOnly` hook callback.
   * A selection within merge area should be rewritten to the start of merge area.
   *
   * @private
   * @param {object} coords Cell coords.
   */
  onBeforeSetRangeStart(e) {
    if (this.mergedCellsCollection.isFirstRenderableMergedCell(e.row, e.col)) {
      const t = this.mergedCellsCollection.get(e.row, e.col);
      [e.row, e.col] = [t.row, t.col];
    }
  }
  /**
   * `beforeSetRangeEnd` hook callback.
   * While selecting cells with keyboard or mouse, make sure that rectangular area is expanded to the extent of the
   * merged cell.
   *
   * Note: Please keep in mind that callback may modify both start and end range coordinates by the reference.
   *
   * @private
   * @param {object} coords Cell coords.
   */
  onBeforeSetRangeEnd(e) {
    const t = this.hot.getSelectedRangeLast();
    t.highlight = this.hot._createCellCoords(t.highlight.row, t.highlight.col), t.to = e;
    let n = !1;
    if (!(this.hot.selection.isSelectedByColumnHeader() || this.hot.selection.isSelectedByRowHeader()))
      do {
        n = !1;
        for (let o = 0; o < this.mergedCellsCollection.mergedCells.length; o += 1) {
          const a = this.mergedCellsCollection.mergedCells[o].getRange();
          t.expandByRange(a) && (e.row = t.to.row, e.col = t.to.col, n = !0);
        }
      } while (n);
  }
  /**
   * The `afterGetCellMeta` hook callback.
   *
   * @private
   * @param {number} row Row index.
   * @param {number} col Column index.
   * @param {object} cellProperties The cell properties object.
   */
  onAfterGetCellMeta(e, t, n) {
    const o = this.mergedCellsCollection.get(e, t);
    o && (o.row !== e || o.col !== t ? n.copyable = !1 : (n.rowspan = o.rowspan, n.colspan = o.colspan));
  }
  /**
   * `afterViewportRowCalculatorOverride` hook callback.
   *
   * @private
   * @param {object} calc The row calculator object.
   */
  onAfterViewportRowCalculatorOverride(e) {
    const t = this.hot.countCols();
    this.modifyViewportRowStart(e, t), this.modifyViewportRowEnd(e, t);
  }
  /**
   * Modify viewport start when needed. We extend viewport when merged cells aren't fully visible.
   *
   * @private
   * @param {object} calc The row calculator object.
   * @param {number} nrOfColumns Number of visual columns.
   */
  modifyViewportRowStart(e, t) {
    const n = this.hot.rowIndexMapper, o = n.getVisualFromRenderableIndex(e.startRow);
    for (let r = 0; r < t; r += 1) {
      const a = this.mergedCellsCollection.get(o, r);
      if (Ge(a)) {
        const l = n.getRenderableFromVisualIndex(n.getNearestNotHiddenIndex(a.row, 1));
        if (l < e.startRow) {
          e.startRow = l, this.modifyViewportRowStart(e, t);
          return;
        }
      }
    }
  }
  /**
   *  Modify viewport end when needed. We extend viewport when merged cells aren't fully visible.
   *
   * @private
   * @param {object} calc The row calculator object.
   * @param {number} nrOfColumns Number of visual columns.
   */
  modifyViewportRowEnd(e, t) {
    const n = this.hot.rowIndexMapper, o = n.getVisualFromRenderableIndex(e.endRow);
    for (let r = 0; r < t; r += 1) {
      const a = this.mergedCellsCollection.get(o, r);
      if (Ge(a)) {
        const l = a.row + a.rowspan - 1, c = n.getRenderableFromVisualIndex(n.getNearestNotHiddenIndex(l, -1));
        if (c > e.endRow) {
          e.endRow = c, this.modifyViewportRowEnd(e, t);
          return;
        }
      }
    }
  }
  /**
   * `afterViewportColumnCalculatorOverride` hook callback.
   *
   * @private
   * @param {object} calc The column calculator object.
   */
  onAfterViewportColumnCalculatorOverride(e) {
    const t = this.hot.countRows();
    this.modifyViewportColumnStart(e, t), this.modifyViewportColumnEnd(e, t);
  }
  /**
   * Modify viewport start when needed. We extend viewport when merged cells aren't fully visible.
   *
   * @private
   * @param {object} calc The column calculator object.
   * @param {number} nrOfRows Number of visual rows.
   */
  modifyViewportColumnStart(e, t) {
    const n = this.hot.columnIndexMapper, o = n.getVisualFromRenderableIndex(e.startColumn);
    for (let r = 0; r < t; r += 1) {
      const a = this.mergedCellsCollection.get(r, o);
      if (Ge(a)) {
        const l = n.getRenderableFromVisualIndex(n.getNearestNotHiddenIndex(a.col, 1));
        if (l < e.startColumn) {
          e.startColumn = l, this.modifyViewportColumnStart(e, t);
          return;
        }
      }
    }
  }
  /**
   *  Modify viewport end when needed. We extend viewport when merged cells aren't fully visible.
   *
   * @private
   * @param {object} calc The column calculator object.
   * @param {number} nrOfRows Number of visual rows.
   */
  modifyViewportColumnEnd(e, t) {
    const n = this.hot.columnIndexMapper, o = n.getVisualFromRenderableIndex(e.endColumn);
    for (let r = 0; r < t; r += 1) {
      const a = this.mergedCellsCollection.get(r, o);
      if (Ge(a)) {
        const l = a.col + a.colspan - 1, c = n.getRenderableFromVisualIndex(n.getNearestNotHiddenIndex(l, -1));
        if (c > e.endColumn) {
          e.endColumn = c, this.modifyViewportColumnEnd(e, t);
          return;
        }
      }
    }
  }
  /**
   * Translates merged cell coordinates to renderable indexes.
   *
   * @private
   * @param {number} parentRow Visual row index.
   * @param {number} rowspan Rowspan which describes shift which will be applied to parent row
   *                         to calculate renderable index which points to the most bottom
   *                         index position. Pass rowspan as `0` to calculate the most top
   *                         index position.
   * @param {number} parentColumn Visual column index.
   * @param {number} colspan Colspan which describes shift which will be applied to parent column
   *                         to calculate renderable index which points to the most right
   *                         index position. Pass colspan as `0` to calculate the most left
   *                         index position.
   * @returns {number[]}
   */
  translateMergedCellToRenderable(e, t, n, o) {
    const {
      rowIndexMapper: r,
      columnIndexMapper: a
    } = this.hot;
    let l, c;
    t === 0 ? l = r.getNearestNotHiddenIndex(e, 1) : l = r.getNearestNotHiddenIndex(e + t - 1, -1), o === 0 ? c = a.getNearestNotHiddenIndex(n, 1) : c = a.getNearestNotHiddenIndex(n + o - 1, -1);
    const h = e >= 0 ? r.getRenderableFromVisualIndex(l) : e, u = n >= 0 ? a.getRenderableFromVisualIndex(c) : n;
    return [h, u];
  }
  /**
   * The `modifyAutofillRange` hook callback.
   *
   * @private
   * @param {Array} drag The drag area coordinates.
   * @param {Array} select The selection information.
   * @returns {Array} The new drag area.
   */
  onModifyAutofillRange(e, t) {
    this.autofillCalculations.correctSelectionAreaSize(t);
    const n = this.autofillCalculations.getDirection(t, e);
    let o = e;
    if (this.autofillCalculations.dragAreaOverlapsCollections(t, o, n))
      return o = t, o;
    const r = this.mergedCellsCollection.getWithinRange({
      from: {
        row: t[0],
        col: t[1]
      },
      to: {
        row: t[2],
        col: t[3]
      }
    });
    return r && (o = this.autofillCalculations.snapDragArea(t, o, n, r)), o;
  }
  /**
   * `afterCreateCol` hook callback.
   *
   * @private
   * @param {number} column Column index.
   * @param {number} count Number of created columns.
   */
  onAfterCreateCol(e, t) {
    this.mergedCellsCollection.shiftCollections("right", e, t);
  }
  /**
   * `afterRemoveCol` hook callback.
   *
   * @private
   * @param {number} column Column index.
   * @param {number} count Number of removed columns.
   */
  onAfterRemoveCol(e, t) {
    this.mergedCellsCollection.shiftCollections("left", e, t);
  }
  /**
   * `afterCreateRow` hook callback.
   *
   * @private
   * @param {number} row Row index.
   * @param {number} count Number of created rows.
   * @param {string} source Source of change.
   */
  onAfterCreateRow(e, t, n) {
    n !== "auto" && this.mergedCellsCollection.shiftCollections("down", e, t);
  }
  /**
   * `afterRemoveRow` hook callback.
   *
   * @private
   * @param {number} row Row index.
   * @param {number} count Number of removed rows.
   */
  onAfterRemoveRow(e, t) {
    this.mergedCellsCollection.shiftCollections("up", e, t);
  }
  /**
   * `afterChange` hook callback. Used to propagate merged cells after using Autofill.
   *
   * @private
   * @param {Array} changes The changes array.
   * @param {string} source Determines the source of the change.
   */
  onAfterChange(e, t) {
    t === "Autofill.fill" && this.autofillCalculations.recreateAfterDataPopulation(e);
  }
  /**
   * `beforeDrawAreaBorders` hook callback.
   *
   * @private
   * @param {Array} corners Visual coordinates of the area corners.
   * @param {string} className Class name for the area.
   */
  onBeforeDrawAreaBorders(e, t) {
    if (t && t === "area") {
      const n = this.hot.getSelectedRangeLast(), o = this.mergedCellsCollection.getWithinRange(n);
      D(o, (r) => {
        n.getBottomEndCorner().row === r.getLastRow() && n.getBottomEndCorner().col === r.getLastColumn() && (e[2] = r.row, e[3] = r.col);
      });
    }
  }
  /**
   * `afterModifyTransformStart` hook callback. Fixes a problem with navigating through merged cells at the edges of
   * the table with the ENTER/SHIFT+ENTER/TAB/SHIFT+TAB keys.
   *
   * @private
   * @param {CellCoords} coords Coordinates of the to-be-selected cell.
   * @param {number} rowTransformDir Row transformation direction (negative value = up, 0 = none, positive value =
   *   down).
   * @param {number} colTransformDir Column transformation direction (negative value = up, 0 = none, positive value =
   *   down).
   */
  onAfterModifyTransformStart(e, t, n) {
    if (!this.enabled)
      return;
    const o = this.mergedCellsCollection.get(e.row, e.col);
    if (!o)
      return;
    const r = t > 0, a = t < 0, l = n < 0, c = n > 0, h = o.row + o.rowspan - 1 === this.hot.countRows() - 1, u = o.row === 0, f = o.col + o.colspan - 1 === this.hot.countCols() - 1, g = o.col === 0;
    (r && h || a && u || c && f || l && g) && (e.row = o.row, e.col = o.col);
  }
  /**
   * `afterDrawSelection` hook callback. Used to add the additional class name for the entirely-selected merged cells.
   *
   * @private
   * @param {number} currentRow Visual row index of the currently processed cell.
   * @param {number} currentColumn Visual column index of the currently cell.
   * @param {Array} cornersOfSelection Array of the current selection in a form of `[startRow, startColumn, endRow,
   *   endColumn]`.
   * @param {number|undefined} layerLevel Number indicating which layer of selection is currently processed.
   * @returns {string|undefined} A `String`, which will act as an additional `className` to be added to the currently
   *   processed cell.
   */
  onAfterDrawSelection(e, t, n, o) {
    if (n)
      return this.selectionCalculations.getSelectedMergedCellClassName(e, t, n, o);
  }
  /**
   * `beforeRemoveCellClassNames` hook callback. Used to remove additional class name from all cells in the table.
   *
   * @private
   * @returns {string[]} An `Array` of `String`s. Each of these strings will act like class names to be removed from
   *   all the cells in the table.
   */
  onBeforeRemoveCellClassNames() {
    return this.selectionCalculations.getSelectedMergedCellClassNameToRemove();
  }
}
function Wj(s, e) {
  return function(t, n) {
    const [, ...o] = t, [, ...r] = n;
    return function a(l) {
      const c = s[l], h = e[l], u = o[l], f = r[l], g = h.multiColumnSorting, w = (g.compareFunctionFactory ? g.compareFunctionFactory : m0(h.type))(c, h, g)(u, f);
      if (w === yn) {
        const C = l + 1;
        if (typeof e[C] < "u")
          return a(C);
      }
      return w;
    }(0);
  };
}
function by() {
  pt(ut`Plugins \`columnSorting\` and \`multiColumnSorting\` should not be enabled simultaneously. 
    Only \`multiColumnSorting\` will work.`);
}
const aE = "sort";
function Uj(s, e, t) {
  const n = [];
  return t === !1 || s.isColumnSorted(e) && s.getNumberOfSortedColumns() > 1 && n.push(`${aE}-${s.getIndexOfColumnInSortQueue(e) + 1}`), n;
}
function zj(s) {
  const e = s.className.split(" "), t = new RegExp(`^${aE}-[0-9]{1,2}$`);
  return e.filter((n) => t.test(n));
}
const _f = "multiColumnSorting", Yj = 170, Gj = "append", Ry = "columnSorting";
g0(_f, Wj);
class jj extends p0 {
  static get PLUGIN_KEY() {
    return _f;
  }
  static get PLUGIN_PRIORITY() {
    return Yj;
  }
  constructor(e) {
    super(e), this.pluginKey = _f;
  }
  /**
   * Checks if the plugin is enabled in the Handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link MultiColumnSorting#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return super.isEnabled();
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    !this.enabled && this.hot.getSettings()[this.pluginKey] && this.hot.getSettings()[Ry] && by(), super.enablePlugin();
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    super.disablePlugin();
  }
  /**
   * Sorts the table by chosen columns and orders.
   *
   * @param {undefined|object|Array} sortConfig Single column sort configuration or full sort configuration (for all sorted columns).
   * The configuration object contains `column` and `sortOrder` properties. First of them contains visual column index, the second one contains
   * sort order (`asc` for ascending, `desc` for descending).
   *
   * **Note**: Please keep in mind that every call of `sort` function set an entirely new sort order. Previous sort configs aren't preserved.
   *
   * @example
   * ```js
   * // sort ascending first visual column
   * hot.getPlugin('multiColumnSorting').sort({ column: 0, sortOrder: 'asc' });
   *
   * // sort first two visual column in the defined sequence
   * hot.getPlugin('multiColumnSorting').sort([{
   *   column: 1, sortOrder: 'asc'
   * }, {
   *   column: 0, sortOrder: 'desc'
   * }]);
   * ```
   *
   * @fires Hooks#beforeColumnSort
   * @fires Hooks#afterColumnSort
   */
  sort(e) {
    super.sort(e);
  }
  /**
   * Clear the sort performed on the table.
   */
  clearSort() {
    super.clearSort();
  }
  /**
   * Checks if the table is sorted (any column have to be sorted).
   *
   * @returns {boolean}
   */
  isSorted() {
    return super.isSorted();
  }
  /**
   * Get sort configuration for particular column or for all sorted columns. Objects contain `column` and `sortOrder` properties.
   *
   * **Note**: Please keep in mind that returned objects expose **visual** column index under the `column` key. They are handled by the `sort` function.
   *
   * @param {number} [column] Visual column index.
   * @returns {undefined|object|Array}
   */
  getSortConfig(e) {
    return super.getSortConfig(e);
  }
  /**
   * @description
   * Warn: Useful mainly for providing server side sort implementation (see in the example below). It doesn't sort the data set. It just sets sort configuration for all sorted columns.
   * Note: Please keep in mind that this method doesn't re-render the table.
   *
   * @example
   * ```js
   * beforeColumnSort: function(currentSortConfig, destinationSortConfigs) {
   *   const columnSortPlugin = this.getPlugin('multiColumnSorting');
   *
   *   columnSortPlugin.setSortConfig(destinationSortConfigs);
   *
   *   // const newData = ... // Calculated data set, ie. from an AJAX call.
   *
   *   this.loadData(newData); // Load new data set and re-render the table.
   *
   *   return false; // The blockade for the default sort action.
   * }
   * ```
   *
   * @param {undefined|object|Array} sortConfig Single column sort configuration or full sort configuration (for all sorted columns).
   * The configuration object contains `column` and `sortOrder` properties. First of them contains visual column index, the second one contains
   * sort order (`asc` for ascending, `desc` for descending).
   */
  setSortConfig(e) {
    super.setSortConfig(e);
  }
  /**
   * Get normalized sort configs.
   *
   * @private
   * @param {object|Array} [sortConfig=[]] Single column sort configuration or full sort configuration (for all sorted columns).
   * The configuration object contains `column` and `sortOrder` properties. First of them contains visual column index, the second one contains
   * sort order (`asc` for ascending, `desc` for descending).
   * @returns {Array}
   */
  getNormalizedSortConfigs() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
    return Array.isArray(e) ? e : [e];
  }
  /**
   * Update header classes.
   *
   * @private
   * @param {HTMLElement} headerSpanElement Header span element.
   * @param {...*} args Extra arguments for helpers.
   */
  updateHeaderClasses(e) {
    for (var t = arguments.length, n = new Array(t > 1 ? t - 1 : 0), o = 1; o < t; o++)
      n[o - 1] = arguments[o];
    super.updateHeaderClasses(e, ...n), $e(e, zj(e)), this.enabled !== !1 && ie(e, Uj(...n));
  }
  /**
   * Overwriting base plugin's `onUpdateSettings` method. Please keep in mind that `onAfterUpdateSettings` isn't called
   * for `updateSettings` in specific situations.
   *
   * @private
   * @param {object} newSettings New settings object.
   */
  onUpdateSettings(e) {
    this.hot.getSettings()[this.pluginKey] && this.hot.getSettings()[Ry] && by(), super.onUpdateSettings(e);
  }
  /**
   * Callback for the `onAfterOnCellMouseDown` hook.
   *
   * @private
   * @param {Event} event Event which are provided by hook.
   * @param {CellCoords} coords Visual coords of the selected cell.
   */
  onAfterOnCellMouseDown(e, t) {
    vf(t.row, t.col, e) !== !1 && this.wasClickableHeaderClicked(e, t.col) && (this.hot.getShortcutManager().isCtrlPressed() ? (this.hot.deselectCell(), this.hot.selectColumns(t.col), this.sort(this.getNextSortConfig(t.col, Gj))) : this.sort(this.getColumnNextConfig(t.col)));
  }
}
const Kj = "multipleSelectionHandles", Xj = 160;
class qj extends at {
  static get PLUGIN_KEY() {
    return Kj;
  }
  static get PLUGIN_PRIORITY() {
    return Xj;
  }
  /**
   * @param {object} hotInstance The handsontable instance.
   */
  constructor(e) {
    super(e), this.dragged = [], this.eventManager = null, this.lastSetCell = null;
  }
  /**
   * Check if the plugin is enabled in the handsontable settings.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return vn();
  }
  /**
   * Enable plugin for this Handsontable instance.
   */
  enablePlugin() {
    this.enabled || (this.eventManager || (this.eventManager = new Dt(this)), this.registerListeners(), super.enablePlugin());
  }
  /**
   * Bind the touch events.
   *
   * @private
   */
  registerListeners() {
    const e = this, {
      rootElement: t
    } = this.hot;
    function n(o) {
      if (e.dragged.length === 1)
        return e.dragged.splice(0, e.dragged.length), !0;
      const r = e.dragged.indexOf(o);
      if (r === -1)
        return !1;
      r === 0 ? e.dragged = e.dragged.slice(0, 1) : r === 1 && (e.dragged = e.dragged.slice(-1));
    }
    this.eventManager.addEventListener(t, "touchstart", (o) => {
      let r;
      if (Ne(o.target, "topSelectionHandle-HitArea"))
        return r = e.hot.getSelectedRangeLast(), e.dragged.push("top"), e.touchStartRange = {
          width: r.getWidth(),
          height: r.getHeight(),
          direction: r.getDirection()
        }, o.preventDefault(), !1;
      if (Ne(o.target, "bottomSelectionHandle-HitArea"))
        return r = e.hot.getSelectedRangeLast(), e.dragged.push("bottom"), e.touchStartRange = {
          width: r.getWidth(),
          height: r.getHeight(),
          direction: r.getDirection()
        }, o.preventDefault(), !1;
    }), this.eventManager.addEventListener(t, "touchend", (o) => {
      if (Ne(o.target, "topSelectionHandle-HitArea"))
        return n.call(e, "top"), e.touchStartRange = void 0, o.preventDefault(), !1;
      if (Ne(o.target, "bottomSelectionHandle-HitArea"))
        return n.call(e, "bottom"), e.touchStartRange = void 0, o.preventDefault(), !1;
    }), this.eventManager.addEventListener(t, "touchmove", (o) => {
      const {
        rootDocument: r
      } = this.hot;
      let a, l, c, h, u, f;
      if (e.dragged.length === 0)
        return;
      const g = r.elementFromPoint(o.touches[0].clientX, o.touches[0].clientY);
      !g || g === e.lastSetCell || ((g.nodeName === "TD" || g.nodeName === "TH") && (a = e.hot.getCoords(g), a.col === -1 && (a.col = 0), l = e.hot.getSelectedRangeLast(), c = l.getWidth(), h = l.getHeight(), u = l.getDirection(), c === 1 && h === 1 && e.hot.selection.setRangeEnd(a), f = e.getCurrentRangeCoords(l, a, e.touchStartRange.direction, u, e.dragged[0]), f.start !== null && e.hot.selection.setRangeStart(f.start), e.hot.selection.setRangeEnd(f.end), e.lastSetCell = g), o.preventDefault());
    });
  }
  getCurrentRangeCoords(e, t, n, o, r) {
    const a = e.getTopStartCorner(), l = e.getBottomEndCorner(), c = e.getBottomStartCorner(), h = e.getTopEndCorner();
    let u = {
      start: null,
      end: null
    };
    switch (n) {
      case "NE-SW":
        switch (o) {
          case "NE-SW":
          case "NW-SE":
            r === "top" ? u = {
              start: this.hot._createCellCoords(t.row, e.highlight.col),
              end: this.hot._createCellCoords(c.row, t.col)
            } : u = {
              start: this.hot._createCellCoords(e.highlight.row, t.col),
              end: this.hot._createCellCoords(t.row, a.col)
            };
            break;
          case "SE-NW":
            r === "bottom" && (u = {
              start: this.hot._createCellCoords(l.row, t.col),
              end: this.hot._createCellCoords(t.row, a.col)
            });
            break;
        }
        break;
      case "NW-SE":
        switch (o) {
          case "NE-SW":
            r === "top" ? u = {
              start: t,
              end: c
            } : u.end = t;
            break;
          case "NW-SE":
            r === "top" ? u = {
              start: t,
              end: l
            } : u.end = t;
            break;
          case "SE-NW":
            r === "top" ? u = {
              start: t,
              end: a
            } : u.end = t;
            break;
          case "SW-NE":
            r === "top" ? u = {
              start: t,
              end: h
            } : u.end = t;
            break;
        }
        break;
      case "SW-NE":
        switch (o) {
          case "NW-SE":
            r === "bottom" ? u = {
              start: this.hot._createCellCoords(t.row, a.col),
              end: this.hot._createCellCoords(c.row, t.col)
            } : u = {
              start: this.hot._createCellCoords(a.row, t.col),
              end: this.hot._createCellCoords(t.row, l.col)
            };
            break;
          case "SW-NE":
            r === "top" ? u = {
              start: this.hot._createCellCoords(e.highlight.row, t.col),
              end: this.hot._createCellCoords(t.row, l.col)
            } : u = {
              start: this.hot._createCellCoords(t.row, a.col),
              end: this.hot._createCellCoords(a.row, t.col)
            };
            break;
          case "SE-NW":
            r === "bottom" ? u = {
              start: this.hot._createCellCoords(t.row, h.col),
              end: this.hot._createCellCoords(a.row, t.col)
            } : r === "top" && (u = {
              start: c,
              end: t
            });
            break;
        }
        break;
      case "SE-NW":
        switch (o) {
          case "NW-SE":
          case "NE-SW":
          case "SW-NE":
            r === "top" && (u.end = t);
            break;
          case "SE-NW":
            r === "top" ? u.end = t : u = {
              start: t,
              end: a
            };
            break;
        }
        break;
    }
    return u;
  }
  /**
   * Check if user is currently dragging the handle.
   *
   * @returns {boolean} Dragging state.
   */
  isDragged() {
    return this.dragged.length > 0;
  }
}
function If() {
  let {
    label: s = "",
    colspan: e = 1,
    origColspan: t = 1,
    collapsible: n = !1,
    crossHiddenColumns: o = [],
    isCollapsed: r = !1,
    isHidden: a = !1,
    isRoot: l = !1,
    isPlaceholder: c = !1
  } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  return {
    label: s,
    colspan: e,
    origColspan: t,
    collapsible: n,
    isCollapsed: r,
    crossHiddenColumns: o,
    isHidden: a,
    isRoot: l,
    isPlaceholder: c
  };
}
function lE() {
  return {
    label: "",
    isPlaceholder: !0
  };
}
function Zj(s) {
  let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1 / 0;
  const t = [];
  if (e === 0)
    return t;
  D(s, (o) => {
    const r = [];
    let a = 0;
    t.push(r), D(o, (l) => {
      const c = If();
      if (Ge(l)) {
        const {
          label: u,
          colspan: f
        } = l;
        c.label = Vt(u), typeof f == "number" && f > 1 && (c.colspan = f, c.origColspan = f);
      } else
        c.label = Vt(l);
      a += c.origColspan;
      let h = !1;
      if (a >= e && (c.colspan = c.origColspan - (a - e), c.origColspan = c.colspan, h = !0), r.push(c), c.colspan > 1)
        for (let u = 0; u < c.colspan - 1; u++)
          r.push(lE());
      return !h;
    });
  });
  const n = Math.max(...Ye(t, (o) => o.length));
  return D(t, (o) => {
    if (o.length < n) {
      const r = Ye(new Array(n - o.length), () => If());
      o.splice(o.length, 0, ...r);
    }
  }), t;
}
function Ed(s, e, t) {
  Qj(s, e), e.set(s, t);
}
function Qj(s, e) {
  if (e.has(s))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function Xs(s, e) {
  var t = cE(s, e, "get");
  return Jj(s, t);
}
function Jj(s, e) {
  return e.get ? e.get.call(s) : e.value;
}
function $r(s, e, t) {
  var n = cE(s, e, "set");
  return e3(s, n, t), t;
}
function cE(s, e, t) {
  if (!e.has(s))
    throw new TypeError("attempted to " + t + " private field on non-instance");
  return e.get(s);
}
function e3(s, e, t) {
  if (e.set)
    e.set.call(s, t);
  else {
    if (!e.writable)
      throw new TypeError("attempted to set read only private field");
    e.value = t;
  }
}
const Ey = ["label", "collapsible"];
var Nn = /* @__PURE__ */ new WeakMap(), $i = /* @__PURE__ */ new WeakMap(), xd = /* @__PURE__ */ new WeakMap();
class t3 {
  constructor() {
    Ed(this, Nn, {
      writable: !0,
      value: []
    }), Ed(this, $i, {
      writable: !0,
      value: 0
    }), Ed(this, xd, {
      writable: !0,
      value: 1 / 0
    });
  }
  /**
   * Sets columns limit to the source settings will be trimmed. All headers which
   * overlap the column limit will be reduced to keep the structure solid.
   *
   * @param {number} columnsCount The number of columns to limit to.
   */
  setColumnsLimit(e) {
    $r(this, xd, e);
  }
  /**
   * Sets a new nested header configuration.
   *
   * @param {Array[]} [nestedHeadersSettings=[]] The user-defined nested headers settings.
   */
  setData() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
    $r(this, Nn, Zj(e, Xs(this, xd))), $r(this, $i, Xs(this, Nn).length);
  }
  /**
   * Gets normalized source settings.
   *
   * @returns {Array[]}
   */
  getData() {
    return Xs(this, Nn);
  }
  /**
   * Merges settings with current source settings.
   *
   * @param {object[]} additionalSettings An array of objects with `row`, `col` and additional
   *                                      properties to merge with current source settings.
   */
  mergeWith(e) {
    D(e, (t) => {
      let {
        row: n,
        col: o,
        ...r
      } = t;
      const a = this.getHeaderSettings(n, o);
      a !== null && Ut(a, r, Ey);
    });
  }
  /**
   * Maps the current state with a callback. For each source settings the callback function
   * is called. If the function returns value that value is merged with the source settings.
   *
   * @param {Function} callback A function that is called for every header settings.
   *                            Each time the callback is called, the returned value extends
   *                            header settings.
   */
  map(e) {
    D(Xs(this, Nn), (t) => {
      D(t, (n) => {
        const o = e({
          ...n
        });
        Ge(o) && Ut(n, o, Ey);
      });
    });
  }
  /**
   * Gets source column header settings for a specified header. The returned
   * object contains information about the header label, its colspan length,
   * or if it is hidden in the header renderers.
   *
   * @param {number} headerLevel Header level (0 = most distant to the table).
   * @param {number} columnIndex A visual column index.
   * @returns {object|null}
   */
  getHeaderSettings(e, t) {
    var n;
    if (e >= Xs(this, $i) || e < 0)
      return null;
    const o = Xs(this, Nn)[e];
    return t >= o.length ? null : (n = o[t]) !== null && n !== void 0 ? n : null;
  }
  /**
   * Gets source of column headers settings for specified headers. If the retrieved column
   * settings overlap the range "box" determined by "columnIndex" and "columnsLength"
   * the exception will be thrown.
   *
   * @param {number} headerLevel Header level (0 = most distant to the table).
   * @param {number} columnIndex A visual column index from which the settings will be extracted.
   * @param {number} [columnsLength=1] The number of columns involved in the extraction of settings.
   * @returns {object}
   */
  getHeadersSettings(e, t) {
    let n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;
    const o = [];
    if (e >= Xs(this, $i) || e < 0)
      return o;
    const r = Xs(this, Nn)[e];
    let a = 0;
    for (let l = t; l < r.length; l++) {
      const c = r[l];
      if (c.isPlaceholder)
        throw new Error("The first column settings cannot overlap the other header layers");
      if (a += c.colspan, o.push(c), c.colspan > 1 && (l += c.colspan - 1), a === n)
        break;
      if (a > n)
        throw new Error("The last column settings cannot overlap the other header layers");
    }
    return o;
  }
  /**
   * Gets a total number of headers levels.
   *
   * @returns {number}
   */
  getLayersCount() {
    return Xs(this, $i);
  }
  /**
   * Gets a total number of columns count.
   *
   * @returns {number}
   */
  getColumnsCount() {
    return Xs(this, $i) > 0 ? Xs(this, Nn)[0].length : 0;
  }
  /**
   * Clears the data.
   */
  clear() {
    $r(this, Nn, []), $r(this, $i, 0);
  }
}
function Td(s, e, t) {
  return e = s3(e), e in s ? Object.defineProperty(s, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : s[e] = t, s;
}
function s3(s) {
  var e = n3(s, "string");
  return typeof e == "symbol" ? e : String(e);
}
function n3(s, e) {
  if (typeof s != "object" || s === null)
    return s;
  var t = s[Symbol.toPrimitive];
  if (t !== void 0) {
    var n = t.call(s, e || "default");
    if (typeof n != "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(s);
}
const i3 = "DF-pre-order";
function hE(s, e) {
  let t = s.call(e, this);
  for (let n = 0; n < this.childs.length; n++) {
    if (t === !1)
      return !1;
    t = hE.call(this.childs[n], s, e);
  }
  return t;
}
const o3 = "DF-post-order";
function uE(s, e) {
  for (let t = 0; t < this.childs.length; t++)
    if (uE.call(this.childs[t], s, e) === !1)
      return !1;
  return s.call(e, this);
}
const dE = "BF";
function r3(s, e) {
  const t = [this];
  function n() {
    if (t.length === 0)
      return;
    const o = t.shift();
    t.push(...o.childs), s.call(e, o) !== !1 && n();
  }
  n();
}
const a3 = dE, xy = /* @__PURE__ */ new Map([[i3, hE], [o3, uE], [dE, r3]]);
class Dc {
  constructor(e) {
    Td(this, "data", {}), Td(this, "parent", null), Td(this, "childs", []), this.data = e;
  }
  /**
   * Adds a node to tree leaves. Added node is linked with the parent node through "parent" property.
   *
   * @param {TreeNode} node A TreeNode to add.
   */
  addChild(e) {
    e.parent = this, this.childs.push(e);
  }
  /* eslint-disable jsdoc/require-description-complete-sentence */
  /**
   * @memberof TreeNode#
   * @function cloneTree
   *
   * Clones a tree structure deeply.
   *
   * For example, for giving a tree structure:
   *      .--(B1)--.
   *   .-(C1)   .-(C2)-.----.
   *  (D1)     (D2)   (D3) (D4)
   *
   * Cloning a tree starting from C2 node creates a mirrored tree structure.
   *     .-(C2')-.-----.
   *    (D2')   (D3') (D4')
   *
   * The cloned tree can be safely modified without affecting the original structure.
   * After modification, the clone can be merged with a tree using the "replaceTreeWith" method.
   *
   * @param {TreeNode} [nodeTree=this] A TreeNode to clone.
   * @returns {TreeNode}
   */
  /* eslint-enable jsdoc/require-description-complete-sentence */
  cloneTree() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this;
    const t = new Dc({
      ...e.data
    });
    for (let n = 0; n < e.childs.length; n++)
      t.addChild(this.cloneTree(e.childs[n]));
    return t;
  }
  /**
   * Replaces the current node with a passed tree structure.
   *
   * @param {TreeNode} nodeTree A TreeNode to replace with.
   */
  replaceTreeWith(e) {
    this.data = {
      ...e.data
    }, this.childs = [];
    for (let t = 0; t < e.childs.length; t++)
      this.addChild(e.childs[t]);
  }
  /**
   * Traverses the tree structure through node childs. The walk down traversing supports
   * a three different strategies.
   *  - Depth-first pre-order strategy (https://en.wikipedia.org/wiki/Tree_traversal#Pre-order_(NLR));
   *  - Depth-first post-order strategy (https://en.wikipedia.org/wiki/Tree_traversal#Post-order_(NLR));
   *  - Breadth-first traversal strategy (https://en.wikipedia.org/wiki/Tree_traversal#Breadth-first_search_/_level_order).
   *
   * @param {Function} callback The callback function which will be called for each node.
   * @param {string} [traversalStrategy=DEFAULT_TRAVERSAL_STRATEGY] Traversing strategy.
   */
  walkDown(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : a3;
    if (!xy.has(t))
      throw new Error(`Traversal strategy "${t}" does not exist`);
    xy.get(t).call(this, e, this);
  }
  /**
   * Traverses the tree structure through node parents.
   *
   * @param {Function} callback The callback function which will be called for each node.
   */
  walkUp(e) {
    const t = this, n = (o) => {
      e.call(t, o) !== !1 && o.parent !== null && n(o.parent);
    };
    n(this);
  }
}
function Md(s, e, t) {
  l3(s, e), e.set(s, t);
}
function l3(s, e) {
  if (e.has(s))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function ds(s, e) {
  var t = fE(s, e, "get");
  return c3(s, t);
}
function c3(s, e) {
  return e.get ? e.get.call(s) : e.value;
}
function h3(s, e, t) {
  var n = fE(s, e, "set");
  return u3(s, n, t), t;
}
function fE(s, e, t) {
  if (!e.has(s))
    throw new TypeError("attempted to " + t + " private field on non-instance");
  return e.get(s);
}
function u3(s, e, t) {
  if (e.set)
    e.set.call(s, t);
  else {
    if (!e.writable)
      throw new TypeError("attempted to set read only private field");
    e.value = t;
  }
}
var No = /* @__PURE__ */ new WeakMap(), Fi = /* @__PURE__ */ new WeakMap(), Lo = /* @__PURE__ */ new WeakMap();
class d3 {
  constructor(e) {
    Md(this, No, {
      writable: !0,
      value: /* @__PURE__ */ new Map()
    }), Md(this, Fi, {
      writable: !0,
      value: /* @__PURE__ */ new Map()
    }), Md(this, Lo, {
      writable: !0,
      value: null
    }), h3(this, Lo, e);
  }
  /**
   * Gets an array of the all root nodes.
   *
   * @returns {TreeNode[]}
   */
  getRoots() {
    return Array.from(ds(this, No).values());
  }
  /**
   * Gets a root node by specified visual column index.
   *
   * @param {number} columnIndex A visual column index.
   * @returns {TreeNode|undefined}
   */
  getRootByColumn(e) {
    let t;
    return ds(this, Fi).has(e) && (t = ds(this, No).get(ds(this, Fi).get(e))), t;
  }
  /**
   * Gets a tree node by its position in the grid settings.
   *
   * @param {number} headerLevel Header level index (there is support only for positive values).
   * @param {number} columnIndex A visual column index.
   * @returns {TreeNode|undefined}
   */
  getNode(e, t) {
    const n = this.getRootByColumn(t);
    if (!n)
      return;
    const o = t - ds(this, Fi).get(t);
    let r = 0, a;
    return n.walkDown((l) => {
      const {
        data: {
          origColspan: c,
          headerLevel: h
        }
      } = l;
      if (e === h) {
        if (o >= r && o <= r + c - 1)
          return a = l, a.data.isRoot = t === a.data.columnIndex, !1;
        r += c;
      }
    }), a;
  }
  /**
   * Builds (or rebuilds if called again) root nodes indexes.
   */
  rebuildTreeIndex() {
    let e = 0;
    ds(this, Fi).clear(), D(ds(this, No), (t) => {
      let [, {
        data: {
          colspan: n
        }
      }] = t;
      for (let o = e; o < e + n; o++)
        ds(this, Fi).set(o, e);
      e += n;
    });
  }
  /**
   * Builds trees based on SourceSettings class. Calling a method causes clearing the tree state built
   * from the previous call.
   */
  buildTree() {
    this.clear();
    const e = ds(this, Lo).getColumnsCount();
    let t = 0;
    for (; t < e; ) {
      const n = ds(this, Lo).getHeaderSettings(0, t), o = new Dc();
      ds(this, No).set(t, o), this.buildLeaves(o, t, 0, n.origColspan), t += n.origColspan;
    }
    this.rebuildTreeIndex();
  }
  /**
   * Builds leaves for specified tree node.
   *
   * @param {TreeNode} parentNode A node to which the leaves applies.
   * @param {number} columnIndex A visual column index.
   * @param {number} headerLevel Currently processed header level.
   * @param {number} [extractionLength=1] Determines column extraction length for node children.
   */
  buildLeaves(e, t, n) {
    let o = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 1;
    const r = ds(this, Lo).getHeadersSettings(n, t, o);
    n += 1, D(r, (a) => {
      const l = {
        ...a,
        /**
         * The header level (tree node depth level).
         *
         * @type {number}
         */
        headerLevel: n - 1,
        /**
         * A visual column index.
         *
         * @type {number}
         */
        columnIndex: t
      };
      let c;
      n === 1 ? (e.data = l, c = e) : (c = new Dc(l), e.addChild(c)), n < ds(this, Lo).getLayersCount() && this.buildLeaves(c, t, n, a.origColspan), t += a.origColspan;
    });
  }
  /**
   * Clears the tree to the initial state.
   */
  clear() {
    ds(this, No).clear(), ds(this, Fi).clear();
  }
}
function gE(s, e) {
  s.walkDown((t) => {
    let {
      data: n,
      childs: o
    } = t;
    if (!n.isHidden && (e(n.columnIndex), o.length === 0))
      for (let r = 1; r < n.colspan; r++)
        e(n.columnIndex + r);
  });
}
function Hc(s, e) {
  let {
    childs: t
  } = s;
  if (t.length !== 0)
    return t[0].data[e];
}
function kc(s) {
  return Hc(s, "origColspan") === s.data.origColspan;
}
function Kp(s) {
  const {
    data: e,
    childs: t
  } = s;
  if (!e.isCollapsed || e.isHidden || e.origColspan <= 1)
    return {
      rollbackModification: () => {
      },
      affectedColumns: [],
      colspanCompensation: 0
    };
  if (kc(s))
    return Kp(t[0]);
  e.isCollapsed = !1;
  const o = t.slice(1), r = /* @__PURE__ */ new Set();
  let a = 0;
  if (o.length > 0)
    D(o, (l) => {
      l.replaceTreeWith(l.data.clonedTree), l.data.clonedTree = null;
      const c = l.data;
      a += c.colspan, gE(l, (h) => {
        r.add(h);
      });
    });
  else {
    const {
      colspan: l,
      origColspan: c,
      columnIndex: h
    } = e;
    a = c - l;
    for (let u = 1; u < c; u++)
      r.add(h + u);
  }
  return s.walkUp((l) => {
    const {
      data: c
    } = l;
    c.colspan += a, c.colspan >= c.origColspan ? (c.colspan = c.origColspan, c.isCollapsed = !1) : kc(l) && (c.isCollapsed = Hc(l, "isCollapsed"));
  }), {
    rollbackModification: () => Xp(s),
    affectedColumns: Array.from(r),
    colspanCompensation: a
  };
}
function Xp(s) {
  var e;
  const {
    data: t,
    childs: n
  } = s;
  if (t.isCollapsed || t.isHidden || t.origColspan <= 1)
    return {
      rollbackModification: () => {
      },
      affectedColumns: [],
      colspanCompensation: 0
    };
  if (kc(s))
    return Xp(n[0]);
  t.isCollapsed = !0;
  const r = n.slice(1), a = /* @__PURE__ */ new Set();
  if (r.length > 0)
    D(r, (c) => {
      gE(c, (h) => {
        a.add(h);
      }), c.data.clonedTree = c.cloneTree(), c.walkDown((h) => {
        let {
          data: u
        } = h;
        u.isHidden = !0;
      });
    });
  else {
    const {
      origColspan: c,
      columnIndex: h
    } = t;
    for (let u = 1; u < c; u++) {
      const f = h + u;
      a.add(f);
    }
  }
  const l = t.colspan - ((e = Hc(s, "colspan")) !== null && e !== void 0 ? e : 1);
  return s.walkUp((c) => {
    const {
      data: h
    } = c;
    h.colspan -= l, h.colspan <= 1 ? (h.colspan = 1, h.isCollapsed = !0) : kc(c) && (h.isCollapsed = Hc(c, "isCollapsed"));
  }), {
    rollbackModification: () => Kp(s),
    affectedColumns: Array.from(a),
    colspanCompensation: l
  };
}
function f3(s, e) {
  if (!Number.isInteger(e))
    throw new Error("The passed gridColumnIndex argument has invalid type.");
  if (s.childs.length > 0)
    throw new Error(ut`The passed node is not the last node on the tree. Only for\x20
the last node, the hide column modification can be applied.`);
  const {
    crossHiddenColumns: t
  } = s.data;
  if (t.includes(e))
    return;
  let n = !1;
  s.walkUp((o) => {
    const {
      data: {
        collapsible: r
      }
    } = o;
    if (r)
      return n = !0, !1;
  }), !n && s.walkUp((o) => {
    const {
      data: r
    } = o;
    r.crossHiddenColumns.push(e), r.colspan > 1 ? r.colspan -= 1 : r.isHidden = !0;
  });
}
function g3(s, e) {
  if (!Number.isInteger(e))
    throw new Error("The passed gridColumnIndex argument has invalid type.");
  if (s.childs.length > 0)
    throw new Error(ut`The passed node is not the last node on the tree. Only for\x20
the last node, the show column modification can be applied.`);
  const {
    crossHiddenColumns: t
  } = s.data;
  if (!t.includes(e))
    return;
  let n = !1;
  s.walkUp((o) => {
    const {
      data: {
        collapsible: r
      }
    } = o;
    if (r)
      return n = !0, !1;
  }), !n && s.walkUp((o) => {
    const {
      data: r
    } = o;
    r.crossHiddenColumns.splice(r.crossHiddenColumns.indexOf(e), 1), !r.isHidden && r.colspan < r.origColspan && (r.colspan += 1), r.isHidden = !1;
  });
}
const Ty = /* @__PURE__ */ new Map([["collapse", Xp], ["expand", Kp], ["hide-column", f3], ["show-column", g3]]);
function m3(s, e, t) {
  if (!Ty.has(s))
    throw new Error(`The node modifier action ("${s}") does not exist.`);
  return Ty.get(s)(e, t);
}
function Vl(s) {
  const e = [];
  return D(s, (t) => {
    t.walkDown((n) => {
      const o = n.data, {
        origColspan: r,
        columnIndex: a,
        headerLevel: l,
        crossHiddenColumns: c
      } = o, h = w3(e, l);
      let u = !1;
      for (let f = a; f < a + r; f++)
        if (c.includes(f) || u)
          h.push(lE());
        else {
          const m = p3(o);
          m.isRoot = !0, h.push(m), u = !0;
        }
    });
  }), e;
}
function p3(s) {
  const {
    crossHiddenColumns: e,
    ...t
  } = If(s);
  return t;
}
function w3(s, e) {
  let t;
  return Array.isArray(s[e]) ? t = s[e] : (t = [], s[e] = t), t;
}
function _d(s, e, t) {
  C3(s, e), e.set(s, t);
}
function C3(s, e) {
  if (e.has(s))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function Fr(s, e, t) {
  var n = mE(s, e, "set");
  return v3(s, n, t), t;
}
function v3(s, e, t) {
  if (e.set)
    e.set.call(s, t);
  else {
    if (!e.writable)
      throw new TypeError("attempted to set read only private field");
    e.value = t;
  }
}
function Nt(s, e) {
  var t = mE(s, e, "get");
  return y3(s, t);
}
function mE(s, e, t) {
  if (!e.has(s))
    throw new TypeError("attempted to " + t + " private field on non-instance");
  return e.get(s);
}
function y3(s, e) {
  return e.get ? e.get.call(s) : e.value;
}
var fn = /* @__PURE__ */ new WeakMap(), Ms = /* @__PURE__ */ new WeakMap(), Vi = /* @__PURE__ */ new WeakMap();
class S3 {
  constructor() {
    _d(this, fn, {
      writable: !0,
      value: new t3()
    }), _d(this, Ms, {
      writable: !0,
      value: new d3(Nt(this, fn))
    }), _d(this, Vi, {
      writable: !0,
      value: [[]]
    });
  }
  /**
   * Sets a new state for the nested headers plugin based on settings passed
   * directly to the plugin.
   *
   * @param {Array[]} nestedHeadersSettings The user-defined settings.
   * @returns {boolean} Returns `true` if the settings are processed correctly, `false` otherwise.
   */
  setState(e) {
    Nt(this, fn).setData(e);
    let t = !1;
    try {
      Nt(this, Ms).buildTree();
    } catch {
      Nt(this, Ms).clear(), Nt(this, fn).clear(), t = !0;
    }
    return Fr(this, Vi, Vl(Nt(this, Ms).getRoots())), t;
  }
  /**
   * Sets columns limit to the state will be trimmed. All headers (colspans) which
   * overlap the column limit will be reduced to keep the structure solid.
   *
   * @param {number} columnsCount The number of columns to limit to.
   */
  setColumnsLimit(e) {
    Nt(this, fn).setColumnsLimit(e);
  }
  /**
   * Merges settings with current plugin state.
   *
   * By default only foreign keys are merged with source state and passed to the tree. But only
   * known keys are exported to matrix.
   *
   * @param {object[]} settings An array of objects to merge with the current source settings.
   *                            It is a requirement that every object has `row` and `col` properties
   *                            which points to the specific header settings object.
   */
  mergeStateWith(e) {
    const t = Ye(e, (n) => {
      let {
        row: o,
        ...r
      } = n;
      return {
        row: o < 0 ? this.rowCoordsToLevel(o) : o,
        ...r
      };
    });
    Nt(this, fn).mergeWith(t), Nt(this, Ms).buildTree(), Fr(this, Vi, Vl(Nt(this, Ms).getRoots()));
  }
  /**
   * Maps the current state with a callback. For each header settings the callback function
   * is called. If the function returns value that value is merged with the state.
   *
   * By default only foreign keys are merged with source state and passed to the tree. But only
   * known keys are exported to matrix.
   *
   * @param {Function} callback A function that is called for every header source settings.
   *                            Each time the callback is called, the returned value extends
   *                            header settings.
   */
  mapState(e) {
    Nt(this, fn).map(e), Nt(this, Ms).buildTree(), Fr(this, Vi, Vl(Nt(this, Ms).getRoots()));
  }
  /**
   * Maps the current tree nodes with a callback. For each node the callback function
   * is called. If the function returns value that value is added to returned array.
   *
   * @param {Function} callback A function that is called for every tree node.
   *                            Each time the callback is called, the returned value is
   *                            added to returned array.
   * @returns {Array}
   */
  mapNodes(e) {
    return cs(Nt(this, Ms).getRoots(), (t, n) => (n.walkDown((o) => {
      const r = e(o.data);
      r !== void 0 && t.push(r);
    }), t), []);
  }
  /**
   * Triggers an action (e.g. "collapse") from the NodeModifiers module. The module
   * modifies a tree structure in such a way as to obtain the correct structure consistent with the
   * called action.
   *
   * @param {string} action An action name to trigger.
   * @param {number} headerLevel Header level index (there is support for negative and positive values).
   * @param {number} columnIndex A visual column index.
   * @returns {object|undefined}
   */
  triggerNodeModification(e, t, n) {
    t < 0 && (t = this.rowCoordsToLevel(t));
    const o = Nt(this, Ms).getNode(t, n);
    let r;
    return o && (r = m3(e, o, n), Fr(this, Vi, Vl(Nt(this, Ms).getRoots()))), r;
  }
  /**
   * Triggers an action (e.g. "hide-column") from the NodeModifiers module. The action is
   * triggered starting from the lowest header. The module modifies a tree structure in
   * such a way as to obtain the correct structure consistent with the called action.
   *
   * @param {string} action An action name to trigger.
   * @param {number} columnIndex A visual column index.
   * @returns {object|undefined}
   */
  triggerColumnModification(e, t) {
    return this.triggerNodeModification(e, -1, t);
  }
  /* eslint-disable jsdoc/require-description-complete-sentence */
  /**
   * @memberof StateManager#
   * @function rowCoordsToLevel
   *
   * Translates row coordinates into header level. The row coordinates counts from -1 to -N
   * and describes headers counting from most closest to most distant from the table.
   * The header levels are counted from 0 to N where 0 describes most distant header
   * from the table.
   *
   *  Row coords             Header level
   *           +--------------+
   *       -3  │ A1 │ A1      │  0
   *           +--------------+
   *       -2  │ B1 │ B2 │ B3 │  1
   *           +--------------+
   *       -1  │ C1 │ C2 │ C3 │  2
   *           +==============+
   *           │    │    │    │
   *           +--------------+
   *           │    │    │    │
   *
   * @param {number} rowIndex A visual row index.
   * @returns {number|null} Returns unsigned number.
   */
  /* eslint-enable jsdoc/require-description-complete-sentence */
  rowCoordsToLevel(e) {
    if (e >= 0)
      return null;
    const t = e + Math.max(this.getLayersCount(), 1);
    return t < 0 ? null : t;
  }
  /* eslint-disable jsdoc/require-description-complete-sentence */
  /**
   * @memberof StateManager#
   * @function levelToRowCoords
   *
   * Translates header level into row coordinates. The row coordinates counts from -1 to -N
   * and describes headers counting from most closest to most distant from the table.
   * The header levels are counted from 0 to N where 0 describes most distant header
   * from the table.
   *
   *  Header level            Row coords
   *           +--------------+
   *        0  │ A1 │ A1      │  -3
   *           +--------------+
   *        1  │ B1 │ B2 │ B3 │  -2
   *           +--------------+
   *        2  │ C1 │ C2 │ C3 │  -1
   *           +==============+
   *           │    │    │    │
   *           +--------------+
   *           │    │    │    │
   *
   * @param {number} headerLevel Header level index.
   * @returns {number} Returns negative number.
   */
  /* eslint-enable jsdoc/require-description-complete-sentence */
  levelToRowCoords(e) {
    if (e < 0)
      return null;
    const t = e - Math.max(this.getLayersCount(), 1);
    return t >= 0 ? null : t;
  }
  /**
   * Gets column header settings for a specified column and header index. The returned object contains
   * all information necessary for header renderers. It contains header label, colspan length, or hidden
   * flag.
   *
   * @param {number} headerLevel Header level (there is support for negative and positive values).
   * @param {number} columnIndex A visual column index.
   * @returns {object|null}
   */
  getHeaderSettings(e, t) {
    var n, o;
    return e < 0 && (e = this.rowCoordsToLevel(e)), e === null || e >= this.getLayersCount() ? null : (n = (o = Nt(this, Vi)[e]) === null || o === void 0 ? void 0 : o[t]) !== null && n !== void 0 ? n : null;
  }
  /**
   * Gets tree data that is connected to the column header. The returned object contains all information
   * necessary for modifying tree structure (column collapsing, hiding, etc.). It contains a header
   * label, colspan length, or visual column index that indicates which column index the node is rendered from.
   *
   * @param {number} headerLevel Header level (there is support for negative and positive values).
   * @param {number} columnIndex A visual column index.
   * @returns {object|null}
   */
  getHeaderTreeNodeData(e, t) {
    if (e < 0 && (e = this.rowCoordsToLevel(e)), e === null || e >= this.getLayersCount())
      return null;
    const n = Nt(this, Ms).getNode(e, t);
    return n ? {
      ...n.data
    } : null;
  }
  /**
   * The method is helpful in cases where the column index targets in-between currently
   * collapsed column. In that case, the method returns the left-most column index
   * where the nested header begins.
   *
   * @param {number} headerLevel Header level (there is support for negative and positive values).
   * @param {number} columnIndex A visual column index.
   * @returns {number}
   */
  findLeftMostColumnIndex(e, t) {
    var n;
    const {
      isRoot: o
    } = (n = this.getHeaderSettings(e, t)) !== null && n !== void 0 ? n : {
      isRoot: !0
    };
    if (o)
      return t;
    let r = t - 1;
    for (; r >= 0; ) {
      var a;
      const {
        isRoot: l
      } = (a = this.getHeaderSettings(e, r)) !== null && a !== void 0 ? a : {
        isRoot: !0
      };
      if (l)
        break;
      r -= 1;
    }
    return r;
  }
  /**
   * Gets a total number of headers levels.
   *
   * @returns {number}
   */
  getLayersCount() {
    return Nt(this, fn).getLayersCount();
  }
  /**
   * Gets a total number of columns count.
   *
   * @returns {number}
   */
  getColumnsCount() {
    return Nt(this, fn).getColumnsCount();
  }
  /**
   * Clears the column state manager to the initial state.
   */
  clear() {
    Fr(this, Vi, []), Nt(this, fn).clear(), Nt(this, Ms).clear();
  }
}
function Vr(s, e, t) {
  return e = b3(e), e in s ? Object.defineProperty(s, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : s[e] = t, s;
}
function b3(s) {
  var e = R3(s, "string");
  return typeof e == "symbol" ? e : String(e);
}
function R3(s, e) {
  if (typeof s != "object" || s === null)
    return s;
  var t = s[Symbol.toPrimitive];
  if (t !== void 0) {
    var n = t.call(s, e || "default");
    if (typeof n != "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(s);
}
class E3 {
  constructor(e, t) {
    Vr(this, "hot", void 0), Vr(this, "nestedHeaderSettingsGetter", void 0), Vr(this, "layersCount", 0), Vr(this, "container", void 0), Vr(this, "widthsMap", void 0), this.hot = e, this.nestedHeaderSettingsGetter = t, this.widthsMap = this.hot.columnIndexMapper.createAndRegisterIndexMap("nestedHeaders.widthsMap", "physicalIndexToValue");
  }
  /**
   * Sets the number of nested headers layers count.
   *
   * @param {number} layersCount Total number of headers levels.
   * @returns {GhostTable}
   */
  setLayersCount(e) {
    return this.layersCount = e, this;
  }
  /**
   * Gets the column width based on the visual column index.
   *
   * @param {number} visualColumn Visual column index.
   * @returns {number|null}
   */
  getWidth(e) {
    return this.widthsMap.getValueAtIndex(this.hot.toPhysicalColumn(e));
  }
  /**
   * Build cache of the headers widths.
   */
  buildWidthsMap() {
    this.container = this.hot.rootDocument.createElement("div"), this.container.classList.add("handsontable", "htGhostTable", "htAutoSize"), this._buildGhostTable(this.container), this.hot.rootDocument.body.appendChild(this.container);
    const e = this.container.querySelectorAll("tr:last-of-type th"), t = e.length;
    this.widthsMap.clear();
    for (let n = 0; n < t; n++) {
      const o = this.hot.columnIndexMapper.getVisualFromRenderableIndex(n), r = this.hot.toPhysicalColumn(o);
      this.widthsMap.setValueAtIndex(r, e[n].offsetWidth);
    }
    this.container.parentNode.removeChild(this.container), this.container = null;
  }
  /**
   * Build temporary table for getting minimal columns widths.
   *
   * @private
   * @param {HTMLElement} container The element where the DOM nodes are injected.
   */
  _buildGhostTable(e) {
    const {
      rootDocument: t,
      columnIndexMapper: n
    } = this.hot, o = t.createDocumentFragment(), r = t.createElement("table"), a = !!this.hot.getSettings().dropdownMenu, l = n.getRenderableIndexesLength();
    for (let c = 0; c < this.layersCount; c++) {
      const h = t.createElement("tr");
      for (let u = 0; u < l; u++) {
        let f = n.getVisualFromRenderableIndex(u);
        f === null && (f = u);
        const g = t.createElement("th"), m = this.nestedHeaderSettingsGetter(c, f);
        if (m && (!m.isPlaceholder || m.isHidden)) {
          let w = m.label;
          a && (w += '<button class="changeType"></button>'), ur(g, w), g.colSpan = m.colspan, h.appendChild(g);
        }
      }
      r.appendChild(h);
    }
    o.appendChild(r), e.appendChild(o);
  }
  /**
   * Clear the widths cache.
   */
  clear() {
    this.widthsMap.clear(), this.container = null;
  }
}
const x3 = E3;
function My(s, e, t) {
  return e = T3(e), e in s ? Object.defineProperty(s, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : s[e] = t, s;
}
function T3(s) {
  var e = M3(s, "string");
  return typeof e == "symbol" ? e : String(e);
}
function M3(s, e) {
  if (typeof s != "object" || s === null)
    return s;
  var t = s[Symbol.toPrimitive];
  if (t !== void 0) {
    var n = t.call(s, e || "default");
    if (typeof n != "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (e === "string" ? String : Number)(s);
}
function _y(s, e, t) {
  _3(s, e), e.set(s, t);
}
function _3(s, e) {
  if (e.has(s))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function Bl(s, e, t) {
  var n = pE(s, e, "set");
  return I3(s, n, t), t;
}
function I3(s, e, t) {
  if (e.set)
    e.set.call(s, t);
  else {
    if (!e.writable)
      throw new TypeError("attempted to set read only private field");
    e.value = t;
  }
}
function Mt(s, e) {
  var t = pE(s, e, "get");
  return O3(s, t);
}
function pE(s, e, t) {
  if (!e.has(s))
    throw new TypeError("attempted to " + t + " private field on non-instance");
  return e.get(s);
}
function O3(s, e) {
  return e.get ? e.get.call(s) : e.value;
}
const Iy = "nestedHeaders", A3 = 280;
var $t = /* @__PURE__ */ new WeakMap(), li = /* @__PURE__ */ new WeakMap();
class P3 extends at {
  constructor() {
    super(...arguments), _y(this, $t, {
      writable: !0,
      value: new S3()
    }), _y(this, li, {
      writable: !0,
      value: null
    }), My(this, "ghostTable", new x3(this.hot, (e, t) => this.getHeaderSettings(e, t))), My(this, "detectedOverlappedHeaders", !1);
  }
  static get PLUGIN_KEY() {
    return Iy;
  }
  static get PLUGIN_PRIORITY() {
    return A3;
  }
  /**
   * Check if plugin is enabled.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return !!this.hot.getSettings()[Iy];
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    var e = this;
    if (this.enabled)
      return;
    const {
      nestedHeaders: t
    } = this.hot.getSettings();
    (!Array.isArray(t) || !Array.isArray(t[0])) && pt(ut`Your Nested Headers plugin configuration is invalid. The settings has to be\x20
                        passed as an array of arrays e.q. [['A1', { label: 'A2', colspan: 2 }]]`), this.addHook("init", () => this.onInit()), this.addHook("afterLoadData", function() {
      return e.onAfterLoadData(...arguments);
    }), this.addHook("beforeOnCellMouseDown", function() {
      return e.onBeforeOnCellMouseDown(...arguments);
    }), this.addHook("afterOnCellMouseDown", function() {
      return e.onAfterOnCellMouseDown(...arguments);
    }), this.addHook("beforeOnCellMouseOver", function() {
      return e.onBeforeOnCellMouseOver(...arguments);
    }), this.addHook("afterGetColumnHeaderRenderers", (n) => this.onAfterGetColumnHeaderRenderers(n)), this.addHook("modifyColWidth", function() {
      return e.onModifyColWidth(...arguments);
    }), this.addHook("modifyColumnHeaderValue", function() {
      return e.onModifyColumnHeaderValue(...arguments);
    }), this.addHook("beforeHighlightingColumnHeader", function() {
      return e.onBeforeHighlightingColumnHeader(...arguments);
    }), this.addHook("beforeCopy", function() {
      return e.onBeforeCopy(...arguments);
    }), this.addHook("afterViewportColumnCalculatorOverride", function() {
      return e.onAfterViewportColumnCalculatorOverride(...arguments);
    }), super.enablePlugin(), this.updatePlugin();
  }
  /**
   * Updates the plugin's state.
   *
   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
   *  - [`nestedHeaders`](@/api/options.md#nestedheaders)
   */
  updatePlugin() {
    if (!this.hot.view)
      return;
    const {
      nestedHeaders: e
    } = this.hot.getSettings();
    Mt(this, $t).setColumnsLimit(this.hot.countCols()), Array.isArray(e) && (this.detectedOverlappedHeaders = Mt(this, $t).setState(e)), this.detectedOverlappedHeaders && pt(ut`Your Nested Headers plugin setup contains overlapping headers. This kind of configuration\x20
                        is currently not supported.`), this.enabled && this.hot.columnIndexMapper.hidingMapsCollection.getMergedValues().forEach((t, n) => {
      const o = t === !0 ? "hide-column" : "show-column";
      Mt(this, $t).triggerColumnModification(o, n);
    }), !Mt(this, li) && this.enabled && Bl(this, li, this.hot.columnIndexMapper.createChangesObserver("hiding").subscribe((t) => {
      t.forEach((n) => {
        let {
          op: o,
          index: r,
          newValue: a
        } = n;
        if (o === "replace") {
          const l = a === !0 ? "hide-column" : "show-column";
          Mt(this, $t).triggerColumnModification(l, r);
        }
      }), this.ghostTable.buildWidthsMap();
    })), this.ghostTable.setLayersCount(this.getLayersCount()).buildWidthsMap(), super.updatePlugin();
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    this.clearColspans(), Mt(this, $t).clear(), Mt(this, li).unsubscribe(), Bl(this, li, null), this.ghostTable.clear(), super.disablePlugin();
  }
  /**
   * Returns an instance of the internal state manager of the plugin.
   *
   * @private
   * @returns {StateManager}
   */
  getStateManager() {
    return Mt(this, $t);
  }
  /**
   * Gets a total number of headers levels.
   *
   * @private
   * @returns {number}
   */
  getLayersCount() {
    return Mt(this, $t).getLayersCount();
  }
  /**
   * Gets column settings for a specified header. The returned object contains
   * information about the header label, its colspan length, or if it is hidden
   * in the header renderers.
   *
   * @private
   * @param {number} headerLevel Header level (0 = most distant to the table).
   * @param {number} columnIndex A visual column index.
   * @returns {object}
   */
  getHeaderSettings(e, t) {
    return Mt(this, $t).getHeaderSettings(e, t);
  }
  /**
   * Clear the colspans remaining after plugin usage.
   *
   * @private
   */
  clearColspans() {
    if (!this.hot.view)
      return;
    const {
      _wt: e
    } = this.hot.view, t = e.getSetting("columnHeaders").length, n = e.wtTable.THEAD, o = e.wtOverlays.topOverlay.clone.wtTable.THEAD, r = e.wtOverlays.topInlineStartCornerOverlay ? e.wtOverlays.topInlineStartCornerOverlay.clone.wtTable.THEAD : null;
    for (let a = 0; a < t; a++) {
      const l = n.childNodes[a];
      if (!l)
        break;
      const c = o.childNodes[a], h = r ? r.childNodes[a] : null;
      for (let u = 0, f = l.childNodes.length; u < f; u++)
        l.childNodes[u].removeAttribute("colspan"), $e(l.childNodes[u], "hiddenHeader"), c && c.childNodes[u] && (c.childNodes[u].removeAttribute("colspan"), $e(c.childNodes[u], "hiddenHeader")), r && h && h.childNodes[u] && (h.childNodes[u].removeAttribute("colspan"), $e(h.childNodes[u], "hiddenHeader"));
    }
  }
  /**
   * Generates the appropriate header renderer for a header row.
   *
   * @private
   * @param {number} headerLevel The index of header level counting from the top (positive
   *                             values counting from 0 to N).
   * @returns {Function}
   * @fires Hooks#afterGetColHeader
   */
  headerRendererFactory(e) {
    var t = this;
    const n = this.hot.view._wt.getSetting("fixedColumnsStart");
    return (o, r) => {
      var a;
      const {
        columnIndexMapper: l,
        view: c
      } = this.hot;
      let h = l.getVisualFromRenderableIndex(o);
      h === null && (h = o), r.removeAttribute("colspan"), $e(r, "hiddenHeader");
      const {
        colspan: u,
        isHidden: f,
        isPlaceholder: g
      } = (a = Mt(this, $t).getHeaderSettings(e, h)) !== null && a !== void 0 ? a : {
        label: ""
      };
      if (g || f)
        ie(r, "hiddenHeader");
      else if (u > 1) {
        var m, w;
        const {
          wtOverlays: C
        } = c._wt, S = (m = C.topInlineStartCornerOverlay) === null || m === void 0 ? void 0 : m.clone.wtTable.THEAD.contains(r), x = (w = C.inlineStartOverlay) === null || w === void 0 ? void 0 : w.clone.wtTable.THEAD.contains(r), T = S || x ? Math.min(u, n - o) : u;
        T > 1 && r.setAttribute("colspan", T);
      }
      this.hot.view.appendColHeader(h, r, function() {
        return t.getColumnHeaderValue(...arguments);
      }, e);
    };
  }
  /**
   * Returns the column header value for specified column and header level index.
   *
   * @private
   * @param {number} visualColumnIndex Visual column index.
   * @param {number} headerLevel The index of header level. The header level accepts positive (0 to N)
   *                             and negative (-1 to -N) values. For positive values, 0 points to the
   *                             top most header, and for negative direction, -1 points to the most bottom
   *                             header (the header closest to the cells).
   * @returns {string} Returns the column header value to update.
   */
  getColumnHeaderValue(e, t) {
    var n;
    const {
      isHidden: o,
      isPlaceholder: r
    } = (n = Mt(this, $t).getHeaderSettings(t, e)) !== null && n !== void 0 ? n : {};
    return r || o ? "" : this.hot.getColHeader(e, t);
  }
  /**
   * Allows to control which header DOM element will be used to highlight.
   *
   * @private
   * @param {number} visualColumn A visual column index of the highlighted row header.
   * @param {number} headerLevel A row header level that is currently highlighted.
   * @param {object} highlightMeta An object with meta data that describes the highlight state.
   * @returns {number}
   */
  onBeforeHighlightingColumnHeader(e, t, n) {
    const o = Mt(this, $t).getHeaderTreeNodeData(t, e);
    if (!o)
      return e;
    const {
      classNames: r,
      columnCursor: a,
      selectionType: l,
      selectionWidth: c
    } = n, {
      isRoot: h,
      colspan: u
    } = Mt(this, $t).getHeaderSettings(t, e);
    if (l === La) {
      if (!h)
        return o.columnIndex;
    } else
      l === mh && (u > c - a || !h) && (r.length = 0);
    return e;
  }
  /**
   * Listens the `beforeCopy` hook that allows processing the copied column headers so that the
   * merged column headers do not propagate the value for each column but only once at the beginning
   * of the column.
   *
   * @private
   * @param {Array[]} data An array of arrays which contains data to copied.
   * @param {object[]} copyableRanges An array of objects with ranges of the visual indexes (`startRow`, `startCol`, `endRow`, `endCol`)
   *                                  which will copied.
   * @param {{ columnHeadersCount: number }} copiedHeadersCount An object with keys that holds information with
   *                                                            the number of copied headers.
   */
  onBeforeCopy(e, t, n) {
    let {
      columnHeadersCount: o
    } = n;
    if (o !== 0)
      for (let a = 0; a < t.length; a++) {
        const {
          startRow: l,
          startCol: c,
          endRow: h,
          endCol: u
        } = t[a], f = h - l + 1, g = c - u + 1;
        if (l >= 0 || g === 1)
          break;
        for (let m = c; m <= u; m++)
          for (let w = l; w <= h; w++) {
            var r;
            const C = f + w, S = m - c;
            if (S === 0)
              continue;
            ((r = Mt(this, $t).getHeaderTreeNodeData(w, m)) === null || r === void 0 ? void 0 : r.isRoot) === !1 && (e[C][S] = "");
          }
      }
  }
  /**
   * Allows blocking the column selection that is controlled by the core Selection module.
   *
   * @private
   * @param {MouseEvent} event Mouse event.
   * @param {CellCoords} coords Cell coords object containing the visual coordinates of the clicked cell.
   * @param {CellCoords} TD The table cell or header element.
   * @param {object} controller An object with properties `row`, `column` and `cell`. Each property contains
   *                            a boolean value that allows or disallows changing the selection for that particular area.
   */
  onBeforeOnCellMouseDown(e, t, n, o) {
    this._getHeaderTreeNodeDataByCoords(t) && (o.column = !0);
  }
  /**
   * Allows to control how the column selection based on the coordinates and the nested headers is made.
   *
   * @private
   * @param {MouseEvent} event Mouse event.
   * @param {CellCoords} coords Cell coords object containing the visual coordinates of the clicked cell.
   */
  onAfterOnCellMouseDown(e, t) {
    const n = this._getHeaderTreeNodeDataByCoords(t);
    if (!n)
      return;
    const {
      selection: o
    } = this.hot, r = o.isSelected() ? o.getSelectedRange().current() : null, a = [], {
      columnIndex: l,
      origColspan: c
    } = n, h = !o.inInSelection(t);
    e.shiftKey && r ? t.col < r.from.col ? a.push(r.getTopEndCorner().col, l, t.row) : t.col > r.from.col ? a.push(r.getTopStartCorner().col, l + c - 1, t.row) : a.push(l, l + c - 1, t.row) : (Sg(e) || Ji(e) && h) && a.push(l, l + c - 1, t.row), o.selectColumns(...a);
  }
  /**
   * Makes the header-selection properly select the nested headers.
   *
   * @private
   * @param {MouseEvent} event Mouse event.
   * @param {CellCoords} coords Cell coords object containing the visual coordinates of the clicked cell.
   * @param {HTMLElement} TD The cell element.
   * @param {object} controller An object with properties `row`, `column` and `cell`. Each property contains
   *                            a boolean value that allows or disallows changing the selection for that particular area.
   */
  onBeforeOnCellMouseOver(e, t, n, o) {
    if (!this.hot.view.isMouseDown())
      return;
    const r = this._getHeaderTreeNodeDataByCoords(t);
    if (!r)
      return;
    const {
      columnIndex: a,
      origColspan: l
    } = r, c = this.hot.getSelectedRangeLast(), h = c.getTopStartCorner(), u = c.getBottomEndCorner(), {
      from: f
    } = c;
    o.column = !0, o.cell = !0;
    const g = [];
    t.col < f.col ? g.push(u.col, a) : t.col > f.col ? g.push(h.col, a + l - 1) : g.push(a, a + l - 1), this.hot.selectColumns(...g);
  }
  /**
   * `afterGetColumnHeader` hook callback - prepares the header structure.
   *
   * @private
   * @param {Array} renderersArray Array of renderers.
   */
  onAfterGetColumnHeaderRenderers(e) {
    e.length = 0;
    for (let t = 0; t < Mt(this, $t).getLayersCount(); t++)
      e.push(this.headerRendererFactory(t));
  }
  /**
   * Make the renderer render the first nested column in its entirety.
   *
   * @private
   * @param {object} calc Viewport column calculator.
   */
  onAfterViewportColumnCalculatorOverride(e) {
    const t = Mt(this, $t).getLayersCount();
    let n = e.startColumn, o = !!t;
    for (let r = 0; r < t; r++) {
      const a = Mt(this, $t).findLeftMostColumnIndex(r, e.startColumn), l = this.hot.columnIndexMapper.getRenderableFromVisualIndex(a);
      if (a >= 0 && (o = !1), ys(l) && l < e.startColumn) {
        n = l;
        break;
      }
    }
    e.startColumn = o ? Mt(this, $t).getHeaderTreeNodeData(0, n).columnIndex : n;
  }
  /**
   * `modifyColWidth` hook callback - returns width from cache, when is greater than incoming from hook.
   *
   * @private
   * @param {number} width Width from hook.
   * @param {number} column Visual index of an column.
   * @returns {number}
   */
  onModifyColWidth(e, t) {
    const n = this.ghostTable.getWidth(t);
    return e > n ? e : n;
  }
  /**
   * Listens the `modifyColumnHeaderValue` hook that overwrites the column headers values based on
   * the internal state and settings of the plugin.
   *
   * @private
   * @param {string} value The column header value.
   * @param {number} visualColumnIndex The visual column index.
   * @param {number} headerLevel The index of header level. The header level accepts positive (0 to N)
   *                             and negative (-1 to -N) values. For positive values, 0 points to the
   *                             top most header, and for negative direction, -1 points to the most bottom
   *                             header (the header closest to the cells).
   * @returns {string} Returns the column header value to update.
   */
  onModifyColumnHeaderValue(e, t, n) {
    var o;
    const {
      label: r
    } = (o = Mt(this, $t).getHeaderTreeNodeData(n, t)) !== null && o !== void 0 ? o : {
      label: ""
    };
    return r;
  }
  /**
   * Updates the plugin state after HoT initialization.
   *
   * @private
   */
  onInit() {
    this.updatePlugin();
  }
  /**
   * Updates the plugin state after new dataset load.
   *
   * @private
   * @param {Array[]} sourceData Array of arrays or array of objects containing data.
   * @param {boolean} initialLoad Flag that determines whether the data has been loaded
   *                              during the initialization.
   */
  onAfterLoadData(e, t) {
    t || this.updatePlugin();
  }
  /**
   * Destroys the plugin instance.
   */
  destroy() {
    Bl(this, $t, null), Mt(this, li) !== null && (Mt(this, li).unsubscribe(), Bl(this, li, null)), super.destroy();
  }
  /**
   * Gets the tree data that belongs to the column headers pointed by the passed coordinates.
   *
   * @private
   * @param {CellCoords} coords The CellCoords instance.
   * @returns {object|undefined}
   */
  _getHeaderTreeNodeDataByCoords(e) {
    if (!(e.row >= 0 || e.col < 0))
      return Mt(this, $t).getHeaderTreeNodeData(e.row, e.col);
  }
}
class D3 {
  constructor(e, t) {
    this.hot = t, this.data = null, this.plugin = e, this.parentReference = /* @__PURE__ */ new WeakMap(), this.cache = {
      levels: [],
      levelCount: 0,
      rows: [],
      nodeInfo: /* @__PURE__ */ new WeakMap()
    };
  }
  /**
   * Set the data for the manager.
   *
   * @param {Handsontable.CellValue[][]|Handsontable.RowObject[]} data Data for the manager.
   */
  setData(e) {
    this.data = e;
  }
  /**
   * Get the data cached in the manager.
   *
   * @returns {Handsontable.CellValue[][]|Handsontable.RowObject[]}
   */
  getData() {
    return this.data;
  }
  /**
   * Load the "raw" source data, without NestedRows' modifications.
   *
   * @returns {Handsontable.CellValue[][]|Handsontable.RowObject[]}
   */
  getRawSourceData() {
    let e = null;
    return this.plugin.disableCoreAPIModifiers(), e = this.hot.getSourceData(), this.plugin.enableCoreAPIModifiers(), e;
  }
  /**
   * Update the Data Manager with new data and refresh cache.
   *
   * @param {Handsontable.CellValue[][]|Handsontable.RowObject[]} data Data for the manager.
   */
  updateWithData(e) {
    this.setData(e), this.rewriteCache();
  }
  /**
   * Rewrite the nested structure cache.
   *
   * @private
   */
  rewriteCache() {
    this.cache = {
      levels: [],
      levelCount: 0,
      rows: [],
      nodeInfo: /* @__PURE__ */ new WeakMap()
    }, Se(0, this.data.length - 1, (e) => {
      this.cacheNode(this.data[e], 0, null);
    });
  }
  /**
   * Cache a data node.
   *
   * @private
   * @param {object} node Node to cache.
   * @param {number} level Level of the node.
   * @param {object} parent Parent of the node.
   */
  cacheNode(e, t, n) {
    this.cache.levels[t] || (this.cache.levels[t] = [], this.cache.levelCount += 1), this.cache.levels[t].push(e), this.cache.rows.push(e), this.cache.nodeInfo.set(e, {
      parent: n,
      row: this.cache.rows.length - 1,
      level: t
    }), this.hasChildren(e) && D(e.__children, (o) => {
      this.cacheNode(o, t + 1, e);
    });
  }
  /**
   * Get the date for the provided visual row number.
   *
   * @param {number} row Row index.
   * @returns {object}
   */
  getDataObject(e) {
    return e == null ? null : this.cache.rows[e];
  }
  /**
   * Read the row tree in search for a specific row index or row object.
   *
   * @private
   * @param {object} parent The initial parent object.
   * @param {number} readCount Number of read nodes.
   * @param {number} neededIndex The row index we search for.
   * @param {object} neededObject The row object we search for.
   * @returns {number|object}
   */
  readTreeNodes(e, t, n, o) {
    let r = !1, a = t;
    if (isNaN(a) && a.end)
      return a;
    let l = e;
    return l || (l = {
      __children: this.data
    }, r = !0, a -= 1), n != null && a === n ? {
      result: l,
      end: !0
    } : o != null && l === o ? {
      result: a,
      end: !0
    } : (a += 1, l.__children && D(l.__children, (c) => {
      if (this.parentReference.set(c, r ? null : l), a = this.readTreeNodes(c, a, n, o), isNaN(a) && a.end)
        return !1;
    }), a);
  }
  /**
   * Mock a parent node.
   *
   * @private
   * @returns {*}
   */
  mockParent() {
    const e = this.mockNode();
    return e.__children = this.data, e;
  }
  /**
   * Mock a data node.
   *
   * @private
   * @returns {{}}
   */
  mockNode() {
    const e = {};
    return je(this.data[0], (t, n) => {
      e[n] = null;
    }), e;
  }
  /**
   * Get the row index for the provided row object.
   *
   * @param {object} rowObj The row object.
   * @returns {number} Row index.
   */
  getRowIndex(e) {
    return e == null ? null : this.cache.nodeInfo.get(e).row;
  }
  /**
   * Get the index of the provided row index/row object within its parent.
   *
   * @param {number|object} row Row index / row object.
   * @returns {number}
   */
  getRowIndexWithinParent(e) {
    let t = null;
    isNaN(e) ? t = e : t = this.getDataObject(e);
    const n = this.getRowParent(e);
    return n == null ? this.data.indexOf(t) : n.__children.indexOf(t);
  }
  /**
   * Count all rows (including all parents and children).
   *
   * @returns {number}
   */
  countAllRows() {
    const e = {
      __children: this.data
    };
    return this.countChildren(e);
  }
  /**
   * Count children of the provided parent.
   *
   * @param {object|number} parent Parent node.
   * @returns {number} Children count.
   */
  countChildren(e) {
    let t = 0, n = e;
    return isNaN(n) || (n = this.getDataObject(n)), !n || !n.__children ? 0 : (D(n.__children, (o) => {
      t += 1, o.__children && (t += this.countChildren(o));
    }), t);
  }
  /**
   * Get the parent of the row at the provided index.
   *
   * @param {number|object} row Physical row index.
   * @returns {object}
   */
  getRowParent(e) {
    let t;
    return isNaN(e) ? t = e : t = this.getDataObject(e), this.getRowObjectParent(t);
  }
  /**
   * Get the parent of the provided row object.
   *
   * @private
   * @param {object} rowObject The row object (tree node).
   * @returns {object|null}
   */
  getRowObjectParent(e) {
    return !e || typeof e != "object" ? null : this.cache.nodeInfo.get(e).parent;
  }
  /**
   * Get the nesting level for the row with the provided row index.
   *
   * @param {number} row Row index.
   * @returns {number|null} Row level or null, when row doesn't exist.
   */
  getRowLevel(e) {
    let t = null;
    return isNaN(e) ? t = e : t = this.getDataObject(e), t ? this.getRowObjectLevel(t) : null;
  }
  /**
   * Get the nesting level for the row with the provided row index.
   *
   * @private
   * @param {object} rowObject Row object.
   * @returns {number} Row level.
   */
  getRowObjectLevel(e) {
    return e == null ? null : this.cache.nodeInfo.get(e).level;
  }
  /**
   * Check if the provided row/row element has children.
   *
   * @param {number|object} row Row number or row element.
   * @returns {boolean}
   */
  hasChildren(e) {
    let t = e;
    return isNaN(t) || (t = this.getDataObject(t)), !!(t.__children && t.__children.length);
  }
  /**
   * Returns `true` if the row at the provided index has a parent.
   *
   * @param {number} index Row index.
   * @returns {boolean} `true` if the row at the provided index has a parent, `false` otherwise.
   */
  isChild(e) {
    return this.getRowParent(e) !== null;
  }
  /**
   * Get child at a provided index from the parent element.
   *
   * @param {object} parent The parent row object.
   * @param {number} index Index of the child element to be retrieved.
   * @returns {object|null} The child element or `null` if the child doesn't exist.
   */
  getChild(e, t) {
    var n;
    return ((n = e.__children) === null || n === void 0 ? void 0 : n[t]) || null;
  }
  /**
   * Return `true` of the row at the provided index is located at the topmost level.
   *
   * @param {number} index Row index.
   * @returns {boolean} `true` of the row at the provided index is located at the topmost level, `false` otherwise.
   */
  isRowHighestLevel(e) {
    return !this.isChild(e);
  }
  /**
   * Return `true` if the provided row index / row object represents a parent in the nested structure.
   *
   * @param {number|object} row Row index / row object.
   * @returns {boolean} `true` if the row is a parent, `false` otherwise.
   */
  isParent(e) {
    var t;
    let n = e;
    return isNaN(n) || (n = this.getDataObject(n)), n && !!n.__children && ((t = n.__children) === null || t === void 0 ? void 0 : t.length) !== 0;
  }
  /**
   * Add a child to the provided parent. It's optional to add a row object as the "element".
   *
   * @param {object} parent The parent row object.
   * @param {object} [element] The element to add as a child.
   */
  addChild(e, t) {
    let n = t;
    this.hot.runHooks("beforeAddChild", e, n);
    let o = null;
    e && (o = this.getRowIndex(e)), this.hot.runHooks("beforeCreateRow", o + this.countChildren(e) + 1, 1);
    let r = e;
    e || (r = this.mockParent()), r.__children || (r.__children = []), n || (n = this.mockNode()), r.__children.push(n), this.rewriteCache();
    const a = this.getRowIndex(n);
    this.hot.rowIndexMapper.insertIndexes(a, 1), this.hot.runHooks("afterCreateRow", a, 1), this.hot.runHooks("afterAddChild", e, n);
  }
  /**
   * Add a child node to the provided parent at a specified index.
   *
   * @param {object} parent Parent node.
   * @param {number} index Index to insert the child element at.
   * @param {object} [element] Element (node) to insert.
   */
  addChildAtIndex(e, t, n) {
    let o = n, r;
    if (o || (o = this.mockNode()), this.hot.runHooks("beforeAddChild", e, o, t), e) {
      const l = this.getRowIndex(e) + t + 1;
      this.hot.runHooks("beforeCreateRow", l, 1), e.__children.splice(t, null, o), this.rewriteCache(), this.plugin.disableCoreAPIModifiers(), this.hot.setSourceDataAtCell(this.getRowIndexWithinParent(e), "__children", e.__children, "NestedRows.addChildAtIndex"), this.hot.rowIndexMapper.insertIndexes(l, 1), this.plugin.enableCoreAPIModifiers(), this.hot.runHooks("afterCreateRow", l, 1), r = l;
    } else
      this.plugin.disableCoreAPIModifiers(), this.hot.alter("insert_row_above", t, 1, "NestedRows.addChildAtIndex"), this.plugin.enableCoreAPIModifiers(), r = this.getRowIndex(this.data[t]);
    o = this.getDataObject(r), this.hot.runHooks("afterAddChild", e, o, t);
  }
  /**
   * Add a sibling element at the specified index.
   *
   * @param {number} index New element sibling's index.
   * @param {('above'|'below')} where Direction in which the sibling is to be created.
   */
  addSibling(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "below";
    const n = this.translateTrimmedRow(e), o = this.getRowParent(n), r = this.getRowIndexWithinParent(n);
    switch (t) {
      case "below":
        this.addChildAtIndex(o, r + 1, null);
        break;
      case "above":
        this.addChildAtIndex(o, r, null);
        break;
    }
  }
  /**
   * Detach the provided element from its parent and add it right after it.
   *
   * @param {object|Array} elements Row object or an array of selected coordinates.
   * @param {boolean} [forceRender=true] If true (default), it triggers render after finished.
   */
  detachFromParent(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0, n = null;
    const o = [];
    Array.isArray(e) ? (Se(e[0], e[2], (g) => {
      const m = this.translateTrimmedRow(g);
      o.push(this.getDataObject(m));
    }), Se(0, o.length - 2, (g) => {
      this.detachFromParent(o[g], !1);
    }), n = o[o.length - 1]) : n = e;
    const r = this.getRowIndex(n), a = this.countChildren(n), l = this.getRowIndexWithinParent(n), c = this.getRowParent(n), h = this.getRowParent(c), u = this.getRowIndex(h);
    let f = null;
    if (this.hot.runHooks("beforeDetachChild", c, n), l != null) {
      const g = Array.from(new Array(r + a + 1).keys()).splice(-1 * (a + 1));
      if (this.hot.runHooks("beforeRemoveRow", r, a + 1, g, this.plugin.pluginName), c.__children.splice(l, 1), this.rewriteCache(), this.hot.runHooks("afterRemoveRow", r, a + 1, g, this.plugin.pluginName), h) {
        f = u + this.countChildren(h);
        const m = this.getChild(h, this.countChildren(h) - 1), w = this.getRowIndex(m);
        this.hot.runHooks("beforeCreateRow", w + 1, a + 1, this.plugin.pluginName), h.__children.push(n);
      } else
        f = this.hot.countRows() + 1, this.hot.runHooks("beforeCreateRow", f - 2, a + 1, this.plugin.pluginName), this.data.push(n);
    }
    this.rewriteCache(), this.hot.runHooks("afterCreateRow", f - 2, a + 1, this.plugin.pluginName), this.hot.runHooks("afterDetachChild", c, n, this.getRowIndex(n)), t && this.hot.render();
  }
  /**
   * Filter the data by the `logicRows` array.
   *
   * @private
   * @param {number} index Index of the first row to remove.
   * @param {number} amount Number of elements to remove.
   * @param {Array} logicRows Array of indexes to remove.
   */
  filterData(e, t, n) {
    const o = [];
    D(n, (r) => {
      o.push(this.getDataObject(r));
    }), D(o, (r) => {
      const a = this.getRowIndexWithinParent(r), l = this.getRowParent(r);
      l === null ? this.data.splice(a, 1) : l.__children.splice(a, 1);
    }), this.rewriteCache();
  }
  /**
   * Used to splice the source data. Needed to properly modify the nested structure, which wouldn't work with the
   * default script.
   *
   * @private
   * @param {number} index Physical index of the element at the splice beginning.
   * @param {number} amount Number of elements to be removed.
   * @param {object[]} elements Array of row objects to add.
   */
  spliceData(e, t, n) {
    const o = this.getDataObject(e - 1);
    let r = null, a = e;
    o && o.__children && o.__children.length === 0 ? (r = o, a = 0) : e < this.countAllRows() && (r = this.getRowParent(e), a = this.getRowIndexWithinParent(e)), r ? n ? r.__children.splice(a, t, ...n) : r.__children.splice(a, t) : n ? this.data.splice(a, t, ...n) : this.data.splice(a, t), this.rewriteCache();
  }
  /**
   * Update the `__children` key of the upmost parent of the provided row object.
   *
   * @private
   * @param {object} rowElement Row object.
   */
  syncRowWithRawSource(e) {
    let t = e, n = null;
    do
      n = this.getRowParent(n), n !== null && (t = n);
    while (n !== null);
    this.plugin.disableCoreAPIModifiers(), this.hot.setSourceDataAtCell(this.getRowIndex(t), "__children", t.__children, "NestedRows.syncRowWithRawSource"), this.plugin.enableCoreAPIModifiers();
  }
  /* eslint-disable jsdoc/require-param */
  /**
   * Move a single row.
   *
   * @param {number} fromIndex Index of the row to be moved.
   * @param {number} toIndex Index of the destination.
   * @param {boolean} moveToCollapsed `true` if moving a row to a collapsed parent.
   * @param {boolean} moveToLastChild `true` if moving a row to be a last child of the new parent.
   */
  /* eslint-enable jsdoc/require-param */
  moveRow(e, t, n, o) {
    const r = t === this.hot.countRows(), a = this.getRowParent(e), l = this.getRowIndexWithinParent(e), c = a.__children.slice(l, l + 1), h = e > t;
    let u = r ? this.getRowParent(t - 1) : this.getRowParent(t);
    u == null && (u = this.getRowParent(t - 1)), u == null && (u = this.getDataObject(t - 1)), u ? u.__children || (u.__children = []) : (u = this.getDataObject(t), u.__children = []);
    const f = r || n || o ? u.__children.length : this.getRowIndexWithinParent(t), g = a === u;
    u.__children.splice(f, 0, c[0]), a.__children.splice(l + (h && g ? 1 : 0), 1), this.syncRowWithRawSource(a), g || this.syncRowWithRawSource(u);
  }
  /**
   * Translate the visual row index to the physical index, taking into consideration the state of collapsed rows.
   *
   * @private
   * @param {number} row Row index.
   * @returns {number}
   */
  translateTrimmedRow(e) {
    return this.plugin.collapsingUI ? this.plugin.collapsingUI.translateTrimmedRow(e) : e;
  }
  /**
   * Translate the physical row index to the visual index, taking into consideration the state of collapsed rows.
   *
   * @private
   * @param {number} row Row index.
   * @returns {number}
   */
  untranslateTrimmedRow(e) {
    return this.plugin.collapsingUI ? this.plugin.collapsingUI.untranslateTrimmedRow(e) : e;
  }
}
const H3 = D3;
class k3 {
  constructor(e, t) {
    this.hot = t, this.plugin = e;
  }
}
const qp = k3;
class Wn extends qp {
  /**
   * CSS classes used in the row headers.
   *
   * @type {object}
   */
  static get CSS_CLASSES() {
    return {
      indicatorContainer: "ht_nestingLevels",
      parent: "ht_nestingParent",
      indicator: "ht_nestingLevel",
      emptyIndicator: "ht_nestingLevel_empty",
      button: "ht_nestingButton",
      expandButton: "ht_nestingExpand",
      collapseButton: "ht_nestingCollapse"
    };
  }
  constructor(e, t) {
    super(e, t), this.dataManager = this.plugin.dataManager, this.collapsingUI = this.plugin.collapsingUI, this.rowHeaderWidthCache = null;
  }
  /**
   * Append nesting indicators and buttons to the row headers.
   *
   * @private
   * @param {number} row Row index.
   * @param {HTMLElement} TH TH 3element.
   */
  appendLevelIndicators(e, t) {
    const n = this.hot.toPhysicalRow(e), o = this.dataManager.getRowLevel(n), r = this.dataManager.getDataObject(n), a = t.getElementsByTagName("DIV")[0], l = a.querySelector("span.rowHeader"), c = a.querySelectorAll('[class^="ht_nesting"]');
    if (D(c, (h) => {
      h && a.removeChild(h);
    }), ie(t, Wn.CSS_CLASSES.indicatorContainer), o) {
      const {
        rootDocument: h
      } = this.hot, u = l.cloneNode(!0);
      a.innerHTML = "", Se(0, o - 1, () => {
        const f = h.createElement("SPAN");
        ie(f, Wn.CSS_CLASSES.emptyIndicator), a.appendChild(f);
      }), a.appendChild(u);
    }
    if (this.dataManager.hasChildren(r)) {
      const h = this.hot.rootDocument.createElement("DIV");
      ie(t, Wn.CSS_CLASSES.parent), this.collapsingUI.areChildrenCollapsed(n) ? ie(h, `${Wn.CSS_CLASSES.button} ${Wn.CSS_CLASSES.expandButton}`) : ie(h, `${Wn.CSS_CLASSES.button} ${Wn.CSS_CLASSES.collapseButton}`), a.appendChild(h);
    }
  }
  /**
   * Update the row header width according to number of levels in the dataset.
   *
   * @private
   * @param {number} deepestLevel Cached deepest level of nesting.
   */
  updateRowHeaderWidth(e) {
    let t = e;
    t || (t = this.dataManager.cache.levelCount), this.rowHeaderWidthCache = Math.max(50, 11 + 10 * t + 25), this.hot.render();
  }
}
const wE = Wn;
class N3 extends qp {
  constructor(e, t) {
    var n;
    super(e, t), n = this, this.dataManager = this.plugin.dataManager, this.collapsedRows = [], this.collapsedRowsStash = {
      stash: function() {
        let o = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
        n.lastCollapsedRows = n.collapsedRows.slice(0), n.expandMultipleChildren(n.lastCollapsedRows, o);
      },
      shiftStash: function(o, r) {
        let a = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;
        r == null && (r = 1 / 0), D(n.lastCollapsedRows, (l, c) => {
          l >= o && l < r && (n.lastCollapsedRows[c] = l + a);
        });
      },
      applyStash: function() {
        let o = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !0;
        n.collapseMultipleChildren(n.lastCollapsedRows, o), n.lastCollapsedRows = void 0;
      },
      trimStash: (o, r) => {
        Se(o, o + r - 1, (a) => {
          const l = this.lastCollapsedRows.indexOf(a);
          l > -1 && this.lastCollapsedRows.splice(l, 1);
        });
      }
    };
  }
  /**
   * Collapse the children of the row passed as an argument.
   *
   * @param {number|object} row The parent row.
   * @param {boolean} [forceRender=true] Whether to render the table after the function ends.
   * @param {boolean} [doTrimming=true] I determine whether collapsing should envolve trimming rows.
   * @returns {Array}
   */
  collapseChildren(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0, n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !0;
    const o = [];
    let r = null, a = null, l = null;
    return isNaN(e) ? (r = e, a = this.dataManager.getRowIndex(r)) : (r = this.dataManager.getDataObject(e), a = e), this.dataManager.hasChildren(r) && D(r.__children, (c) => {
      o.push(this.dataManager.getRowIndex(c));
    }), l = this.collapseRows(o, !0, !1), n && this.trimRows(l), t && this.renderAndAdjust(), this.collapsedRows.indexOf(a) === -1 && this.collapsedRows.push(a), l;
  }
  /**
   * Collapse multiple children.
   *
   * @param {Array} rows Rows to collapse (including their children).
   * @param {boolean} [forceRender=true] `true` if the table should be rendered after finishing the function.
   * @param {boolean} [doTrimming=true] I determine whether collapsing should envolve trimming rows.
   */
  collapseMultipleChildren(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0, n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !0;
    const o = [];
    D(e, (r) => {
      o.push(...this.collapseChildren(r, !1, !1));
    }), n && this.trimRows(o), t && this.renderAndAdjust();
  }
  /**
   * Collapse a single row.
   *
   * @param {number} rowIndex Index of the row to collapse.
   * @param {boolean} [recursive=true] `true` if it should collapse the row's children.
   */
  collapseRow(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0;
    this.collapseRows([e], t);
  }
  /**
   * Collapse multiple rows.
   *
   * @param {Array} rowIndexes Array of row indexes to collapse.
   * @param {boolean} [recursive=true] `true` if it should collapse the rows' children.
   * @param {boolean} [doTrimming=true] I determine whether collapsing should envolve trimming rows.
   * @returns {Array} Rows prepared for trimming (or trimmed, if doTrimming == true).
   */
  collapseRows(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0, n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1;
    const o = [];
    return D(e, (r) => {
      o.push(r), t && this.collapseChildRows(r, o);
    }), n && this.trimRows(o), o;
  }
  /**
   * Collapse child rows of the row at the provided index.
   *
   * @param {number} parentIndex Index of the parent node.
   * @param {Array} [rowsToTrim=[]] Array of rows to trim. Defaults to an empty array.
   * @param {boolean} [recursive] `true` if the collapsing process should be recursive.
   * @param {boolean} [doTrimming=true] I determine whether collapsing should envolve trimming rows.
   */
  collapseChildRows(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [], n = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : !1;
    if (this.dataManager.hasChildren(e)) {
      const o = this.dataManager.getDataObject(e);
      D(o.__children, (r) => {
        const a = this.dataManager.getRowIndex(r);
        t.push(a), this.collapseChildRows(a, t);
      });
    }
    n && this.trimRows(t);
  }
  /**
   * Expand a single row.
   *
   * @param {number} rowIndex Index of the row to expand.
   * @param {boolean} [recursive=true] `true` if it should expand the row's children recursively.
   */
  expandRow(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0;
    this.expandRows([e], t);
  }
  /**
   * Expand multiple rows.
   *
   * @param {Array} rowIndexes Array of indexes of the rows to expand.
   * @param {boolean} [recursive=true] `true` if it should expand the rows' children recursively.
   * @param {boolean} [doTrimming=true] I determine whether collapsing should envolve trimming rows.
   * @returns {Array} Array of row indexes to be untrimmed.
   */
  expandRows(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0, n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1;
    const o = [];
    return D(e, (r) => {
      o.push(r), t && this.expandChildRows(r, o);
    }), n && this.untrimRows(o), o;
  }
  /**
   * Expand child rows of the provided index.
   *
   * @param {number} parentIndex Index of the parent row.
   * @param {Array} [rowsToUntrim=[]] Array of the rows to be untrimmed.
   * @param {boolean} [recursive] `true` if it should expand the rows' children recursively.
   * @param {boolean} [doTrimming=false] I determine whether collapsing should envolve trimming rows.
   */
  expandChildRows(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [], n = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : !1;
    if (this.dataManager.hasChildren(e)) {
      const o = this.dataManager.getDataObject(e);
      D(o.__children, (r) => {
        if (!this.isAnyParentCollapsed(r)) {
          const a = this.dataManager.getRowIndex(r);
          t.push(a), this.expandChildRows(a, t);
        }
      });
    }
    n && this.untrimRows(t);
  }
  /**
   * Expand the children of the row passed as an argument.
   *
   * @param {number|object} row Parent row.
   * @param {boolean} [forceRender=true] Whether to render the table after the function ends.
   * @param {boolean} [doTrimming=true] If set to `true`, the trimming will be applied when the function finishes.
   * @returns {number[]}
   */
  expandChildren(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0, n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !0;
    const o = [];
    let r = null, a = null, l = null;
    return isNaN(e) ? (r = e, a = this.dataManager.getRowIndex(e)) : (r = this.dataManager.getDataObject(e), a = e), this.collapsedRows.splice(this.collapsedRows.indexOf(a), 1), this.dataManager.hasChildren(r) && D(r.__children, (c) => {
      const h = this.dataManager.getRowIndex(c);
      o.push(h);
    }), l = this.expandRows(o, !0, !1), n && this.untrimRows(l), t && this.renderAndAdjust(), l;
  }
  /**
   * Expand multiple rows' children.
   *
   * @param {Array} rows Array of rows which children are about to be expanded.
   * @param {boolean} [forceRender=true] `true` if the table should render after finishing the function.
   * @param {boolean} [doTrimming=true] `true` if the rows should be untrimmed after finishing the function.
   */
  expandMultipleChildren(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0, n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !0;
    const o = [];
    D(e, (r) => {
      o.push(...this.expandChildren(r, !1, !1));
    }), n && this.untrimRows(o), t && this.renderAndAdjust();
  }
  /**
   * Collapse all collapsable rows.
   */
  collapseAll() {
    const e = this.dataManager.getData(), t = [];
    D(e, (n) => {
      this.dataManager.hasChildren(n) && t.push(n);
    }), this.collapseMultipleChildren(t), this.renderAndAdjust();
  }
  /**
   * Expand all collapsable rows.
   */
  expandAll() {
    const e = this.dataManager.getData(), t = [];
    D(e, (n) => {
      this.dataManager.hasChildren(n) && t.push(n);
    }), this.expandMultipleChildren(t), this.renderAndAdjust();
  }
  /**
   * Trim rows.
   *
   * @param {Array} rows Physical row indexes.
   */
  trimRows(e) {
    this.hot.batchExecution(() => {
      D(e, (t) => {
        this.plugin.collapsedRowsMap.setValueAtIndex(t, !0);
      });
    }, !0);
  }
  /**
   * Untrim rows.
   *
   * @param {Array} rows Physical row indexes.
   */
  untrimRows(e) {
    this.hot.batchExecution(() => {
      D(e, (t) => {
        this.plugin.collapsedRowsMap.setValueAtIndex(t, !1);
      });
    }, !0);
  }
  /**
   * Check if all child rows are collapsed.
   *
   * @private
   * @param {number|object|null} row The parent row. `null` for the top level.
   * @returns {boolean}
   */
  areChildrenCollapsed(e) {
    let t = isNaN(e) ? e : this.dataManager.getDataObject(e), n = !0;
    return t === null && (t = {
      __children: this.dataManager.data
    }), this.dataManager.hasChildren(t) && D(t.__children, (o) => {
      const r = this.dataManager.getRowIndex(o);
      if (!this.plugin.collapsedRowsMap.getValueAtIndex(r))
        return n = !1, !1;
    }), n;
  }
  /**
   * Check if any of the row object parents are collapsed.
   *
   * @private
   * @param {object} rowObj Row object.
   * @returns {boolean}
   */
  isAnyParentCollapsed(e) {
    let t = e;
    for (; t !== null; ) {
      t = this.dataManager.getRowParent(t);
      const n = this.dataManager.getRowIndex(t);
      if (this.collapsedRows.indexOf(n) > -1)
        return !0;
    }
    return !1;
  }
  /**
   * Toggle collapsed state. Callback for the `beforeOnCellMousedown` hook.
   *
   * @private
   * @param {MouseEvent} event `mousedown` event.
   * @param {object} coords Coordinates of the clicked cell/header.
   */
  toggleState(e, t) {
    if (t.col >= 0)
      return;
    const n = this.translateTrimmedRow(t.row);
    Ne(e.target, wE.CSS_CLASSES.button) && (this.areChildrenCollapsed(n) ? this.expandChildren(n) : this.collapseChildren(n), Rn(e));
  }
  /**
   * Translate visual row after trimming to physical base row index.
   *
   * @private
   * @param {number} row Row index.
   * @returns {number} Base row index.
   */
  translateTrimmedRow(e) {
    return this.hot.toPhysicalRow(e);
  }
  /**
   * Translate physical row after trimming to visual base row index.
   *
   * @private
   * @param {number} row Row index.
   * @returns {number} Base row index.
   */
  untranslateTrimmedRow(e) {
    return this.hot.toVisualRow(e);
  }
  /**
   * Helper function to render the table and call the `adjustElementsSize` method.
   *
   * @private
   */
  renderAndAdjust() {
    this.hot.render(), this.hot.view.adjustElementsSize();
  }
}
const L3 = N3, Oy = /* @__PURE__ */ new WeakMap();
class $3 extends qp {
  constructor(e, t) {
    super(e, t), Oy.set(this, {
      row_above: (n, o) => {
        const r = o[o.length - 1];
        this.dataManager.addSibling(r.start.row, "above");
      },
      row_below: (n, o) => {
        const r = o[o.length - 1];
        this.dataManager.addSibling(r.start.row, "below");
      }
    }), this.dataManager = this.plugin.dataManager;
  }
  /**
   * Append options to the context menu. (Propagated from the `afterContextMenuDefaultOptions` hook callback)
   * f.
   *
   * @private
   * @param {object} defaultOptions Default context menu options.
   * @returns {*}
   */
  appendOptions(e) {
    const t = [{
      key: "add_child",
      name() {
        return this.getTranslatedPhrase(Dm);
      },
      callback: () => {
        const n = this.dataManager.translateTrimmedRow(this.hot.getSelectedLast()[0]), o = this.dataManager.getDataObject(n);
        this.dataManager.addChild(o);
      },
      disabled: () => {
        const n = this.hot.getSelectedLast();
        return !n || n[0] < 0 || this.hot.selection.isSelectedByColumnHeader() || this.hot.countRows() >= this.hot.getSettings().maxRows;
      }
    }, {
      key: "detach_from_parent",
      name() {
        return this.getTranslatedPhrase(Hm);
      },
      callback: () => {
        this.dataManager.detachFromParent(this.hot.getSelectedLast());
      },
      disabled: () => {
        const n = this.hot.getSelectedLast(), o = this.dataManager.translateTrimmedRow(n[0]);
        return !this.dataManager.getRowParent(o) || !n || n[0] < 0 || this.hot.selection.isSelectedByColumnHeader() || this.hot.countRows() >= this.hot.getSettings().maxRows;
      }
    }, {
      name: "---------"
    }];
    return Se(0, e.items.length - 1, (n) => {
      if (n === 0)
        return D(t, (o, r) => {
          e.items.splice(n + r, 0, o);
        }), !1;
    }), this.modifyRowInsertingOptions(e);
  }
  /**
   * Modify how the row inserting options work.
   *
   * @private
   * @param {object} defaultOptions Default context menu items.
   * @returns {*}
   */
  modifyRowInsertingOptions(e) {
    const t = Oy.get(this);
    return Se(0, e.items.length - 1, (n) => {
      const o = t[e.items[n].key];
      o != null && (e.items[n].callback = o);
    }), e;
  }
}
const F3 = $3;
class V3 {
  constructor(e) {
    this.plugin = e, this.hot = e.hot, this.dataManager = e.dataManager, this.collapsingUI = e.collapsingUI;
  }
  /**
   * `beforeRowMove` hook callback.
   *
   * @param {Array} rows Array of visual row indexes to be moved.
   * @param {number} finalIndex Visual row index, being a start index for the moved rows. Points to where the elements
   *   will be placed after the moving action. To check the visualization of the final index, please take a look at
   *   [documentation](@/guides/rows/row-moving.md).
   * @param {undefined|number} dropIndex Visual row index, being a drop index for the moved rows. Points to where we
   *   are going to drop the moved elements. To check visualization of drop index please take a look at
   *   [documentation](@/guides/rows/row-moving.md).
   * @param {boolean} movePossible Indicates if it's possible to move rows to the desired position.
   * @fires Hooks#afterRowMove
   * @returns {boolean}
   */
  onBeforeRowMove(e, t, n, o) {
    if (this.displayAPICompatibilityWarning({
      rows: e,
      finalIndex: t,
      dropIndex: n,
      movePossible: o
    }))
      return !1;
    this.movedToCollapsed = !1;
    const a = n === this.hot.countRows(), l = a ? this.hot.countSourceRows() : this.dataManager.translateTrimmedRow(n);
    let c = !0;
    const h = e.map((w) => {
      if (!c)
        return !1;
      const C = this.dataManager.translateTrimmedRow(w);
      return c = this.shouldAllowMoving(C, l), C;
    }), u = h.indexOf(l) === -1;
    if (!c || !u)
      return !1;
    const f = this.getBaseParent(h), g = this.getTargetParent(a, l), m = f === g;
    return this.movedToCollapsed = this.collapsingUI.areChildrenCollapsed(g), this.collapsingUI.collapsedRowsStash.stash(), this.shiftCollapsibleParentsLocations(h, l, m), this.moveRows(h, l, g), this.dataManager.rewriteCache(), this.moveCellsMeta(h, l), this.collapsingUI.collapsedRowsStash.applyStash(!1), this.hot.runHooks("afterRowMove", e, t, n, o, o && this.isRowOrderChanged(e, t)), this.hot.render(), this.selectCells(e, n), !1;
  }
  /**
   * Display a `dragRows`/`moveRows` method compatibility warning if needed.
   *
   * @param {object} beforeMoveRowHookArgs A set of arguments from the `beforeMoveRow` hook.
   * @returns {boolean} `true` if is a result of an improper usage of the moving API.
   */
  displayAPICompatibilityWarning(e) {
    const {
      rows: t,
      finalIndex: n,
      dropIndex: o,
      movePossible: r
    } = e;
    let a = !1;
    return wt(o) && (pt(ut`Since version 8.0.0 of the Handsontable the 'moveRows' method isn't used for moving rows\x20
      when the NestedRows plugin is enabled. Please use the 'dragRows' method instead.`), this.hot.runHooks("afterRowMove", t, n, o, r, !1), a = !0), a;
  }
  /**
   * Check if the moving action should be allowed.
   *
   * @param {number} physicalRowIndex Physical start row index.
   * @param {number} physicalDropIndex Physical drop index.
   * @returns {boolean} `true` if it should continue with the moving action.
   */
  shouldAllowMoving(e, t) {
    return !(this.dataManager.isParent(e) || this.dataManager.isRowHighestLevel(e) || e === t || t === 0);
  }
  /**
   * Get the base row parent.
   *
   * @param {number} physicalStartIndexes Physical start row index.
   * @returns {object|null} The base row parent.
   */
  getBaseParent(e) {
    return this.dataManager.getRowParent(e[0]);
  }
  /**
   * Get the target row parent.
   *
   * @param {boolean} dropToLastRow `true` if the row is moved to the last row of the table.
   * @param {number} physicalDropIndex Physical drop row index.
   * @returns {object|null} The target row parent.
   */
  getTargetParent(e, t) {
    let n = this.dataManager.getRowParent(e ? t - 1 : t);
    return n == null && (n = this.dataManager.getRowParent(t - 1)), n;
  }
  /**
   * Shift the cached collapsible rows position according to the move action.
   *
   * @param {number[]} physicalStartIndexes Physical start row indexes.
   * @param {number} physicalDropIndex Physical drop index.
   * @param {boolean} sameParent `true` if the row's being moved between siblings of the same parent.
   */
  shiftCollapsibleParentsLocations(e, t, n) {
    n || (Math.max(...e) <= t ? this.collapsingUI.collapsedRowsStash.shiftStash(e[0], t, -1 * e.length) : this.collapsingUI.collapsedRowsStash.shiftStash(t, e[0], e.length));
  }
  /**
   * Move the rows at the provided coordinates.
   *
   * @param {number[]} physicalStartIndexes Physical indexes of the rows about to be moved.
   * @param {number} physicalDropIndex Physical drop index.
   * @param {object} targetParent Parent of the destination row.
   */
  moveRows(e, t, n) {
    const o = t === this.dataManager.getRowIndex(n) + this.dataManager.countChildren(n) + 1;
    this.hot.batchRender(() => {
      e.forEach((r) => {
        this.dataManager.moveRow(r, t, this.movedToCollapsed, o);
      });
    });
  }
  /**
   * Move the cell meta for multiple rows.
   *
   * @param {number[]} baseIndexes Array of indexes for the rows being moved.
   * @param {number} targetIndex Index of the destination of the move.
   */
  moveCellsMeta(e, t) {
    const n = [], o = Math.max(...e) < t;
    e.forEach((r) => {
      n.push(this.hot.getCellMetaAtRow(r));
    }), this.hot.spliceCellsMeta(e[0], e.length), this.hot.spliceCellsMeta(t - (o ? n.length : 0), 0, ...n);
  }
  /**
   * Select cells after the move.
   *
   * @param {Array} rows Array of visual row indexes to be moved.
   * @param {undefined|number} dropIndex Visual row index, being a drop index for the moved rows. Points to where we
   *   are going to drop the moved elements. To check visualization of drop index please take a look at
   *   [documentation](@/guides/rows/row-moving.md).
   */
  selectCells(e, t) {
    const n = e.length;
    let o = 0, r = 0, a = null, l = null;
    if (this.movedToCollapsed) {
      let c = null;
      e[n - 1] < t ? c = this.dataManager.translateTrimmedRow(t - n) : c = this.dataManager.translateTrimmedRow(t);
      const h = this.dataManager.getRowParent(c === null ? this.hot.countSourceRows() - 1 : c - 1), u = this.dataManager.getRowIndex(h);
      o = this.dataManager.untranslateTrimmedRow(u), r = o;
    } else
      e[n - 1] < t ? (r = t - 1, o = r - n + 1) : (o = t, r = o + n - 1);
    a = this.hot.selection, l = this.hot.countCols() - 1, a.setRangeStart(this.hot._createCellCoords(o, 0)), a.setRangeEnd(this.hot._createCellCoords(r, l), !0);
  }
  // TODO: Reimplementation of function which is inside the `ManualRowMove` plugin.
  /**
   * Indicates if order of rows was changed.
   *
   * @param {Array} movedRows Array of visual row indexes to be moved.
   * @param {number} finalIndex Visual row index, being a start index for the moved rows. Points to where the elements
   *   will be placed after the moving action. To check the visualization of the final index, please take a look at
   *   [documentation](@/guides/rows/row-moving.md).
   * @returns {boolean}
   */
  isRowOrderChanged(e, t) {
    return e.some((n, o) => n - o !== t);
  }
}
const Id = "nestedRows", B3 = 300, Ln = /* @__PURE__ */ new WeakMap(), W3 = "The Nested Rows plugin requires an Array of Objects as a dataset to be provided. The plugin has been disabled.";
class U3 extends at {
  static get PLUGIN_KEY() {
    return Id;
  }
  static get PLUGIN_PRIORITY() {
    return B3;
  }
  constructor(e) {
    super(e), this.dataManager = null, this.headersUI = null, this.collapsedRowsMap = null, Ln.set(this, {
      movedToCollapsed: !1,
      skipRender: null,
      skipCoreAPIModifiers: !1
    });
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link NestedRows#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return !!this.hot.getSettings()[Id];
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    var e = this;
    this.enabled || (this.collapsedRowsMap = this.hot.rowIndexMapper.registerMap("nestedRows", new Na()), this.dataManager = new H3(this, this.hot), this.collapsingUI = new L3(this, this.hot), this.headersUI = new wE(this, this.hot), this.contextMenuUI = new F3(this, this.hot), this.rowMoveController = new V3(this), this.addHook("afterInit", function() {
      return e.onAfterInit(...arguments);
    }), this.addHook("beforeViewRender", function() {
      return e.onBeforeViewRender(...arguments);
    }), this.addHook("modifyRowData", function() {
      return e.onModifyRowData(...arguments);
    }), this.addHook("modifySourceLength", function() {
      return e.onModifySourceLength(...arguments);
    }), this.addHook("beforeDataSplice", function() {
      return e.onBeforeDataSplice(...arguments);
    }), this.addHook("filterData", function() {
      return e.onFilterData(...arguments);
    }), this.addHook("afterContextMenuDefaultOptions", function() {
      return e.onAfterContextMenuDefaultOptions(...arguments);
    }), this.addHook("afterGetRowHeader", function() {
      return e.onAfterGetRowHeader(...arguments);
    }), this.addHook("beforeOnCellMouseDown", function() {
      return e.onBeforeOnCellMouseDown(...arguments);
    }), this.addHook("beforeRemoveRow", function() {
      return e.onBeforeRemoveRow(...arguments);
    }), this.addHook("afterRemoveRow", function() {
      return e.onAfterRemoveRow(...arguments);
    }), this.addHook("beforeAddChild", function() {
      return e.onBeforeAddChild(...arguments);
    }), this.addHook("afterAddChild", function() {
      return e.onAfterAddChild(...arguments);
    }), this.addHook("beforeDetachChild", function() {
      return e.onBeforeDetachChild(...arguments);
    }), this.addHook("afterDetachChild", function() {
      return e.onAfterDetachChild(...arguments);
    }), this.addHook("modifyRowHeaderWidth", function() {
      return e.onModifyRowHeaderWidth(...arguments);
    }), this.addHook("afterCreateRow", function() {
      return e.onAfterCreateRow(...arguments);
    }), this.addHook("beforeRowMove", function() {
      return e.onBeforeRowMove(...arguments);
    }), this.addHook("beforeLoadData", (t) => this.onBeforeLoadData(t)), this.addHook("beforeUpdateData", (t) => this.onBeforeLoadData(t)), super.enablePlugin());
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    this.hot.rowIndexMapper.unregisterMap("nestedRows"), super.disablePlugin();
  }
  /**
   * Updates the plugin's state.
   *
   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
   *  - [`nestedRows`](@/api/options.md#nestedrows)
   */
  updatePlugin() {
    this.disablePlugin();
    const e = this.dataManager.getData();
    this.enablePlugin(), this.dataManager.updateWithData(e), super.updatePlugin();
  }
  /**
   * `beforeRowMove` hook callback.
   *
   * @private
   * @param {Array} rows Array of visual row indexes to be moved.
   * @param {number} finalIndex Visual row index, being a start index for the moved rows. Points to where the elements
   *   will be placed after the moving action. To check the visualization of the final index, please take a look at
   *   [documentation](@/guides/rows/row-summary.md).
   * @param {undefined|number} dropIndex Visual row index, being a drop index for the moved rows. Points to where we
   *   are going to drop the moved elements. To check visualization of drop index please take a look at
   *   [documentation](@/guides/rows/row-summary.md).
   * @param {boolean} movePossible Indicates if it's possible to move rows to the desired position.
   * @fires Hooks#afterRowMove
   * @returns {boolean}
   */
  onBeforeRowMove(e, t, n, o) {
    return this.rowMoveController.onBeforeRowMove(e, t, n, o);
  }
  /**
   * Enable the modify hook skipping flag - allows retrieving the data from Handsontable without this plugin's
   * modifications.
   */
  disableCoreAPIModifiers() {
    const e = Ln.get(this);
    e.skipCoreAPIModifiers = !0;
  }
  /**
   * Disable the modify hook skipping flag.
   */
  enableCoreAPIModifiers() {
    const e = Ln.get(this);
    e.skipCoreAPIModifiers = !1;
  }
  /**
   * `beforeOnCellMousedown` hook callback.
   *
   * @private
   * @param {MouseEvent} event Mousedown event.
   * @param {object} coords Cell coords.
   * @param {HTMLElement} TD Clicked cell.
   */
  onBeforeOnCellMouseDown(e, t, n) {
    this.collapsingUI.toggleState(e, t, n);
  }
  /**
   * The modifyRowData hook callback.
   *
   * @private
   * @param {number} row Visual row index.
   * @returns {boolean}
   */
  onModifyRowData(e) {
    if (!Ln.get(this).skipCoreAPIModifiers)
      return this.dataManager.getDataObject(e);
  }
  /**
   * Modify the source data length to match the length of the nested structure.
   *
   * @private
   * @returns {number}
   */
  onModifySourceLength() {
    if (!Ln.get(this).skipCoreAPIModifiers)
      return this.dataManager.countAllRows();
  }
  /**
   * @private
   * @param {number} index The index where the data was spliced.
   * @param {number} amount An amount of items to remove.
   * @param {object} element An element to add.
   * @returns {boolean}
   */
  onBeforeDataSplice(e, t, n) {
    return Ln.get(this).skipCoreAPIModifiers || this.dataManager.isRowHighestLevel(e) ? !0 : (this.dataManager.spliceData(e, t, n), !1);
  }
  /**
   * Provide custom source data filtering. It's handled by core method and replaces the native filtering.
   *
   * @private
   * @param {number} index The index where the data filtering starts.
   * @param {number} amount An amount of rows which filtering applies to.
   * @param {number} physicalRows Physical row indexes.
   * @returns {Array}
   */
  onFilterData(e, t, n) {
    const o = Ln.get(this);
    return this.collapsingUI.collapsedRowsStash.stash(), this.collapsingUI.collapsedRowsStash.trimStash(n[0], t), this.collapsingUI.collapsedRowsStash.shiftStash(n[0], null, -1 * t), this.dataManager.filterData(e, t, n), o.skipRender = !0, this.dataManager.getData().slice();
  }
  /**
   * `afterContextMenuDefaultOptions` hook callback.
   *
   * @private
   * @param {object} defaultOptions The default context menu items order.
   * @returns {boolean}
   */
  onAfterContextMenuDefaultOptions(e) {
    return this.contextMenuUI.appendOptions(e);
  }
  /**
   * `afterGetRowHeader` hook callback.
   *
   * @private
   * @param {number} row Row index.
   * @param {HTMLElement} TH Row header element.
   */
  onAfterGetRowHeader(e, t) {
    this.headersUI.appendLevelIndicators(e, t);
  }
  /**
   * `modifyRowHeaderWidth` hook callback.
   *
   * @private
   * @param {number} rowHeaderWidth The initial row header width(s).
   * @returns {number}
   */
  onModifyRowHeaderWidth(e) {
    return this.headersUI.rowHeaderWidthCache || e;
  }
  /**
   * `onAfterRemoveRow` hook callback.
   *
   * @private
   * @param {number} index Removed row.
   * @param {number} amount Amount of removed rows.
   * @param {Array} logicRows An array of the removed physical rows.
   * @param {string} source Source of action.
   */
  onAfterRemoveRow(e, t, n, o) {
    if (o === this.pluginName)
      return;
    const r = Ln.get(this);
    setTimeout(() => {
      r.skipRender = null, this.headersUI.updateRowHeaderWidth(), this.collapsingUI.collapsedRowsStash.applyStash();
    }, 0);
  }
  /**
   * Callback for the `beforeRemoveRow` change list of removed physical indexes by reference. Removing parent node
   * has effect in removing children nodes.
   *
   * @private
   * @param {number} index Visual index of starter row.
   * @param {number} amount Amount of rows to be removed.
   * @param {Array} physicalRows List of physical indexes.
   */
  onBeforeRemoveRow(e, t, n) {
    const o = Array.from(n.reduce((r, a) => {
      if (this.dataManager.isParent(a)) {
        const l = this.dataManager.getDataObject(a).__children;
        return r.add(a), Array.isArray(l) && l.forEach((c) => r.add(this.dataManager.getRowIndex(c))), r;
      }
      return r.add(a);
    }, /* @__PURE__ */ new Set()));
    n.length = 0, n.push(...o);
  }
  /**
   * `beforeAddChild` hook callback.
   *
   * @private
   */
  onBeforeAddChild() {
    this.collapsingUI.collapsedRowsStash.stash();
  }
  /**
   * `afterAddChild` hook callback.
   *
   * @private
   * @param {object} parent Parent element.
   * @param {object} element New child element.
   */
  onAfterAddChild(e, t) {
    this.collapsingUI.collapsedRowsStash.shiftStash(this.dataManager.getRowIndex(t)), this.collapsingUI.collapsedRowsStash.applyStash(), this.headersUI.updateRowHeaderWidth();
  }
  /**
   * `beforeDetachChild` hook callback.
   *
   * @private
   */
  onBeforeDetachChild() {
    this.collapsingUI.collapsedRowsStash.stash();
  }
  /**
   * `afterDetachChild` hook callback.
   *
   * @private
   * @param {object} parent Parent element.
   * @param {object} element New child element.
   * @param {number} finalElementRowIndex The final row index of the detached element.
   */
  onAfterDetachChild(e, t, n) {
    this.collapsingUI.collapsedRowsStash.shiftStash(n, null, -1), this.collapsingUI.collapsedRowsStash.applyStash(), this.headersUI.updateRowHeaderWidth();
  }
  /**
   * `afterCreateRow` hook callback.
   *
   * @private
   */
  onAfterCreateRow() {
    this.dataManager.rewriteCache();
  }
  /**
   * `afterInit` hook callback.
   *
   * @private
   */
  onAfterInit() {
    const e = Math.max(...this.dataManager.cache.levels);
    e > 0 && this.headersUI.updateRowHeaderWidth(e);
  }
  /**
   * `beforeViewRender` hook callback.
   *
   * @param {boolean} force Indicates if the render call was trigered by a change of settings or data.
   * @param {object} skipRender An object, holder for skipRender functionality.
   * @private
   */
  onBeforeViewRender(e, t) {
    Ln.get(this).skipRender && (t.skipRender = !0);
  }
  /**
   * Destroys the plugin instance.
   */
  destroy() {
    super.destroy();
  }
  /**
   * `beforeLoadData` hook callback.
   *
   * @param {Array} data The source data.
   * @private
   */
  onBeforeLoadData(e) {
    if (!xV(e)) {
      bg(W3), this.hot.getSettings()[Id] = !1, this.disablePlugin();
      return;
    }
    this.dataManager.setData(e), this.dataManager.rewriteCache();
  }
}
class z3 {
  // eslint-disable-next-line no-restricted-globals
  constructor(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : window;
    this.rootWindow = t, this.prefix = e, this.savedKeys = [], this.loadSavedKeys();
  }
  /**
   * Save data to localStorage.
   *
   * @param {string} key Key string.
   * @param {Mixed} value Value to save.
   */
  saveValue(e, t) {
    this.rootWindow.localStorage.setItem(`${this.prefix}_${e}`, JSON.stringify(t)), this.savedKeys.indexOf(e) === -1 && (this.savedKeys.push(e), this.saveSavedKeys());
  }
  /**
   * Load data from localStorage.
   *
   * @param {string} key Key string.
   * @param {object} defaultValue Object containing the loaded data.
   *
   * @returns {object|undefined}
   */
  loadValue(e, t) {
    const n = typeof e > "u" ? t : e, o = this.rootWindow.localStorage.getItem(`${this.prefix}_${n}`);
    return o === null ? void 0 : JSON.parse(o);
  }
  /**
   * Reset given data from localStorage.
   *
   * @param {string} key Key string.
   */
  reset(e) {
    this.rootWindow.localStorage.removeItem(`${this.prefix}_${e}`);
  }
  /**
   * Reset all data from localStorage.
   *
   */
  resetAll() {
    D(this.savedKeys, (e, t) => {
      this.rootWindow.localStorage.removeItem(`${this.prefix}_${this.savedKeys[t]}`);
    }), this.clearSavedKeys();
  }
  /**
   * Load and save all keys from localStorage.
   *
   * @private
   */
  loadSavedKeys() {
    const e = this.rootWindow.localStorage.getItem(`${this.prefix}__persistentStateKeys`), t = typeof e == "string" ? JSON.parse(e) : void 0;
    this.savedKeys = t || [];
  }
  /**
   * Save saved key in localStorage.
   *
   * @private
   */
  saveSavedKeys() {
    this.rootWindow.localStorage.setItem(`${this.prefix}__persistentStateKeys`, JSON.stringify(this.savedKeys));
  }
  /**
   * Clear saved key from localStorage.
   *
   * @private
   */
  clearSavedKeys() {
    this.savedKeys.length = 0, this.saveSavedKeys();
  }
}
const Y3 = z3;
me.getSingleton().register("persistentStateSave");
me.getSingleton().register("persistentStateLoad");
me.getSingleton().register("persistentStateReset");
const Ay = "persistentState", G3 = 0;
class j3 extends at {
  static get PLUGIN_KEY() {
    return Ay;
  }
  static get PLUGIN_PRIORITY() {
    return G3;
  }
  constructor(e) {
    super(e), this.storage = void 0;
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link PersistentState#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return !!this.hot.getSettings()[Ay];
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    this.enabled || (this.storage || (this.storage = new Y3(this.hot.rootElement.id, this.hot.rootWindow)), this.addHook("persistentStateSave", (e, t) => this.saveValue(e, t)), this.addHook("persistentStateLoad", (e, t) => this.loadValue(e, t)), this.addHook("persistentStateReset", () => this.resetValue()), super.enablePlugin());
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    this.storage = void 0, super.disablePlugin();
  }
  /**
   * Updates the plugin's state.
   *
   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
   *  - [`persistentState`](@/api/options.md#persistentstate)
   */
  updatePlugin() {
    this.disablePlugin(), this.enablePlugin(), super.updatePlugin();
  }
  /**
   * Loads the value from local storage.
   *
   * @param {string} key Storage key.
   * @param {object} saveTo Saved value from local storage.
   */
  loadValue(e, t) {
    t.value = this.storage.loadValue(e);
  }
  /**
   * Saves the data to local storage.
   *
   * @param {string} key Storage key.
   * @param {Mixed} value Value to save.
   */
  saveValue(e, t) {
    this.storage.saveValue(e, t);
  }
  /**
   * Resets the data or all data from local storage.
   *
   * @param {string} key [optional] Storage key.
   */
  resetValue(e) {
    typeof e > "u" ? this.storage.resetAll() : this.storage.reset(e);
  }
  /**
   * Destroys the plugin instance.
   */
  destroy() {
    super.destroy();
  }
}
const Od = "search", K3 = 190, X3 = "htSearchResult", q3 = function(s, e, t, n, o) {
  s.getCellMeta(e, t).isSearchResult = o;
}, Z3 = function(s, e, t) {
  return wt(s) || s === null || !s.toLocaleLowerCase || s.length === 0 || wt(e) || e === null ? !1 : e.toString().toLocaleLowerCase(t.locale).indexOf(s.toLocaleLowerCase(t.locale)) !== -1;
};
class Q3 extends at {
  static get PLUGIN_KEY() {
    return Od;
  }
  static get PLUGIN_PRIORITY() {
    return K3;
  }
  constructor(e) {
    super(e), this.callback = q3, this.queryMethod = Z3, this.searchResultClass = X3;
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link AutoRowSize#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return this.hot.getSettings()[Od];
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    var e = this;
    if (this.enabled)
      return;
    const t = this.hot.getSettings()[Od];
    this.updatePluginSettings(t), this.addHook("beforeRenderer", function() {
      return e.onBeforeRenderer(...arguments);
    }), super.enablePlugin();
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    var e = this;
    const t = function() {
      return e.onBeforeRenderer(...arguments);
    };
    this.hot.addHook("beforeRenderer", t), this.hot.addHookOnce("afterViewRender", () => {
      this.hot.removeHook("beforeRenderer", t);
    }), super.disablePlugin();
  }
  /**
   * Updates the plugin's state.
   *
   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
   *  - [`search`](@/api/options.md#search)
   */
  updatePlugin() {
    this.disablePlugin(), this.enablePlugin(), super.updatePlugin();
  }
  /**
   * Makes the query.
   *
   * @param {string} queryStr Value to be search.
   * @param {Function} [callback] Callback function performed on cells with values which matches to the searched query.
   * @param {Function} [queryMethod] Query function responsible for determining whether a query matches the value stored in a cell.
   * @returns {object[]} Return an array of objects with `row`, `col`, `data` properties or empty array.
   */
  query(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.getCallback(), n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : this.getQueryMethod();
    const o = this.hot.countRows(), r = this.hot.countCols(), a = [], l = this.hot;
    return Se(0, o - 1, (c) => {
      Se(0, r - 1, (h) => {
        const u = this.hot.getDataAtCell(c, h), f = this.hot.getCellMeta(c, h), g = f.search.callback || t, w = (f.search.queryMethod || n)(e, u, f);
        if (w) {
          const C = {
            row: c,
            col: h,
            data: u
          };
          a.push(C);
        }
        g && g(l, c, h, u, w);
      });
    }), a;
  }
  /**
   * Gets the callback function.
   *
   * @returns {Function} Return the callback function.
   */
  getCallback() {
    return this.callback;
  }
  /**
   * Sets the callback function. This function will be called during querying for each cell.
   *
   * @param {Function} newCallback A callback function.
   */
  setCallback(e) {
    this.callback = e;
  }
  /**
   * Gets the query method function.
   *
   * @returns {Function} Return the query method.
   */
  getQueryMethod() {
    return this.queryMethod;
  }
  /**
   * Sets the query method function. The function is responsible for determining whether a query matches the value stored in a cell.
   *
   * @param {Function} newQueryMethod A function with specific match logic.
   */
  setQueryMethod(e) {
    this.queryMethod = e;
  }
  /**
   * Gets search result cells class name.
   *
   * @returns {string} Return the cell class name.
   */
  getSearchResultClass() {
    return this.searchResultClass;
  }
  /**
   * Sets search result cells class name. This class name will be added to each cell that belongs to the searched query.
   *
   * @param {string} newElementClass CSS class name.
   */
  setSearchResultClass(e) {
    this.searchResultClass = e;
  }
  /**
   * Updates the settings of the plugin.
   *
   * @param {object} searchSettings The plugin settings, taken from Handsontable configuration.
   * @private
   */
  updatePluginSettings(e) {
    Ge(e) && (e.searchResultClass && this.setSearchResultClass(e.searchResultClass), e.queryMethod && this.setQueryMethod(e.queryMethod), e.callback && this.setCallback(e.callback));
  }
  /**
   * The `beforeRenderer` hook callback.
   *
   * @private
   * @param {HTMLTableCellElement} TD The rendered `TD` element.
   * @param {number} row Visual row index.
   * @param {number} col Visual column index.
   * @param {string|number} prop Column property name or a column index, if datasource is an array of arrays.
   * @param {string} value Value of the rendered cell.
   * @param {object} cellProperties Object containing the cell's properties.
   */
  onBeforeRenderer(e, t, n, o, r, a) {
    const l = a.className || [];
    let c = [];
    typeof l == "string" ? c = l.split(" ") : c.push(...l), this.isEnabled() && a.isSearchResult ? c.includes(this.searchResultClass) || c.push(`${this.searchResultClass}`) : c.includes(this.searchResultClass) && c.splice(c.indexOf(this.searchResultClass), 1), a.className = c.join(" ");
  }
  /**
   * Destroys the plugin instance.
   */
  destroy() {
    super.destroy();
  }
}
const J3 = "touchScroll", e4 = 200;
class t4 extends at {
  static get PLUGIN_KEY() {
    return J3;
  }
  static get PLUGIN_PRIORITY() {
    return e4;
  }
  static get SETTING_KEYS() {
    return !0;
  }
  constructor(e) {
    super(e), this.scrollbars = [], this.clones = [], this.lockedCollection = !1, this.freezeOverlays = !1;
  }
  /**
   * Check if plugin is enabled.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return uR();
  }
  /**
   * Enable the plugin.
   */
  enablePlugin() {
    this.enabled || (this.addHook("afterViewRender", () => this.onAfterViewRender()), this.registerEvents(), super.enablePlugin());
  }
  /**
   * Updates the plugin to use the latest options you have specified.
   */
  updatePlugin() {
    this.lockedCollection = !1, super.updatePlugin();
  }
  /**
   * Disable plugin for this Handsontable instance.
   */
  disablePlugin() {
    super.disablePlugin();
  }
  /**
   * Register all necessary events.
   *
   * @private
   */
  registerEvents() {
    this.addHook("beforeTouchScroll", () => this.onBeforeTouchScroll()), this.addHook("afterMomentumScroll", () => this.onAfterMomentumScroll());
  }
  /**
   * After view render listener.
   *
   * @private
   */
  onAfterViewRender() {
    if (this.lockedCollection)
      return;
    const {
      topOverlay: e,
      bottomOverlay: t,
      inlineStartOverlay: n,
      topInlineStartCornerOverlay: o,
      bottomInlineStartCornerOverlay: r
    } = this.hot.view._wt.wtOverlays;
    this.lockedCollection = !0, this.scrollbars.length = 0, this.scrollbars.push(e), t.clone && this.scrollbars.push(t), this.scrollbars.push(n), o && this.scrollbars.push(o), r && r.clone && this.scrollbars.push(r), this.clones = [], e.needFullRender && this.clones.push(e.clone.wtTable.holder.parentNode), t.needFullRender && this.clones.push(t.clone.wtTable.holder.parentNode), n.needFullRender && this.clones.push(n.clone.wtTable.holder.parentNode), o && this.clones.push(o.clone.wtTable.holder.parentNode), r && r.clone && this.clones.push(r.clone.wtTable.holder.parentNode);
  }
  /**
   * Touch scroll listener.
   *
   * @private
   */
  onBeforeTouchScroll() {
    this.freezeOverlays = !0, D(this.clones, (e) => {
      ie(e, "hide-tween");
    });
  }
  /**
   * After momentum scroll listener.
   *
   * @private
   */
  onAfterMomentumScroll() {
    this.freezeOverlays = !1, D(this.clones, (e) => {
      $e(e, "hide-tween"), ie(e, "show-tween");
    }), this.hot._registerTimeout(() => {
      D(this.clones, (e) => {
        $e(e, "show-tween");
      });
    }, 400), D(this.scrollbars, (e) => {
      e.refresh(), e.resetFixedPosition();
    }), this.hot.view._wt.wtOverlays.syncScrollWithMaster();
  }
}
const Wl = "trimRows", s4 = 330;
class n4 extends at {
  static get PLUGIN_KEY() {
    return Wl;
  }
  static get PLUGIN_PRIORITY() {
    return s4;
  }
  constructor(e) {
    super(e), this.trimmedRowsMap = null;
  }
  /**
   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
   * hook and if it returns `true` then the {@link AutoRowSize#enablePlugin} method is called.
   *
   * @returns {boolean}
   */
  isEnabled() {
    return !!this.hot.getSettings()[Wl];
  }
  /**
   * Enables the plugin functionality for this Handsontable instance.
   */
  enablePlugin() {
    this.enabled || (this.trimmedRowsMap = this.hot.rowIndexMapper.registerMap("trimRows", new Na()), this.trimmedRowsMap.addLocalHook("init", () => this.onMapInit()), super.enablePlugin());
  }
  /**
   * Updates the plugin's state.
   *
   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
   *  - [`trimRows`](@/api/options.md#trimrows)
   */
  updatePlugin() {
    const e = this.hot.getSettings()[Wl];
    Array.isArray(e) && this.hot.batchExecution(() => {
      this.trimmedRowsMap.clear(), D(e, (t) => {
        this.trimmedRowsMap.setValueAtIndex(t, !0);
      });
    }, !0), super.updatePlugin();
  }
  /**
   * Disables the plugin functionality for this Handsontable instance.
   */
  disablePlugin() {
    this.hot.rowIndexMapper.unregisterMap("trimRows"), super.disablePlugin();
  }
  /**
   * Get list of trimmed rows.
   *
   * @returns {Array} Physical rows.
   */
  getTrimmedRows() {
    return this.trimmedRowsMap.getTrimmedIndexes();
  }
  /**
   * Trims the rows provided in the array.
   *
   * @param {number[]} rows Array of physical row indexes.
   * @fires Hooks#beforeTrimRow
   * @fires Hooks#afterTrimRow
   */
  trimRows(e) {
    const t = this.getTrimmedRows(), n = this.isValidConfig(e);
    let o = t;
    n && (o = Array.from(new Set(t.concat(e)))), this.hot.runHooks("beforeTrimRow", t, o, n) !== !1 && (n && this.hot.batchExecution(() => {
      D(e, (a) => {
        this.trimmedRowsMap.setValueAtIndex(a, !0);
      });
    }, !0), this.hot.runHooks("afterTrimRow", t, o, n, n && o.length > t.length));
  }
  /**
   * Trims the row provided as a physical row index (counting from 0).
   *
   * @param {...number} row Physical row index.
   */
  trimRow() {
    for (var e = arguments.length, t = new Array(e), n = 0; n < e; n++)
      t[n] = arguments[n];
    this.trimRows(t);
  }
  /**
   * Untrims the rows provided in the array.
   *
   * @param {number[]} rows Array of physical row indexes.
   * @fires Hooks#beforeUntrimRow
   * @fires Hooks#afterUntrimRow
   */
  untrimRows(e) {
    const t = this.getTrimmedRows(), n = this.isValidConfig(e);
    let o = t;
    const r = this.trimmedRowsMap.getValues().slice(), a = e.length > 0;
    n && a && (D(e, (c) => {
      r[c] = !1;
    }), o = cs(r, (c, h, u) => (h && c.push(u), c), [])), this.hot.runHooks("beforeUntrimRow", t, o, n && a) !== !1 && (n && a && this.trimmedRowsMap.setValues(r), this.hot.runHooks("afterUntrimRow", t, o, n && a, n && o.length < t.length));
  }
  /**
   * Untrims the row provided as a physical row index (counting from 0).
   *
   * @param {...number} row Physical row index.
   */
  untrimRow() {
    for (var e = arguments.length, t = new Array(e), n = 0; n < e; n++)
      t[n] = arguments[n];
    this.untrimRows(t);
  }
  /**
   * Checks if given row is hidden.
   *
   * @param {number} physicalRow Physical row index.
   * @returns {boolean}
   */
  isTrimmed(e) {
    return this.trimmedRowsMap.getValueAtIndex(e) || !1;
  }
  /**
   * Untrims all trimmed rows.
   */
  untrimAll() {
    this.untrimRows(this.getTrimmedRows());
  }
  /**
   * Get if trim config is valid. Check whether all of the provided physical row indexes are within source data.
   *
   * @param {Array} trimmedRows List of physical row indexes.
   * @returns {boolean}
   */
  isValidConfig(e) {
    const t = this.hot.countSourceRows();
    return e.every((n) => Number.isInteger(n) && n >= 0 && n < t);
  }
  /**
   * On map initialized hook callback.
   *
   * @private
   */
  onMapInit() {
    const e = this.hot.getSettings()[Wl];
    Array.isArray(e) && this.hot.batchExecution(() => {
      D(e, (t) => {
        this.trimmedRowsMap.setValueAtIndex(t, !0);
      });
    }, !0);
  }
  /**
   * Destroys the plugin instance.
   */
  destroy() {
    super.destroy();
  }
}
const CE = "undoRedo", i4 = "undoRedo";
function de(s) {
  const e = this;
  this.instance = s, this.doneActions = [], this.undoneActions = [], this.ignoreNewActions = !1, this.enabled = !1, s.addHook("afterChange", function(t, n) {
    const o = t && t.length;
    if (!o || !t.find((l) => {
      const [, , c, h] = l;
      return c !== h;
    }))
      return;
    const a = () => {
      const l = t.reduce((h, u) => (h.push([...u]), h), []);
      D(l, (h) => {
        h[1] = s.propToCol(h[1]);
      });
      const c = o > 1 ? this.getSelected() : [[l[0][0], l[0][1]]];
      return new de.ChangeAction(l, c);
    };
    e.done(a, n);
  }), s.addHook("afterCreateRow", (t, n, o) => {
    e.done(() => new de.CreateRowAction(t, n), o);
  }), s.addHook("beforeRemoveRow", (t, n, o, r) => {
    const a = () => {
      const l = s.toPhysicalRow(t), c = ms(e.instance.getSourceData(l, 0, l + n - 1, e.instance.countSourceCols() - 1));
      return new de.RemoveRowAction(l, c, s.getSettings().fixedRowsBottom, s.getSettings().fixedRowsTop, s.rowIndexMapper.getIndexesSequence());
    };
    e.done(a, r);
  }), s.addHook("afterCreateCol", (t, n, o) => {
    e.done(() => new de.CreateColumnAction(t, n), o);
  }), s.addHook("beforeRemoveCol", (t, n, o, r) => {
    const a = () => {
      const l = e.instance.getSourceDataArray(), c = (e.instance.countCols() + t) % e.instance.countCols(), h = [], u = [], f = [];
      Se(l.length - 1, (w) => {
        const C = [], S = l[w];
        Se(c, c + (n - 1), (x) => {
          C.push(S[s.toPhysicalColumn(x)]);
        }), h.push(C);
      }), Se(n - 1, (w) => {
        f.push(s.toPhysicalColumn(c + w));
      }), Array.isArray(s.getSettings().colHeaders) && Se(n - 1, (w) => {
        u.push(s.getSettings().colHeaders[s.toPhysicalColumn(c + w)] || null);
      });
      const g = s.columnIndexMapper.getIndexesSequence(), m = s.rowIndexMapper.getIndexesSequence();
      return new de.RemoveColumnAction(c, f, h, u, g, m, s.getSettings().fixedColumnsStart);
    };
    e.done(a, r);
  }), s.addHook("beforeCellAlignment", (t, n, o, r) => {
    e.done(() => new de.CellAlignmentAction(t, n, o, r));
  }), s.addHook("beforeFilter", (t) => {
    e.done(() => new de.FiltersAction(t));
  }), s.addHook("beforeRowMove", (t, n) => {
    t !== !1 && e.done(() => new de.RowMoveAction(t, n));
  }), s.addHook("beforeMergeCells", (t, n) => {
    n || e.done(() => new de.MergeCellsAction(s, t));
  }), s.addHook("afterUnmergeCells", (t, n) => {
    n || e.done(() => new de.UnmergeCellsAction(s, t));
  }), s.addHook("afterInit", () => {
    e.init();
  });
}
de.prototype.done = function(s, e) {
  if (this.ignoreNewActions || e === "UndoRedo.undo" || e === "UndoRedo.redo" || e === "auto")
    return;
  const n = this.doneActions.slice();
  if (this.instance.runHooks("beforeUndoStackChange", n, e) === !1)
    return;
  const r = s(), a = this.undoneActions.slice();
  this.doneActions.push(r), this.instance.runHooks("afterUndoStackChange", n, this.doneActions.slice()), this.instance.runHooks("beforeRedoStackChange", a), this.undoneActions.length = 0, this.instance.runHooks("afterRedoStackChange", a, this.undoneActions.slice());
};
de.prototype.undo = function() {
  if (this.isUndoAvailable()) {
    const s = this.doneActions.slice();
    this.instance.runHooks("beforeUndoStackChange", s);
    const e = this.doneActions.pop();
    this.instance.runHooks("afterUndoStackChange", s, this.doneActions.slice());
    const t = ms(e);
    if (this.instance.runHooks("beforeUndo", t) === !1)
      return;
    this.ignoreNewActions = !0;
    const o = this, r = this.undoneActions.slice();
    this.instance.runHooks("beforeRedoStackChange", r), e.undo(this.instance, () => {
      o.ignoreNewActions = !1, o.undoneActions.push(e);
    }), this.instance.runHooks("afterRedoStackChange", r, this.undoneActions.slice()), this.instance.runHooks("afterUndo", t);
  }
};
de.prototype.redo = function() {
  if (this.isRedoAvailable()) {
    const s = this.undoneActions.slice();
    this.instance.runHooks("beforeRedoStackChange", s);
    const e = this.undoneActions.pop();
    this.instance.runHooks("afterRedoStackChange", s, this.undoneActions.slice());
    const t = ms(e);
    if (this.instance.runHooks("beforeRedo", t) === !1)
      return;
    this.ignoreNewActions = !0;
    const o = this, r = this.doneActions.slice();
    this.instance.runHooks("beforeUndoStackChange", r), e.redo(this.instance, () => {
      o.ignoreNewActions = !1, o.doneActions.push(e);
    }), this.instance.runHooks("afterUndoStackChange", r, this.doneActions.slice()), this.instance.runHooks("afterRedo", t);
  }
};
de.prototype.isUndoAvailable = function() {
  return this.doneActions.length > 0;
};
de.prototype.isRedoAvailable = function() {
  return this.undoneActions.length > 0;
};
de.prototype.clear = function() {
  this.doneActions.length = 0, this.undoneActions.length = 0;
};
de.prototype.isEnabled = function() {
  return this.enabled;
};
de.prototype.enable = function() {
  if (this.isEnabled())
    return;
  const s = this.instance;
  this.enabled = !0, a4(s), this.registerShortcuts(), s.addHook("afterChange", vE);
};
de.prototype.disable = function() {
  if (!this.isEnabled())
    return;
  const s = this.instance;
  this.enabled = !1, l4(s), this.unregisterShortcuts(), s.removeHook("afterChange", vE);
};
de.prototype.destroy = function() {
  this.clear(), this.instance = null, this.doneActions = null, this.undoneActions = null;
};
de.Action = function() {
};
de.Action.prototype.undo = function() {
};
de.Action.prototype.redo = function() {
};
de.ChangeAction = function(s, e) {
  this.changes = s, this.selected = e, this.actionType = "change";
};
Si(de.ChangeAction, de.Action);
de.ChangeAction.prototype.undo = function(s, e) {
  const t = ms(this.changes), n = s.countEmptyRows(!0), o = s.countEmptyCols(!0);
  for (let r = 0, a = t.length; r < a; r++)
    t[r].splice(3, 1);
  s.addHookOnce("afterChange", e), s.setDataAtCell(t, null, null, "UndoRedo.undo");
  for (let r = 0, a = t.length; r < a; r++) {
    const [l, c] = t[r];
    s.getSettings().minSpareRows && l + 1 + s.getSettings().minSpareRows === s.countRows() && n === s.getSettings().minSpareRows && (s.alter("remove_row", parseInt(l + 1, 10), s.getSettings().minSpareRows), s.undoRedo.doneActions.pop()), s.getSettings().minSpareCols && c + 1 + s.getSettings().minSpareCols === s.countCols() && o === s.getSettings().minSpareCols && (s.alter("remove_col", parseInt(c + 1, 10), s.getSettings().minSpareCols), s.undoRedo.doneActions.pop());
  }
  s.selectCells(this.selected, !1, !1);
};
de.ChangeAction.prototype.redo = function(s, e) {
  const t = ms(this.changes);
  for (let n = 0, o = t.length; n < o; n++)
    t[n].splice(2, 1);
  s.addHookOnce("afterChange", e), s.setDataAtCell(t, null, null, "UndoRedo.redo"), this.selected && s.selectCells(this.selected, !1, !1);
};
de.CreateRowAction = function(s, e) {
  this.index = s, this.amount = e, this.actionType = "insert_row";
};
Si(de.CreateRowAction, de.Action);
de.CreateRowAction.prototype.undo = function(s, e) {
  const t = s.countRows(), n = s.getSettings().minSpareRows;
  this.index >= t && this.index - n < t && (this.index -= n), s.addHookOnce("afterRemoveRow", e), s.alter("remove_row", this.index, this.amount, "UndoRedo.undo");
};
de.CreateRowAction.prototype.redo = function(s, e) {
  s.addHookOnce("afterCreateRow", e), s.alter("insert_row_above", this.index, this.amount, "UndoRedo.redo");
};
de.RemoveRowAction = function(s, e, t, n, o) {
  this.index = s, this.data = e, this.actionType = "remove_row", this.fixedRowsBottom = t, this.fixedRowsTop = n, this.rowIndexesSequence = o;
};
Si(de.RemoveRowAction, de.Action);
de.RemoveRowAction.prototype.undo = function(s, e) {
  const t = s.getSettings(), n = [];
  t.fixedRowsBottom = this.fixedRowsBottom, t.fixedRowsTop = this.fixedRowsTop, this.data.forEach((o, r) => {
    Object.keys(o).forEach((a) => {
      const l = parseInt(a, 10);
      n.push([this.index + r, isNaN(l) ? a : l, o[a]]);
    });
  }), s.alter("insert_row_above", this.index, this.data.length, "UndoRedo.undo"), s.addHookOnce("afterViewRender", e), s.setSourceDataAtCell(n, null, null, "UndoRedo.undo"), s.rowIndexMapper.setIndexesSequence(this.rowIndexesSequence);
};
de.RemoveRowAction.prototype.redo = function(s, e) {
  s.addHookOnce("afterRemoveRow", e), s.alter("remove_row", this.index, this.data.length, "UndoRedo.redo");
};
de.CreateColumnAction = function(s, e) {
  this.index = s, this.amount = e, this.actionType = "insert_col";
};
Si(de.CreateColumnAction, de.Action);
de.CreateColumnAction.prototype.undo = function(s, e) {
  s.addHookOnce("afterRemoveCol", e), s.alter("remove_col", this.index, this.amount, "UndoRedo.undo");
};
de.CreateColumnAction.prototype.redo = function(s, e) {
  s.addHookOnce("afterCreateCol", e), s.alter("insert_col_start", this.index, this.amount, "UndoRedo.redo");
};
de.RemoveColumnAction = function(s, e, t, n, o, r, a) {
  this.index = s, this.indexes = e, this.data = t, this.amount = this.data[0].length, this.headers = n, this.columnPositions = o.slice(0), this.rowPositions = r.slice(0), this.actionType = "remove_col", this.fixedColumnsStart = a;
};
Si(de.RemoveColumnAction, de.Action);
de.RemoveColumnAction.prototype.undo = function(s, e) {
  const t = s.getSettings();
  t.fixedColumnsStart = this.fixedColumnsStart;
  const n = this.indexes.slice(0).sort(), o = (h, u, f) => f[this.indexes.indexOf(n[u])], r = this.data.length, a = [];
  for (let h = 0; h < r; h++)
    a.push(Ye(this.data[h], o));
  const l = Ye(this.headers, o), c = [];
  s.alter("insert_col_start", this.indexes[0], this.indexes.length, "UndoRedo.undo"), D(s.getSourceDataArray(), (h, u) => {
    D(n, (f, g) => {
      h[f] = a[u][g], c.push([u, f, h[f]]);
    });
  }), s.setSourceDataAtCell(c, void 0, void 0, "UndoRedo.undo"), typeof this.headers < "u" && D(l, (h, u) => {
    s.getSettings().colHeaders[n[u]] = h;
  }), s.batchExecution(() => {
    s.rowIndexMapper.setIndexesSequence(this.rowPositions), s.columnIndexMapper.setIndexesSequence(this.columnPositions);
  }, !0), s.addHookOnce("afterViewRender", e), s.render();
};
de.RemoveColumnAction.prototype.redo = function(s, e) {
  s.addHookOnce("afterRemoveCol", e), s.alter("remove_col", this.index, this.amount, "UndoRedo.redo");
};
de.CellAlignmentAction = function(s, e, t, n) {
  this.stateBefore = s, this.range = e, this.type = t, this.alignment = n;
};
de.CellAlignmentAction.prototype.undo = function(s, e) {
  D(this.range, (t) => {
    t.forAll((n, o) => {
      n >= 0 && o >= 0 && s.setCellMeta(n, o, "className", this.stateBefore[n][o] || " htLeft");
    });
  }), s.addHookOnce("afterViewRender", e), s.render();
};
de.CellAlignmentAction.prototype.redo = function(s, e) {
  ci(this.range, this.type, this.alignment, (t, n) => s.getCellMeta(t, n), (t, n, o, r) => s.setCellMeta(t, n, o, r)), s.addHookOnce("afterViewRender", e), s.render();
};
de.FiltersAction = function(s) {
  this.conditionsStack = s, this.actionType = "filter";
};
Si(de.FiltersAction, de.Action);
de.FiltersAction.prototype.undo = function(s, e) {
  const t = s.getPlugin("filters");
  s.addHookOnce("afterViewRender", e), t.conditionCollection.importAllConditions(this.conditionsStack.slice(0, this.conditionsStack.length - 1)), t.filter();
};
de.FiltersAction.prototype.redo = function(s, e) {
  const t = s.getPlugin("filters");
  s.addHookOnce("afterViewRender", e), t.conditionCollection.importAllConditions(this.conditionsStack), t.filter();
};
class o4 extends de.Action {
  constructor(e, t) {
    super(), this.cellRange = t;
    const n = this.cellRange.getTopStartCorner(), o = this.cellRange.getBottomEndCorner();
    this.rangeData = e.getData(n.row, n.col, o.row, o.col);
  }
  undo(e, t) {
    const n = e.getPlugin("mergeCells");
    e.addHookOnce("afterViewRender", t), n.unmergeRange(this.cellRange, !0);
    const o = this.cellRange.getTopStartCorner();
    e.populateFromArray(o.row, o.col, this.rangeData, void 0, void 0, "MergeCells");
  }
  redo(e, t) {
    const n = e.getPlugin("mergeCells");
    e.addHookOnce("afterViewRender", t), n.mergeRange(this.cellRange);
  }
}
de.MergeCellsAction = o4;
class r4 extends de.Action {
  constructor(e, t) {
    super(), this.cellRange = t;
  }
  undo(e, t) {
    const n = e.getPlugin("mergeCells");
    e.addHookOnce("afterViewRender", t), n.mergeRange(this.cellRange, !0);
  }
  redo(e, t) {
    const n = e.getPlugin("mergeCells");
    e.addHookOnce("afterViewRender", t), n.unmergeRange(this.cellRange, !0), e.render();
  }
}
de.UnmergeCellsAction = r4;
de.RowMoveAction = function(s, e) {
  this.rows = s.slice(), this.finalIndex = e, this.actionType = "row_move";
};
Si(de.RowMoveAction, de.Action);
de.RowMoveAction.prototype.undo = function(s, e) {
  const t = s.getPlugin("manualRowMove"), n = [].concat(this.rows), o = n.filter((l) => l > this.finalIndex), r = n.filter((l) => l <= this.finalIndex), a = o.sort((l, c) => c - l).concat(r.sort((l, c) => l - c));
  s.addHookOnce("afterViewRender", e);
  for (let l = 0; l < a.length; l += 1) {
    const c = s.toVisualRow(a[l]);
    t.moveRow(c, a[l]);
  }
  s.render(), s.deselectCell(), s.selectRows(this.rows[0], this.rows[0] + this.rows.length - 1);
};
de.RowMoveAction.prototype.redo = function(s, e) {
  const t = s.getPlugin("manualRowMove");
  s.addHookOnce("afterViewRender", e), t.moveRows(this.rows.slice(), this.finalIndex), s.render(), s.deselectCell(), s.selectRows(this.finalIndex, this.finalIndex + this.rows.length - 1);
};
de.prototype.init = function() {
  const s = this.instance.getSettings().undo, e = typeof s > "u" || s;
  this.instance.undoRedo || (this.instance.undoRedo = this), e ? this.instance.undoRedo.enable() : this.instance.undoRedo.disable();
};
de.prototype.registerShortcuts = function() {
  const e = this.instance.getShortcutManager().getContext("grid"), n = {
    runOnlyIf: (o) => !o.altKey,
    group: CE
  };
  e.addShortcuts([{
    keys: [["Control/Meta", "z"]],
    callback: () => {
      this.undo();
    }
  }, {
    keys: [["Control/Meta", "y"], ["Control/Meta", "Shift", "z"]],
    callback: () => {
      this.redo();
    }
  }], n);
};
de.prototype.unregisterShortcuts = function() {
  this.instance.getShortcutManager().getContext("grid").removeShortcutsByGroup(CE);
};
function vE(s, e) {
  const t = this;
  if (e === "loadData")
    return t.undoRedo.clear();
}
function a4(s) {
  s.undo = function() {
    return s.undoRedo.undo();
  }, s.redo = function() {
    return s.undoRedo.redo();
  }, s.isUndoAvailable = function() {
    return s.undoRedo.isUndoAvailable();
  }, s.isRedoAvailable = function() {
    return s.undoRedo.isRedoAvailable();
  }, s.clearUndo = function() {
    return s.undoRedo.clear();
  };
}
function l4(s) {
  delete s.undo, delete s.redo, delete s.isUndoAvailable, delete s.isRedoAvailable, delete s.clearUndo;
}
const za = me.getSingleton();
za.add("afterUpdateSettings", function() {
  var s;
  (s = this.getPlugin("undoRedo")) === null || s === void 0 || s.init();
});
za.register("beforeUndo");
za.register("afterUndo");
za.register("beforeRedo");
za.register("afterRedo");
de.PLUGIN_KEY = i4;
de.SETTING_KEYS = !0;
function c4() {
  tt(ea), tt(I2), tt(ta), tt(U2), tt(Q2), tt(p0), tt(TU), tt(WU), tt(Ih), tt(zz), tt(aY), tt(cY), tt(Ah), tt(RY), tt(wG), tt(GG), tt(JG), tt(rj), tt(hj), tt(vj), tt(Sj), tt(Oj), tt(Pj), tt(Bj), tt(jj), tt(qj), tt(P3), tt(U3), tt(j3), tt(Q3), tt(t4), tt(n4), tt(de);
}
function h4() {
  _W(), UW(), ZW(), g2(), c4();
}
h4();
const u4 = ",", d4 = Je({
  components: {
    HotTable: vp
  },
  computed: {
    ...Me(As, ["datasets"]),
    ...Me(os, ["axes"]),
    ...Me(Pt, ["canvas"]),
    tableData() {
      return this.datasets.activeDataset.plots.length > 0 ? this.datasets.activeDataset.plots.map((s) => {
        const { xV: e, yV: t } = this.calculateXY(s.xPx, s.yPx);
        return {
          X: e,
          Y: t
        };
      }) : [{ X: null, Y: null }];
    }
  },
  data() {
    return {
      key: 0,
      activeColor: BM.green.lighten5,
      hotTableSettings: {
        licenseKey: "non-commercial-and-evaluation",
        columnSorting: !0,
        colHeaders: ["X", "Y"],
        columns: [
          { data: "X", type: "numeric" },
          { data: "Y", type: "numeric" }
        ]
      }
    };
  },
  methods: {
    calculateXY(s, e) {
      return new By(this.axes, {
        x: this.axes.xIsLog,
        y: this.axes.yIsLog
      }).calculateXYValues(s, e);
    },
    copyData: function() {
      const e = this.$refs.tableRef.hotInstance.getData().slice(0), t = this.convertToCsv(e);
      navigator.clipboard.writeText(t).then(() => console.log("コピーが成功しました。")).catch((n) => console.error("コピーが失敗しました。", n));
    },
    convertToCsv(s) {
      return console.log({ data: s }), s.map((t) => t.join(u4)).join(`
`);
    }
  },
  watch: {
    tableData() {
      this.key++;
    },
    axes() {
      this.key++;
    }
  }
});
function f4(s, e, t, n, o, r) {
  const a = ce("hot-table"), l = ce("v-btn");
  return we(), ke("div", null, [
    (we(), bs(a, {
      data: s.tableData,
      settings: s.hotTableSettings,
      key: s.key,
      ref: "tableRef",
      height: "35vh",
      class: "overflow-y-auto"
    }, null, 8, ["data", "settings"])),
    te(l, {
      class: "mt-1",
      onClick: s.copyData,
      size: "small"
    }, {
      default: ye(() => [
        xt("Copy to Clipboard")
      ]),
      _: 1
    }, 8, ["onClick"])
  ]);
}
const g4 = /* @__PURE__ */ it(d4, [["render", f4]]), m4 = Je({
  components: {
    DataTable: g4,
    MagnifierMain: $x,
    CanvasHeader: pT,
    CanvasMain: bT,
    CanvasFooter: cT,
    AxesSettings: WT,
    DatasetManager: yM,
    ExtractorSettings: fM,
    ImageSettings: pM
  },
  props: {
    // should be imported by require function
    initialGraphImagePath: {
      type: String,
      required: !0
    },
    initialExtractorStrategy: {
      type: String,
      required: !1
    },
    exportBtnText: String,
    exportBtnClick: {
      type: Function,
      required: !1
    }
  },
  data() {
    return {
      version: Wy,
      githubRunNumber: {}.VITE_APP_GITHUB_RUN_NUMBER
    };
  }
});
const p4 = { class: "c__wrapper" }, w4 = { class: "c__left-sidebar" }, C4 = { class: "c__main-area" }, v4 = { class: "c__right-sidebar" }, y4 = { class: "text-caption text-right" };
function S4(s, e, t, n, o, r) {
  const a = ce("image-settings"), l = ce("axes-settings"), c = ce("dataset-manager"), h = ce("data-table"), u = ce("canvas-header"), f = ce("canvas-main"), g = ce("canvas-footer"), m = ce("magnifier-main"), w = ce("extractor-settings"), C = ce("v-container");
  return we(), bs(C, { fluid: "" }, {
    default: ye(() => [
      Re("div", p4, [
        Re("div", w4, [
          te(a),
          te(l),
          te(c, {
            exportBtnText: s.exportBtnText,
            exportBtnClick: s.exportBtnClick
          }, null, 8, ["exportBtnText", "exportBtnClick"]),
          te(h)
        ]),
        Re("div", C4, [
          te(u),
          te(f, { imagePath: s.initialGraphImagePath }, null, 8, ["imagePath"]),
          te(g)
        ]),
        Re("div", v4, [
          te(m),
          te(w, { initialExtractorStrategy: s.initialExtractorStrategy }, null, 8, ["initialExtractorStrategy"]),
          Re("p", y4, " v" + ns(s.version) + "#" + ns(s.githubRunNumber), 1)
        ])
      ])
    ]),
    _: 1
  });
}
const b4 = /* @__PURE__ */ it(m4, [["render", S4]]), R4 = Je({
  name: "App",
  components: {
    MainScreen: b4
  },
  data: () => ({
    plots: [],
    version: Wy,
    links: [
      {
        text: "Release Note",
        url: "https://github.com/t29mato/starry-digitizer/releases"
      },
      {
        text: "Document",
        url: "https://starrydigitizer.readthedocs.io/"
      }
    ],
    isProd: process.env.NODE_ENV === "production"
  }),
  methods: {
    importPlots(s) {
      this.plots = s;
    }
  }
}), E4 = /* @__PURE__ */ Re("strong", null, "StarryDigitizer", -1), x4 = { class: "ml-2 mt-1" };
function T4(s, e, t, n, o, r) {
  const a = ce("main-screen"), l = ce("v-main"), c = ce("v-btn"), h = ce("v-col"), u = ce("v-row"), f = ce("v-footer"), g = ce("v-app");
  return we(), bs(g, null, {
    default: ye(() => [
      te(l, null, {
        default: ye(() => [
          te(a, { initialGraphImagePath: "/sample_graph_curve.png" }, null, 8, ["initialGraphImagePath"])
        ]),
        _: 1
      }),
      te(f, {
        color: s.isProd ? "primary" : "orange"
      }, {
        default: ye(() => [
          te(u, {
            justify: "center",
            "no-gutters": ""
          }, {
            default: ye(() => [
              (we(!0), ke(Fc, null, Vc(s.links, (m) => (we(), bs(c, {
                key: m.url,
                color: "white",
                variant: "text",
                rounded: "",
                class: "my-2",
                href: m.url,
                target: "_blank",
                size: "small"
              }, {
                default: ye(() => [
                  xt(ns(m.text), 1)
                ]),
                _: 2
              }, 1032, ["href"]))), 128)),
              te(h, {
                class: "text-center text-white",
                cols: "12"
              }, {
                default: ye(() => [
                  xt(ns((/* @__PURE__ */ new Date()).getFullYear()) + " — ", 1),
                  E4,
                  Re("span", x4, ns(s.version), 1)
                ]),
                _: 1
              })
            ]),
            _: 1
          })
        ]),
        _: 1
      }, 8, ["color"])
    ]),
    _: 1
  });
}
const j4 = /* @__PURE__ */ it(R4, [["render", T4]]);
export {
  j4 as App
};
